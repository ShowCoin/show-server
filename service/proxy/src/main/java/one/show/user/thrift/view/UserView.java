/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserView implements org.apache.thrift.TBase<UserView, UserView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FAN_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("fanLevel", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ISLIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("islive", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MASTER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterLevel", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_LOGINTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLogintime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_LIVETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLivetime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SIGN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("signStatus", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField POPULAR_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("popularNo", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ISROBOT_FIELD_DESC = new org.apache.thrift.protocol.TField("isrobot", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PROFILE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImg", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField CONSTELLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("constellation", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField RY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("ryToken", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceUuid", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField IS_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("isNew", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField IS_ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("isAdmin", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginType", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField NOTIFY_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyConfig", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserViewTupleSchemeFactory());
  }

  public long id; // required
  public int fanLevel; // required
  public int islive; // required
  public String nickname; // required
  public int masterLevel; // required
  public int lastLogintime; // required
  public int lastLivetime; // required
  public int role; // required
  public int signStatus; // required
  public long popularNo; // required
  public int createTime; // required
  public int isrobot; // required
  public String phoneNumber; // required
  public int updateTime; // required
  public double latitude; // required
  public double longitude; // required
  public int gender; // required
  public int active; // required
  public String profileImg; // required
  public String city; // required
  public int age; // required
  public String constellation; // required
  public String description; // required
  public String ryToken; // required
  public String deviceUuid; // required
  public int isNew; // required
  public int isAdmin; // required
  public String lastLoginType; // required
  public int notifyConfig; // required
  public long familyId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FAN_LEVEL((short)2, "fanLevel"),
    ISLIVE((short)3, "islive"),
    NICKNAME((short)4, "nickname"),
    MASTER_LEVEL((short)5, "masterLevel"),
    LAST_LOGINTIME((short)6, "lastLogintime"),
    LAST_LIVETIME((short)7, "lastLivetime"),
    ROLE((short)8, "role"),
    SIGN_STATUS((short)9, "signStatus"),
    POPULAR_NO((short)10, "popularNo"),
    CREATE_TIME((short)11, "createTime"),
    ISROBOT((short)12, "isrobot"),
    PHONE_NUMBER((short)13, "phoneNumber"),
    UPDATE_TIME((short)14, "updateTime"),
    LATITUDE((short)15, "latitude"),
    LONGITUDE((short)16, "longitude"),
    GENDER((short)17, "gender"),
    ACTIVE((short)18, "active"),
    PROFILE_IMG((short)19, "profileImg"),
    CITY((short)20, "city"),
    AGE((short)21, "age"),
    CONSTELLATION((short)22, "constellation"),
    DESCRIPTION((short)23, "description"),
    RY_TOKEN((short)24, "ryToken"),
    DEVICE_UUID((short)25, "deviceUuid"),
    IS_NEW((short)26, "isNew"),
    IS_ADMIN((short)27, "isAdmin"),
    LAST_LOGIN_TYPE((short)28, "lastLoginType"),
    NOTIFY_CONFIG((short)29, "notifyConfig"),
    FAMILY_ID((short)30, "familyId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FAN_LEVEL
          return FAN_LEVEL;
        case 3: // ISLIVE
          return ISLIVE;
        case 4: // NICKNAME
          return NICKNAME;
        case 5: // MASTER_LEVEL
          return MASTER_LEVEL;
        case 6: // LAST_LOGINTIME
          return LAST_LOGINTIME;
        case 7: // LAST_LIVETIME
          return LAST_LIVETIME;
        case 8: // ROLE
          return ROLE;
        case 9: // SIGN_STATUS
          return SIGN_STATUS;
        case 10: // POPULAR_NO
          return POPULAR_NO;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // ISROBOT
          return ISROBOT;
        case 13: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 14: // UPDATE_TIME
          return UPDATE_TIME;
        case 15: // LATITUDE
          return LATITUDE;
        case 16: // LONGITUDE
          return LONGITUDE;
        case 17: // GENDER
          return GENDER;
        case 18: // ACTIVE
          return ACTIVE;
        case 19: // PROFILE_IMG
          return PROFILE_IMG;
        case 20: // CITY
          return CITY;
        case 21: // AGE
          return AGE;
        case 22: // CONSTELLATION
          return CONSTELLATION;
        case 23: // DESCRIPTION
          return DESCRIPTION;
        case 24: // RY_TOKEN
          return RY_TOKEN;
        case 25: // DEVICE_UUID
          return DEVICE_UUID;
        case 26: // IS_NEW
          return IS_NEW;
        case 27: // IS_ADMIN
          return IS_ADMIN;
        case 28: // LAST_LOGIN_TYPE
          return LAST_LOGIN_TYPE;
        case 29: // NOTIFY_CONFIG
          return NOTIFY_CONFIG;
        case 30: // FAMILY_ID
          return FAMILY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FANLEVEL_ISSET_ID = 1;
  private static final int __ISLIVE_ISSET_ID = 2;
  private static final int __MASTERLEVEL_ISSET_ID = 3;
  private static final int __LASTLOGINTIME_ISSET_ID = 4;
  private static final int __LASTLIVETIME_ISSET_ID = 5;
  private static final int __ROLE_ISSET_ID = 6;
  private static final int __SIGNSTATUS_ISSET_ID = 7;
  private static final int __POPULARNO_ISSET_ID = 8;
  private static final int __CREATETIME_ISSET_ID = 9;
  private static final int __ISROBOT_ISSET_ID = 10;
  private static final int __UPDATETIME_ISSET_ID = 11;
  private static final int __LATITUDE_ISSET_ID = 12;
  private static final int __LONGITUDE_ISSET_ID = 13;
  private static final int __GENDER_ISSET_ID = 14;
  private static final int __ACTIVE_ISSET_ID = 15;
  private static final int __AGE_ISSET_ID = 16;
  private static final int __ISNEW_ISSET_ID = 17;
  private static final int __ISADMIN_ISSET_ID = 18;
  private static final int __NOTIFYCONFIG_ISSET_ID = 19;
  private static final int __FAMILYID_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAN_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("fanLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISLIVE, new org.apache.thrift.meta_data.FieldMetaData("islive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MASTER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("masterLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_LOGINTIME, new org.apache.thrift.meta_data.FieldMetaData("lastLogintime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_LIVETIME, new org.apache.thrift.meta_data.FieldMetaData("lastLivetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("signStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POPULAR_NO, new org.apache.thrift.meta_data.FieldMetaData("popularNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISROBOT, new org.apache.thrift.meta_data.FieldMetaData("isrobot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_IMG, new org.apache.thrift.meta_data.FieldMetaData("profileImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONSTELLATION, new org.apache.thrift.meta_data.FieldMetaData("constellation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("ryToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("deviceUuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NEW, new org.apache.thrift.meta_data.FieldMetaData("isNew", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ADMIN, new org.apache.thrift.meta_data.FieldMetaData("isAdmin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_LOGIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lastLoginType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("notifyConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserView.class, metaDataMap);
  }

  public UserView() {
  }

  public UserView(
    long id,
    int fanLevel,
    int islive,
    String nickname,
    int masterLevel,
    int lastLogintime,
    int lastLivetime,
    int role,
    int signStatus,
    long popularNo,
    int createTime,
    int isrobot,
    String phoneNumber,
    int updateTime,
    double latitude,
    double longitude,
    int gender,
    int active,
    String profileImg,
    String city,
    int age,
    String constellation,
    String description,
    String ryToken,
    String deviceUuid,
    int isNew,
    int isAdmin,
    String lastLoginType,
    int notifyConfig,
    long familyId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.fanLevel = fanLevel;
    setFanLevelIsSet(true);
    this.islive = islive;
    setIsliveIsSet(true);
    this.nickname = nickname;
    this.masterLevel = masterLevel;
    setMasterLevelIsSet(true);
    this.lastLogintime = lastLogintime;
    setLastLogintimeIsSet(true);
    this.lastLivetime = lastLivetime;
    setLastLivetimeIsSet(true);
    this.role = role;
    setRoleIsSet(true);
    this.signStatus = signStatus;
    setSignStatusIsSet(true);
    this.popularNo = popularNo;
    setPopularNoIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.isrobot = isrobot;
    setIsrobotIsSet(true);
    this.phoneNumber = phoneNumber;
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.longitude = longitude;
    setLongitudeIsSet(true);
    this.gender = gender;
    setGenderIsSet(true);
    this.active = active;
    setActiveIsSet(true);
    this.profileImg = profileImg;
    this.city = city;
    this.age = age;
    setAgeIsSet(true);
    this.constellation = constellation;
    this.description = description;
    this.ryToken = ryToken;
    this.deviceUuid = deviceUuid;
    this.isNew = isNew;
    setIsNewIsSet(true);
    this.isAdmin = isAdmin;
    setIsAdminIsSet(true);
    this.lastLoginType = lastLoginType;
    this.notifyConfig = notifyConfig;
    setNotifyConfigIsSet(true);
    this.familyId = familyId;
    setFamilyIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserView(UserView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.fanLevel = other.fanLevel;
    this.islive = other.islive;
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    this.masterLevel = other.masterLevel;
    this.lastLogintime = other.lastLogintime;
    this.lastLivetime = other.lastLivetime;
    this.role = other.role;
    this.signStatus = other.signStatus;
    this.popularNo = other.popularNo;
    this.createTime = other.createTime;
    this.isrobot = other.isrobot;
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    this.updateTime = other.updateTime;
    this.latitude = other.latitude;
    this.longitude = other.longitude;
    this.gender = other.gender;
    this.active = other.active;
    if (other.isSetProfileImg()) {
      this.profileImg = other.profileImg;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.age = other.age;
    if (other.isSetConstellation()) {
      this.constellation = other.constellation;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetRyToken()) {
      this.ryToken = other.ryToken;
    }
    if (other.isSetDeviceUuid()) {
      this.deviceUuid = other.deviceUuid;
    }
    this.isNew = other.isNew;
    this.isAdmin = other.isAdmin;
    if (other.isSetLastLoginType()) {
      this.lastLoginType = other.lastLoginType;
    }
    this.notifyConfig = other.notifyConfig;
    this.familyId = other.familyId;
  }

  public UserView deepCopy() {
    return new UserView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setFanLevelIsSet(false);
    this.fanLevel = 0;
    setIsliveIsSet(false);
    this.islive = 0;
    this.nickname = null;
    setMasterLevelIsSet(false);
    this.masterLevel = 0;
    setLastLogintimeIsSet(false);
    this.lastLogintime = 0;
    setLastLivetimeIsSet(false);
    this.lastLivetime = 0;
    setRoleIsSet(false);
    this.role = 0;
    setSignStatusIsSet(false);
    this.signStatus = 0;
    setPopularNoIsSet(false);
    this.popularNo = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setIsrobotIsSet(false);
    this.isrobot = 0;
    this.phoneNumber = null;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setGenderIsSet(false);
    this.gender = 0;
    setActiveIsSet(false);
    this.active = 0;
    this.profileImg = null;
    this.city = null;
    setAgeIsSet(false);
    this.age = 0;
    this.constellation = null;
    this.description = null;
    this.ryToken = null;
    this.deviceUuid = null;
    setIsNewIsSet(false);
    this.isNew = 0;
    setIsAdminIsSet(false);
    this.isAdmin = 0;
    this.lastLoginType = null;
    setNotifyConfigIsSet(false);
    this.notifyConfig = 0;
    setFamilyIdIsSet(false);
    this.familyId = 0;
  }

  public long getId() {
    return this.id;
  }

  public UserView setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getFanLevel() {
    return this.fanLevel;
  }

  public UserView setFanLevel(int fanLevel) {
    this.fanLevel = fanLevel;
    setFanLevelIsSet(true);
    return this;
  }

  public void unsetFanLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FANLEVEL_ISSET_ID);
  }

  /** Returns true if field fanLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetFanLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __FANLEVEL_ISSET_ID);
  }

  public void setFanLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FANLEVEL_ISSET_ID, value);
  }

  public int getIslive() {
    return this.islive;
  }

  public UserView setIslive(int islive) {
    this.islive = islive;
    setIsliveIsSet(true);
    return this;
  }

  public void unsetIslive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLIVE_ISSET_ID);
  }

  /** Returns true if field islive is set (has been assigned a value) and false otherwise */
  public boolean isSetIslive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLIVE_ISSET_ID);
  }

  public void setIsliveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLIVE_ISSET_ID, value);
  }

  public String getNickname() {
    return this.nickname;
  }

  public UserView setNickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public int getMasterLevel() {
    return this.masterLevel;
  }

  public UserView setMasterLevel(int masterLevel) {
    this.masterLevel = masterLevel;
    setMasterLevelIsSet(true);
    return this;
  }

  public void unsetMasterLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERLEVEL_ISSET_ID);
  }

  /** Returns true if field masterLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetMasterLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __MASTERLEVEL_ISSET_ID);
  }

  public void setMasterLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERLEVEL_ISSET_ID, value);
  }

  public int getLastLogintime() {
    return this.lastLogintime;
  }

  public UserView setLastLogintime(int lastLogintime) {
    this.lastLogintime = lastLogintime;
    setLastLogintimeIsSet(true);
    return this;
  }

  public void unsetLastLogintime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID);
  }

  /** Returns true if field lastLogintime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLogintime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID);
  }

  public void setLastLogintimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID, value);
  }

  public int getLastLivetime() {
    return this.lastLivetime;
  }

  public UserView setLastLivetime(int lastLivetime) {
    this.lastLivetime = lastLivetime;
    setLastLivetimeIsSet(true);
    return this;
  }

  public void unsetLastLivetime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLIVETIME_ISSET_ID);
  }

  /** Returns true if field lastLivetime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLivetime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTLIVETIME_ISSET_ID);
  }

  public void setLastLivetimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLIVETIME_ISSET_ID, value);
  }

  public int getRole() {
    return this.role;
  }

  public UserView setRole(int role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ISSET_ID, value);
  }

  public int getSignStatus() {
    return this.signStatus;
  }

  public UserView setSignStatus(int signStatus) {
    this.signStatus = signStatus;
    setSignStatusIsSet(true);
    return this;
  }

  public void unsetSignStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNSTATUS_ISSET_ID);
  }

  /** Returns true if field signStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSignStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNSTATUS_ISSET_ID);
  }

  public void setSignStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNSTATUS_ISSET_ID, value);
  }

  public long getPopularNo() {
    return this.popularNo;
  }

  public UserView setPopularNo(long popularNo) {
    this.popularNo = popularNo;
    setPopularNoIsSet(true);
    return this;
  }

  public void unsetPopularNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARNO_ISSET_ID);
  }

  /** Returns true if field popularNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularNo() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARNO_ISSET_ID);
  }

  public void setPopularNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARNO_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public UserView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getIsrobot() {
    return this.isrobot;
  }

  public UserView setIsrobot(int isrobot) {
    this.isrobot = isrobot;
    setIsrobotIsSet(true);
    return this;
  }

  public void unsetIsrobot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISROBOT_ISSET_ID);
  }

  /** Returns true if field isrobot is set (has been assigned a value) and false otherwise */
  public boolean isSetIsrobot() {
    return EncodingUtils.testBit(__isset_bitfield, __ISROBOT_ISSET_ID);
  }

  public void setIsrobotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISROBOT_ISSET_ID, value);
  }

  public String getPhoneNumber() {
    return this.phoneNumber;
  }

  public UserView setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public UserView setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public double getLatitude() {
    return this.latitude;
  }

  public UserView setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public UserView setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public int getGender() {
    return this.gender;
  }

  public UserView setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public int getActive() {
    return this.active;
  }

  public UserView setActive(int active) {
    this.active = active;
    setActiveIsSet(true);
    return this;
  }

  public void unsetActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public String getProfileImg() {
    return this.profileImg;
  }

  public UserView setProfileImg(String profileImg) {
    this.profileImg = profileImg;
    return this;
  }

  public void unsetProfileImg() {
    this.profileImg = null;
  }

  /** Returns true if field profileImg is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileImg() {
    return this.profileImg != null;
  }

  public void setProfileImgIsSet(boolean value) {
    if (!value) {
      this.profileImg = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public UserView setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public UserView setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public String getConstellation() {
    return this.constellation;
  }

  public UserView setConstellation(String constellation) {
    this.constellation = constellation;
    return this;
  }

  public void unsetConstellation() {
    this.constellation = null;
  }

  /** Returns true if field constellation is set (has been assigned a value) and false otherwise */
  public boolean isSetConstellation() {
    return this.constellation != null;
  }

  public void setConstellationIsSet(boolean value) {
    if (!value) {
      this.constellation = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public UserView setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getRyToken() {
    return this.ryToken;
  }

  public UserView setRyToken(String ryToken) {
    this.ryToken = ryToken;
    return this;
  }

  public void unsetRyToken() {
    this.ryToken = null;
  }

  /** Returns true if field ryToken is set (has been assigned a value) and false otherwise */
  public boolean isSetRyToken() {
    return this.ryToken != null;
  }

  public void setRyTokenIsSet(boolean value) {
    if (!value) {
      this.ryToken = null;
    }
  }

  public String getDeviceUuid() {
    return this.deviceUuid;
  }

  public UserView setDeviceUuid(String deviceUuid) {
    this.deviceUuid = deviceUuid;
    return this;
  }

  public void unsetDeviceUuid() {
    this.deviceUuid = null;
  }

  /** Returns true if field deviceUuid is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceUuid() {
    return this.deviceUuid != null;
  }

  public void setDeviceUuidIsSet(boolean value) {
    if (!value) {
      this.deviceUuid = null;
    }
  }

  public int getIsNew() {
    return this.isNew;
  }

  public UserView setIsNew(int isNew) {
    this.isNew = isNew;
    setIsNewIsSet(true);
    return this;
  }

  public void unsetIsNew() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEW_ISSET_ID);
  }

  /** Returns true if field isNew is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNew() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEW_ISSET_ID);
  }

  public void setIsNewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEW_ISSET_ID, value);
  }

  public int getIsAdmin() {
    return this.isAdmin;
  }

  public UserView setIsAdmin(int isAdmin) {
    this.isAdmin = isAdmin;
    setIsAdminIsSet(true);
    return this;
  }

  public void unsetIsAdmin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISADMIN_ISSET_ID);
  }

  /** Returns true if field isAdmin is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAdmin() {
    return EncodingUtils.testBit(__isset_bitfield, __ISADMIN_ISSET_ID);
  }

  public void setIsAdminIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISADMIN_ISSET_ID, value);
  }

  public String getLastLoginType() {
    return this.lastLoginType;
  }

  public UserView setLastLoginType(String lastLoginType) {
    this.lastLoginType = lastLoginType;
    return this;
  }

  public void unsetLastLoginType() {
    this.lastLoginType = null;
  }

  /** Returns true if field lastLoginType is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginType() {
    return this.lastLoginType != null;
  }

  public void setLastLoginTypeIsSet(boolean value) {
    if (!value) {
      this.lastLoginType = null;
    }
  }

  public int getNotifyConfig() {
    return this.notifyConfig;
  }

  public UserView setNotifyConfig(int notifyConfig) {
    this.notifyConfig = notifyConfig;
    setNotifyConfigIsSet(true);
    return this;
  }

  public void unsetNotifyConfig() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYCONFIG_ISSET_ID);
  }

  /** Returns true if field notifyConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyConfig() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYCONFIG_ISSET_ID);
  }

  public void setNotifyConfigIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYCONFIG_ISSET_ID, value);
  }

  public long getFamilyId() {
    return this.familyId;
  }

  public UserView setFamilyId(long familyId) {
    this.familyId = familyId;
    setFamilyIdIsSet(true);
    return this;
  }

  public void unsetFamilyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
  }

  /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyId() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
  }

  public void setFamilyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case FAN_LEVEL:
      if (value == null) {
        unsetFanLevel();
      } else {
        setFanLevel((Integer)value);
      }
      break;

    case ISLIVE:
      if (value == null) {
        unsetIslive();
      } else {
        setIslive((Integer)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case MASTER_LEVEL:
      if (value == null) {
        unsetMasterLevel();
      } else {
        setMasterLevel((Integer)value);
      }
      break;

    case LAST_LOGINTIME:
      if (value == null) {
        unsetLastLogintime();
      } else {
        setLastLogintime((Integer)value);
      }
      break;

    case LAST_LIVETIME:
      if (value == null) {
        unsetLastLivetime();
      } else {
        setLastLivetime((Integer)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Integer)value);
      }
      break;

    case SIGN_STATUS:
      if (value == null) {
        unsetSignStatus();
      } else {
        setSignStatus((Integer)value);
      }
      break;

    case POPULAR_NO:
      if (value == null) {
        unsetPopularNo();
      } else {
        setPopularNo((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case ISROBOT:
      if (value == null) {
        unsetIsrobot();
      } else {
        setIsrobot((Integer)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Integer)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((Integer)value);
      }
      break;

    case PROFILE_IMG:
      if (value == null) {
        unsetProfileImg();
      } else {
        setProfileImg((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case CONSTELLATION:
      if (value == null) {
        unsetConstellation();
      } else {
        setConstellation((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case RY_TOKEN:
      if (value == null) {
        unsetRyToken();
      } else {
        setRyToken((String)value);
      }
      break;

    case DEVICE_UUID:
      if (value == null) {
        unsetDeviceUuid();
      } else {
        setDeviceUuid((String)value);
      }
      break;

    case IS_NEW:
      if (value == null) {
        unsetIsNew();
      } else {
        setIsNew((Integer)value);
      }
      break;

    case IS_ADMIN:
      if (value == null) {
        unsetIsAdmin();
      } else {
        setIsAdmin((Integer)value);
      }
      break;

    case LAST_LOGIN_TYPE:
      if (value == null) {
        unsetLastLoginType();
      } else {
        setLastLoginType((String)value);
      }
      break;

    case NOTIFY_CONFIG:
      if (value == null) {
        unsetNotifyConfig();
      } else {
        setNotifyConfig((Integer)value);
      }
      break;

    case FAMILY_ID:
      if (value == null) {
        unsetFamilyId();
      } else {
        setFamilyId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case FAN_LEVEL:
      return Integer.valueOf(getFanLevel());

    case ISLIVE:
      return Integer.valueOf(getIslive());

    case NICKNAME:
      return getNickname();

    case MASTER_LEVEL:
      return Integer.valueOf(getMasterLevel());

    case LAST_LOGINTIME:
      return Integer.valueOf(getLastLogintime());

    case LAST_LIVETIME:
      return Integer.valueOf(getLastLivetime());

    case ROLE:
      return Integer.valueOf(getRole());

    case SIGN_STATUS:
      return Integer.valueOf(getSignStatus());

    case POPULAR_NO:
      return Long.valueOf(getPopularNo());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case ISROBOT:
      return Integer.valueOf(getIsrobot());

    case PHONE_NUMBER:
      return getPhoneNumber();

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    case LATITUDE:
      return Double.valueOf(getLatitude());

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case GENDER:
      return Integer.valueOf(getGender());

    case ACTIVE:
      return Integer.valueOf(getActive());

    case PROFILE_IMG:
      return getProfileImg();

    case CITY:
      return getCity();

    case AGE:
      return Integer.valueOf(getAge());

    case CONSTELLATION:
      return getConstellation();

    case DESCRIPTION:
      return getDescription();

    case RY_TOKEN:
      return getRyToken();

    case DEVICE_UUID:
      return getDeviceUuid();

    case IS_NEW:
      return Integer.valueOf(getIsNew());

    case IS_ADMIN:
      return Integer.valueOf(getIsAdmin());

    case LAST_LOGIN_TYPE:
      return getLastLoginType();

    case NOTIFY_CONFIG:
      return Integer.valueOf(getNotifyConfig());

    case FAMILY_ID:
      return Long.valueOf(getFamilyId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FAN_LEVEL:
      return isSetFanLevel();
    case ISLIVE:
      return isSetIslive();
    case NICKNAME:
      return isSetNickname();
    case MASTER_LEVEL:
      return isSetMasterLevel();
    case LAST_LOGINTIME:
      return isSetLastLogintime();
    case LAST_LIVETIME:
      return isSetLastLivetime();
    case ROLE:
      return isSetRole();
    case SIGN_STATUS:
      return isSetSignStatus();
    case POPULAR_NO:
      return isSetPopularNo();
    case CREATE_TIME:
      return isSetCreateTime();
    case ISROBOT:
      return isSetIsrobot();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    case GENDER:
      return isSetGender();
    case ACTIVE:
      return isSetActive();
    case PROFILE_IMG:
      return isSetProfileImg();
    case CITY:
      return isSetCity();
    case AGE:
      return isSetAge();
    case CONSTELLATION:
      return isSetConstellation();
    case DESCRIPTION:
      return isSetDescription();
    case RY_TOKEN:
      return isSetRyToken();
    case DEVICE_UUID:
      return isSetDeviceUuid();
    case IS_NEW:
      return isSetIsNew();
    case IS_ADMIN:
      return isSetIsAdmin();
    case LAST_LOGIN_TYPE:
      return isSetLastLoginType();
    case NOTIFY_CONFIG:
      return isSetNotifyConfig();
    case FAMILY_ID:
      return isSetFamilyId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserView)
      return this.equals((UserView)that);
    return false;
  }

  public boolean equals(UserView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fanLevel = true;
    boolean that_present_fanLevel = true;
    if (this_present_fanLevel || that_present_fanLevel) {
      if (!(this_present_fanLevel && that_present_fanLevel))
        return false;
      if (this.fanLevel != that.fanLevel)
        return false;
    }

    boolean this_present_islive = true;
    boolean that_present_islive = true;
    if (this_present_islive || that_present_islive) {
      if (!(this_present_islive && that_present_islive))
        return false;
      if (this.islive != that.islive)
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_masterLevel = true;
    boolean that_present_masterLevel = true;
    if (this_present_masterLevel || that_present_masterLevel) {
      if (!(this_present_masterLevel && that_present_masterLevel))
        return false;
      if (this.masterLevel != that.masterLevel)
        return false;
    }

    boolean this_present_lastLogintime = true;
    boolean that_present_lastLogintime = true;
    if (this_present_lastLogintime || that_present_lastLogintime) {
      if (!(this_present_lastLogintime && that_present_lastLogintime))
        return false;
      if (this.lastLogintime != that.lastLogintime)
        return false;
    }

    boolean this_present_lastLivetime = true;
    boolean that_present_lastLivetime = true;
    if (this_present_lastLivetime || that_present_lastLivetime) {
      if (!(this_present_lastLivetime && that_present_lastLivetime))
        return false;
      if (this.lastLivetime != that.lastLivetime)
        return false;
    }

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (this.role != that.role)
        return false;
    }

    boolean this_present_signStatus = true;
    boolean that_present_signStatus = true;
    if (this_present_signStatus || that_present_signStatus) {
      if (!(this_present_signStatus && that_present_signStatus))
        return false;
      if (this.signStatus != that.signStatus)
        return false;
    }

    boolean this_present_popularNo = true;
    boolean that_present_popularNo = true;
    if (this_present_popularNo || that_present_popularNo) {
      if (!(this_present_popularNo && that_present_popularNo))
        return false;
      if (this.popularNo != that.popularNo)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_isrobot = true;
    boolean that_present_isrobot = true;
    if (this_present_isrobot || that_present_isrobot) {
      if (!(this_present_isrobot && that_present_isrobot))
        return false;
      if (this.isrobot != that.isrobot)
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    boolean this_present_profileImg = true && this.isSetProfileImg();
    boolean that_present_profileImg = true && that.isSetProfileImg();
    if (this_present_profileImg || that_present_profileImg) {
      if (!(this_present_profileImg && that_present_profileImg))
        return false;
      if (!this.profileImg.equals(that.profileImg))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_constellation = true && this.isSetConstellation();
    boolean that_present_constellation = true && that.isSetConstellation();
    if (this_present_constellation || that_present_constellation) {
      if (!(this_present_constellation && that_present_constellation))
        return false;
      if (!this.constellation.equals(that.constellation))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_ryToken = true && this.isSetRyToken();
    boolean that_present_ryToken = true && that.isSetRyToken();
    if (this_present_ryToken || that_present_ryToken) {
      if (!(this_present_ryToken && that_present_ryToken))
        return false;
      if (!this.ryToken.equals(that.ryToken))
        return false;
    }

    boolean this_present_deviceUuid = true && this.isSetDeviceUuid();
    boolean that_present_deviceUuid = true && that.isSetDeviceUuid();
    if (this_present_deviceUuid || that_present_deviceUuid) {
      if (!(this_present_deviceUuid && that_present_deviceUuid))
        return false;
      if (!this.deviceUuid.equals(that.deviceUuid))
        return false;
    }

    boolean this_present_isNew = true;
    boolean that_present_isNew = true;
    if (this_present_isNew || that_present_isNew) {
      if (!(this_present_isNew && that_present_isNew))
        return false;
      if (this.isNew != that.isNew)
        return false;
    }

    boolean this_present_isAdmin = true;
    boolean that_present_isAdmin = true;
    if (this_present_isAdmin || that_present_isAdmin) {
      if (!(this_present_isAdmin && that_present_isAdmin))
        return false;
      if (this.isAdmin != that.isAdmin)
        return false;
    }

    boolean this_present_lastLoginType = true && this.isSetLastLoginType();
    boolean that_present_lastLoginType = true && that.isSetLastLoginType();
    if (this_present_lastLoginType || that_present_lastLoginType) {
      if (!(this_present_lastLoginType && that_present_lastLoginType))
        return false;
      if (!this.lastLoginType.equals(that.lastLoginType))
        return false;
    }

    boolean this_present_notifyConfig = true;
    boolean that_present_notifyConfig = true;
    if (this_present_notifyConfig || that_present_notifyConfig) {
      if (!(this_present_notifyConfig && that_present_notifyConfig))
        return false;
      if (this.notifyConfig != that.notifyConfig)
        return false;
    }

    boolean this_present_familyId = true;
    boolean that_present_familyId = true;
    if (this_present_familyId || that_present_familyId) {
      if (!(this_present_familyId && that_present_familyId))
        return false;
      if (this.familyId != that.familyId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserView typedOther = (UserView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFanLevel()).compareTo(typedOther.isSetFanLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFanLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fanLevel, typedOther.fanLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIslive()).compareTo(typedOther.isSetIslive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIslive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.islive, typedOther.islive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(typedOther.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, typedOther.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMasterLevel()).compareTo(typedOther.isSetMasterLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMasterLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterLevel, typedOther.masterLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLogintime()).compareTo(typedOther.isSetLastLogintime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLogintime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLogintime, typedOther.lastLogintime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLivetime()).compareTo(typedOther.isSetLastLivetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLivetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLivetime, typedOther.lastLivetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(typedOther.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, typedOther.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignStatus()).compareTo(typedOther.isSetSignStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signStatus, typedOther.signStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularNo()).compareTo(typedOther.isSetPopularNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularNo, typedOther.popularNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsrobot()).compareTo(typedOther.isSetIsrobot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsrobot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isrobot, typedOther.isrobot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNumber()).compareTo(typedOther.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, typedOther.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive()).compareTo(typedOther.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, typedOther.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileImg()).compareTo(typedOther.isSetProfileImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImg, typedOther.profileImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(typedOther.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, typedOther.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstellation()).compareTo(typedOther.isSetConstellation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstellation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constellation, typedOther.constellation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRyToken()).compareTo(typedOther.isSetRyToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRyToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ryToken, typedOther.ryToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceUuid()).compareTo(typedOther.isSetDeviceUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceUuid, typedOther.deviceUuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNew()).compareTo(typedOther.isSetIsNew());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNew()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNew, typedOther.isNew);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAdmin()).compareTo(typedOther.isSetIsAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAdmin, typedOther.isAdmin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginType()).compareTo(typedOther.isSetLastLoginType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginType, typedOther.lastLoginType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyConfig()).compareTo(typedOther.isSetNotifyConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyConfig, typedOther.notifyConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fanLevel:");
    sb.append(this.fanLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("islive:");
    sb.append(this.islive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickname:");
    if (this.nickname == null) {
      sb.append("null");
    } else {
      sb.append(this.nickname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("masterLevel:");
    sb.append(this.masterLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLogintime:");
    sb.append(this.lastLogintime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLivetime:");
    sb.append(this.lastLivetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    sb.append(this.role);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signStatus:");
    sb.append(this.signStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularNo:");
    sb.append(this.popularNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isrobot:");
    sb.append(this.isrobot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNumber:");
    if (this.phoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileImg:");
    if (this.profileImg == null) {
      sb.append("null");
    } else {
      sb.append(this.profileImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("constellation:");
    if (this.constellation == null) {
      sb.append("null");
    } else {
      sb.append(this.constellation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ryToken:");
    if (this.ryToken == null) {
      sb.append("null");
    } else {
      sb.append(this.ryToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceUuid:");
    if (this.deviceUuid == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceUuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNew:");
    sb.append(this.isNew);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAdmin:");
    sb.append(this.isAdmin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginType:");
    if (this.lastLoginType == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLoginType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyConfig:");
    sb.append(this.notifyConfig);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyId:");
    sb.append(this.familyId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserViewStandardSchemeFactory implements SchemeFactory {
    public UserViewStandardScheme getScheme() {
      return new UserViewStandardScheme();
    }
  }

  private static class UserViewStandardScheme extends StandardScheme<UserView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAN_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fanLevel = iprot.readI32();
              struct.setFanLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ISLIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.islive = iprot.readI32();
              struct.setIsliveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MASTER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.masterLevel = iprot.readI32();
              struct.setMasterLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_LOGINTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastLogintime = iprot.readI32();
              struct.setLastLogintimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_LIVETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastLivetime = iprot.readI32();
              struct.setLastLivetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role = iprot.readI32();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SIGN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.signStatus = iprot.readI32();
              struct.setSignStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POPULAR_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.popularNo = iprot.readI64();
              struct.setPopularNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ISROBOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isrobot = iprot.readI32();
              struct.setIsrobotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNumber = iprot.readString();
              struct.setPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.active = iprot.readI32();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROFILE_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileImg = iprot.readString();
              struct.setProfileImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CONSTELLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.constellation = iprot.readString();
              struct.setConstellationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RY_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ryToken = iprot.readString();
              struct.setRyTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DEVICE_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceUuid = iprot.readString();
              struct.setDeviceUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IS_NEW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNew = iprot.readI32();
              struct.setIsNewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // IS_ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAdmin = iprot.readI32();
              struct.setIsAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // LAST_LOGIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginType = iprot.readString();
              struct.setLastLoginTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // NOTIFY_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notifyConfig = iprot.readI32();
              struct.setNotifyConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // FAMILY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.familyId = iprot.readI64();
              struct.setFamilyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAN_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.fanLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISLIVE_FIELD_DESC);
      oprot.writeI32(struct.islive);
      oprot.writeFieldEnd();
      if (struct.nickname != null) {
        oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
        oprot.writeString(struct.nickname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MASTER_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.masterLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_LOGINTIME_FIELD_DESC);
      oprot.writeI32(struct.lastLogintime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_LIVETIME_FIELD_DESC);
      oprot.writeI32(struct.lastLivetime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(struct.role);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGN_STATUS_FIELD_DESC);
      oprot.writeI32(struct.signStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULAR_NO_FIELD_DESC);
      oprot.writeI64(struct.popularNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISROBOT_FIELD_DESC);
      oprot.writeI32(struct.isrobot);
      oprot.writeFieldEnd();
      if (struct.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.phoneNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.latitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI32(struct.gender);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeI32(struct.active);
      oprot.writeFieldEnd();
      if (struct.profileImg != null) {
        oprot.writeFieldBegin(PROFILE_IMG_FIELD_DESC);
        oprot.writeString(struct.profileImg);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      if (struct.constellation != null) {
        oprot.writeFieldBegin(CONSTELLATION_FIELD_DESC);
        oprot.writeString(struct.constellation);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.ryToken != null) {
        oprot.writeFieldBegin(RY_TOKEN_FIELD_DESC);
        oprot.writeString(struct.ryToken);
        oprot.writeFieldEnd();
      }
      if (struct.deviceUuid != null) {
        oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
        oprot.writeString(struct.deviceUuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_NEW_FIELD_DESC);
      oprot.writeI32(struct.isNew);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ADMIN_FIELD_DESC);
      oprot.writeI32(struct.isAdmin);
      oprot.writeFieldEnd();
      if (struct.lastLoginType != null) {
        oprot.writeFieldBegin(LAST_LOGIN_TYPE_FIELD_DESC);
        oprot.writeString(struct.lastLoginType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFY_CONFIG_FIELD_DESC);
      oprot.writeI32(struct.notifyConfig);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
      oprot.writeI64(struct.familyId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserViewTupleSchemeFactory implements SchemeFactory {
    public UserViewTupleScheme getScheme() {
      return new UserViewTupleScheme();
    }
  }

  private static class UserViewTupleScheme extends TupleScheme<UserView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFanLevel()) {
        optionals.set(1);
      }
      if (struct.isSetIslive()) {
        optionals.set(2);
      }
      if (struct.isSetNickname()) {
        optionals.set(3);
      }
      if (struct.isSetMasterLevel()) {
        optionals.set(4);
      }
      if (struct.isSetLastLogintime()) {
        optionals.set(5);
      }
      if (struct.isSetLastLivetime()) {
        optionals.set(6);
      }
      if (struct.isSetRole()) {
        optionals.set(7);
      }
      if (struct.isSetSignStatus()) {
        optionals.set(8);
      }
      if (struct.isSetPopularNo()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetIsrobot()) {
        optionals.set(11);
      }
      if (struct.isSetPhoneNumber()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(13);
      }
      if (struct.isSetLatitude()) {
        optionals.set(14);
      }
      if (struct.isSetLongitude()) {
        optionals.set(15);
      }
      if (struct.isSetGender()) {
        optionals.set(16);
      }
      if (struct.isSetActive()) {
        optionals.set(17);
      }
      if (struct.isSetProfileImg()) {
        optionals.set(18);
      }
      if (struct.isSetCity()) {
        optionals.set(19);
      }
      if (struct.isSetAge()) {
        optionals.set(20);
      }
      if (struct.isSetConstellation()) {
        optionals.set(21);
      }
      if (struct.isSetDescription()) {
        optionals.set(22);
      }
      if (struct.isSetRyToken()) {
        optionals.set(23);
      }
      if (struct.isSetDeviceUuid()) {
        optionals.set(24);
      }
      if (struct.isSetIsNew()) {
        optionals.set(25);
      }
      if (struct.isSetIsAdmin()) {
        optionals.set(26);
      }
      if (struct.isSetLastLoginType()) {
        optionals.set(27);
      }
      if (struct.isSetNotifyConfig()) {
        optionals.set(28);
      }
      if (struct.isSetFamilyId()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetFanLevel()) {
        oprot.writeI32(struct.fanLevel);
      }
      if (struct.isSetIslive()) {
        oprot.writeI32(struct.islive);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetMasterLevel()) {
        oprot.writeI32(struct.masterLevel);
      }
      if (struct.isSetLastLogintime()) {
        oprot.writeI32(struct.lastLogintime);
      }
      if (struct.isSetLastLivetime()) {
        oprot.writeI32(struct.lastLivetime);
      }
      if (struct.isSetRole()) {
        oprot.writeI32(struct.role);
      }
      if (struct.isSetSignStatus()) {
        oprot.writeI32(struct.signStatus);
      }
      if (struct.isSetPopularNo()) {
        oprot.writeI64(struct.popularNo);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetIsrobot()) {
        oprot.writeI32(struct.isrobot);
      }
      if (struct.isSetPhoneNumber()) {
        oprot.writeString(struct.phoneNumber);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetActive()) {
        oprot.writeI32(struct.active);
      }
      if (struct.isSetProfileImg()) {
        oprot.writeString(struct.profileImg);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetConstellation()) {
        oprot.writeString(struct.constellation);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetRyToken()) {
        oprot.writeString(struct.ryToken);
      }
      if (struct.isSetDeviceUuid()) {
        oprot.writeString(struct.deviceUuid);
      }
      if (struct.isSetIsNew()) {
        oprot.writeI32(struct.isNew);
      }
      if (struct.isSetIsAdmin()) {
        oprot.writeI32(struct.isAdmin);
      }
      if (struct.isSetLastLoginType()) {
        oprot.writeString(struct.lastLoginType);
      }
      if (struct.isSetNotifyConfig()) {
        oprot.writeI32(struct.notifyConfig);
      }
      if (struct.isSetFamilyId()) {
        oprot.writeI64(struct.familyId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fanLevel = iprot.readI32();
        struct.setFanLevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.islive = iprot.readI32();
        struct.setIsliveIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.masterLevel = iprot.readI32();
        struct.setMasterLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastLogintime = iprot.readI32();
        struct.setLastLogintimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastLivetime = iprot.readI32();
        struct.setLastLivetimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.role = iprot.readI32();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(8)) {
        struct.signStatus = iprot.readI32();
        struct.setSignStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.popularNo = iprot.readI64();
        struct.setPopularNoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isrobot = iprot.readI32();
        struct.setIsrobotIsSet(true);
      }
      if (incoming.get(12)) {
        struct.phoneNumber = iprot.readString();
        struct.setPhoneNumberIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(17)) {
        struct.active = iprot.readI32();
        struct.setActiveIsSet(true);
      }
      if (incoming.get(18)) {
        struct.profileImg = iprot.readString();
        struct.setProfileImgIsSet(true);
      }
      if (incoming.get(19)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(20)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.constellation = iprot.readString();
        struct.setConstellationIsSet(true);
      }
      if (incoming.get(22)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(23)) {
        struct.ryToken = iprot.readString();
        struct.setRyTokenIsSet(true);
      }
      if (incoming.get(24)) {
        struct.deviceUuid = iprot.readString();
        struct.setDeviceUuidIsSet(true);
      }
      if (incoming.get(25)) {
        struct.isNew = iprot.readI32();
        struct.setIsNewIsSet(true);
      }
      if (incoming.get(26)) {
        struct.isAdmin = iprot.readI32();
        struct.setIsAdminIsSet(true);
      }
      if (incoming.get(27)) {
        struct.lastLoginType = iprot.readString();
        struct.setLastLoginTypeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.notifyConfig = iprot.readI32();
        struct.setNotifyConfigIsSet(true);
      }
      if (incoming.get(29)) {
        struct.familyId = iprot.readI64();
        struct.setFamilyIdIsSet(true);
      }
    }
  }

}

