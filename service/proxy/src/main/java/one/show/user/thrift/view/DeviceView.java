/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeviceView implements org.apache.thrift.TBase<DeviceView, DeviceView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviceView");

  private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceUuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField KERNEL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("kernelVersion", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PUSH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pushId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PHONE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SC_FIELD_DESC = new org.apache.thrift.protocol.TField("sc", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeviceViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeviceViewTupleSchemeFactory());
  }

  public String deviceUuid; // required
  public String platform; // required
  public String appVersion; // required
  public String channel; // required
  public String deviceName; // required
  public String kernelVersion; // required
  public String pushId; // required
  public String phoneType; // required
  public String phoneNumber; // required
  public String os; // required
  public int createTime; // required
  public int updateTime; // required
  public String sc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_UUID((short)1, "deviceUuid"),
    PLATFORM((short)2, "platform"),
    APP_VERSION((short)3, "appVersion"),
    CHANNEL((short)4, "channel"),
    DEVICE_NAME((short)5, "deviceName"),
    KERNEL_VERSION((short)6, "kernelVersion"),
    PUSH_ID((short)7, "pushId"),
    PHONE_TYPE((short)8, "phoneType"),
    PHONE_NUMBER((short)9, "phoneNumber"),
    OS((short)10, "os"),
    CREATE_TIME((short)11, "createTime"),
    UPDATE_TIME((short)12, "updateTime"),
    SC((short)13, "sc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_UUID
          return DEVICE_UUID;
        case 2: // PLATFORM
          return PLATFORM;
        case 3: // APP_VERSION
          return APP_VERSION;
        case 4: // CHANNEL
          return CHANNEL;
        case 5: // DEVICE_NAME
          return DEVICE_NAME;
        case 6: // KERNEL_VERSION
          return KERNEL_VERSION;
        case 7: // PUSH_ID
          return PUSH_ID;
        case 8: // PHONE_TYPE
          return PHONE_TYPE;
        case 9: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 10: // OS
          return OS;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // UPDATE_TIME
          return UPDATE_TIME;
        case 13: // SC
          return SC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __UPDATETIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("deviceUuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KERNEL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("kernelVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUSH_ID, new org.apache.thrift.meta_data.FieldMetaData("pushId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("phoneType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SC, new org.apache.thrift.meta_data.FieldMetaData("sc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceView.class, metaDataMap);
  }

  public DeviceView() {
  }

  public DeviceView(
    String deviceUuid,
    String platform,
    String appVersion,
    String channel,
    String deviceName,
    String kernelVersion,
    String pushId,
    String phoneType,
    String phoneNumber,
    String os,
    int createTime,
    int updateTime,
    String sc)
  {
    this();
    this.deviceUuid = deviceUuid;
    this.platform = platform;
    this.appVersion = appVersion;
    this.channel = channel;
    this.deviceName = deviceName;
    this.kernelVersion = kernelVersion;
    this.pushId = pushId;
    this.phoneType = phoneType;
    this.phoneNumber = phoneNumber;
    this.os = os;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.sc = sc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviceView(DeviceView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceUuid()) {
      this.deviceUuid = other.deviceUuid;
    }
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    if (other.isSetDeviceName()) {
      this.deviceName = other.deviceName;
    }
    if (other.isSetKernelVersion()) {
      this.kernelVersion = other.kernelVersion;
    }
    if (other.isSetPushId()) {
      this.pushId = other.pushId;
    }
    if (other.isSetPhoneType()) {
      this.phoneType = other.phoneType;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.isSetOs()) {
      this.os = other.os;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetSc()) {
      this.sc = other.sc;
    }
  }

  public DeviceView deepCopy() {
    return new DeviceView(this);
  }

  @Override
  public void clear() {
    this.deviceUuid = null;
    this.platform = null;
    this.appVersion = null;
    this.channel = null;
    this.deviceName = null;
    this.kernelVersion = null;
    this.pushId = null;
    this.phoneType = null;
    this.phoneNumber = null;
    this.os = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.sc = null;
  }

  public String getDeviceUuid() {
    return this.deviceUuid;
  }

  public DeviceView setDeviceUuid(String deviceUuid) {
    this.deviceUuid = deviceUuid;
    return this;
  }

  public void unsetDeviceUuid() {
    this.deviceUuid = null;
  }

  /** Returns true if field deviceUuid is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceUuid() {
    return this.deviceUuid != null;
  }

  public void setDeviceUuidIsSet(boolean value) {
    if (!value) {
      this.deviceUuid = null;
    }
  }

  public String getPlatform() {
    return this.platform;
  }

  public DeviceView setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public DeviceView setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public String getChannel() {
    return this.channel;
  }

  public DeviceView setChannel(String channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public String getDeviceName() {
    return this.deviceName;
  }

  public DeviceView setDeviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  public void unsetDeviceName() {
    this.deviceName = null;
  }

  /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceName() {
    return this.deviceName != null;
  }

  public void setDeviceNameIsSet(boolean value) {
    if (!value) {
      this.deviceName = null;
    }
  }

  public String getKernelVersion() {
    return this.kernelVersion;
  }

  public DeviceView setKernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
    return this;
  }

  public void unsetKernelVersion() {
    this.kernelVersion = null;
  }

  /** Returns true if field kernelVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetKernelVersion() {
    return this.kernelVersion != null;
  }

  public void setKernelVersionIsSet(boolean value) {
    if (!value) {
      this.kernelVersion = null;
    }
  }

  public String getPushId() {
    return this.pushId;
  }

  public DeviceView setPushId(String pushId) {
    this.pushId = pushId;
    return this;
  }

  public void unsetPushId() {
    this.pushId = null;
  }

  /** Returns true if field pushId is set (has been assigned a value) and false otherwise */
  public boolean isSetPushId() {
    return this.pushId != null;
  }

  public void setPushIdIsSet(boolean value) {
    if (!value) {
      this.pushId = null;
    }
  }

  public String getPhoneType() {
    return this.phoneType;
  }

  public DeviceView setPhoneType(String phoneType) {
    this.phoneType = phoneType;
    return this;
  }

  public void unsetPhoneType() {
    this.phoneType = null;
  }

  /** Returns true if field phoneType is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneType() {
    return this.phoneType != null;
  }

  public void setPhoneTypeIsSet(boolean value) {
    if (!value) {
      this.phoneType = null;
    }
  }

  public String getPhoneNumber() {
    return this.phoneNumber;
  }

  public DeviceView setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public String getOs() {
    return this.os;
  }

  public DeviceView setOs(String os) {
    this.os = os;
    return this;
  }

  public void unsetOs() {
    this.os = null;
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return this.os != null;
  }

  public void setOsIsSet(boolean value) {
    if (!value) {
      this.os = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public DeviceView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public DeviceView setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public String getSc() {
    return this.sc;
  }

  public DeviceView setSc(String sc) {
    this.sc = sc;
    return this;
  }

  public void unsetSc() {
    this.sc = null;
  }

  /** Returns true if field sc is set (has been assigned a value) and false otherwise */
  public boolean isSetSc() {
    return this.sc != null;
  }

  public void setScIsSet(boolean value) {
    if (!value) {
      this.sc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_UUID:
      if (value == null) {
        unsetDeviceUuid();
      } else {
        setDeviceUuid((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((String)value);
      }
      break;

    case DEVICE_NAME:
      if (value == null) {
        unsetDeviceName();
      } else {
        setDeviceName((String)value);
      }
      break;

    case KERNEL_VERSION:
      if (value == null) {
        unsetKernelVersion();
      } else {
        setKernelVersion((String)value);
      }
      break;

    case PUSH_ID:
      if (value == null) {
        unsetPushId();
      } else {
        setPushId((String)value);
      }
      break;

    case PHONE_TYPE:
      if (value == null) {
        unsetPhoneType();
      } else {
        setPhoneType((String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    case SC:
      if (value == null) {
        unsetSc();
      } else {
        setSc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_UUID:
      return getDeviceUuid();

    case PLATFORM:
      return getPlatform();

    case APP_VERSION:
      return getAppVersion();

    case CHANNEL:
      return getChannel();

    case DEVICE_NAME:
      return getDeviceName();

    case KERNEL_VERSION:
      return getKernelVersion();

    case PUSH_ID:
      return getPushId();

    case PHONE_TYPE:
      return getPhoneType();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case OS:
      return getOs();

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    case SC:
      return getSc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_UUID:
      return isSetDeviceUuid();
    case PLATFORM:
      return isSetPlatform();
    case APP_VERSION:
      return isSetAppVersion();
    case CHANNEL:
      return isSetChannel();
    case DEVICE_NAME:
      return isSetDeviceName();
    case KERNEL_VERSION:
      return isSetKernelVersion();
    case PUSH_ID:
      return isSetPushId();
    case PHONE_TYPE:
      return isSetPhoneType();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case OS:
      return isSetOs();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case SC:
      return isSetSc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviceView)
      return this.equals((DeviceView)that);
    return false;
  }

  public boolean equals(DeviceView that) {
    if (that == null)
      return false;

    boolean this_present_deviceUuid = true && this.isSetDeviceUuid();
    boolean that_present_deviceUuid = true && that.isSetDeviceUuid();
    if (this_present_deviceUuid || that_present_deviceUuid) {
      if (!(this_present_deviceUuid && that_present_deviceUuid))
        return false;
      if (!this.deviceUuid.equals(that.deviceUuid))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_deviceName = true && this.isSetDeviceName();
    boolean that_present_deviceName = true && that.isSetDeviceName();
    if (this_present_deviceName || that_present_deviceName) {
      if (!(this_present_deviceName && that_present_deviceName))
        return false;
      if (!this.deviceName.equals(that.deviceName))
        return false;
    }

    boolean this_present_kernelVersion = true && this.isSetKernelVersion();
    boolean that_present_kernelVersion = true && that.isSetKernelVersion();
    if (this_present_kernelVersion || that_present_kernelVersion) {
      if (!(this_present_kernelVersion && that_present_kernelVersion))
        return false;
      if (!this.kernelVersion.equals(that.kernelVersion))
        return false;
    }

    boolean this_present_pushId = true && this.isSetPushId();
    boolean that_present_pushId = true && that.isSetPushId();
    if (this_present_pushId || that_present_pushId) {
      if (!(this_present_pushId && that_present_pushId))
        return false;
      if (!this.pushId.equals(that.pushId))
        return false;
    }

    boolean this_present_phoneType = true && this.isSetPhoneType();
    boolean that_present_phoneType = true && that.isSetPhoneType();
    if (this_present_phoneType || that_present_phoneType) {
      if (!(this_present_phoneType && that_present_phoneType))
        return false;
      if (!this.phoneType.equals(that.phoneType))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_sc = true && this.isSetSc();
    boolean that_present_sc = true && that.isSetSc();
    if (this_present_sc || that_present_sc) {
      if (!(this_present_sc && that_present_sc))
        return false;
      if (!this.sc.equals(that.sc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DeviceView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DeviceView typedOther = (DeviceView)other;

    lastComparison = Boolean.valueOf(isSetDeviceUuid()).compareTo(typedOther.isSetDeviceUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceUuid, typedOther.deviceUuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceName()).compareTo(typedOther.isSetDeviceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, typedOther.deviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKernelVersion()).compareTo(typedOther.isSetKernelVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKernelVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kernelVersion, typedOther.kernelVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushId()).compareTo(typedOther.isSetPushId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushId, typedOther.pushId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneType()).compareTo(typedOther.isSetPhoneType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneType, typedOther.phoneType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNumber()).compareTo(typedOther.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, typedOther.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs()).compareTo(typedOther.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, typedOther.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSc()).compareTo(typedOther.isSetSc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sc, typedOther.sc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeviceView(");
    boolean first = true;

    sb.append("deviceUuid:");
    if (this.deviceUuid == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceUuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platform:");
    if (this.platform == null) {
      sb.append("null");
    } else {
      sb.append(this.platform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appVersion:");
    if (this.appVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.appVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    if (this.channel == null) {
      sb.append("null");
    } else {
      sb.append(this.channel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceName:");
    if (this.deviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kernelVersion:");
    if (this.kernelVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.kernelVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushId:");
    if (this.pushId == null) {
      sb.append("null");
    } else {
      sb.append(this.pushId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneType:");
    if (this.phoneType == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNumber:");
    if (this.phoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("os:");
    if (this.os == null) {
      sb.append("null");
    } else {
      sb.append(this.os);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sc:");
    if (this.sc == null) {
      sb.append("null");
    } else {
      sb.append(this.sc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceViewStandardSchemeFactory implements SchemeFactory {
    public DeviceViewStandardScheme getScheme() {
      return new DeviceViewStandardScheme();
    }
  }

  private static class DeviceViewStandardScheme extends StandardScheme<DeviceView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceUuid = iprot.readString();
              struct.setDeviceUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel = iprot.readString();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceName = iprot.readString();
              struct.setDeviceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KERNEL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kernelVersion = iprot.readString();
              struct.setKernelVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUSH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pushId = iprot.readString();
              struct.setPushIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PHONE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneType = iprot.readString();
              struct.setPhoneTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNumber = iprot.readString();
              struct.setPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os = iprot.readString();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sc = iprot.readString();
              struct.setScIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceUuid != null) {
        oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
        oprot.writeString(struct.deviceUuid);
        oprot.writeFieldEnd();
      }
      if (struct.platform != null) {
        oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
        oprot.writeString(struct.platform);
        oprot.writeFieldEnd();
      }
      if (struct.appVersion != null) {
        oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
        oprot.writeString(struct.appVersion);
        oprot.writeFieldEnd();
      }
      if (struct.channel != null) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeString(struct.channel);
        oprot.writeFieldEnd();
      }
      if (struct.deviceName != null) {
        oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.deviceName);
        oprot.writeFieldEnd();
      }
      if (struct.kernelVersion != null) {
        oprot.writeFieldBegin(KERNEL_VERSION_FIELD_DESC);
        oprot.writeString(struct.kernelVersion);
        oprot.writeFieldEnd();
      }
      if (struct.pushId != null) {
        oprot.writeFieldBegin(PUSH_ID_FIELD_DESC);
        oprot.writeString(struct.pushId);
        oprot.writeFieldEnd();
      }
      if (struct.phoneType != null) {
        oprot.writeFieldBegin(PHONE_TYPE_FIELD_DESC);
        oprot.writeString(struct.phoneType);
        oprot.writeFieldEnd();
      }
      if (struct.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.phoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.os != null) {
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeString(struct.os);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.sc != null) {
        oprot.writeFieldBegin(SC_FIELD_DESC);
        oprot.writeString(struct.sc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceViewTupleSchemeFactory implements SchemeFactory {
    public DeviceViewTupleScheme getScheme() {
      return new DeviceViewTupleScheme();
    }
  }

  private static class DeviceViewTupleScheme extends TupleScheme<DeviceView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeviceView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDeviceUuid()) {
        optionals.set(0);
      }
      if (struct.isSetPlatform()) {
        optionals.set(1);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(2);
      }
      if (struct.isSetChannel()) {
        optionals.set(3);
      }
      if (struct.isSetDeviceName()) {
        optionals.set(4);
      }
      if (struct.isSetKernelVersion()) {
        optionals.set(5);
      }
      if (struct.isSetPushId()) {
        optionals.set(6);
      }
      if (struct.isSetPhoneType()) {
        optionals.set(7);
      }
      if (struct.isSetPhoneNumber()) {
        optionals.set(8);
      }
      if (struct.isSetOs()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(11);
      }
      if (struct.isSetSc()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetDeviceUuid()) {
        oprot.writeString(struct.deviceUuid);
      }
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetAppVersion()) {
        oprot.writeString(struct.appVersion);
      }
      if (struct.isSetChannel()) {
        oprot.writeString(struct.channel);
      }
      if (struct.isSetDeviceName()) {
        oprot.writeString(struct.deviceName);
      }
      if (struct.isSetKernelVersion()) {
        oprot.writeString(struct.kernelVersion);
      }
      if (struct.isSetPushId()) {
        oprot.writeString(struct.pushId);
      }
      if (struct.isSetPhoneType()) {
        oprot.writeString(struct.phoneType);
      }
      if (struct.isSetPhoneNumber()) {
        oprot.writeString(struct.phoneNumber);
      }
      if (struct.isSetOs()) {
        oprot.writeString(struct.os);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
      if (struct.isSetSc()) {
        oprot.writeString(struct.sc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeviceView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.deviceUuid = iprot.readString();
        struct.setDeviceUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appVersion = iprot.readString();
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channel = iprot.readString();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.deviceName = iprot.readString();
        struct.setDeviceNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.kernelVersion = iprot.readString();
        struct.setKernelVersionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pushId = iprot.readString();
        struct.setPushIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.phoneType = iprot.readString();
        struct.setPhoneTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.phoneNumber = iprot.readString();
        struct.setPhoneNumberIsSet(true);
      }
      if (incoming.get(9)) {
        struct.os = iprot.readString();
        struct.setOsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sc = iprot.readString();
        struct.setScIsSet(true);
      }
    }
  }

}

