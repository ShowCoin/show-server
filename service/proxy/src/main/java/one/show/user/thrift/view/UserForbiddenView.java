/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserForbiddenView implements org.apache.thrift.TBase<UserForbiddenView, UserForbiddenView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserForbiddenView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FORBIDDENBY_FIELD_DESC = new org.apache.thrift.protocol.TField("forbiddenby", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserForbiddenViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserForbiddenViewTupleSchemeFactory());
  }

  public long id; // required
  public long uid; // required
  public int expireTime; // required
  public int action; // required
  public String forbiddenby; // required
  public int time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    UID((short)2, "uid"),
    EXPIRE_TIME((short)3, "expireTime"),
    ACTION((short)4, "action"),
    FORBIDDENBY((short)5, "forbiddenby"),
    TIME((short)6, "time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // UID
          return UID;
        case 3: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 4: // ACTION
          return ACTION;
        case 5: // FORBIDDENBY
          return FORBIDDENBY;
        case 6: // TIME
          return TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __EXPIRETIME_ISSET_ID = 2;
  private static final int __ACTION_ISSET_ID = 3;
  private static final int __TIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORBIDDENBY, new org.apache.thrift.meta_data.FieldMetaData("forbiddenby", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserForbiddenView.class, metaDataMap);
  }

  public UserForbiddenView() {
  }

  public UserForbiddenView(
    long id,
    long uid,
    int expireTime,
    int action,
    String forbiddenby,
    int time)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    this.action = action;
    setActionIsSet(true);
    this.forbiddenby = forbiddenby;
    this.time = time;
    setTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserForbiddenView(UserForbiddenView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.uid = other.uid;
    this.expireTime = other.expireTime;
    this.action = other.action;
    if (other.isSetForbiddenby()) {
      this.forbiddenby = other.forbiddenby;
    }
    this.time = other.time;
  }

  public UserForbiddenView deepCopy() {
    return new UserForbiddenView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUidIsSet(false);
    this.uid = 0;
    setExpireTimeIsSet(false);
    this.expireTime = 0;
    setActionIsSet(false);
    this.action = 0;
    this.forbiddenby = null;
    setTimeIsSet(false);
    this.time = 0;
  }

  public long getId() {
    return this.id;
  }

  public UserForbiddenView setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public UserForbiddenView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getExpireTime() {
    return this.expireTime;
  }

  public UserForbiddenView setExpireTime(int expireTime) {
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    return this;
  }

  public void unsetExpireTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  /** Returns true if field expireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  public void setExpireTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRETIME_ISSET_ID, value);
  }

  public int getAction() {
    return this.action;
  }

  public UserForbiddenView setAction(int action) {
    this.action = action;
    setActionIsSet(true);
    return this;
  }

  public void unsetAction() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTION_ISSET_ID);
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTION_ISSET_ID);
  }

  public void setActionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTION_ISSET_ID, value);
  }

  public String getForbiddenby() {
    return this.forbiddenby;
  }

  public UserForbiddenView setForbiddenby(String forbiddenby) {
    this.forbiddenby = forbiddenby;
    return this;
  }

  public void unsetForbiddenby() {
    this.forbiddenby = null;
  }

  /** Returns true if field forbiddenby is set (has been assigned a value) and false otherwise */
  public boolean isSetForbiddenby() {
    return this.forbiddenby != null;
  }

  public void setForbiddenbyIsSet(boolean value) {
    if (!value) {
      this.forbiddenby = null;
    }
  }

  public int getTime() {
    return this.time;
  }

  public UserForbiddenView setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpireTime();
      } else {
        setExpireTime((Integer)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((Integer)value);
      }
      break;

    case FORBIDDENBY:
      if (value == null) {
        unsetForbiddenby();
      } else {
        setForbiddenby((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case UID:
      return Long.valueOf(getUid());

    case EXPIRE_TIME:
      return Integer.valueOf(getExpireTime());

    case ACTION:
      return Integer.valueOf(getAction());

    case FORBIDDENBY:
      return getForbiddenby();

    case TIME:
      return Integer.valueOf(getTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case UID:
      return isSetUid();
    case EXPIRE_TIME:
      return isSetExpireTime();
    case ACTION:
      return isSetAction();
    case FORBIDDENBY:
      return isSetForbiddenby();
    case TIME:
      return isSetTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserForbiddenView)
      return this.equals((UserForbiddenView)that);
    return false;
  }

  public boolean equals(UserForbiddenView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_expireTime = true;
    boolean that_present_expireTime = true;
    if (this_present_expireTime || that_present_expireTime) {
      if (!(this_present_expireTime && that_present_expireTime))
        return false;
      if (this.expireTime != that.expireTime)
        return false;
    }

    boolean this_present_action = true;
    boolean that_present_action = true;
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (this.action != that.action)
        return false;
    }

    boolean this_present_forbiddenby = true && this.isSetForbiddenby();
    boolean that_present_forbiddenby = true && that.isSetForbiddenby();
    if (this_present_forbiddenby || that_present_forbiddenby) {
      if (!(this_present_forbiddenby && that_present_forbiddenby))
        return false;
      if (!this.forbiddenby.equals(that.forbiddenby))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserForbiddenView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserForbiddenView typedOther = (UserForbiddenView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireTime()).compareTo(typedOther.isSetExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, typedOther.expireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, typedOther.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForbiddenby()).compareTo(typedOther.isSetForbiddenby());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForbiddenby()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forbiddenby, typedOther.forbiddenby);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserForbiddenView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireTime:");
    sb.append(this.expireTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    sb.append(this.action);
    first = false;
    if (!first) sb.append(", ");
    sb.append("forbiddenby:");
    if (this.forbiddenby == null) {
      sb.append("null");
    } else {
      sb.append(this.forbiddenby);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserForbiddenViewStandardSchemeFactory implements SchemeFactory {
    public UserForbiddenViewStandardScheme getScheme() {
      return new UserForbiddenViewStandardScheme();
    }
  }

  private static class UserForbiddenViewStandardScheme extends StandardScheme<UserForbiddenView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserForbiddenView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expireTime = iprot.readI32();
              struct.setExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = iprot.readI32();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FORBIDDENBY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.forbiddenby = iprot.readString();
              struct.setForbiddenbyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserForbiddenView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
      oprot.writeI32(struct.expireTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_FIELD_DESC);
      oprot.writeI32(struct.action);
      oprot.writeFieldEnd();
      if (struct.forbiddenby != null) {
        oprot.writeFieldBegin(FORBIDDENBY_FIELD_DESC);
        oprot.writeString(struct.forbiddenby);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserForbiddenViewTupleSchemeFactory implements SchemeFactory {
    public UserForbiddenViewTupleScheme getScheme() {
      return new UserForbiddenViewTupleScheme();
    }
  }

  private static class UserForbiddenViewTupleScheme extends TupleScheme<UserForbiddenView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserForbiddenView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetExpireTime()) {
        optionals.set(2);
      }
      if (struct.isSetAction()) {
        optionals.set(3);
      }
      if (struct.isSetForbiddenby()) {
        optionals.set(4);
      }
      if (struct.isSetTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetExpireTime()) {
        oprot.writeI32(struct.expireTime);
      }
      if (struct.isSetAction()) {
        oprot.writeI32(struct.action);
      }
      if (struct.isSetForbiddenby()) {
        oprot.writeString(struct.forbiddenby);
      }
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserForbiddenView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expireTime = iprot.readI32();
        struct.setExpireTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.action = iprot.readI32();
        struct.setActionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.forbiddenby = iprot.readString();
        struct.setForbiddenbyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
    }
  }

}

