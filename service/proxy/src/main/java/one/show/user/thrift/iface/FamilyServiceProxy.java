/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FamilyServiceProxy {

  public interface Iface {

    public one.show.user.thrift.view.FamilyView findFamilyById(long familyId) throws org.apache.thrift.TException;

    public long saveFamily(one.show.user.thrift.view.FamilyView familyView) throws org.apache.thrift.TException;

    public void updateFamilyById(long familyId, Map<String,String> updateContent) throws org.apache.thrift.TException;

    public one.show.user.thrift.view.FamilyListView findFamilyList(Map<String,String> condition, int start, int count) throws org.apache.thrift.TException;

    public void saveFamilyMember(one.show.user.thrift.view.FamilyMemberView familyMemberView) throws org.apache.thrift.TException;

    public one.show.user.thrift.view.FamilyMemberListView findFamilyMemberListByFamilyId(long familyId, int start, int count) throws org.apache.thrift.TException;

    public void deleteFamilyMemberById(long familyId, long userId) throws org.apache.thrift.TException;

    public List<one.show.user.thrift.view.FamilyView> findByIds(List<Long> ids) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findFamilyById(long familyId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFamilyById_call> resultHandler) throws org.apache.thrift.TException;

    public void saveFamily(one.show.user.thrift.view.FamilyView familyView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveFamily_call> resultHandler) throws org.apache.thrift.TException;

    public void updateFamilyById(long familyId, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateFamilyById_call> resultHandler) throws org.apache.thrift.TException;

    public void findFamilyList(Map<String,String> condition, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFamilyList_call> resultHandler) throws org.apache.thrift.TException;

    public void saveFamilyMember(one.show.user.thrift.view.FamilyMemberView familyMemberView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveFamilyMember_call> resultHandler) throws org.apache.thrift.TException;

    public void findFamilyMemberListByFamilyId(long familyId, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFamilyMemberListByFamilyId_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteFamilyMemberById(long familyId, long userId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteFamilyMemberById_call> resultHandler) throws org.apache.thrift.TException;

    public void findByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findByIds_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public one.show.user.thrift.view.FamilyView findFamilyById(long familyId) throws org.apache.thrift.TException
    {
      send_findFamilyById(familyId);
      return recv_findFamilyById();
    }

    public void send_findFamilyById(long familyId) throws org.apache.thrift.TException
    {
      findFamilyById_args args = new findFamilyById_args();
      args.setFamilyId(familyId);
      sendBase("findFamilyById", args);
    }

    public one.show.user.thrift.view.FamilyView recv_findFamilyById() throws org.apache.thrift.TException
    {
      findFamilyById_result result = new findFamilyById_result();
      receiveBase(result, "findFamilyById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFamilyById failed: unknown result");
    }

    public long saveFamily(one.show.user.thrift.view.FamilyView familyView) throws org.apache.thrift.TException
    {
      send_saveFamily(familyView);
      return recv_saveFamily();
    }

    public void send_saveFamily(one.show.user.thrift.view.FamilyView familyView) throws org.apache.thrift.TException
    {
      saveFamily_args args = new saveFamily_args();
      args.setFamilyView(familyView);
      sendBase("saveFamily", args);
    }

    public long recv_saveFamily() throws org.apache.thrift.TException
    {
      saveFamily_result result = new saveFamily_result();
      receiveBase(result, "saveFamily");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveFamily failed: unknown result");
    }

    public void updateFamilyById(long familyId, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      send_updateFamilyById(familyId, updateContent);
      recv_updateFamilyById();
    }

    public void send_updateFamilyById(long familyId, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      updateFamilyById_args args = new updateFamilyById_args();
      args.setFamilyId(familyId);
      args.setUpdateContent(updateContent);
      sendBase("updateFamilyById", args);
    }

    public void recv_updateFamilyById() throws org.apache.thrift.TException
    {
      updateFamilyById_result result = new updateFamilyById_result();
      receiveBase(result, "updateFamilyById");
      return;
    }

    public one.show.user.thrift.view.FamilyListView findFamilyList(Map<String,String> condition, int start, int count) throws org.apache.thrift.TException
    {
      send_findFamilyList(condition, start, count);
      return recv_findFamilyList();
    }

    public void send_findFamilyList(Map<String,String> condition, int start, int count) throws org.apache.thrift.TException
    {
      findFamilyList_args args = new findFamilyList_args();
      args.setCondition(condition);
      args.setStart(start);
      args.setCount(count);
      sendBase("findFamilyList", args);
    }

    public one.show.user.thrift.view.FamilyListView recv_findFamilyList() throws org.apache.thrift.TException
    {
      findFamilyList_result result = new findFamilyList_result();
      receiveBase(result, "findFamilyList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFamilyList failed: unknown result");
    }

    public void saveFamilyMember(one.show.user.thrift.view.FamilyMemberView familyMemberView) throws org.apache.thrift.TException
    {
      send_saveFamilyMember(familyMemberView);
      recv_saveFamilyMember();
    }

    public void send_saveFamilyMember(one.show.user.thrift.view.FamilyMemberView familyMemberView) throws org.apache.thrift.TException
    {
      saveFamilyMember_args args = new saveFamilyMember_args();
      args.setFamilyMemberView(familyMemberView);
      sendBase("saveFamilyMember", args);
    }

    public void recv_saveFamilyMember() throws org.apache.thrift.TException
    {
      saveFamilyMember_result result = new saveFamilyMember_result();
      receiveBase(result, "saveFamilyMember");
      return;
    }

    public one.show.user.thrift.view.FamilyMemberListView findFamilyMemberListByFamilyId(long familyId, int start, int count) throws org.apache.thrift.TException
    {
      send_findFamilyMemberListByFamilyId(familyId, start, count);
      return recv_findFamilyMemberListByFamilyId();
    }

    public void send_findFamilyMemberListByFamilyId(long familyId, int start, int count) throws org.apache.thrift.TException
    {
      findFamilyMemberListByFamilyId_args args = new findFamilyMemberListByFamilyId_args();
      args.setFamilyId(familyId);
      args.setStart(start);
      args.setCount(count);
      sendBase("findFamilyMemberListByFamilyId", args);
    }

    public one.show.user.thrift.view.FamilyMemberListView recv_findFamilyMemberListByFamilyId() throws org.apache.thrift.TException
    {
      findFamilyMemberListByFamilyId_result result = new findFamilyMemberListByFamilyId_result();
      receiveBase(result, "findFamilyMemberListByFamilyId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFamilyMemberListByFamilyId failed: unknown result");
    }

    public void deleteFamilyMemberById(long familyId, long userId) throws org.apache.thrift.TException
    {
      send_deleteFamilyMemberById(familyId, userId);
      recv_deleteFamilyMemberById();
    }

    public void send_deleteFamilyMemberById(long familyId, long userId) throws org.apache.thrift.TException
    {
      deleteFamilyMemberById_args args = new deleteFamilyMemberById_args();
      args.setFamilyId(familyId);
      args.setUserId(userId);
      sendBase("deleteFamilyMemberById", args);
    }

    public void recv_deleteFamilyMemberById() throws org.apache.thrift.TException
    {
      deleteFamilyMemberById_result result = new deleteFamilyMemberById_result();
      receiveBase(result, "deleteFamilyMemberById");
      return;
    }

    public List<one.show.user.thrift.view.FamilyView> findByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      send_findByIds(ids);
      return recv_findByIds();
    }

    public void send_findByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      findByIds_args args = new findByIds_args();
      args.setIds(ids);
      sendBase("findByIds", args);
    }

    public List<one.show.user.thrift.view.FamilyView> recv_findByIds() throws org.apache.thrift.TException
    {
      findByIds_result result = new findByIds_result();
      receiveBase(result, "findByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByIds failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findFamilyById(long familyId, org.apache.thrift.async.AsyncMethodCallback<findFamilyById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFamilyById_call method_call = new findFamilyById_call(familyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFamilyById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long familyId;
      public findFamilyById_call(long familyId, org.apache.thrift.async.AsyncMethodCallback<findFamilyById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyId = familyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFamilyById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFamilyById_args args = new findFamilyById_args();
        args.setFamilyId(familyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.user.thrift.view.FamilyView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFamilyById();
      }
    }

    public void saveFamily(one.show.user.thrift.view.FamilyView familyView, org.apache.thrift.async.AsyncMethodCallback<saveFamily_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFamily_call method_call = new saveFamily_call(familyView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveFamily_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.user.thrift.view.FamilyView familyView;
      public saveFamily_call(one.show.user.thrift.view.FamilyView familyView, org.apache.thrift.async.AsyncMethodCallback<saveFamily_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyView = familyView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFamily", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFamily_args args = new saveFamily_args();
        args.setFamilyView(familyView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveFamily();
      }
    }

    public void updateFamilyById(long familyId, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateFamilyById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFamilyById_call method_call = new updateFamilyById_call(familyId, updateContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFamilyById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long familyId;
      private Map<String,String> updateContent;
      public updateFamilyById_call(long familyId, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateFamilyById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyId = familyId;
        this.updateContent = updateContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFamilyById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFamilyById_args args = new updateFamilyById_args();
        args.setFamilyId(familyId);
        args.setUpdateContent(updateContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateFamilyById();
      }
    }

    public void findFamilyList(Map<String,String> condition, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findFamilyList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFamilyList_call method_call = new findFamilyList_call(condition, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFamilyList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> condition;
      private int start;
      private int count;
      public findFamilyList_call(Map<String,String> condition, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findFamilyList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.condition = condition;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFamilyList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFamilyList_args args = new findFamilyList_args();
        args.setCondition(condition);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.user.thrift.view.FamilyListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFamilyList();
      }
    }

    public void saveFamilyMember(one.show.user.thrift.view.FamilyMemberView familyMemberView, org.apache.thrift.async.AsyncMethodCallback<saveFamilyMember_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFamilyMember_call method_call = new saveFamilyMember_call(familyMemberView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveFamilyMember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.user.thrift.view.FamilyMemberView familyMemberView;
      public saveFamilyMember_call(one.show.user.thrift.view.FamilyMemberView familyMemberView, org.apache.thrift.async.AsyncMethodCallback<saveFamilyMember_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyMemberView = familyMemberView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFamilyMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFamilyMember_args args = new saveFamilyMember_args();
        args.setFamilyMemberView(familyMemberView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveFamilyMember();
      }
    }

    public void findFamilyMemberListByFamilyId(long familyId, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findFamilyMemberListByFamilyId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFamilyMemberListByFamilyId_call method_call = new findFamilyMemberListByFamilyId_call(familyId, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFamilyMemberListByFamilyId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long familyId;
      private int start;
      private int count;
      public findFamilyMemberListByFamilyId_call(long familyId, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findFamilyMemberListByFamilyId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyId = familyId;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFamilyMemberListByFamilyId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFamilyMemberListByFamilyId_args args = new findFamilyMemberListByFamilyId_args();
        args.setFamilyId(familyId);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.user.thrift.view.FamilyMemberListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFamilyMemberListByFamilyId();
      }
    }

    public void deleteFamilyMemberById(long familyId, long userId, org.apache.thrift.async.AsyncMethodCallback<deleteFamilyMemberById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFamilyMemberById_call method_call = new deleteFamilyMemberById_call(familyId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFamilyMemberById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long familyId;
      private long userId;
      public deleteFamilyMemberById_call(long familyId, long userId, org.apache.thrift.async.AsyncMethodCallback<deleteFamilyMemberById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyId = familyId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFamilyMemberById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFamilyMemberById_args args = new deleteFamilyMemberById_args();
        args.setFamilyId(familyId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteFamilyMemberById();
      }
    }

    public void findByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback<findByIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByIds_call method_call = new findByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public findByIds_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback<findByIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByIds_args args = new findByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.user.thrift.view.FamilyView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByIds();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findFamilyById", new findFamilyById());
      processMap.put("saveFamily", new saveFamily());
      processMap.put("updateFamilyById", new updateFamilyById());
      processMap.put("findFamilyList", new findFamilyList());
      processMap.put("saveFamilyMember", new saveFamilyMember());
      processMap.put("findFamilyMemberListByFamilyId", new findFamilyMemberListByFamilyId());
      processMap.put("deleteFamilyMemberById", new deleteFamilyMemberById());
      processMap.put("findByIds", new findByIds());
      return processMap;
    }

    public static class findFamilyById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFamilyById_args> {
      public findFamilyById() {
        super("findFamilyById");
      }

      public findFamilyById_args getEmptyArgsInstance() {
        return new findFamilyById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFamilyById_result getResult(I iface, findFamilyById_args args) throws org.apache.thrift.TException {
        findFamilyById_result result = new findFamilyById_result();
        result.success = iface.findFamilyById(args.familyId);
        return result;
      }
    }

    public static class saveFamily<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveFamily_args> {
      public saveFamily() {
        super("saveFamily");
      }

      public saveFamily_args getEmptyArgsInstance() {
        return new saveFamily_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveFamily_result getResult(I iface, saveFamily_args args) throws org.apache.thrift.TException {
        saveFamily_result result = new saveFamily_result();
        result.success = iface.saveFamily(args.familyView);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateFamilyById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFamilyById_args> {
      public updateFamilyById() {
        super("updateFamilyById");
      }

      public updateFamilyById_args getEmptyArgsInstance() {
        return new updateFamilyById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFamilyById_result getResult(I iface, updateFamilyById_args args) throws org.apache.thrift.TException {
        updateFamilyById_result result = new updateFamilyById_result();
        iface.updateFamilyById(args.familyId, args.updateContent);
        return result;
      }
    }

    public static class findFamilyList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFamilyList_args> {
      public findFamilyList() {
        super("findFamilyList");
      }

      public findFamilyList_args getEmptyArgsInstance() {
        return new findFamilyList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFamilyList_result getResult(I iface, findFamilyList_args args) throws org.apache.thrift.TException {
        findFamilyList_result result = new findFamilyList_result();
        result.success = iface.findFamilyList(args.condition, args.start, args.count);
        return result;
      }
    }

    public static class saveFamilyMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveFamilyMember_args> {
      public saveFamilyMember() {
        super("saveFamilyMember");
      }

      public saveFamilyMember_args getEmptyArgsInstance() {
        return new saveFamilyMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveFamilyMember_result getResult(I iface, saveFamilyMember_args args) throws org.apache.thrift.TException {
        saveFamilyMember_result result = new saveFamilyMember_result();
        iface.saveFamilyMember(args.familyMemberView);
        return result;
      }
    }

    public static class findFamilyMemberListByFamilyId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFamilyMemberListByFamilyId_args> {
      public findFamilyMemberListByFamilyId() {
        super("findFamilyMemberListByFamilyId");
      }

      public findFamilyMemberListByFamilyId_args getEmptyArgsInstance() {
        return new findFamilyMemberListByFamilyId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFamilyMemberListByFamilyId_result getResult(I iface, findFamilyMemberListByFamilyId_args args) throws org.apache.thrift.TException {
        findFamilyMemberListByFamilyId_result result = new findFamilyMemberListByFamilyId_result();
        result.success = iface.findFamilyMemberListByFamilyId(args.familyId, args.start, args.count);
        return result;
      }
    }

    public static class deleteFamilyMemberById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFamilyMemberById_args> {
      public deleteFamilyMemberById() {
        super("deleteFamilyMemberById");
      }

      public deleteFamilyMemberById_args getEmptyArgsInstance() {
        return new deleteFamilyMemberById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFamilyMemberById_result getResult(I iface, deleteFamilyMemberById_args args) throws org.apache.thrift.TException {
        deleteFamilyMemberById_result result = new deleteFamilyMemberById_result();
        iface.deleteFamilyMemberById(args.familyId, args.userId);
        return result;
      }
    }

    public static class findByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByIds_args> {
      public findByIds() {
        super("findByIds");
      }

      public findByIds_args getEmptyArgsInstance() {
        return new findByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByIds_result getResult(I iface, findByIds_args args) throws org.apache.thrift.TException {
        findByIds_result result = new findByIds_result();
        result.success = iface.findByIds(args.ids);
        return result;
      }
    }

  }

  public static class findFamilyById_args implements org.apache.thrift.TBase<findFamilyById_args, findFamilyById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyById_args");

    private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyById_argsTupleSchemeFactory());
    }

    public long familyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_ID((short)1, "familyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_ID
            return FAMILY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FAMILYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyById_args.class, metaDataMap);
    }

    public findFamilyById_args() {
    }

    public findFamilyById_args(
      long familyId)
    {
      this();
      this.familyId = familyId;
      setFamilyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyById_args(findFamilyById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.familyId = other.familyId;
    }

    public findFamilyById_args deepCopy() {
      return new findFamilyById_args(this);
    }

    @Override
    public void clear() {
      setFamilyIdIsSet(false);
      this.familyId = 0;
    }

    public long getFamilyId() {
      return this.familyId;
    }

    public findFamilyById_args setFamilyId(long familyId) {
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      return this;
    }

    public void unsetFamilyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyId() {
      return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    public void setFamilyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_ID:
        if (value == null) {
          unsetFamilyId();
        } else {
          setFamilyId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_ID:
        return Long.valueOf(getFamilyId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_ID:
        return isSetFamilyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyById_args)
        return this.equals((findFamilyById_args)that);
      return false;
    }

    public boolean equals(findFamilyById_args that) {
      if (that == null)
        return false;

      boolean this_present_familyId = true;
      boolean that_present_familyId = true;
      if (this_present_familyId || that_present_familyId) {
        if (!(this_present_familyId && that_present_familyId))
          return false;
        if (this.familyId != that.familyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyById_args typedOther = (findFamilyById_args)other;

      lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyById_args(");
      boolean first = true;

      sb.append("familyId:");
      sb.append(this.familyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyById_argsStandardSchemeFactory implements SchemeFactory {
      public findFamilyById_argsStandardScheme getScheme() {
        return new findFamilyById_argsStandardScheme();
      }
    }

    private static class findFamilyById_argsStandardScheme extends StandardScheme<findFamilyById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.familyId = iprot.readI64();
                struct.setFamilyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
        oprot.writeI64(struct.familyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyById_argsTupleSchemeFactory implements SchemeFactory {
      public findFamilyById_argsTupleScheme getScheme() {
        return new findFamilyById_argsTupleScheme();
      }
    }

    private static class findFamilyById_argsTupleScheme extends TupleScheme<findFamilyById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFamilyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFamilyId()) {
          oprot.writeI64(struct.familyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.familyId = iprot.readI64();
          struct.setFamilyIdIsSet(true);
        }
      }
    }

  }

  public static class findFamilyById_result implements org.apache.thrift.TBase<findFamilyById_result, findFamilyById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyById_resultTupleSchemeFactory());
    }

    public one.show.user.thrift.view.FamilyView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.FamilyView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyById_result.class, metaDataMap);
    }

    public findFamilyById_result() {
    }

    public findFamilyById_result(
      one.show.user.thrift.view.FamilyView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyById_result(findFamilyById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.user.thrift.view.FamilyView(other.success);
      }
    }

    public findFamilyById_result deepCopy() {
      return new findFamilyById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.user.thrift.view.FamilyView getSuccess() {
      return this.success;
    }

    public findFamilyById_result setSuccess(one.show.user.thrift.view.FamilyView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.user.thrift.view.FamilyView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyById_result)
        return this.equals((findFamilyById_result)that);
      return false;
    }

    public boolean equals(findFamilyById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyById_result typedOther = (findFamilyById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyById_resultStandardSchemeFactory implements SchemeFactory {
      public findFamilyById_resultStandardScheme getScheme() {
        return new findFamilyById_resultStandardScheme();
      }
    }

    private static class findFamilyById_resultStandardScheme extends StandardScheme<findFamilyById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.user.thrift.view.FamilyView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyById_resultTupleSchemeFactory implements SchemeFactory {
      public findFamilyById_resultTupleScheme getScheme() {
        return new findFamilyById_resultTupleScheme();
      }
    }

    private static class findFamilyById_resultTupleScheme extends TupleScheme<findFamilyById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.user.thrift.view.FamilyView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveFamily_args implements org.apache.thrift.TBase<saveFamily_args, saveFamily_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFamily_args");

    private static final org.apache.thrift.protocol.TField FAMILY_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("familyView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFamily_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFamily_argsTupleSchemeFactory());
    }

    public one.show.user.thrift.view.FamilyView familyView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_VIEW((short)1, "familyView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_VIEW
            return FAMILY_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_VIEW, new org.apache.thrift.meta_data.FieldMetaData("familyView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.FamilyView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFamily_args.class, metaDataMap);
    }

    public saveFamily_args() {
    }

    public saveFamily_args(
      one.show.user.thrift.view.FamilyView familyView)
    {
      this();
      this.familyView = familyView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFamily_args(saveFamily_args other) {
      if (other.isSetFamilyView()) {
        this.familyView = new one.show.user.thrift.view.FamilyView(other.familyView);
      }
    }

    public saveFamily_args deepCopy() {
      return new saveFamily_args(this);
    }

    @Override
    public void clear() {
      this.familyView = null;
    }

    public one.show.user.thrift.view.FamilyView getFamilyView() {
      return this.familyView;
    }

    public saveFamily_args setFamilyView(one.show.user.thrift.view.FamilyView familyView) {
      this.familyView = familyView;
      return this;
    }

    public void unsetFamilyView() {
      this.familyView = null;
    }

    /** Returns true if field familyView is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyView() {
      return this.familyView != null;
    }

    public void setFamilyViewIsSet(boolean value) {
      if (!value) {
        this.familyView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_VIEW:
        if (value == null) {
          unsetFamilyView();
        } else {
          setFamilyView((one.show.user.thrift.view.FamilyView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_VIEW:
        return getFamilyView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_VIEW:
        return isSetFamilyView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFamily_args)
        return this.equals((saveFamily_args)that);
      return false;
    }

    public boolean equals(saveFamily_args that) {
      if (that == null)
        return false;

      boolean this_present_familyView = true && this.isSetFamilyView();
      boolean that_present_familyView = true && that.isSetFamilyView();
      if (this_present_familyView || that_present_familyView) {
        if (!(this_present_familyView && that_present_familyView))
          return false;
        if (!this.familyView.equals(that.familyView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFamily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFamily_args typedOther = (saveFamily_args)other;

      lastComparison = Boolean.valueOf(isSetFamilyView()).compareTo(typedOther.isSetFamilyView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyView, typedOther.familyView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFamily_args(");
      boolean first = true;

      sb.append("familyView:");
      if (this.familyView == null) {
        sb.append("null");
      } else {
        sb.append(this.familyView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (familyView != null) {
        familyView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFamily_argsStandardSchemeFactory implements SchemeFactory {
      public saveFamily_argsStandardScheme getScheme() {
        return new saveFamily_argsStandardScheme();
      }
    }

    private static class saveFamily_argsStandardScheme extends StandardScheme<saveFamily_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFamily_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.familyView = new one.show.user.thrift.view.FamilyView();
                struct.familyView.read(iprot);
                struct.setFamilyViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFamily_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.familyView != null) {
          oprot.writeFieldBegin(FAMILY_VIEW_FIELD_DESC);
          struct.familyView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFamily_argsTupleSchemeFactory implements SchemeFactory {
      public saveFamily_argsTupleScheme getScheme() {
        return new saveFamily_argsTupleScheme();
      }
    }

    private static class saveFamily_argsTupleScheme extends TupleScheme<saveFamily_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFamily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFamilyView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFamilyView()) {
          struct.familyView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFamily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.familyView = new one.show.user.thrift.view.FamilyView();
          struct.familyView.read(iprot);
          struct.setFamilyViewIsSet(true);
        }
      }
    }

  }

  public static class saveFamily_result implements org.apache.thrift.TBase<saveFamily_result, saveFamily_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFamily_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFamily_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFamily_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFamily_result.class, metaDataMap);
    }

    public saveFamily_result() {
    }

    public saveFamily_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFamily_result(saveFamily_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveFamily_result deepCopy() {
      return new saveFamily_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public saveFamily_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFamily_result)
        return this.equals((saveFamily_result)that);
      return false;
    }

    public boolean equals(saveFamily_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFamily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFamily_result typedOther = (saveFamily_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFamily_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFamily_resultStandardSchemeFactory implements SchemeFactory {
      public saveFamily_resultStandardScheme getScheme() {
        return new saveFamily_resultStandardScheme();
      }
    }

    private static class saveFamily_resultStandardScheme extends StandardScheme<saveFamily_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFamily_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFamily_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFamily_resultTupleSchemeFactory implements SchemeFactory {
      public saveFamily_resultTupleScheme getScheme() {
        return new saveFamily_resultTupleScheme();
      }
    }

    private static class saveFamily_resultTupleScheme extends TupleScheme<saveFamily_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFamily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFamily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFamilyById_args implements org.apache.thrift.TBase<updateFamilyById_args, updateFamilyById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFamilyById_args");

    private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateContent", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFamilyById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFamilyById_argsTupleSchemeFactory());
    }

    public long familyId; // required
    public Map<String,String> updateContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_ID((short)1, "familyId"),
      UPDATE_CONTENT((short)2, "updateContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_ID
            return FAMILY_ID;
          case 2: // UPDATE_CONTENT
            return UPDATE_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FAMILYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UPDATE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("updateContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFamilyById_args.class, metaDataMap);
    }

    public updateFamilyById_args() {
    }

    public updateFamilyById_args(
      long familyId,
      Map<String,String> updateContent)
    {
      this();
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      this.updateContent = updateContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFamilyById_args(updateFamilyById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.familyId = other.familyId;
      if (other.isSetUpdateContent()) {
        Map<String,String> __this__updateContent = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.updateContent.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__updateContent_copy_key = other_element_key;

          String __this__updateContent_copy_value = other_element_value;

          __this__updateContent.put(__this__updateContent_copy_key, __this__updateContent_copy_value);
        }
        this.updateContent = __this__updateContent;
      }
    }

    public updateFamilyById_args deepCopy() {
      return new updateFamilyById_args(this);
    }

    @Override
    public void clear() {
      setFamilyIdIsSet(false);
      this.familyId = 0;
      this.updateContent = null;
    }

    public long getFamilyId() {
      return this.familyId;
    }

    public updateFamilyById_args setFamilyId(long familyId) {
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      return this;
    }

    public void unsetFamilyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyId() {
      return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    public void setFamilyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
    }

    public int getUpdateContentSize() {
      return (this.updateContent == null) ? 0 : this.updateContent.size();
    }

    public void putToUpdateContent(String key, String val) {
      if (this.updateContent == null) {
        this.updateContent = new HashMap<String,String>();
      }
      this.updateContent.put(key, val);
    }

    public Map<String,String> getUpdateContent() {
      return this.updateContent;
    }

    public updateFamilyById_args setUpdateContent(Map<String,String> updateContent) {
      this.updateContent = updateContent;
      return this;
    }

    public void unsetUpdateContent() {
      this.updateContent = null;
    }

    /** Returns true if field updateContent is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateContent() {
      return this.updateContent != null;
    }

    public void setUpdateContentIsSet(boolean value) {
      if (!value) {
        this.updateContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_ID:
        if (value == null) {
          unsetFamilyId();
        } else {
          setFamilyId((Long)value);
        }
        break;

      case UPDATE_CONTENT:
        if (value == null) {
          unsetUpdateContent();
        } else {
          setUpdateContent((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_ID:
        return Long.valueOf(getFamilyId());

      case UPDATE_CONTENT:
        return getUpdateContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_ID:
        return isSetFamilyId();
      case UPDATE_CONTENT:
        return isSetUpdateContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFamilyById_args)
        return this.equals((updateFamilyById_args)that);
      return false;
    }

    public boolean equals(updateFamilyById_args that) {
      if (that == null)
        return false;

      boolean this_present_familyId = true;
      boolean that_present_familyId = true;
      if (this_present_familyId || that_present_familyId) {
        if (!(this_present_familyId && that_present_familyId))
          return false;
        if (this.familyId != that.familyId)
          return false;
      }

      boolean this_present_updateContent = true && this.isSetUpdateContent();
      boolean that_present_updateContent = true && that.isSetUpdateContent();
      if (this_present_updateContent || that_present_updateContent) {
        if (!(this_present_updateContent && that_present_updateContent))
          return false;
        if (!this.updateContent.equals(that.updateContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFamilyById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFamilyById_args typedOther = (updateFamilyById_args)other;

      lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateContent()).compareTo(typedOther.isSetUpdateContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateContent, typedOther.updateContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFamilyById_args(");
      boolean first = true;

      sb.append("familyId:");
      sb.append(this.familyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateContent:");
      if (this.updateContent == null) {
        sb.append("null");
      } else {
        sb.append(this.updateContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFamilyById_argsStandardSchemeFactory implements SchemeFactory {
      public updateFamilyById_argsStandardScheme getScheme() {
        return new updateFamilyById_argsStandardScheme();
      }
    }

    private static class updateFamilyById_argsStandardScheme extends StandardScheme<updateFamilyById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFamilyById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.familyId = iprot.readI64();
                struct.setFamilyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATE_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.updateContent = new HashMap<String,String>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2; // required
                    String _val3; // required
                    _key2 = iprot.readString();
                    _val3 = iprot.readString();
                    struct.updateContent.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpdateContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFamilyById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
        oprot.writeI64(struct.familyId);
        oprot.writeFieldEnd();
        if (struct.updateContent != null) {
          oprot.writeFieldBegin(UPDATE_CONTENT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.updateContent.size()));
            for (Map.Entry<String, String> _iter4 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFamilyById_argsTupleSchemeFactory implements SchemeFactory {
      public updateFamilyById_argsTupleScheme getScheme() {
        return new updateFamilyById_argsTupleScheme();
      }
    }

    private static class updateFamilyById_argsTupleScheme extends TupleScheme<updateFamilyById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFamilyById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFamilyId()) {
          optionals.set(0);
        }
        if (struct.isSetUpdateContent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFamilyId()) {
          oprot.writeI64(struct.familyId);
        }
        if (struct.isSetUpdateContent()) {
          {
            oprot.writeI32(struct.updateContent.size());
            for (Map.Entry<String, String> _iter5 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFamilyById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.familyId = iprot.readI64();
          struct.setFamilyIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.updateContent = new HashMap<String,String>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8; // required
              String _val9; // required
              _key8 = iprot.readString();
              _val9 = iprot.readString();
              struct.updateContent.put(_key8, _val9);
            }
          }
          struct.setUpdateContentIsSet(true);
        }
      }
    }

  }

  public static class updateFamilyById_result implements org.apache.thrift.TBase<updateFamilyById_result, updateFamilyById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFamilyById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFamilyById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFamilyById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFamilyById_result.class, metaDataMap);
    }

    public updateFamilyById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFamilyById_result(updateFamilyById_result other) {
    }

    public updateFamilyById_result deepCopy() {
      return new updateFamilyById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFamilyById_result)
        return this.equals((updateFamilyById_result)that);
      return false;
    }

    public boolean equals(updateFamilyById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFamilyById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFamilyById_result typedOther = (updateFamilyById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFamilyById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFamilyById_resultStandardSchemeFactory implements SchemeFactory {
      public updateFamilyById_resultStandardScheme getScheme() {
        return new updateFamilyById_resultStandardScheme();
      }
    }

    private static class updateFamilyById_resultStandardScheme extends StandardScheme<updateFamilyById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFamilyById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFamilyById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFamilyById_resultTupleSchemeFactory implements SchemeFactory {
      public updateFamilyById_resultTupleScheme getScheme() {
        return new updateFamilyById_resultTupleScheme();
      }
    }

    private static class updateFamilyById_resultTupleScheme extends TupleScheme<updateFamilyById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFamilyById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFamilyById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findFamilyList_args implements org.apache.thrift.TBase<findFamilyList_args, findFamilyList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyList_args");

    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyList_argsTupleSchemeFactory());
    }

    public Map<String,String> condition; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONDITION((short)1, "condition"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONDITION
            return CONDITION;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyList_args.class, metaDataMap);
    }

    public findFamilyList_args() {
    }

    public findFamilyList_args(
      Map<String,String> condition,
      int start,
      int count)
    {
      this();
      this.condition = condition;
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyList_args(findFamilyList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCondition()) {
        Map<String,String> __this__condition = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.condition.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__condition_copy_key = other_element_key;

          String __this__condition_copy_value = other_element_value;

          __this__condition.put(__this__condition_copy_key, __this__condition_copy_value);
        }
        this.condition = __this__condition;
      }
      this.start = other.start;
      this.count = other.count;
    }

    public findFamilyList_args deepCopy() {
      return new findFamilyList_args(this);
    }

    @Override
    public void clear() {
      this.condition = null;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getConditionSize() {
      return (this.condition == null) ? 0 : this.condition.size();
    }

    public void putToCondition(String key, String val) {
      if (this.condition == null) {
        this.condition = new HashMap<String,String>();
      }
      this.condition.put(key, val);
    }

    public Map<String,String> getCondition() {
      return this.condition;
    }

    public findFamilyList_args setCondition(Map<String,String> condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public findFamilyList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findFamilyList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITION:
        return getCondition();

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONDITION:
        return isSetCondition();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyList_args)
        return this.equals((findFamilyList_args)that);
      return false;
    }

    public boolean equals(findFamilyList_args that) {
      if (that == null)
        return false;

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyList_args typedOther = (findFamilyList_args)other;

      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(typedOther.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, typedOther.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyList_args(");
      boolean first = true;

      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyList_argsStandardSchemeFactory implements SchemeFactory {
      public findFamilyList_argsStandardScheme getScheme() {
        return new findFamilyList_argsStandardScheme();
      }
    }

    private static class findFamilyList_argsStandardScheme extends StandardScheme<findFamilyList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.condition = new HashMap<String,String>(2*_map10.size);
                  for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                  {
                    String _key12; // required
                    String _val13; // required
                    _key12 = iprot.readString();
                    _val13 = iprot.readString();
                    struct.condition.put(_key12, _val13);
                  }
                  iprot.readMapEnd();
                }
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.condition.size()));
            for (Map.Entry<String, String> _iter14 : struct.condition.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyList_argsTupleSchemeFactory implements SchemeFactory {
      public findFamilyList_argsTupleScheme getScheme() {
        return new findFamilyList_argsTupleScheme();
      }
    }

    private static class findFamilyList_argsTupleScheme extends TupleScheme<findFamilyList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCondition()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCondition()) {
          {
            oprot.writeI32(struct.condition.size());
            for (Map.Entry<String, String> _iter15 : struct.condition.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.condition = new HashMap<String,String>(2*_map16.size);
            for (int _i17 = 0; _i17 < _map16.size; ++_i17)
            {
              String _key18; // required
              String _val19; // required
              _key18 = iprot.readString();
              _val19 = iprot.readString();
              struct.condition.put(_key18, _val19);
            }
          }
          struct.setConditionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findFamilyList_result implements org.apache.thrift.TBase<findFamilyList_result, findFamilyList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyList_resultTupleSchemeFactory());
    }

    public one.show.user.thrift.view.FamilyListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.FamilyListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyList_result.class, metaDataMap);
    }

    public findFamilyList_result() {
    }

    public findFamilyList_result(
      one.show.user.thrift.view.FamilyListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyList_result(findFamilyList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.user.thrift.view.FamilyListView(other.success);
      }
    }

    public findFamilyList_result deepCopy() {
      return new findFamilyList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.user.thrift.view.FamilyListView getSuccess() {
      return this.success;
    }

    public findFamilyList_result setSuccess(one.show.user.thrift.view.FamilyListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.user.thrift.view.FamilyListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyList_result)
        return this.equals((findFamilyList_result)that);
      return false;
    }

    public boolean equals(findFamilyList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyList_result typedOther = (findFamilyList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyList_resultStandardSchemeFactory implements SchemeFactory {
      public findFamilyList_resultStandardScheme getScheme() {
        return new findFamilyList_resultStandardScheme();
      }
    }

    private static class findFamilyList_resultStandardScheme extends StandardScheme<findFamilyList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.user.thrift.view.FamilyListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyList_resultTupleSchemeFactory implements SchemeFactory {
      public findFamilyList_resultTupleScheme getScheme() {
        return new findFamilyList_resultTupleScheme();
      }
    }

    private static class findFamilyList_resultTupleScheme extends TupleScheme<findFamilyList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.user.thrift.view.FamilyListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveFamilyMember_args implements org.apache.thrift.TBase<saveFamilyMember_args, saveFamilyMember_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFamilyMember_args");

    private static final org.apache.thrift.protocol.TField FAMILY_MEMBER_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("familyMemberView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFamilyMember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFamilyMember_argsTupleSchemeFactory());
    }

    public one.show.user.thrift.view.FamilyMemberView familyMemberView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_MEMBER_VIEW((short)1, "familyMemberView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_MEMBER_VIEW
            return FAMILY_MEMBER_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_MEMBER_VIEW, new org.apache.thrift.meta_data.FieldMetaData("familyMemberView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.FamilyMemberView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFamilyMember_args.class, metaDataMap);
    }

    public saveFamilyMember_args() {
    }

    public saveFamilyMember_args(
      one.show.user.thrift.view.FamilyMemberView familyMemberView)
    {
      this();
      this.familyMemberView = familyMemberView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFamilyMember_args(saveFamilyMember_args other) {
      if (other.isSetFamilyMemberView()) {
        this.familyMemberView = new one.show.user.thrift.view.FamilyMemberView(other.familyMemberView);
      }
    }

    public saveFamilyMember_args deepCopy() {
      return new saveFamilyMember_args(this);
    }

    @Override
    public void clear() {
      this.familyMemberView = null;
    }

    public one.show.user.thrift.view.FamilyMemberView getFamilyMemberView() {
      return this.familyMemberView;
    }

    public saveFamilyMember_args setFamilyMemberView(one.show.user.thrift.view.FamilyMemberView familyMemberView) {
      this.familyMemberView = familyMemberView;
      return this;
    }

    public void unsetFamilyMemberView() {
      this.familyMemberView = null;
    }

    /** Returns true if field familyMemberView is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyMemberView() {
      return this.familyMemberView != null;
    }

    public void setFamilyMemberViewIsSet(boolean value) {
      if (!value) {
        this.familyMemberView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_MEMBER_VIEW:
        if (value == null) {
          unsetFamilyMemberView();
        } else {
          setFamilyMemberView((one.show.user.thrift.view.FamilyMemberView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_MEMBER_VIEW:
        return getFamilyMemberView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_MEMBER_VIEW:
        return isSetFamilyMemberView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFamilyMember_args)
        return this.equals((saveFamilyMember_args)that);
      return false;
    }

    public boolean equals(saveFamilyMember_args that) {
      if (that == null)
        return false;

      boolean this_present_familyMemberView = true && this.isSetFamilyMemberView();
      boolean that_present_familyMemberView = true && that.isSetFamilyMemberView();
      if (this_present_familyMemberView || that_present_familyMemberView) {
        if (!(this_present_familyMemberView && that_present_familyMemberView))
          return false;
        if (!this.familyMemberView.equals(that.familyMemberView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFamilyMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFamilyMember_args typedOther = (saveFamilyMember_args)other;

      lastComparison = Boolean.valueOf(isSetFamilyMemberView()).compareTo(typedOther.isSetFamilyMemberView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyMemberView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyMemberView, typedOther.familyMemberView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFamilyMember_args(");
      boolean first = true;

      sb.append("familyMemberView:");
      if (this.familyMemberView == null) {
        sb.append("null");
      } else {
        sb.append(this.familyMemberView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (familyMemberView != null) {
        familyMemberView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFamilyMember_argsStandardSchemeFactory implements SchemeFactory {
      public saveFamilyMember_argsStandardScheme getScheme() {
        return new saveFamilyMember_argsStandardScheme();
      }
    }

    private static class saveFamilyMember_argsStandardScheme extends StandardScheme<saveFamilyMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFamilyMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_MEMBER_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.familyMemberView = new one.show.user.thrift.view.FamilyMemberView();
                struct.familyMemberView.read(iprot);
                struct.setFamilyMemberViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFamilyMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.familyMemberView != null) {
          oprot.writeFieldBegin(FAMILY_MEMBER_VIEW_FIELD_DESC);
          struct.familyMemberView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFamilyMember_argsTupleSchemeFactory implements SchemeFactory {
      public saveFamilyMember_argsTupleScheme getScheme() {
        return new saveFamilyMember_argsTupleScheme();
      }
    }

    private static class saveFamilyMember_argsTupleScheme extends TupleScheme<saveFamilyMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFamilyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFamilyMemberView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFamilyMemberView()) {
          struct.familyMemberView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFamilyMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.familyMemberView = new one.show.user.thrift.view.FamilyMemberView();
          struct.familyMemberView.read(iprot);
          struct.setFamilyMemberViewIsSet(true);
        }
      }
    }

  }

  public static class saveFamilyMember_result implements org.apache.thrift.TBase<saveFamilyMember_result, saveFamilyMember_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFamilyMember_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFamilyMember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFamilyMember_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFamilyMember_result.class, metaDataMap);
    }

    public saveFamilyMember_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFamilyMember_result(saveFamilyMember_result other) {
    }

    public saveFamilyMember_result deepCopy() {
      return new saveFamilyMember_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFamilyMember_result)
        return this.equals((saveFamilyMember_result)that);
      return false;
    }

    public boolean equals(saveFamilyMember_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFamilyMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFamilyMember_result typedOther = (saveFamilyMember_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFamilyMember_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFamilyMember_resultStandardSchemeFactory implements SchemeFactory {
      public saveFamilyMember_resultStandardScheme getScheme() {
        return new saveFamilyMember_resultStandardScheme();
      }
    }

    private static class saveFamilyMember_resultStandardScheme extends StandardScheme<saveFamilyMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFamilyMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFamilyMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFamilyMember_resultTupleSchemeFactory implements SchemeFactory {
      public saveFamilyMember_resultTupleScheme getScheme() {
        return new saveFamilyMember_resultTupleScheme();
      }
    }

    private static class saveFamilyMember_resultTupleScheme extends TupleScheme<saveFamilyMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFamilyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFamilyMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findFamilyMemberListByFamilyId_args implements org.apache.thrift.TBase<findFamilyMemberListByFamilyId_args, findFamilyMemberListByFamilyId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyMemberListByFamilyId_args");

    private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyMemberListByFamilyId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyMemberListByFamilyId_argsTupleSchemeFactory());
    }

    public long familyId; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_ID((short)1, "familyId"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_ID
            return FAMILY_ID;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FAMILYID_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyMemberListByFamilyId_args.class, metaDataMap);
    }

    public findFamilyMemberListByFamilyId_args() {
    }

    public findFamilyMemberListByFamilyId_args(
      long familyId,
      int start,
      int count)
    {
      this();
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyMemberListByFamilyId_args(findFamilyMemberListByFamilyId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.familyId = other.familyId;
      this.start = other.start;
      this.count = other.count;
    }

    public findFamilyMemberListByFamilyId_args deepCopy() {
      return new findFamilyMemberListByFamilyId_args(this);
    }

    @Override
    public void clear() {
      setFamilyIdIsSet(false);
      this.familyId = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getFamilyId() {
      return this.familyId;
    }

    public findFamilyMemberListByFamilyId_args setFamilyId(long familyId) {
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      return this;
    }

    public void unsetFamilyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyId() {
      return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    public void setFamilyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findFamilyMemberListByFamilyId_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findFamilyMemberListByFamilyId_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_ID:
        if (value == null) {
          unsetFamilyId();
        } else {
          setFamilyId((Long)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_ID:
        return Long.valueOf(getFamilyId());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_ID:
        return isSetFamilyId();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyMemberListByFamilyId_args)
        return this.equals((findFamilyMemberListByFamilyId_args)that);
      return false;
    }

    public boolean equals(findFamilyMemberListByFamilyId_args that) {
      if (that == null)
        return false;

      boolean this_present_familyId = true;
      boolean that_present_familyId = true;
      if (this_present_familyId || that_present_familyId) {
        if (!(this_present_familyId && that_present_familyId))
          return false;
        if (this.familyId != that.familyId)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyMemberListByFamilyId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyMemberListByFamilyId_args typedOther = (findFamilyMemberListByFamilyId_args)other;

      lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyMemberListByFamilyId_args(");
      boolean first = true;

      sb.append("familyId:");
      sb.append(this.familyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyMemberListByFamilyId_argsStandardSchemeFactory implements SchemeFactory {
      public findFamilyMemberListByFamilyId_argsStandardScheme getScheme() {
        return new findFamilyMemberListByFamilyId_argsStandardScheme();
      }
    }

    private static class findFamilyMemberListByFamilyId_argsStandardScheme extends StandardScheme<findFamilyMemberListByFamilyId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyMemberListByFamilyId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.familyId = iprot.readI64();
                struct.setFamilyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyMemberListByFamilyId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
        oprot.writeI64(struct.familyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyMemberListByFamilyId_argsTupleSchemeFactory implements SchemeFactory {
      public findFamilyMemberListByFamilyId_argsTupleScheme getScheme() {
        return new findFamilyMemberListByFamilyId_argsTupleScheme();
      }
    }

    private static class findFamilyMemberListByFamilyId_argsTupleScheme extends TupleScheme<findFamilyMemberListByFamilyId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyMemberListByFamilyId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFamilyId()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFamilyId()) {
          oprot.writeI64(struct.familyId);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyMemberListByFamilyId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.familyId = iprot.readI64();
          struct.setFamilyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findFamilyMemberListByFamilyId_result implements org.apache.thrift.TBase<findFamilyMemberListByFamilyId_result, findFamilyMemberListByFamilyId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyMemberListByFamilyId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyMemberListByFamilyId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyMemberListByFamilyId_resultTupleSchemeFactory());
    }

    public one.show.user.thrift.view.FamilyMemberListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.FamilyMemberListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyMemberListByFamilyId_result.class, metaDataMap);
    }

    public findFamilyMemberListByFamilyId_result() {
    }

    public findFamilyMemberListByFamilyId_result(
      one.show.user.thrift.view.FamilyMemberListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyMemberListByFamilyId_result(findFamilyMemberListByFamilyId_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.user.thrift.view.FamilyMemberListView(other.success);
      }
    }

    public findFamilyMemberListByFamilyId_result deepCopy() {
      return new findFamilyMemberListByFamilyId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.user.thrift.view.FamilyMemberListView getSuccess() {
      return this.success;
    }

    public findFamilyMemberListByFamilyId_result setSuccess(one.show.user.thrift.view.FamilyMemberListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.user.thrift.view.FamilyMemberListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyMemberListByFamilyId_result)
        return this.equals((findFamilyMemberListByFamilyId_result)that);
      return false;
    }

    public boolean equals(findFamilyMemberListByFamilyId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyMemberListByFamilyId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyMemberListByFamilyId_result typedOther = (findFamilyMemberListByFamilyId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyMemberListByFamilyId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyMemberListByFamilyId_resultStandardSchemeFactory implements SchemeFactory {
      public findFamilyMemberListByFamilyId_resultStandardScheme getScheme() {
        return new findFamilyMemberListByFamilyId_resultStandardScheme();
      }
    }

    private static class findFamilyMemberListByFamilyId_resultStandardScheme extends StandardScheme<findFamilyMemberListByFamilyId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyMemberListByFamilyId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.user.thrift.view.FamilyMemberListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyMemberListByFamilyId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyMemberListByFamilyId_resultTupleSchemeFactory implements SchemeFactory {
      public findFamilyMemberListByFamilyId_resultTupleScheme getScheme() {
        return new findFamilyMemberListByFamilyId_resultTupleScheme();
      }
    }

    private static class findFamilyMemberListByFamilyId_resultTupleScheme extends TupleScheme<findFamilyMemberListByFamilyId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyMemberListByFamilyId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyMemberListByFamilyId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.user.thrift.view.FamilyMemberListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteFamilyMemberById_args implements org.apache.thrift.TBase<deleteFamilyMemberById_args, deleteFamilyMemberById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFamilyMemberById_args");

    private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFamilyMemberById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFamilyMemberById_argsTupleSchemeFactory());
    }

    public long familyId; // required
    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_ID((short)1, "familyId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_ID
            return FAMILY_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FAMILYID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFamilyMemberById_args.class, metaDataMap);
    }

    public deleteFamilyMemberById_args() {
    }

    public deleteFamilyMemberById_args(
      long familyId,
      long userId)
    {
      this();
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFamilyMemberById_args(deleteFamilyMemberById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.familyId = other.familyId;
      this.userId = other.userId;
    }

    public deleteFamilyMemberById_args deepCopy() {
      return new deleteFamilyMemberById_args(this);
    }

    @Override
    public void clear() {
      setFamilyIdIsSet(false);
      this.familyId = 0;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public long getFamilyId() {
      return this.familyId;
    }

    public deleteFamilyMemberById_args setFamilyId(long familyId) {
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      return this;
    }

    public void unsetFamilyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyId() {
      return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    public void setFamilyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
    }

    public long getUserId() {
      return this.userId;
    }

    public deleteFamilyMemberById_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_ID:
        if (value == null) {
          unsetFamilyId();
        } else {
          setFamilyId((Long)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_ID:
        return Long.valueOf(getFamilyId());

      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_ID:
        return isSetFamilyId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFamilyMemberById_args)
        return this.equals((deleteFamilyMemberById_args)that);
      return false;
    }

    public boolean equals(deleteFamilyMemberById_args that) {
      if (that == null)
        return false;

      boolean this_present_familyId = true;
      boolean that_present_familyId = true;
      if (this_present_familyId || that_present_familyId) {
        if (!(this_present_familyId && that_present_familyId))
          return false;
        if (this.familyId != that.familyId)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteFamilyMemberById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteFamilyMemberById_args typedOther = (deleteFamilyMemberById_args)other;

      lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFamilyMemberById_args(");
      boolean first = true;

      sb.append("familyId:");
      sb.append(this.familyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFamilyMemberById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFamilyMemberById_argsStandardScheme getScheme() {
        return new deleteFamilyMemberById_argsStandardScheme();
      }
    }

    private static class deleteFamilyMemberById_argsStandardScheme extends StandardScheme<deleteFamilyMemberById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFamilyMemberById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.familyId = iprot.readI64();
                struct.setFamilyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFamilyMemberById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
        oprot.writeI64(struct.familyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFamilyMemberById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFamilyMemberById_argsTupleScheme getScheme() {
        return new deleteFamilyMemberById_argsTupleScheme();
      }
    }

    private static class deleteFamilyMemberById_argsTupleScheme extends TupleScheme<deleteFamilyMemberById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFamilyMemberById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFamilyId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFamilyId()) {
          oprot.writeI64(struct.familyId);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFamilyMemberById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.familyId = iprot.readI64();
          struct.setFamilyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class deleteFamilyMemberById_result implements org.apache.thrift.TBase<deleteFamilyMemberById_result, deleteFamilyMemberById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFamilyMemberById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFamilyMemberById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFamilyMemberById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFamilyMemberById_result.class, metaDataMap);
    }

    public deleteFamilyMemberById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFamilyMemberById_result(deleteFamilyMemberById_result other) {
    }

    public deleteFamilyMemberById_result deepCopy() {
      return new deleteFamilyMemberById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFamilyMemberById_result)
        return this.equals((deleteFamilyMemberById_result)that);
      return false;
    }

    public boolean equals(deleteFamilyMemberById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteFamilyMemberById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteFamilyMemberById_result typedOther = (deleteFamilyMemberById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFamilyMemberById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFamilyMemberById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFamilyMemberById_resultStandardScheme getScheme() {
        return new deleteFamilyMemberById_resultStandardScheme();
      }
    }

    private static class deleteFamilyMemberById_resultStandardScheme extends StandardScheme<deleteFamilyMemberById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFamilyMemberById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFamilyMemberById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFamilyMemberById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFamilyMemberById_resultTupleScheme getScheme() {
        return new deleteFamilyMemberById_resultTupleScheme();
      }
    }

    private static class deleteFamilyMemberById_resultTupleScheme extends TupleScheme<deleteFamilyMemberById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFamilyMemberById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFamilyMemberById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findByIds_args implements org.apache.thrift.TBase<findByIds_args, findByIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByIds_argsTupleSchemeFactory());
    }

    public List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByIds_args.class, metaDataMap);
    }

    public findByIds_args() {
    }

    public findByIds_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByIds_args(findByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>();
        for (Long other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public findByIds_args deepCopy() {
      return new findByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public findByIds_args setIds(List<Long> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByIds_args)
        return this.equals((findByIds_args)that);
      return false;
    }

    public boolean equals(findByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findByIds_args typedOther = (findByIds_args)other;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByIds_argsStandardSchemeFactory implements SchemeFactory {
      public findByIds_argsStandardScheme getScheme() {
        return new findByIds_argsStandardScheme();
      }
    }

    private static class findByIds_argsStandardScheme extends StandardScheme<findByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list20.size);
                  for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                  {
                    long _elem22; // required
                    _elem22 = iprot.readI64();
                    struct.ids.add(_elem22);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter23 : struct.ids)
            {
              oprot.writeI64(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByIds_argsTupleSchemeFactory implements SchemeFactory {
      public findByIds_argsTupleScheme getScheme() {
        return new findByIds_argsTupleScheme();
      }
    }

    private static class findByIds_argsTupleScheme extends TupleScheme<findByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter24 : struct.ids)
            {
              oprot.writeI64(_iter24);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list25.size);
            for (int _i26 = 0; _i26 < _list25.size; ++_i26)
            {
              long _elem27; // required
              _elem27 = iprot.readI64();
              struct.ids.add(_elem27);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class findByIds_result implements org.apache.thrift.TBase<findByIds_result, findByIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByIds_resultTupleSchemeFactory());
    }

    public List<one.show.user.thrift.view.FamilyView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.FamilyView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByIds_result.class, metaDataMap);
    }

    public findByIds_result() {
    }

    public findByIds_result(
      List<one.show.user.thrift.view.FamilyView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByIds_result(findByIds_result other) {
      if (other.isSetSuccess()) {
        List<one.show.user.thrift.view.FamilyView> __this__success = new ArrayList<one.show.user.thrift.view.FamilyView>();
        for (one.show.user.thrift.view.FamilyView other_element : other.success) {
          __this__success.add(new one.show.user.thrift.view.FamilyView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findByIds_result deepCopy() {
      return new findByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.user.thrift.view.FamilyView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.user.thrift.view.FamilyView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.user.thrift.view.FamilyView>();
      }
      this.success.add(elem);
    }

    public List<one.show.user.thrift.view.FamilyView> getSuccess() {
      return this.success;
    }

    public findByIds_result setSuccess(List<one.show.user.thrift.view.FamilyView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.user.thrift.view.FamilyView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByIds_result)
        return this.equals((findByIds_result)that);
      return false;
    }

    public boolean equals(findByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findByIds_result typedOther = (findByIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByIds_resultStandardSchemeFactory implements SchemeFactory {
      public findByIds_resultStandardScheme getScheme() {
        return new findByIds_resultStandardScheme();
      }
    }

    private static class findByIds_resultStandardScheme extends StandardScheme<findByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.user.thrift.view.FamilyView>(_list28.size);
                  for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                  {
                    one.show.user.thrift.view.FamilyView _elem30; // required
                    _elem30 = new one.show.user.thrift.view.FamilyView();
                    _elem30.read(iprot);
                    struct.success.add(_elem30);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.user.thrift.view.FamilyView _iter31 : struct.success)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByIds_resultTupleSchemeFactory implements SchemeFactory {
      public findByIds_resultTupleScheme getScheme() {
        return new findByIds_resultTupleScheme();
      }
    }

    private static class findByIds_resultTupleScheme extends TupleScheme<findByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.user.thrift.view.FamilyView _iter32 : struct.success)
            {
              _iter32.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.user.thrift.view.FamilyView>(_list33.size);
            for (int _i34 = 0; _i34 < _list33.size; ++_i34)
            {
              one.show.user.thrift.view.FamilyView _elem35; // required
              _elem35 = new one.show.user.thrift.view.FamilyView();
              _elem35.read(iprot);
              struct.success.add(_elem35);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
