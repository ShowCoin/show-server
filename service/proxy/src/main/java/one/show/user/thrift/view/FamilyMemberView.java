/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FamilyMemberView implements org.apache.thrift.TBase<FamilyMemberView, FamilyMemberView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FamilyMemberView");

  private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField JOIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("joinTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField USER_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userNickName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("userPid", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LIVE_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("liveDuration", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LIVE_EFFECTIVE_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("liveEffectiveDays", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ZZ_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("zzNum", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RMB_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("rmbNum", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FamilyMemberViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FamilyMemberViewTupleSchemeFactory());
  }

  public long familyId; // required
  public long userId; // required
  public int role; // required
  public int joinTime; // required
  public String userNickName; // required
  public long userPid; // required
  public int liveDuration; // required
  public int liveEffectiveDays; // required
  public int zzNum; // required
  public double rmbNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FAMILY_ID((short)1, "familyId"),
    USER_ID((short)2, "userId"),
    ROLE((short)3, "role"),
    JOIN_TIME((short)4, "joinTime"),
    USER_NICK_NAME((short)5, "userNickName"),
    USER_PID((short)6, "userPid"),
    LIVE_DURATION((short)7, "liveDuration"),
    LIVE_EFFECTIVE_DAYS((short)8, "liveEffectiveDays"),
    ZZ_NUM((short)9, "zzNum"),
    RMB_NUM((short)10, "rmbNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FAMILY_ID
          return FAMILY_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // ROLE
          return ROLE;
        case 4: // JOIN_TIME
          return JOIN_TIME;
        case 5: // USER_NICK_NAME
          return USER_NICK_NAME;
        case 6: // USER_PID
          return USER_PID;
        case 7: // LIVE_DURATION
          return LIVE_DURATION;
        case 8: // LIVE_EFFECTIVE_DAYS
          return LIVE_EFFECTIVE_DAYS;
        case 9: // ZZ_NUM
          return ZZ_NUM;
        case 10: // RMB_NUM
          return RMB_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FAMILYID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ROLE_ISSET_ID = 2;
  private static final int __JOINTIME_ISSET_ID = 3;
  private static final int __USERPID_ISSET_ID = 4;
  private static final int __LIVEDURATION_ISSET_ID = 5;
  private static final int __LIVEEFFECTIVEDAYS_ISSET_ID = 6;
  private static final int __ZZNUM_ISSET_ID = 7;
  private static final int __RMBNUM_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("joinTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("userNickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_PID, new org.apache.thrift.meta_data.FieldMetaData("userPid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIVE_DURATION, new org.apache.thrift.meta_data.FieldMetaData("liveDuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIVE_EFFECTIVE_DAYS, new org.apache.thrift.meta_data.FieldMetaData("liveEffectiveDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ZZ_NUM, new org.apache.thrift.meta_data.FieldMetaData("zzNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RMB_NUM, new org.apache.thrift.meta_data.FieldMetaData("rmbNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FamilyMemberView.class, metaDataMap);
  }

  public FamilyMemberView() {
  }

  public FamilyMemberView(
    long familyId,
    long userId,
    int role,
    int joinTime,
    String userNickName,
    long userPid,
    int liveDuration,
    int liveEffectiveDays,
    int zzNum,
    double rmbNum)
  {
    this();
    this.familyId = familyId;
    setFamilyIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.role = role;
    setRoleIsSet(true);
    this.joinTime = joinTime;
    setJoinTimeIsSet(true);
    this.userNickName = userNickName;
    this.userPid = userPid;
    setUserPidIsSet(true);
    this.liveDuration = liveDuration;
    setLiveDurationIsSet(true);
    this.liveEffectiveDays = liveEffectiveDays;
    setLiveEffectiveDaysIsSet(true);
    this.zzNum = zzNum;
    setZzNumIsSet(true);
    this.rmbNum = rmbNum;
    setRmbNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FamilyMemberView(FamilyMemberView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.familyId = other.familyId;
    this.userId = other.userId;
    this.role = other.role;
    this.joinTime = other.joinTime;
    if (other.isSetUserNickName()) {
      this.userNickName = other.userNickName;
    }
    this.userPid = other.userPid;
    this.liveDuration = other.liveDuration;
    this.liveEffectiveDays = other.liveEffectiveDays;
    this.zzNum = other.zzNum;
    this.rmbNum = other.rmbNum;
  }

  public FamilyMemberView deepCopy() {
    return new FamilyMemberView(this);
  }

  @Override
  public void clear() {
    setFamilyIdIsSet(false);
    this.familyId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setRoleIsSet(false);
    this.role = 0;
    setJoinTimeIsSet(false);
    this.joinTime = 0;
    this.userNickName = null;
    setUserPidIsSet(false);
    this.userPid = 0;
    setLiveDurationIsSet(false);
    this.liveDuration = 0;
    setLiveEffectiveDaysIsSet(false);
    this.liveEffectiveDays = 0;
    setZzNumIsSet(false);
    this.zzNum = 0;
    setRmbNumIsSet(false);
    this.rmbNum = 0.0;
  }

  public long getFamilyId() {
    return this.familyId;
  }

  public FamilyMemberView setFamilyId(long familyId) {
    this.familyId = familyId;
    setFamilyIdIsSet(true);
    return this;
  }

  public void unsetFamilyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
  }

  /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyId() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
  }

  public void setFamilyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public FamilyMemberView setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getRole() {
    return this.role;
  }

  public FamilyMemberView setRole(int role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ISSET_ID, value);
  }

  public int getJoinTime() {
    return this.joinTime;
  }

  public FamilyMemberView setJoinTime(int joinTime) {
    this.joinTime = joinTime;
    setJoinTimeIsSet(true);
    return this;
  }

  public void unsetJoinTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOINTIME_ISSET_ID);
  }

  /** Returns true if field joinTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JOINTIME_ISSET_ID);
  }

  public void setJoinTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOINTIME_ISSET_ID, value);
  }

  public String getUserNickName() {
    return this.userNickName;
  }

  public FamilyMemberView setUserNickName(String userNickName) {
    this.userNickName = userNickName;
    return this;
  }

  public void unsetUserNickName() {
    this.userNickName = null;
  }

  /** Returns true if field userNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserNickName() {
    return this.userNickName != null;
  }

  public void setUserNickNameIsSet(boolean value) {
    if (!value) {
      this.userNickName = null;
    }
  }

  public long getUserPid() {
    return this.userPid;
  }

  public FamilyMemberView setUserPid(long userPid) {
    this.userPid = userPid;
    setUserPidIsSet(true);
    return this;
  }

  public void unsetUserPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERPID_ISSET_ID);
  }

  /** Returns true if field userPid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPid() {
    return EncodingUtils.testBit(__isset_bitfield, __USERPID_ISSET_ID);
  }

  public void setUserPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERPID_ISSET_ID, value);
  }

  public int getLiveDuration() {
    return this.liveDuration;
  }

  public FamilyMemberView setLiveDuration(int liveDuration) {
    this.liveDuration = liveDuration;
    setLiveDurationIsSet(true);
    return this;
  }

  public void unsetLiveDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVEDURATION_ISSET_ID);
  }

  /** Returns true if field liveDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVEDURATION_ISSET_ID);
  }

  public void setLiveDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVEDURATION_ISSET_ID, value);
  }

  public int getLiveEffectiveDays() {
    return this.liveEffectiveDays;
  }

  public FamilyMemberView setLiveEffectiveDays(int liveEffectiveDays) {
    this.liveEffectiveDays = liveEffectiveDays;
    setLiveEffectiveDaysIsSet(true);
    return this;
  }

  public void unsetLiveEffectiveDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVEEFFECTIVEDAYS_ISSET_ID);
  }

  /** Returns true if field liveEffectiveDays is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveEffectiveDays() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVEEFFECTIVEDAYS_ISSET_ID);
  }

  public void setLiveEffectiveDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVEEFFECTIVEDAYS_ISSET_ID, value);
  }

  public int getZzNum() {
    return this.zzNum;
  }

  public FamilyMemberView setZzNum(int zzNum) {
    this.zzNum = zzNum;
    setZzNumIsSet(true);
    return this;
  }

  public void unsetZzNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZZNUM_ISSET_ID);
  }

  /** Returns true if field zzNum is set (has been assigned a value) and false otherwise */
  public boolean isSetZzNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ZZNUM_ISSET_ID);
  }

  public void setZzNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZZNUM_ISSET_ID, value);
  }

  public double getRmbNum() {
    return this.rmbNum;
  }

  public FamilyMemberView setRmbNum(double rmbNum) {
    this.rmbNum = rmbNum;
    setRmbNumIsSet(true);
    return this;
  }

  public void unsetRmbNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RMBNUM_ISSET_ID);
  }

  /** Returns true if field rmbNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRmbNum() {
    return EncodingUtils.testBit(__isset_bitfield, __RMBNUM_ISSET_ID);
  }

  public void setRmbNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RMBNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FAMILY_ID:
      if (value == null) {
        unsetFamilyId();
      } else {
        setFamilyId((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Integer)value);
      }
      break;

    case JOIN_TIME:
      if (value == null) {
        unsetJoinTime();
      } else {
        setJoinTime((Integer)value);
      }
      break;

    case USER_NICK_NAME:
      if (value == null) {
        unsetUserNickName();
      } else {
        setUserNickName((String)value);
      }
      break;

    case USER_PID:
      if (value == null) {
        unsetUserPid();
      } else {
        setUserPid((Long)value);
      }
      break;

    case LIVE_DURATION:
      if (value == null) {
        unsetLiveDuration();
      } else {
        setLiveDuration((Integer)value);
      }
      break;

    case LIVE_EFFECTIVE_DAYS:
      if (value == null) {
        unsetLiveEffectiveDays();
      } else {
        setLiveEffectiveDays((Integer)value);
      }
      break;

    case ZZ_NUM:
      if (value == null) {
        unsetZzNum();
      } else {
        setZzNum((Integer)value);
      }
      break;

    case RMB_NUM:
      if (value == null) {
        unsetRmbNum();
      } else {
        setRmbNum((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FAMILY_ID:
      return Long.valueOf(getFamilyId());

    case USER_ID:
      return Long.valueOf(getUserId());

    case ROLE:
      return Integer.valueOf(getRole());

    case JOIN_TIME:
      return Integer.valueOf(getJoinTime());

    case USER_NICK_NAME:
      return getUserNickName();

    case USER_PID:
      return Long.valueOf(getUserPid());

    case LIVE_DURATION:
      return Integer.valueOf(getLiveDuration());

    case LIVE_EFFECTIVE_DAYS:
      return Integer.valueOf(getLiveEffectiveDays());

    case ZZ_NUM:
      return Integer.valueOf(getZzNum());

    case RMB_NUM:
      return Double.valueOf(getRmbNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FAMILY_ID:
      return isSetFamilyId();
    case USER_ID:
      return isSetUserId();
    case ROLE:
      return isSetRole();
    case JOIN_TIME:
      return isSetJoinTime();
    case USER_NICK_NAME:
      return isSetUserNickName();
    case USER_PID:
      return isSetUserPid();
    case LIVE_DURATION:
      return isSetLiveDuration();
    case LIVE_EFFECTIVE_DAYS:
      return isSetLiveEffectiveDays();
    case ZZ_NUM:
      return isSetZzNum();
    case RMB_NUM:
      return isSetRmbNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FamilyMemberView)
      return this.equals((FamilyMemberView)that);
    return false;
  }

  public boolean equals(FamilyMemberView that) {
    if (that == null)
      return false;

    boolean this_present_familyId = true;
    boolean that_present_familyId = true;
    if (this_present_familyId || that_present_familyId) {
      if (!(this_present_familyId && that_present_familyId))
        return false;
      if (this.familyId != that.familyId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (this.role != that.role)
        return false;
    }

    boolean this_present_joinTime = true;
    boolean that_present_joinTime = true;
    if (this_present_joinTime || that_present_joinTime) {
      if (!(this_present_joinTime && that_present_joinTime))
        return false;
      if (this.joinTime != that.joinTime)
        return false;
    }

    boolean this_present_userNickName = true && this.isSetUserNickName();
    boolean that_present_userNickName = true && that.isSetUserNickName();
    if (this_present_userNickName || that_present_userNickName) {
      if (!(this_present_userNickName && that_present_userNickName))
        return false;
      if (!this.userNickName.equals(that.userNickName))
        return false;
    }

    boolean this_present_userPid = true;
    boolean that_present_userPid = true;
    if (this_present_userPid || that_present_userPid) {
      if (!(this_present_userPid && that_present_userPid))
        return false;
      if (this.userPid != that.userPid)
        return false;
    }

    boolean this_present_liveDuration = true;
    boolean that_present_liveDuration = true;
    if (this_present_liveDuration || that_present_liveDuration) {
      if (!(this_present_liveDuration && that_present_liveDuration))
        return false;
      if (this.liveDuration != that.liveDuration)
        return false;
    }

    boolean this_present_liveEffectiveDays = true;
    boolean that_present_liveEffectiveDays = true;
    if (this_present_liveEffectiveDays || that_present_liveEffectiveDays) {
      if (!(this_present_liveEffectiveDays && that_present_liveEffectiveDays))
        return false;
      if (this.liveEffectiveDays != that.liveEffectiveDays)
        return false;
    }

    boolean this_present_zzNum = true;
    boolean that_present_zzNum = true;
    if (this_present_zzNum || that_present_zzNum) {
      if (!(this_present_zzNum && that_present_zzNum))
        return false;
      if (this.zzNum != that.zzNum)
        return false;
    }

    boolean this_present_rmbNum = true;
    boolean that_present_rmbNum = true;
    if (this_present_rmbNum || that_present_rmbNum) {
      if (!(this_present_rmbNum && that_present_rmbNum))
        return false;
      if (this.rmbNum != that.rmbNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FamilyMemberView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FamilyMemberView typedOther = (FamilyMemberView)other;

    lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(typedOther.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, typedOther.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinTime()).compareTo(typedOther.isSetJoinTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinTime, typedOther.joinTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserNickName()).compareTo(typedOther.isSetUserNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNickName, typedOther.userNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPid()).compareTo(typedOther.isSetUserPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPid, typedOther.userPid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveDuration()).compareTo(typedOther.isSetLiveDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveDuration, typedOther.liveDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveEffectiveDays()).compareTo(typedOther.isSetLiveEffectiveDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveEffectiveDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveEffectiveDays, typedOther.liveEffectiveDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZzNum()).compareTo(typedOther.isSetZzNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZzNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zzNum, typedOther.zzNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRmbNum()).compareTo(typedOther.isSetRmbNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRmbNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rmbNum, typedOther.rmbNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FamilyMemberView(");
    boolean first = true;

    sb.append("familyId:");
    sb.append(this.familyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    sb.append(this.role);
    first = false;
    if (!first) sb.append(", ");
    sb.append("joinTime:");
    sb.append(this.joinTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userNickName:");
    if (this.userNickName == null) {
      sb.append("null");
    } else {
      sb.append(this.userNickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userPid:");
    sb.append(this.userPid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveDuration:");
    sb.append(this.liveDuration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveEffectiveDays:");
    sb.append(this.liveEffectiveDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zzNum:");
    sb.append(this.zzNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rmbNum:");
    sb.append(this.rmbNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FamilyMemberViewStandardSchemeFactory implements SchemeFactory {
    public FamilyMemberViewStandardScheme getScheme() {
      return new FamilyMemberViewStandardScheme();
    }
  }

  private static class FamilyMemberViewStandardScheme extends StandardScheme<FamilyMemberView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FamilyMemberView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FAMILY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.familyId = iprot.readI64();
              struct.setFamilyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role = iprot.readI32();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.joinTime = iprot.readI32();
              struct.setJoinTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userNickName = iprot.readString();
              struct.setUserNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userPid = iprot.readI64();
              struct.setUserPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIVE_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveDuration = iprot.readI32();
              struct.setLiveDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LIVE_EFFECTIVE_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveEffectiveDays = iprot.readI32();
              struct.setLiveEffectiveDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ZZ_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.zzNum = iprot.readI32();
              struct.setZzNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RMB_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rmbNum = iprot.readDouble();
              struct.setRmbNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FamilyMemberView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
      oprot.writeI64(struct.familyId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(struct.role);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOIN_TIME_FIELD_DESC);
      oprot.writeI32(struct.joinTime);
      oprot.writeFieldEnd();
      if (struct.userNickName != null) {
        oprot.writeFieldBegin(USER_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.userNickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_PID_FIELD_DESC);
      oprot.writeI64(struct.userPid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIVE_DURATION_FIELD_DESC);
      oprot.writeI32(struct.liveDuration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIVE_EFFECTIVE_DAYS_FIELD_DESC);
      oprot.writeI32(struct.liveEffectiveDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZZ_NUM_FIELD_DESC);
      oprot.writeI32(struct.zzNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RMB_NUM_FIELD_DESC);
      oprot.writeDouble(struct.rmbNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FamilyMemberViewTupleSchemeFactory implements SchemeFactory {
    public FamilyMemberViewTupleScheme getScheme() {
      return new FamilyMemberViewTupleScheme();
    }
  }

  private static class FamilyMemberViewTupleScheme extends TupleScheme<FamilyMemberView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FamilyMemberView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFamilyId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetRole()) {
        optionals.set(2);
      }
      if (struct.isSetJoinTime()) {
        optionals.set(3);
      }
      if (struct.isSetUserNickName()) {
        optionals.set(4);
      }
      if (struct.isSetUserPid()) {
        optionals.set(5);
      }
      if (struct.isSetLiveDuration()) {
        optionals.set(6);
      }
      if (struct.isSetLiveEffectiveDays()) {
        optionals.set(7);
      }
      if (struct.isSetZzNum()) {
        optionals.set(8);
      }
      if (struct.isSetRmbNum()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetFamilyId()) {
        oprot.writeI64(struct.familyId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRole()) {
        oprot.writeI32(struct.role);
      }
      if (struct.isSetJoinTime()) {
        oprot.writeI32(struct.joinTime);
      }
      if (struct.isSetUserNickName()) {
        oprot.writeString(struct.userNickName);
      }
      if (struct.isSetUserPid()) {
        oprot.writeI64(struct.userPid);
      }
      if (struct.isSetLiveDuration()) {
        oprot.writeI32(struct.liveDuration);
      }
      if (struct.isSetLiveEffectiveDays()) {
        oprot.writeI32(struct.liveEffectiveDays);
      }
      if (struct.isSetZzNum()) {
        oprot.writeI32(struct.zzNum);
      }
      if (struct.isSetRmbNum()) {
        oprot.writeDouble(struct.rmbNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FamilyMemberView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.familyId = iprot.readI64();
        struct.setFamilyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.role = iprot.readI32();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.joinTime = iprot.readI32();
        struct.setJoinTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userNickName = iprot.readString();
        struct.setUserNickNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userPid = iprot.readI64();
        struct.setUserPidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.liveDuration = iprot.readI32();
        struct.setLiveDurationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.liveEffectiveDays = iprot.readI32();
        struct.setLiveEffectiveDaysIsSet(true);
      }
      if (incoming.get(8)) {
        struct.zzNum = iprot.readI32();
        struct.setZzNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rmbNum = iprot.readDouble();
        struct.setRmbNumIsSet(true);
      }
    }
  }

}

