/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeviceForbiddenView implements org.apache.thrift.TBase<DeviceForbiddenView, DeviceForbiddenView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviceForbiddenView");

  private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FORBIDDENBY_FIELD_DESC = new org.apache.thrift.protocol.TField("forbiddenby", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeviceForbiddenViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeviceForbiddenViewTupleSchemeFactory());
  }

  public String did; // required
  public int expireTime; // required
  public String forbiddenby; // required
  public int createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DID((short)1, "did"),
    EXPIRE_TIME((short)2, "expireTime"),
    FORBIDDENBY((short)3, "forbiddenby"),
    CREATE_TIME((short)4, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DID
          return DID;
        case 2: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 3: // FORBIDDENBY
          return FORBIDDENBY;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRETIME_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORBIDDENBY, new org.apache.thrift.meta_data.FieldMetaData("forbiddenby", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceForbiddenView.class, metaDataMap);
  }

  public DeviceForbiddenView() {
  }

  public DeviceForbiddenView(
    String did,
    int expireTime,
    String forbiddenby,
    int createTime)
  {
    this();
    this.did = did;
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    this.forbiddenby = forbiddenby;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviceForbiddenView(DeviceForbiddenView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDid()) {
      this.did = other.did;
    }
    this.expireTime = other.expireTime;
    if (other.isSetForbiddenby()) {
      this.forbiddenby = other.forbiddenby;
    }
    this.createTime = other.createTime;
  }

  public DeviceForbiddenView deepCopy() {
    return new DeviceForbiddenView(this);
  }

  @Override
  public void clear() {
    this.did = null;
    setExpireTimeIsSet(false);
    this.expireTime = 0;
    this.forbiddenby = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
  }

  public String getDid() {
    return this.did;
  }

  public DeviceForbiddenView setDid(String did) {
    this.did = did;
    return this;
  }

  public void unsetDid() {
    this.did = null;
  }

  /** Returns true if field did is set (has been assigned a value) and false otherwise */
  public boolean isSetDid() {
    return this.did != null;
  }

  public void setDidIsSet(boolean value) {
    if (!value) {
      this.did = null;
    }
  }

  public int getExpireTime() {
    return this.expireTime;
  }

  public DeviceForbiddenView setExpireTime(int expireTime) {
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    return this;
  }

  public void unsetExpireTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  /** Returns true if field expireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  public void setExpireTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRETIME_ISSET_ID, value);
  }

  public String getForbiddenby() {
    return this.forbiddenby;
  }

  public DeviceForbiddenView setForbiddenby(String forbiddenby) {
    this.forbiddenby = forbiddenby;
    return this;
  }

  public void unsetForbiddenby() {
    this.forbiddenby = null;
  }

  /** Returns true if field forbiddenby is set (has been assigned a value) and false otherwise */
  public boolean isSetForbiddenby() {
    return this.forbiddenby != null;
  }

  public void setForbiddenbyIsSet(boolean value) {
    if (!value) {
      this.forbiddenby = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public DeviceForbiddenView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DID:
      if (value == null) {
        unsetDid();
      } else {
        setDid((String)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpireTime();
      } else {
        setExpireTime((Integer)value);
      }
      break;

    case FORBIDDENBY:
      if (value == null) {
        unsetForbiddenby();
      } else {
        setForbiddenby((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DID:
      return getDid();

    case EXPIRE_TIME:
      return Integer.valueOf(getExpireTime());

    case FORBIDDENBY:
      return getForbiddenby();

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DID:
      return isSetDid();
    case EXPIRE_TIME:
      return isSetExpireTime();
    case FORBIDDENBY:
      return isSetForbiddenby();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviceForbiddenView)
      return this.equals((DeviceForbiddenView)that);
    return false;
  }

  public boolean equals(DeviceForbiddenView that) {
    if (that == null)
      return false;

    boolean this_present_did = true && this.isSetDid();
    boolean that_present_did = true && that.isSetDid();
    if (this_present_did || that_present_did) {
      if (!(this_present_did && that_present_did))
        return false;
      if (!this.did.equals(that.did))
        return false;
    }

    boolean this_present_expireTime = true;
    boolean that_present_expireTime = true;
    if (this_present_expireTime || that_present_expireTime) {
      if (!(this_present_expireTime && that_present_expireTime))
        return false;
      if (this.expireTime != that.expireTime)
        return false;
    }

    boolean this_present_forbiddenby = true && this.isSetForbiddenby();
    boolean that_present_forbiddenby = true && that.isSetForbiddenby();
    if (this_present_forbiddenby || that_present_forbiddenby) {
      if (!(this_present_forbiddenby && that_present_forbiddenby))
        return false;
      if (!this.forbiddenby.equals(that.forbiddenby))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DeviceForbiddenView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DeviceForbiddenView typedOther = (DeviceForbiddenView)other;

    lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireTime()).compareTo(typedOther.isSetExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, typedOther.expireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForbiddenby()).compareTo(typedOther.isSetForbiddenby());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForbiddenby()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forbiddenby, typedOther.forbiddenby);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeviceForbiddenView(");
    boolean first = true;

    sb.append("did:");
    if (this.did == null) {
      sb.append("null");
    } else {
      sb.append(this.did);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireTime:");
    sb.append(this.expireTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("forbiddenby:");
    if (this.forbiddenby == null) {
      sb.append("null");
    } else {
      sb.append(this.forbiddenby);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceForbiddenViewStandardSchemeFactory implements SchemeFactory {
    public DeviceForbiddenViewStandardScheme getScheme() {
      return new DeviceForbiddenViewStandardScheme();
    }
  }

  private static class DeviceForbiddenViewStandardScheme extends StandardScheme<DeviceForbiddenView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceForbiddenView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.did = iprot.readString();
              struct.setDidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expireTime = iprot.readI32();
              struct.setExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FORBIDDENBY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.forbiddenby = iprot.readString();
              struct.setForbiddenbyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceForbiddenView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.did != null) {
        oprot.writeFieldBegin(DID_FIELD_DESC);
        oprot.writeString(struct.did);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
      oprot.writeI32(struct.expireTime);
      oprot.writeFieldEnd();
      if (struct.forbiddenby != null) {
        oprot.writeFieldBegin(FORBIDDENBY_FIELD_DESC);
        oprot.writeString(struct.forbiddenby);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceForbiddenViewTupleSchemeFactory implements SchemeFactory {
    public DeviceForbiddenViewTupleScheme getScheme() {
      return new DeviceForbiddenViewTupleScheme();
    }
  }

  private static class DeviceForbiddenViewTupleScheme extends TupleScheme<DeviceForbiddenView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeviceForbiddenView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDid()) {
        optionals.set(0);
      }
      if (struct.isSetExpireTime()) {
        optionals.set(1);
      }
      if (struct.isSetForbiddenby()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDid()) {
        oprot.writeString(struct.did);
      }
      if (struct.isSetExpireTime()) {
        oprot.writeI32(struct.expireTime);
      }
      if (struct.isSetForbiddenby()) {
        oprot.writeString(struct.forbiddenby);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeviceForbiddenView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.did = iprot.readString();
        struct.setDidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.expireTime = iprot.readI32();
        struct.setExpireTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.forbiddenby = iprot.readString();
        struct.setForbiddenbyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

