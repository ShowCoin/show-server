/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeviceServiceProxy {

  public interface Iface {

    public one.show.user.thrift.view.DeviceView findDeviceByDid(String did) throws org.apache.thrift.TException;

    public void updateDevice(String did, Map<String,String> paramsMap) throws org.apache.thrift.TException;

    public List<one.show.user.thrift.view.DeviceForbiddenView> findDeviceForbiddenListByDid(String did) throws org.apache.thrift.TException;

    public boolean findForbiddenByDid(String did) throws org.apache.thrift.TException;

    public void saveForbidden(one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView) throws one.show.common.exception.ServerException, org.apache.thrift.TException;

    public void deleteDevice(String did) throws org.apache.thrift.TException;

    public void deleteForbidden(String did) throws org.apache.thrift.TException;

    public void saveDevice(one.show.user.thrift.view.DeviceView deviceView) throws one.show.common.exception.ServerException, org.apache.thrift.TException;

    public one.show.user.thrift.view.UserDeviceView findUserDevice(long uid, String deviceUuid) throws org.apache.thrift.TException;

    public List<one.show.user.thrift.view.UserDeviceView> findListByUid(long uid) throws org.apache.thrift.TException;

    public void saveUserDevice(one.show.user.thrift.view.UserDeviceView device) throws org.apache.thrift.TException;

    public void deleteUserDeviceByUid(long uid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findDeviceByDid(String did, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findDeviceByDid_call> resultHandler) throws org.apache.thrift.TException;

    public void updateDevice(String did, Map<String,String> paramsMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void findDeviceForbiddenListByDid(String did, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findDeviceForbiddenListByDid_call> resultHandler) throws org.apache.thrift.TException;

    public void findForbiddenByDid(String did, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findForbiddenByDid_call> resultHandler) throws org.apache.thrift.TException;

    public void saveForbidden(one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveForbidden_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteDevice(String did, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteForbidden(String did, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteForbidden_call> resultHandler) throws org.apache.thrift.TException;

    public void saveDevice(one.show.user.thrift.view.DeviceView deviceView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void findUserDevice(long uid, String deviceUuid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findUserDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void findListByUid(long uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findListByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void saveUserDevice(one.show.user.thrift.view.UserDeviceView device, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveUserDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteUserDeviceByUid(long uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteUserDeviceByUid_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public one.show.user.thrift.view.DeviceView findDeviceByDid(String did) throws org.apache.thrift.TException
    {
      send_findDeviceByDid(did);
      return recv_findDeviceByDid();
    }

    public void send_findDeviceByDid(String did) throws org.apache.thrift.TException
    {
      findDeviceByDid_args args = new findDeviceByDid_args();
      args.setDid(did);
      sendBase("findDeviceByDid", args);
    }

    public one.show.user.thrift.view.DeviceView recv_findDeviceByDid() throws org.apache.thrift.TException
    {
      findDeviceByDid_result result = new findDeviceByDid_result();
      receiveBase(result, "findDeviceByDid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findDeviceByDid failed: unknown result");
    }

    public void updateDevice(String did, Map<String,String> paramsMap) throws org.apache.thrift.TException
    {
      send_updateDevice(did, paramsMap);
      recv_updateDevice();
    }

    public void send_updateDevice(String did, Map<String,String> paramsMap) throws org.apache.thrift.TException
    {
      updateDevice_args args = new updateDevice_args();
      args.setDid(did);
      args.setParamsMap(paramsMap);
      sendBase("updateDevice", args);
    }

    public void recv_updateDevice() throws org.apache.thrift.TException
    {
      updateDevice_result result = new updateDevice_result();
      receiveBase(result, "updateDevice");
      return;
    }

    public List<one.show.user.thrift.view.DeviceForbiddenView> findDeviceForbiddenListByDid(String did) throws org.apache.thrift.TException
    {
      send_findDeviceForbiddenListByDid(did);
      return recv_findDeviceForbiddenListByDid();
    }

    public void send_findDeviceForbiddenListByDid(String did) throws org.apache.thrift.TException
    {
      findDeviceForbiddenListByDid_args args = new findDeviceForbiddenListByDid_args();
      args.setDid(did);
      sendBase("findDeviceForbiddenListByDid", args);
    }

    public List<one.show.user.thrift.view.DeviceForbiddenView> recv_findDeviceForbiddenListByDid() throws org.apache.thrift.TException
    {
      findDeviceForbiddenListByDid_result result = new findDeviceForbiddenListByDid_result();
      receiveBase(result, "findDeviceForbiddenListByDid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findDeviceForbiddenListByDid failed: unknown result");
    }

    public boolean findForbiddenByDid(String did) throws org.apache.thrift.TException
    {
      send_findForbiddenByDid(did);
      return recv_findForbiddenByDid();
    }

    public void send_findForbiddenByDid(String did) throws org.apache.thrift.TException
    {
      findForbiddenByDid_args args = new findForbiddenByDid_args();
      args.setDid(did);
      sendBase("findForbiddenByDid", args);
    }

    public boolean recv_findForbiddenByDid() throws org.apache.thrift.TException
    {
      findForbiddenByDid_result result = new findForbiddenByDid_result();
      receiveBase(result, "findForbiddenByDid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findForbiddenByDid failed: unknown result");
    }

    public void saveForbidden(one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView) throws one.show.common.exception.ServerException, org.apache.thrift.TException
    {
      send_saveForbidden(deviceForbiddenView);
      recv_saveForbidden();
    }

    public void send_saveForbidden(one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView) throws org.apache.thrift.TException
    {
      saveForbidden_args args = new saveForbidden_args();
      args.setDeviceForbiddenView(deviceForbiddenView);
      sendBase("saveForbidden", args);
    }

    public void recv_saveForbidden() throws one.show.common.exception.ServerException, org.apache.thrift.TException
    {
      saveForbidden_result result = new saveForbidden_result();
      receiveBase(result, "saveForbidden");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void deleteDevice(String did) throws org.apache.thrift.TException
    {
      send_deleteDevice(did);
      recv_deleteDevice();
    }

    public void send_deleteDevice(String did) throws org.apache.thrift.TException
    {
      deleteDevice_args args = new deleteDevice_args();
      args.setDid(did);
      sendBase("deleteDevice", args);
    }

    public void recv_deleteDevice() throws org.apache.thrift.TException
    {
      deleteDevice_result result = new deleteDevice_result();
      receiveBase(result, "deleteDevice");
      return;
    }

    public void deleteForbidden(String did) throws org.apache.thrift.TException
    {
      send_deleteForbidden(did);
      recv_deleteForbidden();
    }

    public void send_deleteForbidden(String did) throws org.apache.thrift.TException
    {
      deleteForbidden_args args = new deleteForbidden_args();
      args.setDid(did);
      sendBase("deleteForbidden", args);
    }

    public void recv_deleteForbidden() throws org.apache.thrift.TException
    {
      deleteForbidden_result result = new deleteForbidden_result();
      receiveBase(result, "deleteForbidden");
      return;
    }

    public void saveDevice(one.show.user.thrift.view.DeviceView deviceView) throws one.show.common.exception.ServerException, org.apache.thrift.TException
    {
      send_saveDevice(deviceView);
      recv_saveDevice();
    }

    public void send_saveDevice(one.show.user.thrift.view.DeviceView deviceView) throws org.apache.thrift.TException
    {
      saveDevice_args args = new saveDevice_args();
      args.setDeviceView(deviceView);
      sendBase("saveDevice", args);
    }

    public void recv_saveDevice() throws one.show.common.exception.ServerException, org.apache.thrift.TException
    {
      saveDevice_result result = new saveDevice_result();
      receiveBase(result, "saveDevice");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public one.show.user.thrift.view.UserDeviceView findUserDevice(long uid, String deviceUuid) throws org.apache.thrift.TException
    {
      send_findUserDevice(uid, deviceUuid);
      return recv_findUserDevice();
    }

    public void send_findUserDevice(long uid, String deviceUuid) throws org.apache.thrift.TException
    {
      findUserDevice_args args = new findUserDevice_args();
      args.setUid(uid);
      args.setDeviceUuid(deviceUuid);
      sendBase("findUserDevice", args);
    }

    public one.show.user.thrift.view.UserDeviceView recv_findUserDevice() throws org.apache.thrift.TException
    {
      findUserDevice_result result = new findUserDevice_result();
      receiveBase(result, "findUserDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserDevice failed: unknown result");
    }

    public List<one.show.user.thrift.view.UserDeviceView> findListByUid(long uid) throws org.apache.thrift.TException
    {
      send_findListByUid(uid);
      return recv_findListByUid();
    }

    public void send_findListByUid(long uid) throws org.apache.thrift.TException
    {
      findListByUid_args args = new findListByUid_args();
      args.setUid(uid);
      sendBase("findListByUid", args);
    }

    public List<one.show.user.thrift.view.UserDeviceView> recv_findListByUid() throws org.apache.thrift.TException
    {
      findListByUid_result result = new findListByUid_result();
      receiveBase(result, "findListByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findListByUid failed: unknown result");
    }

    public void saveUserDevice(one.show.user.thrift.view.UserDeviceView device) throws org.apache.thrift.TException
    {
      send_saveUserDevice(device);
      recv_saveUserDevice();
    }

    public void send_saveUserDevice(one.show.user.thrift.view.UserDeviceView device) throws org.apache.thrift.TException
    {
      saveUserDevice_args args = new saveUserDevice_args();
      args.setDevice(device);
      sendBase("saveUserDevice", args);
    }

    public void recv_saveUserDevice() throws org.apache.thrift.TException
    {
      saveUserDevice_result result = new saveUserDevice_result();
      receiveBase(result, "saveUserDevice");
      return;
    }

    public void deleteUserDeviceByUid(long uid) throws org.apache.thrift.TException
    {
      send_deleteUserDeviceByUid(uid);
      recv_deleteUserDeviceByUid();
    }

    public void send_deleteUserDeviceByUid(long uid) throws org.apache.thrift.TException
    {
      deleteUserDeviceByUid_args args = new deleteUserDeviceByUid_args();
      args.setUid(uid);
      sendBase("deleteUserDeviceByUid", args);
    }

    public void recv_deleteUserDeviceByUid() throws org.apache.thrift.TException
    {
      deleteUserDeviceByUid_result result = new deleteUserDeviceByUid_result();
      receiveBase(result, "deleteUserDeviceByUid");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findDeviceByDid(String did, org.apache.thrift.async.AsyncMethodCallback<findDeviceByDid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findDeviceByDid_call method_call = new findDeviceByDid_call(did, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findDeviceByDid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      public findDeviceByDid_call(String did, org.apache.thrift.async.AsyncMethodCallback<findDeviceByDid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findDeviceByDid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findDeviceByDid_args args = new findDeviceByDid_args();
        args.setDid(did);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.user.thrift.view.DeviceView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findDeviceByDid();
      }
    }

    public void updateDevice(String did, Map<String,String> paramsMap, org.apache.thrift.async.AsyncMethodCallback<updateDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDevice_call method_call = new updateDevice_call(did, paramsMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      private Map<String,String> paramsMap;
      public updateDevice_call(String did, Map<String,String> paramsMap, org.apache.thrift.async.AsyncMethodCallback<updateDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
        this.paramsMap = paramsMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDevice_args args = new updateDevice_args();
        args.setDid(did);
        args.setParamsMap(paramsMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateDevice();
      }
    }

    public void findDeviceForbiddenListByDid(String did, org.apache.thrift.async.AsyncMethodCallback<findDeviceForbiddenListByDid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findDeviceForbiddenListByDid_call method_call = new findDeviceForbiddenListByDid_call(did, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findDeviceForbiddenListByDid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      public findDeviceForbiddenListByDid_call(String did, org.apache.thrift.async.AsyncMethodCallback<findDeviceForbiddenListByDid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findDeviceForbiddenListByDid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findDeviceForbiddenListByDid_args args = new findDeviceForbiddenListByDid_args();
        args.setDid(did);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.user.thrift.view.DeviceForbiddenView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findDeviceForbiddenListByDid();
      }
    }

    public void findForbiddenByDid(String did, org.apache.thrift.async.AsyncMethodCallback<findForbiddenByDid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findForbiddenByDid_call method_call = new findForbiddenByDid_call(did, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findForbiddenByDid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      public findForbiddenByDid_call(String did, org.apache.thrift.async.AsyncMethodCallback<findForbiddenByDid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findForbiddenByDid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findForbiddenByDid_args args = new findForbiddenByDid_args();
        args.setDid(did);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findForbiddenByDid();
      }
    }

    public void saveForbidden(one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView, org.apache.thrift.async.AsyncMethodCallback<saveForbidden_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveForbidden_call method_call = new saveForbidden_call(deviceForbiddenView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveForbidden_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView;
      public saveForbidden_call(one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView, org.apache.thrift.async.AsyncMethodCallback<saveForbidden_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceForbiddenView = deviceForbiddenView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveForbidden", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveForbidden_args args = new saveForbidden_args();
        args.setDeviceForbiddenView(deviceForbiddenView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws one.show.common.exception.ServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveForbidden();
      }
    }

    public void deleteDevice(String did, org.apache.thrift.async.AsyncMethodCallback<deleteDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteDevice_call method_call = new deleteDevice_call(did, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      public deleteDevice_call(String did, org.apache.thrift.async.AsyncMethodCallback<deleteDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteDevice_args args = new deleteDevice_args();
        args.setDid(did);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteDevice();
      }
    }

    public void deleteForbidden(String did, org.apache.thrift.async.AsyncMethodCallback<deleteForbidden_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteForbidden_call method_call = new deleteForbidden_call(did, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteForbidden_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      public deleteForbidden_call(String did, org.apache.thrift.async.AsyncMethodCallback<deleteForbidden_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteForbidden", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteForbidden_args args = new deleteForbidden_args();
        args.setDid(did);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteForbidden();
      }
    }

    public void saveDevice(one.show.user.thrift.view.DeviceView deviceView, org.apache.thrift.async.AsyncMethodCallback<saveDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveDevice_call method_call = new saveDevice_call(deviceView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.user.thrift.view.DeviceView deviceView;
      public saveDevice_call(one.show.user.thrift.view.DeviceView deviceView, org.apache.thrift.async.AsyncMethodCallback<saveDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceView = deviceView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveDevice_args args = new saveDevice_args();
        args.setDeviceView(deviceView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws one.show.common.exception.ServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveDevice();
      }
    }

    public void findUserDevice(long uid, String deviceUuid, org.apache.thrift.async.AsyncMethodCallback<findUserDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserDevice_call method_call = new findUserDevice_call(uid, deviceUuid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private String deviceUuid;
      public findUserDevice_call(long uid, String deviceUuid, org.apache.thrift.async.AsyncMethodCallback<findUserDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.deviceUuid = deviceUuid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserDevice_args args = new findUserDevice_args();
        args.setUid(uid);
        args.setDeviceUuid(deviceUuid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.user.thrift.view.UserDeviceView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserDevice();
      }
    }

    public void findListByUid(long uid, org.apache.thrift.async.AsyncMethodCallback<findListByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findListByUid_call method_call = new findListByUid_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findListByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public findListByUid_call(long uid, org.apache.thrift.async.AsyncMethodCallback<findListByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findListByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findListByUid_args args = new findListByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.user.thrift.view.UserDeviceView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findListByUid();
      }
    }

    public void saveUserDevice(one.show.user.thrift.view.UserDeviceView device, org.apache.thrift.async.AsyncMethodCallback<saveUserDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveUserDevice_call method_call = new saveUserDevice_call(device, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveUserDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.user.thrift.view.UserDeviceView device;
      public saveUserDevice_call(one.show.user.thrift.view.UserDeviceView device, org.apache.thrift.async.AsyncMethodCallback<saveUserDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device = device;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveUserDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveUserDevice_args args = new saveUserDevice_args();
        args.setDevice(device);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveUserDevice();
      }
    }

    public void deleteUserDeviceByUid(long uid, org.apache.thrift.async.AsyncMethodCallback<deleteUserDeviceByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUserDeviceByUid_call method_call = new deleteUserDeviceByUid_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUserDeviceByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public deleteUserDeviceByUid_call(long uid, org.apache.thrift.async.AsyncMethodCallback<deleteUserDeviceByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUserDeviceByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUserDeviceByUid_args args = new deleteUserDeviceByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteUserDeviceByUid();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findDeviceByDid", new findDeviceByDid());
      processMap.put("updateDevice", new updateDevice());
      processMap.put("findDeviceForbiddenListByDid", new findDeviceForbiddenListByDid());
      processMap.put("findForbiddenByDid", new findForbiddenByDid());
      processMap.put("saveForbidden", new saveForbidden());
      processMap.put("deleteDevice", new deleteDevice());
      processMap.put("deleteForbidden", new deleteForbidden());
      processMap.put("saveDevice", new saveDevice());
      processMap.put("findUserDevice", new findUserDevice());
      processMap.put("findListByUid", new findListByUid());
      processMap.put("saveUserDevice", new saveUserDevice());
      processMap.put("deleteUserDeviceByUid", new deleteUserDeviceByUid());
      return processMap;
    }

    public static class findDeviceByDid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findDeviceByDid_args> {
      public findDeviceByDid() {
        super("findDeviceByDid");
      }

      public findDeviceByDid_args getEmptyArgsInstance() {
        return new findDeviceByDid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findDeviceByDid_result getResult(I iface, findDeviceByDid_args args) throws org.apache.thrift.TException {
        findDeviceByDid_result result = new findDeviceByDid_result();
        result.success = iface.findDeviceByDid(args.did);
        return result;
      }
    }

    public static class updateDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDevice_args> {
      public updateDevice() {
        super("updateDevice");
      }

      public updateDevice_args getEmptyArgsInstance() {
        return new updateDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateDevice_result getResult(I iface, updateDevice_args args) throws org.apache.thrift.TException {
        updateDevice_result result = new updateDevice_result();
        iface.updateDevice(args.did, args.paramsMap);
        return result;
      }
    }

    public static class findDeviceForbiddenListByDid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findDeviceForbiddenListByDid_args> {
      public findDeviceForbiddenListByDid() {
        super("findDeviceForbiddenListByDid");
      }

      public findDeviceForbiddenListByDid_args getEmptyArgsInstance() {
        return new findDeviceForbiddenListByDid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findDeviceForbiddenListByDid_result getResult(I iface, findDeviceForbiddenListByDid_args args) throws org.apache.thrift.TException {
        findDeviceForbiddenListByDid_result result = new findDeviceForbiddenListByDid_result();
        result.success = iface.findDeviceForbiddenListByDid(args.did);
        return result;
      }
    }

    public static class findForbiddenByDid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findForbiddenByDid_args> {
      public findForbiddenByDid() {
        super("findForbiddenByDid");
      }

      public findForbiddenByDid_args getEmptyArgsInstance() {
        return new findForbiddenByDid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findForbiddenByDid_result getResult(I iface, findForbiddenByDid_args args) throws org.apache.thrift.TException {
        findForbiddenByDid_result result = new findForbiddenByDid_result();
        result.success = iface.findForbiddenByDid(args.did);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveForbidden<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveForbidden_args> {
      public saveForbidden() {
        super("saveForbidden");
      }

      public saveForbidden_args getEmptyArgsInstance() {
        return new saveForbidden_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveForbidden_result getResult(I iface, saveForbidden_args args) throws org.apache.thrift.TException {
        saveForbidden_result result = new saveForbidden_result();
        try {
          iface.saveForbidden(args.deviceForbiddenView);
        } catch (one.show.common.exception.ServerException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteDevice_args> {
      public deleteDevice() {
        super("deleteDevice");
      }

      public deleteDevice_args getEmptyArgsInstance() {
        return new deleteDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteDevice_result getResult(I iface, deleteDevice_args args) throws org.apache.thrift.TException {
        deleteDevice_result result = new deleteDevice_result();
        iface.deleteDevice(args.did);
        return result;
      }
    }

    public static class deleteForbidden<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteForbidden_args> {
      public deleteForbidden() {
        super("deleteForbidden");
      }

      public deleteForbidden_args getEmptyArgsInstance() {
        return new deleteForbidden_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteForbidden_result getResult(I iface, deleteForbidden_args args) throws org.apache.thrift.TException {
        deleteForbidden_result result = new deleteForbidden_result();
        iface.deleteForbidden(args.did);
        return result;
      }
    }

    public static class saveDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveDevice_args> {
      public saveDevice() {
        super("saveDevice");
      }

      public saveDevice_args getEmptyArgsInstance() {
        return new saveDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveDevice_result getResult(I iface, saveDevice_args args) throws org.apache.thrift.TException {
        saveDevice_result result = new saveDevice_result();
        try {
          iface.saveDevice(args.deviceView);
        } catch (one.show.common.exception.ServerException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findUserDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserDevice_args> {
      public findUserDevice() {
        super("findUserDevice");
      }

      public findUserDevice_args getEmptyArgsInstance() {
        return new findUserDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserDevice_result getResult(I iface, findUserDevice_args args) throws org.apache.thrift.TException {
        findUserDevice_result result = new findUserDevice_result();
        result.success = iface.findUserDevice(args.uid, args.deviceUuid);
        return result;
      }
    }

    public static class findListByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findListByUid_args> {
      public findListByUid() {
        super("findListByUid");
      }

      public findListByUid_args getEmptyArgsInstance() {
        return new findListByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findListByUid_result getResult(I iface, findListByUid_args args) throws org.apache.thrift.TException {
        findListByUid_result result = new findListByUid_result();
        result.success = iface.findListByUid(args.uid);
        return result;
      }
    }

    public static class saveUserDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveUserDevice_args> {
      public saveUserDevice() {
        super("saveUserDevice");
      }

      public saveUserDevice_args getEmptyArgsInstance() {
        return new saveUserDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveUserDevice_result getResult(I iface, saveUserDevice_args args) throws org.apache.thrift.TException {
        saveUserDevice_result result = new saveUserDevice_result();
        iface.saveUserDevice(args.device);
        return result;
      }
    }

    public static class deleteUserDeviceByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUserDeviceByUid_args> {
      public deleteUserDeviceByUid() {
        super("deleteUserDeviceByUid");
      }

      public deleteUserDeviceByUid_args getEmptyArgsInstance() {
        return new deleteUserDeviceByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUserDeviceByUid_result getResult(I iface, deleteUserDeviceByUid_args args) throws org.apache.thrift.TException {
        deleteUserDeviceByUid_result result = new deleteUserDeviceByUid_result();
        iface.deleteUserDeviceByUid(args.uid);
        return result;
      }
    }

  }

  public static class findDeviceByDid_args implements org.apache.thrift.TBase<findDeviceByDid_args, findDeviceByDid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDeviceByDid_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDeviceByDid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDeviceByDid_argsTupleSchemeFactory());
    }

    public String did; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDeviceByDid_args.class, metaDataMap);
    }

    public findDeviceByDid_args() {
    }

    public findDeviceByDid_args(
      String did)
    {
      this();
      this.did = did;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDeviceByDid_args(findDeviceByDid_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
    }

    public findDeviceByDid_args deepCopy() {
      return new findDeviceByDid_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
    }

    public String getDid() {
      return this.did;
    }

    public findDeviceByDid_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDeviceByDid_args)
        return this.equals((findDeviceByDid_args)that);
      return false;
    }

    public boolean equals(findDeviceByDid_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findDeviceByDid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findDeviceByDid_args typedOther = (findDeviceByDid_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDeviceByDid_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDeviceByDid_argsStandardSchemeFactory implements SchemeFactory {
      public findDeviceByDid_argsStandardScheme getScheme() {
        return new findDeviceByDid_argsStandardScheme();
      }
    }

    private static class findDeviceByDid_argsStandardScheme extends StandardScheme<findDeviceByDid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDeviceByDid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDeviceByDid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDeviceByDid_argsTupleSchemeFactory implements SchemeFactory {
      public findDeviceByDid_argsTupleScheme getScheme() {
        return new findDeviceByDid_argsTupleScheme();
      }
    }

    private static class findDeviceByDid_argsTupleScheme extends TupleScheme<findDeviceByDid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDeviceByDid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDeviceByDid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
      }
    }

  }

  public static class findDeviceByDid_result implements org.apache.thrift.TBase<findDeviceByDid_result, findDeviceByDid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDeviceByDid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDeviceByDid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDeviceByDid_resultTupleSchemeFactory());
    }

    public one.show.user.thrift.view.DeviceView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.DeviceView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDeviceByDid_result.class, metaDataMap);
    }

    public findDeviceByDid_result() {
    }

    public findDeviceByDid_result(
      one.show.user.thrift.view.DeviceView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDeviceByDid_result(findDeviceByDid_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.user.thrift.view.DeviceView(other.success);
      }
    }

    public findDeviceByDid_result deepCopy() {
      return new findDeviceByDid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.user.thrift.view.DeviceView getSuccess() {
      return this.success;
    }

    public findDeviceByDid_result setSuccess(one.show.user.thrift.view.DeviceView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.user.thrift.view.DeviceView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDeviceByDid_result)
        return this.equals((findDeviceByDid_result)that);
      return false;
    }

    public boolean equals(findDeviceByDid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findDeviceByDid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findDeviceByDid_result typedOther = (findDeviceByDid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDeviceByDid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDeviceByDid_resultStandardSchemeFactory implements SchemeFactory {
      public findDeviceByDid_resultStandardScheme getScheme() {
        return new findDeviceByDid_resultStandardScheme();
      }
    }

    private static class findDeviceByDid_resultStandardScheme extends StandardScheme<findDeviceByDid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDeviceByDid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.user.thrift.view.DeviceView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDeviceByDid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDeviceByDid_resultTupleSchemeFactory implements SchemeFactory {
      public findDeviceByDid_resultTupleScheme getScheme() {
        return new findDeviceByDid_resultTupleScheme();
      }
    }

    private static class findDeviceByDid_resultTupleScheme extends TupleScheme<findDeviceByDid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDeviceByDid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDeviceByDid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.user.thrift.view.DeviceView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateDevice_args implements org.apache.thrift.TBase<updateDevice_args, updateDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDevice_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDevice_argsTupleSchemeFactory());
    }

    public String did; // required
    public Map<String,String> paramsMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did"),
      PARAMS_MAP((short)2, "paramsMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          case 2: // PARAMS_MAP
            return PARAMS_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramsMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDevice_args.class, metaDataMap);
    }

    public updateDevice_args() {
    }

    public updateDevice_args(
      String did,
      Map<String,String> paramsMap)
    {
      this();
      this.did = did;
      this.paramsMap = paramsMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDevice_args(updateDevice_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
      if (other.isSetParamsMap()) {
        Map<String,String> __this__paramsMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramsMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramsMap_copy_key = other_element_key;

          String __this__paramsMap_copy_value = other_element_value;

          __this__paramsMap.put(__this__paramsMap_copy_key, __this__paramsMap_copy_value);
        }
        this.paramsMap = __this__paramsMap;
      }
    }

    public updateDevice_args deepCopy() {
      return new updateDevice_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
      this.paramsMap = null;
    }

    public String getDid() {
      return this.did;
    }

    public updateDevice_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public int getParamsMapSize() {
      return (this.paramsMap == null) ? 0 : this.paramsMap.size();
    }

    public void putToParamsMap(String key, String val) {
      if (this.paramsMap == null) {
        this.paramsMap = new HashMap<String,String>();
      }
      this.paramsMap.put(key, val);
    }

    public Map<String,String> getParamsMap() {
      return this.paramsMap;
    }

    public updateDevice_args setParamsMap(Map<String,String> paramsMap) {
      this.paramsMap = paramsMap;
      return this;
    }

    public void unsetParamsMap() {
      this.paramsMap = null;
    }

    /** Returns true if field paramsMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamsMap() {
      return this.paramsMap != null;
    }

    public void setParamsMapIsSet(boolean value) {
      if (!value) {
        this.paramsMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      case PARAMS_MAP:
        if (value == null) {
          unsetParamsMap();
        } else {
          setParamsMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      case PARAMS_MAP:
        return getParamsMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      case PARAMS_MAP:
        return isSetParamsMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDevice_args)
        return this.equals((updateDevice_args)that);
      return false;
    }

    public boolean equals(updateDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      boolean this_present_paramsMap = true && this.isSetParamsMap();
      boolean that_present_paramsMap = true && that.isSetParamsMap();
      if (this_present_paramsMap || that_present_paramsMap) {
        if (!(this_present_paramsMap && that_present_paramsMap))
          return false;
        if (!this.paramsMap.equals(that.paramsMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateDevice_args typedOther = (updateDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamsMap()).compareTo(typedOther.isSetParamsMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamsMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsMap, typedOther.paramsMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDevice_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramsMap:");
      if (this.paramsMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramsMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDevice_argsStandardSchemeFactory implements SchemeFactory {
      public updateDevice_argsStandardScheme getScheme() {
        return new updateDevice_argsStandardScheme();
      }
    }

    private static class updateDevice_argsStandardScheme extends StandardScheme<updateDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.paramsMap = new HashMap<String,String>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2; // required
                    String _val3; // required
                    _key2 = iprot.readString();
                    _val3 = iprot.readString();
                    struct.paramsMap.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        if (struct.paramsMap != null) {
          oprot.writeFieldBegin(PARAMS_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramsMap.size()));
            for (Map.Entry<String, String> _iter4 : struct.paramsMap.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDevice_argsTupleSchemeFactory implements SchemeFactory {
      public updateDevice_argsTupleScheme getScheme() {
        return new updateDevice_argsTupleScheme();
      }
    }

    private static class updateDevice_argsTupleScheme extends TupleScheme<updateDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        if (struct.isSetParamsMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
        if (struct.isSetParamsMap()) {
          {
            oprot.writeI32(struct.paramsMap.size());
            for (Map.Entry<String, String> _iter5 : struct.paramsMap.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramsMap = new HashMap<String,String>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8; // required
              String _val9; // required
              _key8 = iprot.readString();
              _val9 = iprot.readString();
              struct.paramsMap.put(_key8, _val9);
            }
          }
          struct.setParamsMapIsSet(true);
        }
      }
    }

  }

  public static class updateDevice_result implements org.apache.thrift.TBase<updateDevice_result, updateDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDevice_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDevice_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDevice_result.class, metaDataMap);
    }

    public updateDevice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDevice_result(updateDevice_result other) {
    }

    public updateDevice_result deepCopy() {
      return new updateDevice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDevice_result)
        return this.equals((updateDevice_result)that);
      return false;
    }

    public boolean equals(updateDevice_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateDevice_result typedOther = (updateDevice_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDevice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDevice_resultStandardSchemeFactory implements SchemeFactory {
      public updateDevice_resultStandardScheme getScheme() {
        return new updateDevice_resultStandardScheme();
      }
    }

    private static class updateDevice_resultStandardScheme extends StandardScheme<updateDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDevice_resultTupleSchemeFactory implements SchemeFactory {
      public updateDevice_resultTupleScheme getScheme() {
        return new updateDevice_resultTupleScheme();
      }
    }

    private static class updateDevice_resultTupleScheme extends TupleScheme<updateDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findDeviceForbiddenListByDid_args implements org.apache.thrift.TBase<findDeviceForbiddenListByDid_args, findDeviceForbiddenListByDid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDeviceForbiddenListByDid_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDeviceForbiddenListByDid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDeviceForbiddenListByDid_argsTupleSchemeFactory());
    }

    public String did; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDeviceForbiddenListByDid_args.class, metaDataMap);
    }

    public findDeviceForbiddenListByDid_args() {
    }

    public findDeviceForbiddenListByDid_args(
      String did)
    {
      this();
      this.did = did;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDeviceForbiddenListByDid_args(findDeviceForbiddenListByDid_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
    }

    public findDeviceForbiddenListByDid_args deepCopy() {
      return new findDeviceForbiddenListByDid_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
    }

    public String getDid() {
      return this.did;
    }

    public findDeviceForbiddenListByDid_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDeviceForbiddenListByDid_args)
        return this.equals((findDeviceForbiddenListByDid_args)that);
      return false;
    }

    public boolean equals(findDeviceForbiddenListByDid_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findDeviceForbiddenListByDid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findDeviceForbiddenListByDid_args typedOther = (findDeviceForbiddenListByDid_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDeviceForbiddenListByDid_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDeviceForbiddenListByDid_argsStandardSchemeFactory implements SchemeFactory {
      public findDeviceForbiddenListByDid_argsStandardScheme getScheme() {
        return new findDeviceForbiddenListByDid_argsStandardScheme();
      }
    }

    private static class findDeviceForbiddenListByDid_argsStandardScheme extends StandardScheme<findDeviceForbiddenListByDid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDeviceForbiddenListByDid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDeviceForbiddenListByDid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDeviceForbiddenListByDid_argsTupleSchemeFactory implements SchemeFactory {
      public findDeviceForbiddenListByDid_argsTupleScheme getScheme() {
        return new findDeviceForbiddenListByDid_argsTupleScheme();
      }
    }

    private static class findDeviceForbiddenListByDid_argsTupleScheme extends TupleScheme<findDeviceForbiddenListByDid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDeviceForbiddenListByDid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDeviceForbiddenListByDid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
      }
    }

  }

  public static class findDeviceForbiddenListByDid_result implements org.apache.thrift.TBase<findDeviceForbiddenListByDid_result, findDeviceForbiddenListByDid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDeviceForbiddenListByDid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDeviceForbiddenListByDid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDeviceForbiddenListByDid_resultTupleSchemeFactory());
    }

    public List<one.show.user.thrift.view.DeviceForbiddenView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.DeviceForbiddenView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDeviceForbiddenListByDid_result.class, metaDataMap);
    }

    public findDeviceForbiddenListByDid_result() {
    }

    public findDeviceForbiddenListByDid_result(
      List<one.show.user.thrift.view.DeviceForbiddenView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDeviceForbiddenListByDid_result(findDeviceForbiddenListByDid_result other) {
      if (other.isSetSuccess()) {
        List<one.show.user.thrift.view.DeviceForbiddenView> __this__success = new ArrayList<one.show.user.thrift.view.DeviceForbiddenView>();
        for (one.show.user.thrift.view.DeviceForbiddenView other_element : other.success) {
          __this__success.add(new one.show.user.thrift.view.DeviceForbiddenView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findDeviceForbiddenListByDid_result deepCopy() {
      return new findDeviceForbiddenListByDid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.user.thrift.view.DeviceForbiddenView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.user.thrift.view.DeviceForbiddenView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.user.thrift.view.DeviceForbiddenView>();
      }
      this.success.add(elem);
    }

    public List<one.show.user.thrift.view.DeviceForbiddenView> getSuccess() {
      return this.success;
    }

    public findDeviceForbiddenListByDid_result setSuccess(List<one.show.user.thrift.view.DeviceForbiddenView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.user.thrift.view.DeviceForbiddenView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDeviceForbiddenListByDid_result)
        return this.equals((findDeviceForbiddenListByDid_result)that);
      return false;
    }

    public boolean equals(findDeviceForbiddenListByDid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findDeviceForbiddenListByDid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findDeviceForbiddenListByDid_result typedOther = (findDeviceForbiddenListByDid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDeviceForbiddenListByDid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDeviceForbiddenListByDid_resultStandardSchemeFactory implements SchemeFactory {
      public findDeviceForbiddenListByDid_resultStandardScheme getScheme() {
        return new findDeviceForbiddenListByDid_resultStandardScheme();
      }
    }

    private static class findDeviceForbiddenListByDid_resultStandardScheme extends StandardScheme<findDeviceForbiddenListByDid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDeviceForbiddenListByDid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.user.thrift.view.DeviceForbiddenView>(_list10.size);
                  for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                  {
                    one.show.user.thrift.view.DeviceForbiddenView _elem12; // required
                    _elem12 = new one.show.user.thrift.view.DeviceForbiddenView();
                    _elem12.read(iprot);
                    struct.success.add(_elem12);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDeviceForbiddenListByDid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.user.thrift.view.DeviceForbiddenView _iter13 : struct.success)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDeviceForbiddenListByDid_resultTupleSchemeFactory implements SchemeFactory {
      public findDeviceForbiddenListByDid_resultTupleScheme getScheme() {
        return new findDeviceForbiddenListByDid_resultTupleScheme();
      }
    }

    private static class findDeviceForbiddenListByDid_resultTupleScheme extends TupleScheme<findDeviceForbiddenListByDid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDeviceForbiddenListByDid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.user.thrift.view.DeviceForbiddenView _iter14 : struct.success)
            {
              _iter14.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDeviceForbiddenListByDid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.user.thrift.view.DeviceForbiddenView>(_list15.size);
            for (int _i16 = 0; _i16 < _list15.size; ++_i16)
            {
              one.show.user.thrift.view.DeviceForbiddenView _elem17; // required
              _elem17 = new one.show.user.thrift.view.DeviceForbiddenView();
              _elem17.read(iprot);
              struct.success.add(_elem17);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findForbiddenByDid_args implements org.apache.thrift.TBase<findForbiddenByDid_args, findForbiddenByDid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findForbiddenByDid_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findForbiddenByDid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findForbiddenByDid_argsTupleSchemeFactory());
    }

    public String did; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findForbiddenByDid_args.class, metaDataMap);
    }

    public findForbiddenByDid_args() {
    }

    public findForbiddenByDid_args(
      String did)
    {
      this();
      this.did = did;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findForbiddenByDid_args(findForbiddenByDid_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
    }

    public findForbiddenByDid_args deepCopy() {
      return new findForbiddenByDid_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
    }

    public String getDid() {
      return this.did;
    }

    public findForbiddenByDid_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findForbiddenByDid_args)
        return this.equals((findForbiddenByDid_args)that);
      return false;
    }

    public boolean equals(findForbiddenByDid_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findForbiddenByDid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findForbiddenByDid_args typedOther = (findForbiddenByDid_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findForbiddenByDid_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findForbiddenByDid_argsStandardSchemeFactory implements SchemeFactory {
      public findForbiddenByDid_argsStandardScheme getScheme() {
        return new findForbiddenByDid_argsStandardScheme();
      }
    }

    private static class findForbiddenByDid_argsStandardScheme extends StandardScheme<findForbiddenByDid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findForbiddenByDid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findForbiddenByDid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findForbiddenByDid_argsTupleSchemeFactory implements SchemeFactory {
      public findForbiddenByDid_argsTupleScheme getScheme() {
        return new findForbiddenByDid_argsTupleScheme();
      }
    }

    private static class findForbiddenByDid_argsTupleScheme extends TupleScheme<findForbiddenByDid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findForbiddenByDid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findForbiddenByDid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
      }
    }

  }

  public static class findForbiddenByDid_result implements org.apache.thrift.TBase<findForbiddenByDid_result, findForbiddenByDid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findForbiddenByDid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findForbiddenByDid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findForbiddenByDid_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findForbiddenByDid_result.class, metaDataMap);
    }

    public findForbiddenByDid_result() {
    }

    public findForbiddenByDid_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findForbiddenByDid_result(findForbiddenByDid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public findForbiddenByDid_result deepCopy() {
      return new findForbiddenByDid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public findForbiddenByDid_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findForbiddenByDid_result)
        return this.equals((findForbiddenByDid_result)that);
      return false;
    }

    public boolean equals(findForbiddenByDid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findForbiddenByDid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findForbiddenByDid_result typedOther = (findForbiddenByDid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findForbiddenByDid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findForbiddenByDid_resultStandardSchemeFactory implements SchemeFactory {
      public findForbiddenByDid_resultStandardScheme getScheme() {
        return new findForbiddenByDid_resultStandardScheme();
      }
    }

    private static class findForbiddenByDid_resultStandardScheme extends StandardScheme<findForbiddenByDid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findForbiddenByDid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findForbiddenByDid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findForbiddenByDid_resultTupleSchemeFactory implements SchemeFactory {
      public findForbiddenByDid_resultTupleScheme getScheme() {
        return new findForbiddenByDid_resultTupleScheme();
      }
    }

    private static class findForbiddenByDid_resultTupleScheme extends TupleScheme<findForbiddenByDid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findForbiddenByDid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findForbiddenByDid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveForbidden_args implements org.apache.thrift.TBase<saveForbidden_args, saveForbidden_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveForbidden_args");

    private static final org.apache.thrift.protocol.TField DEVICE_FORBIDDEN_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceForbiddenView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveForbidden_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveForbidden_argsTupleSchemeFactory());
    }

    public one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_FORBIDDEN_VIEW((short)1, "deviceForbiddenView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_FORBIDDEN_VIEW
            return DEVICE_FORBIDDEN_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_FORBIDDEN_VIEW, new org.apache.thrift.meta_data.FieldMetaData("deviceForbiddenView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.DeviceForbiddenView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveForbidden_args.class, metaDataMap);
    }

    public saveForbidden_args() {
    }

    public saveForbidden_args(
      one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView)
    {
      this();
      this.deviceForbiddenView = deviceForbiddenView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveForbidden_args(saveForbidden_args other) {
      if (other.isSetDeviceForbiddenView()) {
        this.deviceForbiddenView = new one.show.user.thrift.view.DeviceForbiddenView(other.deviceForbiddenView);
      }
    }

    public saveForbidden_args deepCopy() {
      return new saveForbidden_args(this);
    }

    @Override
    public void clear() {
      this.deviceForbiddenView = null;
    }

    public one.show.user.thrift.view.DeviceForbiddenView getDeviceForbiddenView() {
      return this.deviceForbiddenView;
    }

    public saveForbidden_args setDeviceForbiddenView(one.show.user.thrift.view.DeviceForbiddenView deviceForbiddenView) {
      this.deviceForbiddenView = deviceForbiddenView;
      return this;
    }

    public void unsetDeviceForbiddenView() {
      this.deviceForbiddenView = null;
    }

    /** Returns true if field deviceForbiddenView is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceForbiddenView() {
      return this.deviceForbiddenView != null;
    }

    public void setDeviceForbiddenViewIsSet(boolean value) {
      if (!value) {
        this.deviceForbiddenView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_FORBIDDEN_VIEW:
        if (value == null) {
          unsetDeviceForbiddenView();
        } else {
          setDeviceForbiddenView((one.show.user.thrift.view.DeviceForbiddenView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_FORBIDDEN_VIEW:
        return getDeviceForbiddenView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_FORBIDDEN_VIEW:
        return isSetDeviceForbiddenView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveForbidden_args)
        return this.equals((saveForbidden_args)that);
      return false;
    }

    public boolean equals(saveForbidden_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceForbiddenView = true && this.isSetDeviceForbiddenView();
      boolean that_present_deviceForbiddenView = true && that.isSetDeviceForbiddenView();
      if (this_present_deviceForbiddenView || that_present_deviceForbiddenView) {
        if (!(this_present_deviceForbiddenView && that_present_deviceForbiddenView))
          return false;
        if (!this.deviceForbiddenView.equals(that.deviceForbiddenView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveForbidden_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveForbidden_args typedOther = (saveForbidden_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceForbiddenView()).compareTo(typedOther.isSetDeviceForbiddenView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceForbiddenView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceForbiddenView, typedOther.deviceForbiddenView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveForbidden_args(");
      boolean first = true;

      sb.append("deviceForbiddenView:");
      if (this.deviceForbiddenView == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceForbiddenView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (deviceForbiddenView != null) {
        deviceForbiddenView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveForbidden_argsStandardSchemeFactory implements SchemeFactory {
      public saveForbidden_argsStandardScheme getScheme() {
        return new saveForbidden_argsStandardScheme();
      }
    }

    private static class saveForbidden_argsStandardScheme extends StandardScheme<saveForbidden_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveForbidden_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_FORBIDDEN_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviceForbiddenView = new one.show.user.thrift.view.DeviceForbiddenView();
                struct.deviceForbiddenView.read(iprot);
                struct.setDeviceForbiddenViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveForbidden_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceForbiddenView != null) {
          oprot.writeFieldBegin(DEVICE_FORBIDDEN_VIEW_FIELD_DESC);
          struct.deviceForbiddenView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveForbidden_argsTupleSchemeFactory implements SchemeFactory {
      public saveForbidden_argsTupleScheme getScheme() {
        return new saveForbidden_argsTupleScheme();
      }
    }

    private static class saveForbidden_argsTupleScheme extends TupleScheme<saveForbidden_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveForbidden_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceForbiddenView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceForbiddenView()) {
          struct.deviceForbiddenView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveForbidden_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceForbiddenView = new one.show.user.thrift.view.DeviceForbiddenView();
          struct.deviceForbiddenView.read(iprot);
          struct.setDeviceForbiddenViewIsSet(true);
        }
      }
    }

  }

  public static class saveForbidden_result implements org.apache.thrift.TBase<saveForbidden_result, saveForbidden_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveForbidden_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveForbidden_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveForbidden_resultTupleSchemeFactory());
    }

    public one.show.common.exception.ServerException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveForbidden_result.class, metaDataMap);
    }

    public saveForbidden_result() {
    }

    public saveForbidden_result(
      one.show.common.exception.ServerException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveForbidden_result(saveForbidden_result other) {
      if (other.isSetE()) {
        this.e = new one.show.common.exception.ServerException(other.e);
      }
    }

    public saveForbidden_result deepCopy() {
      return new saveForbidden_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public one.show.common.exception.ServerException getE() {
      return this.e;
    }

    public saveForbidden_result setE(one.show.common.exception.ServerException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((one.show.common.exception.ServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveForbidden_result)
        return this.equals((saveForbidden_result)that);
      return false;
    }

    public boolean equals(saveForbidden_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveForbidden_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveForbidden_result typedOther = (saveForbidden_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveForbidden_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveForbidden_resultStandardSchemeFactory implements SchemeFactory {
      public saveForbidden_resultStandardScheme getScheme() {
        return new saveForbidden_resultStandardScheme();
      }
    }

    private static class saveForbidden_resultStandardScheme extends StandardScheme<saveForbidden_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveForbidden_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new one.show.common.exception.ServerException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveForbidden_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveForbidden_resultTupleSchemeFactory implements SchemeFactory {
      public saveForbidden_resultTupleScheme getScheme() {
        return new saveForbidden_resultTupleScheme();
      }
    }

    private static class saveForbidden_resultTupleScheme extends TupleScheme<saveForbidden_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveForbidden_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveForbidden_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new one.show.common.exception.ServerException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteDevice_args implements org.apache.thrift.TBase<deleteDevice_args, deleteDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDevice_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDevice_argsTupleSchemeFactory());
    }

    public String did; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDevice_args.class, metaDataMap);
    }

    public deleteDevice_args() {
    }

    public deleteDevice_args(
      String did)
    {
      this();
      this.did = did;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDevice_args(deleteDevice_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
    }

    public deleteDevice_args deepCopy() {
      return new deleteDevice_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
    }

    public String getDid() {
      return this.did;
    }

    public deleteDevice_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDevice_args)
        return this.equals((deleteDevice_args)that);
      return false;
    }

    public boolean equals(deleteDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteDevice_args typedOther = (deleteDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDevice_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDevice_argsStandardSchemeFactory implements SchemeFactory {
      public deleteDevice_argsStandardScheme getScheme() {
        return new deleteDevice_argsStandardScheme();
      }
    }

    private static class deleteDevice_argsStandardScheme extends StandardScheme<deleteDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDevice_argsTupleSchemeFactory implements SchemeFactory {
      public deleteDevice_argsTupleScheme getScheme() {
        return new deleteDevice_argsTupleScheme();
      }
    }

    private static class deleteDevice_argsTupleScheme extends TupleScheme<deleteDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
      }
    }

  }

  public static class deleteDevice_result implements org.apache.thrift.TBase<deleteDevice_result, deleteDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDevice_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDevice_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDevice_result.class, metaDataMap);
    }

    public deleteDevice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDevice_result(deleteDevice_result other) {
    }

    public deleteDevice_result deepCopy() {
      return new deleteDevice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDevice_result)
        return this.equals((deleteDevice_result)that);
      return false;
    }

    public boolean equals(deleteDevice_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteDevice_result typedOther = (deleteDevice_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDevice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDevice_resultStandardSchemeFactory implements SchemeFactory {
      public deleteDevice_resultStandardScheme getScheme() {
        return new deleteDevice_resultStandardScheme();
      }
    }

    private static class deleteDevice_resultStandardScheme extends StandardScheme<deleteDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDevice_resultTupleSchemeFactory implements SchemeFactory {
      public deleteDevice_resultTupleScheme getScheme() {
        return new deleteDevice_resultTupleScheme();
      }
    }

    private static class deleteDevice_resultTupleScheme extends TupleScheme<deleteDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteForbidden_args implements org.apache.thrift.TBase<deleteForbidden_args, deleteForbidden_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteForbidden_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteForbidden_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteForbidden_argsTupleSchemeFactory());
    }

    public String did; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteForbidden_args.class, metaDataMap);
    }

    public deleteForbidden_args() {
    }

    public deleteForbidden_args(
      String did)
    {
      this();
      this.did = did;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteForbidden_args(deleteForbidden_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
    }

    public deleteForbidden_args deepCopy() {
      return new deleteForbidden_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
    }

    public String getDid() {
      return this.did;
    }

    public deleteForbidden_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteForbidden_args)
        return this.equals((deleteForbidden_args)that);
      return false;
    }

    public boolean equals(deleteForbidden_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteForbidden_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteForbidden_args typedOther = (deleteForbidden_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteForbidden_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteForbidden_argsStandardSchemeFactory implements SchemeFactory {
      public deleteForbidden_argsStandardScheme getScheme() {
        return new deleteForbidden_argsStandardScheme();
      }
    }

    private static class deleteForbidden_argsStandardScheme extends StandardScheme<deleteForbidden_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteForbidden_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteForbidden_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteForbidden_argsTupleSchemeFactory implements SchemeFactory {
      public deleteForbidden_argsTupleScheme getScheme() {
        return new deleteForbidden_argsTupleScheme();
      }
    }

    private static class deleteForbidden_argsTupleScheme extends TupleScheme<deleteForbidden_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteForbidden_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteForbidden_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
      }
    }

  }

  public static class deleteForbidden_result implements org.apache.thrift.TBase<deleteForbidden_result, deleteForbidden_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteForbidden_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteForbidden_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteForbidden_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteForbidden_result.class, metaDataMap);
    }

    public deleteForbidden_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteForbidden_result(deleteForbidden_result other) {
    }

    public deleteForbidden_result deepCopy() {
      return new deleteForbidden_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteForbidden_result)
        return this.equals((deleteForbidden_result)that);
      return false;
    }

    public boolean equals(deleteForbidden_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteForbidden_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteForbidden_result typedOther = (deleteForbidden_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteForbidden_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteForbidden_resultStandardSchemeFactory implements SchemeFactory {
      public deleteForbidden_resultStandardScheme getScheme() {
        return new deleteForbidden_resultStandardScheme();
      }
    }

    private static class deleteForbidden_resultStandardScheme extends StandardScheme<deleteForbidden_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteForbidden_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteForbidden_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteForbidden_resultTupleSchemeFactory implements SchemeFactory {
      public deleteForbidden_resultTupleScheme getScheme() {
        return new deleteForbidden_resultTupleScheme();
      }
    }

    private static class deleteForbidden_resultTupleScheme extends TupleScheme<deleteForbidden_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteForbidden_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteForbidden_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveDevice_args implements org.apache.thrift.TBase<saveDevice_args, saveDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveDevice_argsTupleSchemeFactory());
    }

    public one.show.user.thrift.view.DeviceView deviceView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_VIEW((short)1, "deviceView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_VIEW
            return DEVICE_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_VIEW, new org.apache.thrift.meta_data.FieldMetaData("deviceView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.DeviceView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveDevice_args.class, metaDataMap);
    }

    public saveDevice_args() {
    }

    public saveDevice_args(
      one.show.user.thrift.view.DeviceView deviceView)
    {
      this();
      this.deviceView = deviceView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveDevice_args(saveDevice_args other) {
      if (other.isSetDeviceView()) {
        this.deviceView = new one.show.user.thrift.view.DeviceView(other.deviceView);
      }
    }

    public saveDevice_args deepCopy() {
      return new saveDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceView = null;
    }

    public one.show.user.thrift.view.DeviceView getDeviceView() {
      return this.deviceView;
    }

    public saveDevice_args setDeviceView(one.show.user.thrift.view.DeviceView deviceView) {
      this.deviceView = deviceView;
      return this;
    }

    public void unsetDeviceView() {
      this.deviceView = null;
    }

    /** Returns true if field deviceView is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceView() {
      return this.deviceView != null;
    }

    public void setDeviceViewIsSet(boolean value) {
      if (!value) {
        this.deviceView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_VIEW:
        if (value == null) {
          unsetDeviceView();
        } else {
          setDeviceView((one.show.user.thrift.view.DeviceView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_VIEW:
        return getDeviceView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_VIEW:
        return isSetDeviceView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveDevice_args)
        return this.equals((saveDevice_args)that);
      return false;
    }

    public boolean equals(saveDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceView = true && this.isSetDeviceView();
      boolean that_present_deviceView = true && that.isSetDeviceView();
      if (this_present_deviceView || that_present_deviceView) {
        if (!(this_present_deviceView && that_present_deviceView))
          return false;
        if (!this.deviceView.equals(that.deviceView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveDevice_args typedOther = (saveDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceView()).compareTo(typedOther.isSetDeviceView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceView, typedOther.deviceView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveDevice_args(");
      boolean first = true;

      sb.append("deviceView:");
      if (this.deviceView == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (deviceView != null) {
        deviceView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveDevice_argsStandardSchemeFactory implements SchemeFactory {
      public saveDevice_argsStandardScheme getScheme() {
        return new saveDevice_argsStandardScheme();
      }
    }

    private static class saveDevice_argsStandardScheme extends StandardScheme<saveDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviceView = new one.show.user.thrift.view.DeviceView();
                struct.deviceView.read(iprot);
                struct.setDeviceViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceView != null) {
          oprot.writeFieldBegin(DEVICE_VIEW_FIELD_DESC);
          struct.deviceView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveDevice_argsTupleSchemeFactory implements SchemeFactory {
      public saveDevice_argsTupleScheme getScheme() {
        return new saveDevice_argsTupleScheme();
      }
    }

    private static class saveDevice_argsTupleScheme extends TupleScheme<saveDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceView()) {
          struct.deviceView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceView = new one.show.user.thrift.view.DeviceView();
          struct.deviceView.read(iprot);
          struct.setDeviceViewIsSet(true);
        }
      }
    }

  }

  public static class saveDevice_result implements org.apache.thrift.TBase<saveDevice_result, saveDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveDevice_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveDevice_resultTupleSchemeFactory());
    }

    public one.show.common.exception.ServerException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveDevice_result.class, metaDataMap);
    }

    public saveDevice_result() {
    }

    public saveDevice_result(
      one.show.common.exception.ServerException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveDevice_result(saveDevice_result other) {
      if (other.isSetE()) {
        this.e = new one.show.common.exception.ServerException(other.e);
      }
    }

    public saveDevice_result deepCopy() {
      return new saveDevice_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public one.show.common.exception.ServerException getE() {
      return this.e;
    }

    public saveDevice_result setE(one.show.common.exception.ServerException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((one.show.common.exception.ServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveDevice_result)
        return this.equals((saveDevice_result)that);
      return false;
    }

    public boolean equals(saveDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveDevice_result typedOther = (saveDevice_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveDevice_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveDevice_resultStandardSchemeFactory implements SchemeFactory {
      public saveDevice_resultStandardScheme getScheme() {
        return new saveDevice_resultStandardScheme();
      }
    }

    private static class saveDevice_resultStandardScheme extends StandardScheme<saveDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new one.show.common.exception.ServerException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveDevice_resultTupleSchemeFactory implements SchemeFactory {
      public saveDevice_resultTupleScheme getScheme() {
        return new saveDevice_resultTupleScheme();
      }
    }

    private static class saveDevice_resultTupleScheme extends TupleScheme<saveDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new one.show.common.exception.ServerException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class findUserDevice_args implements org.apache.thrift.TBase<findUserDevice_args, findUserDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserDevice_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceUuid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserDevice_argsTupleSchemeFactory());
    }

    public long uid; // required
    public String deviceUuid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      DEVICE_UUID((short)2, "deviceUuid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // DEVICE_UUID
            return DEVICE_UUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("deviceUuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserDevice_args.class, metaDataMap);
    }

    public findUserDevice_args() {
    }

    public findUserDevice_args(
      long uid,
      String deviceUuid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.deviceUuid = deviceUuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserDevice_args(findUserDevice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetDeviceUuid()) {
        this.deviceUuid = other.deviceUuid;
      }
    }

    public findUserDevice_args deepCopy() {
      return new findUserDevice_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.deviceUuid = null;
    }

    public long getUid() {
      return this.uid;
    }

    public findUserDevice_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public String getDeviceUuid() {
      return this.deviceUuid;
    }

    public findUserDevice_args setDeviceUuid(String deviceUuid) {
      this.deviceUuid = deviceUuid;
      return this;
    }

    public void unsetDeviceUuid() {
      this.deviceUuid = null;
    }

    /** Returns true if field deviceUuid is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceUuid() {
      return this.deviceUuid != null;
    }

    public void setDeviceUuidIsSet(boolean value) {
      if (!value) {
        this.deviceUuid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case DEVICE_UUID:
        if (value == null) {
          unsetDeviceUuid();
        } else {
          setDeviceUuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case DEVICE_UUID:
        return getDeviceUuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case DEVICE_UUID:
        return isSetDeviceUuid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserDevice_args)
        return this.equals((findUserDevice_args)that);
      return false;
    }

    public boolean equals(findUserDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_deviceUuid = true && this.isSetDeviceUuid();
      boolean that_present_deviceUuid = true && that.isSetDeviceUuid();
      if (this_present_deviceUuid || that_present_deviceUuid) {
        if (!(this_present_deviceUuid && that_present_deviceUuid))
          return false;
        if (!this.deviceUuid.equals(that.deviceUuid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserDevice_args typedOther = (findUserDevice_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceUuid()).compareTo(typedOther.isSetDeviceUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceUuid, typedOther.deviceUuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserDevice_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceUuid:");
      if (this.deviceUuid == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceUuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserDevice_argsStandardSchemeFactory implements SchemeFactory {
      public findUserDevice_argsStandardScheme getScheme() {
        return new findUserDevice_argsStandardScheme();
      }
    }

    private static class findUserDevice_argsStandardScheme extends StandardScheme<findUserDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceUuid = iprot.readString();
                struct.setDeviceUuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.deviceUuid != null) {
          oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
          oprot.writeString(struct.deviceUuid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserDevice_argsTupleSchemeFactory implements SchemeFactory {
      public findUserDevice_argsTupleScheme getScheme() {
        return new findUserDevice_argsTupleScheme();
      }
    }

    private static class findUserDevice_argsTupleScheme extends TupleScheme<findUserDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceUuid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetDeviceUuid()) {
          oprot.writeString(struct.deviceUuid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceUuid = iprot.readString();
          struct.setDeviceUuidIsSet(true);
        }
      }
    }

  }

  public static class findUserDevice_result implements org.apache.thrift.TBase<findUserDevice_result, findUserDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserDevice_resultTupleSchemeFactory());
    }

    public one.show.user.thrift.view.UserDeviceView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.UserDeviceView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserDevice_result.class, metaDataMap);
    }

    public findUserDevice_result() {
    }

    public findUserDevice_result(
      one.show.user.thrift.view.UserDeviceView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserDevice_result(findUserDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.user.thrift.view.UserDeviceView(other.success);
      }
    }

    public findUserDevice_result deepCopy() {
      return new findUserDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.user.thrift.view.UserDeviceView getSuccess() {
      return this.success;
    }

    public findUserDevice_result setSuccess(one.show.user.thrift.view.UserDeviceView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.user.thrift.view.UserDeviceView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserDevice_result)
        return this.equals((findUserDevice_result)that);
      return false;
    }

    public boolean equals(findUserDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserDevice_result typedOther = (findUserDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserDevice_resultStandardSchemeFactory implements SchemeFactory {
      public findUserDevice_resultStandardScheme getScheme() {
        return new findUserDevice_resultStandardScheme();
      }
    }

    private static class findUserDevice_resultStandardScheme extends StandardScheme<findUserDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.user.thrift.view.UserDeviceView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserDevice_resultTupleSchemeFactory implements SchemeFactory {
      public findUserDevice_resultTupleScheme getScheme() {
        return new findUserDevice_resultTupleScheme();
      }
    }

    private static class findUserDevice_resultTupleScheme extends TupleScheme<findUserDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.user.thrift.view.UserDeviceView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findListByUid_args implements org.apache.thrift.TBase<findListByUid_args, findListByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findListByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findListByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findListByUid_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findListByUid_args.class, metaDataMap);
    }

    public findListByUid_args() {
    }

    public findListByUid_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findListByUid_args(findListByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public findListByUid_args deepCopy() {
      return new findListByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findListByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findListByUid_args)
        return this.equals((findListByUid_args)that);
      return false;
    }

    public boolean equals(findListByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findListByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findListByUid_args typedOther = (findListByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findListByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findListByUid_argsStandardSchemeFactory implements SchemeFactory {
      public findListByUid_argsStandardScheme getScheme() {
        return new findListByUid_argsStandardScheme();
      }
    }

    private static class findListByUid_argsStandardScheme extends StandardScheme<findListByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findListByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findListByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findListByUid_argsTupleSchemeFactory implements SchemeFactory {
      public findListByUid_argsTupleScheme getScheme() {
        return new findListByUid_argsTupleScheme();
      }
    }

    private static class findListByUid_argsTupleScheme extends TupleScheme<findListByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findListByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findListByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class findListByUid_result implements org.apache.thrift.TBase<findListByUid_result, findListByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findListByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findListByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findListByUid_resultTupleSchemeFactory());
    }

    public List<one.show.user.thrift.view.UserDeviceView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.UserDeviceView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findListByUid_result.class, metaDataMap);
    }

    public findListByUid_result() {
    }

    public findListByUid_result(
      List<one.show.user.thrift.view.UserDeviceView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findListByUid_result(findListByUid_result other) {
      if (other.isSetSuccess()) {
        List<one.show.user.thrift.view.UserDeviceView> __this__success = new ArrayList<one.show.user.thrift.view.UserDeviceView>();
        for (one.show.user.thrift.view.UserDeviceView other_element : other.success) {
          __this__success.add(new one.show.user.thrift.view.UserDeviceView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findListByUid_result deepCopy() {
      return new findListByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.user.thrift.view.UserDeviceView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.user.thrift.view.UserDeviceView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.user.thrift.view.UserDeviceView>();
      }
      this.success.add(elem);
    }

    public List<one.show.user.thrift.view.UserDeviceView> getSuccess() {
      return this.success;
    }

    public findListByUid_result setSuccess(List<one.show.user.thrift.view.UserDeviceView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.user.thrift.view.UserDeviceView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findListByUid_result)
        return this.equals((findListByUid_result)that);
      return false;
    }

    public boolean equals(findListByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findListByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findListByUid_result typedOther = (findListByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findListByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findListByUid_resultStandardSchemeFactory implements SchemeFactory {
      public findListByUid_resultStandardScheme getScheme() {
        return new findListByUid_resultStandardScheme();
      }
    }

    private static class findListByUid_resultStandardScheme extends StandardScheme<findListByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findListByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.user.thrift.view.UserDeviceView>(_list18.size);
                  for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                  {
                    one.show.user.thrift.view.UserDeviceView _elem20; // required
                    _elem20 = new one.show.user.thrift.view.UserDeviceView();
                    _elem20.read(iprot);
                    struct.success.add(_elem20);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findListByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.user.thrift.view.UserDeviceView _iter21 : struct.success)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findListByUid_resultTupleSchemeFactory implements SchemeFactory {
      public findListByUid_resultTupleScheme getScheme() {
        return new findListByUid_resultTupleScheme();
      }
    }

    private static class findListByUid_resultTupleScheme extends TupleScheme<findListByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findListByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.user.thrift.view.UserDeviceView _iter22 : struct.success)
            {
              _iter22.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findListByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.user.thrift.view.UserDeviceView>(_list23.size);
            for (int _i24 = 0; _i24 < _list23.size; ++_i24)
            {
              one.show.user.thrift.view.UserDeviceView _elem25; // required
              _elem25 = new one.show.user.thrift.view.UserDeviceView();
              _elem25.read(iprot);
              struct.success.add(_elem25);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveUserDevice_args implements org.apache.thrift.TBase<saveUserDevice_args, saveUserDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserDevice_argsTupleSchemeFactory());
    }

    public one.show.user.thrift.view.UserDeviceView device; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE((short)1, "device");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE
            return DEVICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.user.thrift.view.UserDeviceView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserDevice_args.class, metaDataMap);
    }

    public saveUserDevice_args() {
    }

    public saveUserDevice_args(
      one.show.user.thrift.view.UserDeviceView device)
    {
      this();
      this.device = device;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserDevice_args(saveUserDevice_args other) {
      if (other.isSetDevice()) {
        this.device = new one.show.user.thrift.view.UserDeviceView(other.device);
      }
    }

    public saveUserDevice_args deepCopy() {
      return new saveUserDevice_args(this);
    }

    @Override
    public void clear() {
      this.device = null;
    }

    public one.show.user.thrift.view.UserDeviceView getDevice() {
      return this.device;
    }

    public saveUserDevice_args setDevice(one.show.user.thrift.view.UserDeviceView device) {
      this.device = device;
      return this;
    }

    public void unsetDevice() {
      this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice() {
      return this.device != null;
    }

    public void setDeviceIsSet(boolean value) {
      if (!value) {
        this.device = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE:
        if (value == null) {
          unsetDevice();
        } else {
          setDevice((one.show.user.thrift.view.UserDeviceView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE:
        return getDevice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE:
        return isSetDevice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserDevice_args)
        return this.equals((saveUserDevice_args)that);
      return false;
    }

    public boolean equals(saveUserDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device = true && this.isSetDevice();
      boolean that_present_device = true && that.isSetDevice();
      if (this_present_device || that_present_device) {
        if (!(this_present_device && that_present_device))
          return false;
        if (!this.device.equals(that.device))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveUserDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveUserDevice_args typedOther = (saveUserDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserDevice_args(");
      boolean first = true;

      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (device != null) {
        device.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserDevice_argsStandardSchemeFactory implements SchemeFactory {
      public saveUserDevice_argsStandardScheme getScheme() {
        return new saveUserDevice_argsStandardScheme();
      }
    }

    private static class saveUserDevice_argsStandardScheme extends StandardScheme<saveUserDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device = new one.show.user.thrift.view.UserDeviceView();
                struct.device.read(iprot);
                struct.setDeviceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device != null) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserDevice_argsTupleSchemeFactory implements SchemeFactory {
      public saveUserDevice_argsTupleScheme getScheme() {
        return new saveUserDevice_argsTupleScheme();
      }
    }

    private static class saveUserDevice_argsTupleScheme extends TupleScheme<saveUserDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice()) {
          struct.device.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device = new one.show.user.thrift.view.UserDeviceView();
          struct.device.read(iprot);
          struct.setDeviceIsSet(true);
        }
      }
    }

  }

  public static class saveUserDevice_result implements org.apache.thrift.TBase<saveUserDevice_result, saveUserDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserDevice_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserDevice_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserDevice_result.class, metaDataMap);
    }

    public saveUserDevice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserDevice_result(saveUserDevice_result other) {
    }

    public saveUserDevice_result deepCopy() {
      return new saveUserDevice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserDevice_result)
        return this.equals((saveUserDevice_result)that);
      return false;
    }

    public boolean equals(saveUserDevice_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveUserDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveUserDevice_result typedOther = (saveUserDevice_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserDevice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserDevice_resultStandardSchemeFactory implements SchemeFactory {
      public saveUserDevice_resultStandardScheme getScheme() {
        return new saveUserDevice_resultStandardScheme();
      }
    }

    private static class saveUserDevice_resultStandardScheme extends StandardScheme<saveUserDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserDevice_resultTupleSchemeFactory implements SchemeFactory {
      public saveUserDevice_resultTupleScheme getScheme() {
        return new saveUserDevice_resultTupleScheme();
      }
    }

    private static class saveUserDevice_resultTupleScheme extends TupleScheme<saveUserDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteUserDeviceByUid_args implements org.apache.thrift.TBase<deleteUserDeviceByUid_args, deleteUserDeviceByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserDeviceByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserDeviceByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserDeviceByUid_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserDeviceByUid_args.class, metaDataMap);
    }

    public deleteUserDeviceByUid_args() {
    }

    public deleteUserDeviceByUid_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserDeviceByUid_args(deleteUserDeviceByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public deleteUserDeviceByUid_args deepCopy() {
      return new deleteUserDeviceByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public deleteUserDeviceByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserDeviceByUid_args)
        return this.equals((deleteUserDeviceByUid_args)that);
      return false;
    }

    public boolean equals(deleteUserDeviceByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteUserDeviceByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteUserDeviceByUid_args typedOther = (deleteUserDeviceByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserDeviceByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserDeviceByUid_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUserDeviceByUid_argsStandardScheme getScheme() {
        return new deleteUserDeviceByUid_argsStandardScheme();
      }
    }

    private static class deleteUserDeviceByUid_argsStandardScheme extends StandardScheme<deleteUserDeviceByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserDeviceByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserDeviceByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserDeviceByUid_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUserDeviceByUid_argsTupleScheme getScheme() {
        return new deleteUserDeviceByUid_argsTupleScheme();
      }
    }

    private static class deleteUserDeviceByUid_argsTupleScheme extends TupleScheme<deleteUserDeviceByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserDeviceByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserDeviceByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class deleteUserDeviceByUid_result implements org.apache.thrift.TBase<deleteUserDeviceByUid_result, deleteUserDeviceByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserDeviceByUid_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserDeviceByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserDeviceByUid_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserDeviceByUid_result.class, metaDataMap);
    }

    public deleteUserDeviceByUid_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserDeviceByUid_result(deleteUserDeviceByUid_result other) {
    }

    public deleteUserDeviceByUid_result deepCopy() {
      return new deleteUserDeviceByUid_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserDeviceByUid_result)
        return this.equals((deleteUserDeviceByUid_result)that);
      return false;
    }

    public boolean equals(deleteUserDeviceByUid_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteUserDeviceByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteUserDeviceByUid_result typedOther = (deleteUserDeviceByUid_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserDeviceByUid_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserDeviceByUid_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUserDeviceByUid_resultStandardScheme getScheme() {
        return new deleteUserDeviceByUid_resultStandardScheme();
      }
    }

    private static class deleteUserDeviceByUid_resultStandardScheme extends StandardScheme<deleteUserDeviceByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserDeviceByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserDeviceByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserDeviceByUid_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUserDeviceByUid_resultTupleScheme getScheme() {
        return new deleteUserDeviceByUid_resultTupleScheme();
      }
    }

    private static class deleteUserDeviceByUid_resultTupleScheme extends TupleScheme<deleteUserDeviceByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserDeviceByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserDeviceByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
