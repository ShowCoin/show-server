/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FamilyView implements org.apache.thrift.TBase<FamilyView, FamilyView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FamilyView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField OWNER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OWNER_SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerSex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONTACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contactNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ALIPAY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayAccount", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ALIPAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OWNER_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerNick", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FamilyViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FamilyViewTupleSchemeFactory());
  }

  public long id; // required
  public String name; // required
  public long ownerId; // required
  public String ownerName; // required
  public int ownerSex; // required
  public String contactNo; // required
  public int status; // required
  public String alipayAccount; // required
  public String alipayName; // required
  public int createTime; // required
  public String type; // required
  public String ownerNick; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    OWNER_ID((short)3, "ownerId"),
    OWNER_NAME((short)4, "ownerName"),
    OWNER_SEX((short)5, "ownerSex"),
    CONTACT_NO((short)6, "contactNo"),
    STATUS((short)7, "status"),
    ALIPAY_ACCOUNT((short)8, "alipayAccount"),
    ALIPAY_NAME((short)9, "alipayName"),
    CREATE_TIME((short)10, "createTime"),
    TYPE((short)11, "type"),
    OWNER_NICK((short)12, "ownerNick");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // OWNER_ID
          return OWNER_ID;
        case 4: // OWNER_NAME
          return OWNER_NAME;
        case 5: // OWNER_SEX
          return OWNER_SEX;
        case 6: // CONTACT_NO
          return CONTACT_NO;
        case 7: // STATUS
          return STATUS;
        case 8: // ALIPAY_ACCOUNT
          return ALIPAY_ACCOUNT;
        case 9: // ALIPAY_NAME
          return ALIPAY_NAME;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // TYPE
          return TYPE;
        case 12: // OWNER_NICK
          return OWNER_NICK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __OWNERID_ISSET_ID = 1;
  private static final int __OWNERSEX_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OWNER_NAME, new org.apache.thrift.meta_data.FieldMetaData("ownerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_SEX, new org.apache.thrift.meta_data.FieldMetaData("ownerSex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contactNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALIPAY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("alipayAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIPAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("alipayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_NICK, new org.apache.thrift.meta_data.FieldMetaData("ownerNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FamilyView.class, metaDataMap);
  }

  public FamilyView() {
  }

  public FamilyView(
    long id,
    String name,
    long ownerId,
    String ownerName,
    int ownerSex,
    String contactNo,
    int status,
    String alipayAccount,
    String alipayName,
    int createTime,
    String type,
    String ownerNick)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.ownerId = ownerId;
    setOwnerIdIsSet(true);
    this.ownerName = ownerName;
    this.ownerSex = ownerSex;
    setOwnerSexIsSet(true);
    this.contactNo = contactNo;
    this.status = status;
    setStatusIsSet(true);
    this.alipayAccount = alipayAccount;
    this.alipayName = alipayName;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.type = type;
    this.ownerNick = ownerNick;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FamilyView(FamilyView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.ownerId = other.ownerId;
    if (other.isSetOwnerName()) {
      this.ownerName = other.ownerName;
    }
    this.ownerSex = other.ownerSex;
    if (other.isSetContactNo()) {
      this.contactNo = other.contactNo;
    }
    this.status = other.status;
    if (other.isSetAlipayAccount()) {
      this.alipayAccount = other.alipayAccount;
    }
    if (other.isSetAlipayName()) {
      this.alipayName = other.alipayName;
    }
    this.createTime = other.createTime;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetOwnerNick()) {
      this.ownerNick = other.ownerNick;
    }
  }

  public FamilyView deepCopy() {
    return new FamilyView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setOwnerIdIsSet(false);
    this.ownerId = 0;
    this.ownerName = null;
    setOwnerSexIsSet(false);
    this.ownerSex = 0;
    this.contactNo = null;
    setStatusIsSet(false);
    this.status = 0;
    this.alipayAccount = null;
    this.alipayName = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.type = null;
    this.ownerNick = null;
  }

  public long getId() {
    return this.id;
  }

  public FamilyView setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public FamilyView setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getOwnerId() {
    return this.ownerId;
  }

  public FamilyView setOwnerId(long ownerId) {
    this.ownerId = ownerId;
    setOwnerIdIsSet(true);
    return this;
  }

  public void unsetOwnerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWNERID_ISSET_ID);
  }

  /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerId() {
    return EncodingUtils.testBit(__isset_bitfield, __OWNERID_ISSET_ID);
  }

  public void setOwnerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWNERID_ISSET_ID, value);
  }

  public String getOwnerName() {
    return this.ownerName;
  }

  public FamilyView setOwnerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  public void unsetOwnerName() {
    this.ownerName = null;
  }

  /** Returns true if field ownerName is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerName() {
    return this.ownerName != null;
  }

  public void setOwnerNameIsSet(boolean value) {
    if (!value) {
      this.ownerName = null;
    }
  }

  public int getOwnerSex() {
    return this.ownerSex;
  }

  public FamilyView setOwnerSex(int ownerSex) {
    this.ownerSex = ownerSex;
    setOwnerSexIsSet(true);
    return this;
  }

  public void unsetOwnerSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWNERSEX_ISSET_ID);
  }

  /** Returns true if field ownerSex is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerSex() {
    return EncodingUtils.testBit(__isset_bitfield, __OWNERSEX_ISSET_ID);
  }

  public void setOwnerSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWNERSEX_ISSET_ID, value);
  }

  public String getContactNo() {
    return this.contactNo;
  }

  public FamilyView setContactNo(String contactNo) {
    this.contactNo = contactNo;
    return this;
  }

  public void unsetContactNo() {
    this.contactNo = null;
  }

  /** Returns true if field contactNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContactNo() {
    return this.contactNo != null;
  }

  public void setContactNoIsSet(boolean value) {
    if (!value) {
      this.contactNo = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public FamilyView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getAlipayAccount() {
    return this.alipayAccount;
  }

  public FamilyView setAlipayAccount(String alipayAccount) {
    this.alipayAccount = alipayAccount;
    return this;
  }

  public void unsetAlipayAccount() {
    this.alipayAccount = null;
  }

  /** Returns true if field alipayAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipayAccount() {
    return this.alipayAccount != null;
  }

  public void setAlipayAccountIsSet(boolean value) {
    if (!value) {
      this.alipayAccount = null;
    }
  }

  public String getAlipayName() {
    return this.alipayName;
  }

  public FamilyView setAlipayName(String alipayName) {
    this.alipayName = alipayName;
    return this;
  }

  public void unsetAlipayName() {
    this.alipayName = null;
  }

  /** Returns true if field alipayName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipayName() {
    return this.alipayName != null;
  }

  public void setAlipayNameIsSet(boolean value) {
    if (!value) {
      this.alipayName = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public FamilyView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public FamilyView setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getOwnerNick() {
    return this.ownerNick;
  }

  public FamilyView setOwnerNick(String ownerNick) {
    this.ownerNick = ownerNick;
    return this;
  }

  public void unsetOwnerNick() {
    this.ownerNick = null;
  }

  /** Returns true if field ownerNick is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerNick() {
    return this.ownerNick != null;
  }

  public void setOwnerNickIsSet(boolean value) {
    if (!value) {
      this.ownerNick = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerId();
      } else {
        setOwnerId((Long)value);
      }
      break;

    case OWNER_NAME:
      if (value == null) {
        unsetOwnerName();
      } else {
        setOwnerName((String)value);
      }
      break;

    case OWNER_SEX:
      if (value == null) {
        unsetOwnerSex();
      } else {
        setOwnerSex((Integer)value);
      }
      break;

    case CONTACT_NO:
      if (value == null) {
        unsetContactNo();
      } else {
        setContactNo((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ALIPAY_ACCOUNT:
      if (value == null) {
        unsetAlipayAccount();
      } else {
        setAlipayAccount((String)value);
      }
      break;

    case ALIPAY_NAME:
      if (value == null) {
        unsetAlipayName();
      } else {
        setAlipayName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case OWNER_NICK:
      if (value == null) {
        unsetOwnerNick();
      } else {
        setOwnerNick((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case OWNER_ID:
      return Long.valueOf(getOwnerId());

    case OWNER_NAME:
      return getOwnerName();

    case OWNER_SEX:
      return Integer.valueOf(getOwnerSex());

    case CONTACT_NO:
      return getContactNo();

    case STATUS:
      return Integer.valueOf(getStatus());

    case ALIPAY_ACCOUNT:
      return getAlipayAccount();

    case ALIPAY_NAME:
      return getAlipayName();

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case TYPE:
      return getType();

    case OWNER_NICK:
      return getOwnerNick();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case OWNER_ID:
      return isSetOwnerId();
    case OWNER_NAME:
      return isSetOwnerName();
    case OWNER_SEX:
      return isSetOwnerSex();
    case CONTACT_NO:
      return isSetContactNo();
    case STATUS:
      return isSetStatus();
    case ALIPAY_ACCOUNT:
      return isSetAlipayAccount();
    case ALIPAY_NAME:
      return isSetAlipayName();
    case CREATE_TIME:
      return isSetCreateTime();
    case TYPE:
      return isSetType();
    case OWNER_NICK:
      return isSetOwnerNick();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FamilyView)
      return this.equals((FamilyView)that);
    return false;
  }

  public boolean equals(FamilyView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_ownerId = true;
    boolean that_present_ownerId = true;
    if (this_present_ownerId || that_present_ownerId) {
      if (!(this_present_ownerId && that_present_ownerId))
        return false;
      if (this.ownerId != that.ownerId)
        return false;
    }

    boolean this_present_ownerName = true && this.isSetOwnerName();
    boolean that_present_ownerName = true && that.isSetOwnerName();
    if (this_present_ownerName || that_present_ownerName) {
      if (!(this_present_ownerName && that_present_ownerName))
        return false;
      if (!this.ownerName.equals(that.ownerName))
        return false;
    }

    boolean this_present_ownerSex = true;
    boolean that_present_ownerSex = true;
    if (this_present_ownerSex || that_present_ownerSex) {
      if (!(this_present_ownerSex && that_present_ownerSex))
        return false;
      if (this.ownerSex != that.ownerSex)
        return false;
    }

    boolean this_present_contactNo = true && this.isSetContactNo();
    boolean that_present_contactNo = true && that.isSetContactNo();
    if (this_present_contactNo || that_present_contactNo) {
      if (!(this_present_contactNo && that_present_contactNo))
        return false;
      if (!this.contactNo.equals(that.contactNo))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_alipayAccount = true && this.isSetAlipayAccount();
    boolean that_present_alipayAccount = true && that.isSetAlipayAccount();
    if (this_present_alipayAccount || that_present_alipayAccount) {
      if (!(this_present_alipayAccount && that_present_alipayAccount))
        return false;
      if (!this.alipayAccount.equals(that.alipayAccount))
        return false;
    }

    boolean this_present_alipayName = true && this.isSetAlipayName();
    boolean that_present_alipayName = true && that.isSetAlipayName();
    if (this_present_alipayName || that_present_alipayName) {
      if (!(this_present_alipayName && that_present_alipayName))
        return false;
      if (!this.alipayName.equals(that.alipayName))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_ownerNick = true && this.isSetOwnerNick();
    boolean that_present_ownerNick = true && that.isSetOwnerNick();
    if (this_present_ownerNick || that_present_ownerNick) {
      if (!(this_present_ownerNick && that_present_ownerNick))
        return false;
      if (!this.ownerNick.equals(that.ownerNick))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FamilyView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FamilyView typedOther = (FamilyView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerId()).compareTo(typedOther.isSetOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, typedOther.ownerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerName()).compareTo(typedOther.isSetOwnerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerName, typedOther.ownerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerSex()).compareTo(typedOther.isSetOwnerSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerSex, typedOther.ownerSex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactNo()).compareTo(typedOther.isSetContactNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactNo, typedOther.contactNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipayAccount()).compareTo(typedOther.isSetAlipayAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipayAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayAccount, typedOther.alipayAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipayName()).compareTo(typedOther.isSetAlipayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayName, typedOther.alipayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerNick()).compareTo(typedOther.isSetOwnerNick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerNick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerNick, typedOther.ownerNick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FamilyView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerId:");
    sb.append(this.ownerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerName:");
    if (this.ownerName == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerSex:");
    sb.append(this.ownerSex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactNo:");
    if (this.contactNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contactNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alipayAccount:");
    if (this.alipayAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.alipayAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alipayName:");
    if (this.alipayName == null) {
      sb.append("null");
    } else {
      sb.append(this.alipayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerNick:");
    if (this.ownerNick == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerNick);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FamilyViewStandardSchemeFactory implements SchemeFactory {
    public FamilyViewStandardScheme getScheme() {
      return new FamilyViewStandardScheme();
    }
  }

  private static class FamilyViewStandardScheme extends StandardScheme<FamilyView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FamilyView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ownerId = iprot.readI64();
              struct.setOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OWNER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerName = iprot.readString();
              struct.setOwnerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OWNER_SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ownerSex = iprot.readI32();
              struct.setOwnerSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactNo = iprot.readString();
              struct.setContactNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALIPAY_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alipayAccount = iprot.readString();
              struct.setAlipayAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALIPAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alipayName = iprot.readString();
              struct.setAlipayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OWNER_NICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerNick = iprot.readString();
              struct.setOwnerNickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FamilyView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
      oprot.writeI64(struct.ownerId);
      oprot.writeFieldEnd();
      if (struct.ownerName != null) {
        oprot.writeFieldBegin(OWNER_NAME_FIELD_DESC);
        oprot.writeString(struct.ownerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OWNER_SEX_FIELD_DESC);
      oprot.writeI32(struct.ownerSex);
      oprot.writeFieldEnd();
      if (struct.contactNo != null) {
        oprot.writeFieldBegin(CONTACT_NO_FIELD_DESC);
        oprot.writeString(struct.contactNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.alipayAccount != null) {
        oprot.writeFieldBegin(ALIPAY_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.alipayAccount);
        oprot.writeFieldEnd();
      }
      if (struct.alipayName != null) {
        oprot.writeFieldBegin(ALIPAY_NAME_FIELD_DESC);
        oprot.writeString(struct.alipayName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.ownerNick != null) {
        oprot.writeFieldBegin(OWNER_NICK_FIELD_DESC);
        oprot.writeString(struct.ownerNick);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FamilyViewTupleSchemeFactory implements SchemeFactory {
    public FamilyViewTupleScheme getScheme() {
      return new FamilyViewTupleScheme();
    }
  }

  private static class FamilyViewTupleScheme extends TupleScheme<FamilyView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FamilyView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetOwnerId()) {
        optionals.set(2);
      }
      if (struct.isSetOwnerName()) {
        optionals.set(3);
      }
      if (struct.isSetOwnerSex()) {
        optionals.set(4);
      }
      if (struct.isSetContactNo()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetAlipayAccount()) {
        optionals.set(7);
      }
      if (struct.isSetAlipayName()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(9);
      }
      if (struct.isSetType()) {
        optionals.set(10);
      }
      if (struct.isSetOwnerNick()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOwnerId()) {
        oprot.writeI64(struct.ownerId);
      }
      if (struct.isSetOwnerName()) {
        oprot.writeString(struct.ownerName);
      }
      if (struct.isSetOwnerSex()) {
        oprot.writeI32(struct.ownerSex);
      }
      if (struct.isSetContactNo()) {
        oprot.writeString(struct.contactNo);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetAlipayAccount()) {
        oprot.writeString(struct.alipayAccount);
      }
      if (struct.isSetAlipayName()) {
        oprot.writeString(struct.alipayName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetOwnerNick()) {
        oprot.writeString(struct.ownerNick);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FamilyView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ownerId = iprot.readI64();
        struct.setOwnerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ownerName = iprot.readString();
        struct.setOwnerNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ownerSex = iprot.readI32();
        struct.setOwnerSexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contactNo = iprot.readString();
        struct.setContactNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.alipayAccount = iprot.readString();
        struct.setAlipayAccountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.alipayName = iprot.readString();
        struct.setAlipayNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ownerNick = iprot.readString();
        struct.setOwnerNickIsSet(true);
      }
    }
  }

}

