/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.type;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GenericType extends org.apache.thrift.TUnion<GenericType, GenericType._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GenericType");
  private static final org.apache.thrift.protocol.TField AS_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("AsBool", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField AS_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("AsByte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField AS_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("AsShort", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField AS_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("AsInt", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AS_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("AsLong", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField AS_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("AsDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField AS_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("AsString", org.apache.thrift.protocol.TType.STRING, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AS_BOOL((short)1, "AsBool"),
    AS_BYTE((short)2, "AsByte"),
    AS_SHORT((short)3, "AsShort"),
    AS_INT((short)4, "AsInt"),
    AS_LONG((short)5, "AsLong"),
    AS_DOUBLE((short)6, "AsDouble"),
    AS_STRING((short)7, "AsString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AS_BOOL
          return AS_BOOL;
        case 2: // AS_BYTE
          return AS_BYTE;
        case 3: // AS_SHORT
          return AS_SHORT;
        case 4: // AS_INT
          return AS_INT;
        case 5: // AS_LONG
          return AS_LONG;
        case 6: // AS_DOUBLE
          return AS_DOUBLE;
        case 7: // AS_STRING
          return AS_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AS_BOOL, new org.apache.thrift.meta_data.FieldMetaData("AsBool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AS_BYTE, new org.apache.thrift.meta_data.FieldMetaData("AsByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.AS_SHORT, new org.apache.thrift.meta_data.FieldMetaData("AsShort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.AS_INT, new org.apache.thrift.meta_data.FieldMetaData("AsInt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AS_LONG, new org.apache.thrift.meta_data.FieldMetaData("AsLong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AS_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("AsDouble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AS_STRING, new org.apache.thrift.meta_data.FieldMetaData("AsString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GenericType.class, metaDataMap);
  }

  public GenericType() {
    super();
  }

  public GenericType(_Fields setField, Object value) {
    super(setField, value);
  }

  public GenericType(GenericType other) {
    super(other);
  }
  public GenericType deepCopy() {
    return new GenericType(this);
  }

  public static GenericType AsBool(boolean value) {
    GenericType x = new GenericType();
    x.setAsBool(value);
    return x;
  }

  public static GenericType AsByte(byte value) {
    GenericType x = new GenericType();
    x.setAsByte(value);
    return x;
  }

  public static GenericType AsShort(short value) {
    GenericType x = new GenericType();
    x.setAsShort(value);
    return x;
  }

  public static GenericType AsInt(int value) {
    GenericType x = new GenericType();
    x.setAsInt(value);
    return x;
  }

  public static GenericType AsLong(long value) {
    GenericType x = new GenericType();
    x.setAsLong(value);
    return x;
  }

  public static GenericType AsDouble(double value) {
    GenericType x = new GenericType();
    x.setAsDouble(value);
    return x;
  }

  public static GenericType AsString(String value) {
    GenericType x = new GenericType();
    x.setAsString(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case AS_BOOL:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'AsBool', but got " + value.getClass().getSimpleName());
      case AS_BYTE:
        if (value instanceof Byte) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Byte for field 'AsByte', but got " + value.getClass().getSimpleName());
      case AS_SHORT:
        if (value instanceof Short) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Short for field 'AsShort', but got " + value.getClass().getSimpleName());
      case AS_INT:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'AsInt', but got " + value.getClass().getSimpleName());
      case AS_LONG:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'AsLong', but got " + value.getClass().getSimpleName());
      case AS_DOUBLE:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'AsDouble', but got " + value.getClass().getSimpleName());
      case AS_STRING:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'AsString', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case AS_BOOL:
          if (field.type == AS_BOOL_FIELD_DESC.type) {
            Boolean AsBool;
            AsBool = iprot.readBool();
            return AsBool;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case AS_BYTE:
          if (field.type == AS_BYTE_FIELD_DESC.type) {
            Byte AsByte;
            AsByte = iprot.readByte();
            return AsByte;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case AS_SHORT:
          if (field.type == AS_SHORT_FIELD_DESC.type) {
            Short AsShort;
            AsShort = iprot.readI16();
            return AsShort;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case AS_INT:
          if (field.type == AS_INT_FIELD_DESC.type) {
            Integer AsInt;
            AsInt = iprot.readI32();
            return AsInt;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case AS_LONG:
          if (field.type == AS_LONG_FIELD_DESC.type) {
            Long AsLong;
            AsLong = iprot.readI64();
            return AsLong;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case AS_DOUBLE:
          if (field.type == AS_DOUBLE_FIELD_DESC.type) {
            Double AsDouble;
            AsDouble = iprot.readDouble();
            return AsDouble;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case AS_STRING:
          if (field.type == AS_STRING_FIELD_DESC.type) {
            String AsString;
            AsString = iprot.readString();
            return AsString;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case AS_BOOL:
        Boolean AsBool = (Boolean)value_;
        oprot.writeBool(AsBool);
        return;
      case AS_BYTE:
        Byte AsByte = (Byte)value_;
        oprot.writeByte(AsByte);
        return;
      case AS_SHORT:
        Short AsShort = (Short)value_;
        oprot.writeI16(AsShort);
        return;
      case AS_INT:
        Integer AsInt = (Integer)value_;
        oprot.writeI32(AsInt);
        return;
      case AS_LONG:
        Long AsLong = (Long)value_;
        oprot.writeI64(AsLong);
        return;
      case AS_DOUBLE:
        Double AsDouble = (Double)value_;
        oprot.writeDouble(AsDouble);
        return;
      case AS_STRING:
        String AsString = (String)value_;
        oprot.writeString(AsString);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case AS_BOOL:
          Boolean AsBool;
          AsBool = iprot.readBool();
          return AsBool;
        case AS_BYTE:
          Byte AsByte;
          AsByte = iprot.readByte();
          return AsByte;
        case AS_SHORT:
          Short AsShort;
          AsShort = iprot.readI16();
          return AsShort;
        case AS_INT:
          Integer AsInt;
          AsInt = iprot.readI32();
          return AsInt;
        case AS_LONG:
          Long AsLong;
          AsLong = iprot.readI64();
          return AsLong;
        case AS_DOUBLE:
          Double AsDouble;
          AsDouble = iprot.readDouble();
          return AsDouble;
        case AS_STRING:
          String AsString;
          AsString = iprot.readString();
          return AsString;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case AS_BOOL:
        Boolean AsBool = (Boolean)value_;
        oprot.writeBool(AsBool);
        return;
      case AS_BYTE:
        Byte AsByte = (Byte)value_;
        oprot.writeByte(AsByte);
        return;
      case AS_SHORT:
        Short AsShort = (Short)value_;
        oprot.writeI16(AsShort);
        return;
      case AS_INT:
        Integer AsInt = (Integer)value_;
        oprot.writeI32(AsInt);
        return;
      case AS_LONG:
        Long AsLong = (Long)value_;
        oprot.writeI64(AsLong);
        return;
      case AS_DOUBLE:
        Double AsDouble = (Double)value_;
        oprot.writeDouble(AsDouble);
        return;
      case AS_STRING:
        String AsString = (String)value_;
        oprot.writeString(AsString);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case AS_BOOL:
        return AS_BOOL_FIELD_DESC;
      case AS_BYTE:
        return AS_BYTE_FIELD_DESC;
      case AS_SHORT:
        return AS_SHORT_FIELD_DESC;
      case AS_INT:
        return AS_INT_FIELD_DESC;
      case AS_LONG:
        return AS_LONG_FIELD_DESC;
      case AS_DOUBLE:
        return AS_DOUBLE_FIELD_DESC;
      case AS_STRING:
        return AS_STRING_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public boolean getAsBool() {
    if (getSetField() == _Fields.AS_BOOL) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'AsBool' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAsBool(boolean value) {
    setField_ = _Fields.AS_BOOL;
    value_ = value;
  }

  public byte getAsByte() {
    if (getSetField() == _Fields.AS_BYTE) {
      return (Byte)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'AsByte' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAsByte(byte value) {
    setField_ = _Fields.AS_BYTE;
    value_ = value;
  }

  public short getAsShort() {
    if (getSetField() == _Fields.AS_SHORT) {
      return (Short)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'AsShort' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAsShort(short value) {
    setField_ = _Fields.AS_SHORT;
    value_ = value;
  }

  public int getAsInt() {
    if (getSetField() == _Fields.AS_INT) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'AsInt' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAsInt(int value) {
    setField_ = _Fields.AS_INT;
    value_ = value;
  }

  public long getAsLong() {
    if (getSetField() == _Fields.AS_LONG) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'AsLong' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAsLong(long value) {
    setField_ = _Fields.AS_LONG;
    value_ = value;
  }

  public double getAsDouble() {
    if (getSetField() == _Fields.AS_DOUBLE) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'AsDouble' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAsDouble(double value) {
    setField_ = _Fields.AS_DOUBLE;
    value_ = value;
  }

  public String getAsString() {
    if (getSetField() == _Fields.AS_STRING) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'AsString' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAsString(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.AS_STRING;
    value_ = value;
  }

  public boolean isSetAsBool() {
    return setField_ == _Fields.AS_BOOL;
  }


  public boolean isSetAsByte() {
    return setField_ == _Fields.AS_BYTE;
  }


  public boolean isSetAsShort() {
    return setField_ == _Fields.AS_SHORT;
  }


  public boolean isSetAsInt() {
    return setField_ == _Fields.AS_INT;
  }


  public boolean isSetAsLong() {
    return setField_ == _Fields.AS_LONG;
  }


  public boolean isSetAsDouble() {
    return setField_ == _Fields.AS_DOUBLE;
  }


  public boolean isSetAsString() {
    return setField_ == _Fields.AS_STRING;
  }


  public boolean equals(Object other) {
    if (other instanceof GenericType) {
      return equals((GenericType)other);
    } else {
      return false;
    }
  }

  public boolean equals(GenericType other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(GenericType other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
