/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.user.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SettingView implements org.apache.thrift.TBase<SettingView, SettingView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettingView");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NO_DISTURB_FIELD_DESC = new org.apache.thrift.protocol.TField("no_disturb", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NOTIFY_FOLLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("notify_follow", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEFAULT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("default_text", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HI_FIELD_DESC = new org.apache.thrift.protocol.TField("hi", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NOTIFY_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("notify_at", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SHARE_WHEN_LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("share_when_like", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FRIENDS_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("friends_entry", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NOTIFY_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("notify_comment", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NOTIFY_LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("notify_like", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PUSHED_FIELD_DESC = new org.apache.thrift.protocol.TField("pushed", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField VIBRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("vibration", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PUBLISH_VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("publish_video", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField GIFT_VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("giftVideo", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SHARE_WHEN_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("share_when_comment", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettingViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettingViewTupleSchemeFactory());
  }

  public String uid; // required
  public int no_disturb; // required
  public int notify_follow; // required
  public int default_text; // required
  public int hi; // required
  public int notify_at; // required
  public int share_when_like; // required
  public int friends_entry; // required
  public int notify_comment; // required
  public int notify_like; // required
  public int pushed; // required
  public int vibration; // required
  public int publish_video; // required
  public int giftVideo; // required
  public int share_when_comment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    NO_DISTURB((short)2, "no_disturb"),
    NOTIFY_FOLLOW((short)3, "notify_follow"),
    DEFAULT_TEXT((short)4, "default_text"),
    HI((short)5, "hi"),
    NOTIFY_AT((short)6, "notify_at"),
    SHARE_WHEN_LIKE((short)7, "share_when_like"),
    FRIENDS_ENTRY((short)8, "friends_entry"),
    NOTIFY_COMMENT((short)9, "notify_comment"),
    NOTIFY_LIKE((short)10, "notify_like"),
    PUSHED((short)11, "pushed"),
    VIBRATION((short)12, "vibration"),
    PUBLISH_VIDEO((short)13, "publish_video"),
    GIFT_VIDEO((short)14, "giftVideo"),
    SHARE_WHEN_COMMENT((short)15, "share_when_comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // NO_DISTURB
          return NO_DISTURB;
        case 3: // NOTIFY_FOLLOW
          return NOTIFY_FOLLOW;
        case 4: // DEFAULT_TEXT
          return DEFAULT_TEXT;
        case 5: // HI
          return HI;
        case 6: // NOTIFY_AT
          return NOTIFY_AT;
        case 7: // SHARE_WHEN_LIKE
          return SHARE_WHEN_LIKE;
        case 8: // FRIENDS_ENTRY
          return FRIENDS_ENTRY;
        case 9: // NOTIFY_COMMENT
          return NOTIFY_COMMENT;
        case 10: // NOTIFY_LIKE
          return NOTIFY_LIKE;
        case 11: // PUSHED
          return PUSHED;
        case 12: // VIBRATION
          return VIBRATION;
        case 13: // PUBLISH_VIDEO
          return PUBLISH_VIDEO;
        case 14: // GIFT_VIDEO
          return GIFT_VIDEO;
        case 15: // SHARE_WHEN_COMMENT
          return SHARE_WHEN_COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NO_DISTURB_ISSET_ID = 0;
  private static final int __NOTIFY_FOLLOW_ISSET_ID = 1;
  private static final int __DEFAULT_TEXT_ISSET_ID = 2;
  private static final int __HI_ISSET_ID = 3;
  private static final int __NOTIFY_AT_ISSET_ID = 4;
  private static final int __SHARE_WHEN_LIKE_ISSET_ID = 5;
  private static final int __FRIENDS_ENTRY_ISSET_ID = 6;
  private static final int __NOTIFY_COMMENT_ISSET_ID = 7;
  private static final int __NOTIFY_LIKE_ISSET_ID = 8;
  private static final int __PUSHED_ISSET_ID = 9;
  private static final int __VIBRATION_ISSET_ID = 10;
  private static final int __PUBLISH_VIDEO_ISSET_ID = 11;
  private static final int __GIFTVIDEO_ISSET_ID = 12;
  private static final int __SHARE_WHEN_COMMENT_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NO_DISTURB, new org.apache.thrift.meta_data.FieldMetaData("no_disturb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTIFY_FOLLOW, new org.apache.thrift.meta_data.FieldMetaData("notify_follow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("default_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HI, new org.apache.thrift.meta_data.FieldMetaData("hi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTIFY_AT, new org.apache.thrift.meta_data.FieldMetaData("notify_at", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_WHEN_LIKE, new org.apache.thrift.meta_data.FieldMetaData("share_when_like", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRIENDS_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("friends_entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTIFY_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("notify_comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTIFY_LIKE, new org.apache.thrift.meta_data.FieldMetaData("notify_like", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUSHED, new org.apache.thrift.meta_data.FieldMetaData("pushed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIBRATION, new org.apache.thrift.meta_data.FieldMetaData("vibration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_VIDEO, new org.apache.thrift.meta_data.FieldMetaData("publish_video", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIFT_VIDEO, new org.apache.thrift.meta_data.FieldMetaData("giftVideo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_WHEN_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("share_when_comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettingView.class, metaDataMap);
  }

  public SettingView() {
  }

  public SettingView(
    String uid,
    int no_disturb,
    int notify_follow,
    int default_text,
    int hi,
    int notify_at,
    int share_when_like,
    int friends_entry,
    int notify_comment,
    int notify_like,
    int pushed,
    int vibration,
    int publish_video,
    int giftVideo,
    int share_when_comment)
  {
    this();
    this.uid = uid;
    this.no_disturb = no_disturb;
    setNo_disturbIsSet(true);
    this.notify_follow = notify_follow;
    setNotify_followIsSet(true);
    this.default_text = default_text;
    setDefault_textIsSet(true);
    this.hi = hi;
    setHiIsSet(true);
    this.notify_at = notify_at;
    setNotify_atIsSet(true);
    this.share_when_like = share_when_like;
    setShare_when_likeIsSet(true);
    this.friends_entry = friends_entry;
    setFriends_entryIsSet(true);
    this.notify_comment = notify_comment;
    setNotify_commentIsSet(true);
    this.notify_like = notify_like;
    setNotify_likeIsSet(true);
    this.pushed = pushed;
    setPushedIsSet(true);
    this.vibration = vibration;
    setVibrationIsSet(true);
    this.publish_video = publish_video;
    setPublish_videoIsSet(true);
    this.giftVideo = giftVideo;
    setGiftVideoIsSet(true);
    this.share_when_comment = share_when_comment;
    setShare_when_commentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettingView(SettingView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    this.no_disturb = other.no_disturb;
    this.notify_follow = other.notify_follow;
    this.default_text = other.default_text;
    this.hi = other.hi;
    this.notify_at = other.notify_at;
    this.share_when_like = other.share_when_like;
    this.friends_entry = other.friends_entry;
    this.notify_comment = other.notify_comment;
    this.notify_like = other.notify_like;
    this.pushed = other.pushed;
    this.vibration = other.vibration;
    this.publish_video = other.publish_video;
    this.giftVideo = other.giftVideo;
    this.share_when_comment = other.share_when_comment;
  }

  public SettingView deepCopy() {
    return new SettingView(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    setNo_disturbIsSet(false);
    this.no_disturb = 0;
    setNotify_followIsSet(false);
    this.notify_follow = 0;
    setDefault_textIsSet(false);
    this.default_text = 0;
    setHiIsSet(false);
    this.hi = 0;
    setNotify_atIsSet(false);
    this.notify_at = 0;
    setShare_when_likeIsSet(false);
    this.share_when_like = 0;
    setFriends_entryIsSet(false);
    this.friends_entry = 0;
    setNotify_commentIsSet(false);
    this.notify_comment = 0;
    setNotify_likeIsSet(false);
    this.notify_like = 0;
    setPushedIsSet(false);
    this.pushed = 0;
    setVibrationIsSet(false);
    this.vibration = 0;
    setPublish_videoIsSet(false);
    this.publish_video = 0;
    setGiftVideoIsSet(false);
    this.giftVideo = 0;
    setShare_when_commentIsSet(false);
    this.share_when_comment = 0;
  }

  public String getUid() {
    return this.uid;
  }

  public SettingView setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public int getNo_disturb() {
    return this.no_disturb;
  }

  public SettingView setNo_disturb(int no_disturb) {
    this.no_disturb = no_disturb;
    setNo_disturbIsSet(true);
    return this;
  }

  public void unsetNo_disturb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NO_DISTURB_ISSET_ID);
  }

  /** Returns true if field no_disturb is set (has been assigned a value) and false otherwise */
  public boolean isSetNo_disturb() {
    return EncodingUtils.testBit(__isset_bitfield, __NO_DISTURB_ISSET_ID);
  }

  public void setNo_disturbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NO_DISTURB_ISSET_ID, value);
  }

  public int getNotify_follow() {
    return this.notify_follow;
  }

  public SettingView setNotify_follow(int notify_follow) {
    this.notify_follow = notify_follow;
    setNotify_followIsSet(true);
    return this;
  }

  public void unsetNotify_follow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFY_FOLLOW_ISSET_ID);
  }

  /** Returns true if field notify_follow is set (has been assigned a value) and false otherwise */
  public boolean isSetNotify_follow() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFY_FOLLOW_ISSET_ID);
  }

  public void setNotify_followIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFY_FOLLOW_ISSET_ID, value);
  }

  public int getDefault_text() {
    return this.default_text;
  }

  public SettingView setDefault_text(int default_text) {
    this.default_text = default_text;
    setDefault_textIsSet(true);
    return this;
  }

  public void unsetDefault_text() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULT_TEXT_ISSET_ID);
  }

  /** Returns true if field default_text is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_text() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULT_TEXT_ISSET_ID);
  }

  public void setDefault_textIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULT_TEXT_ISSET_ID, value);
  }

  public int getHi() {
    return this.hi;
  }

  public SettingView setHi(int hi) {
    this.hi = hi;
    setHiIsSet(true);
    return this;
  }

  public void unsetHi() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HI_ISSET_ID);
  }

  /** Returns true if field hi is set (has been assigned a value) and false otherwise */
  public boolean isSetHi() {
    return EncodingUtils.testBit(__isset_bitfield, __HI_ISSET_ID);
  }

  public void setHiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HI_ISSET_ID, value);
  }

  public int getNotify_at() {
    return this.notify_at;
  }

  public SettingView setNotify_at(int notify_at) {
    this.notify_at = notify_at;
    setNotify_atIsSet(true);
    return this;
  }

  public void unsetNotify_at() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFY_AT_ISSET_ID);
  }

  /** Returns true if field notify_at is set (has been assigned a value) and false otherwise */
  public boolean isSetNotify_at() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFY_AT_ISSET_ID);
  }

  public void setNotify_atIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFY_AT_ISSET_ID, value);
  }

  public int getShare_when_like() {
    return this.share_when_like;
  }

  public SettingView setShare_when_like(int share_when_like) {
    this.share_when_like = share_when_like;
    setShare_when_likeIsSet(true);
    return this;
  }

  public void unsetShare_when_like() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARE_WHEN_LIKE_ISSET_ID);
  }

  /** Returns true if field share_when_like is set (has been assigned a value) and false otherwise */
  public boolean isSetShare_when_like() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARE_WHEN_LIKE_ISSET_ID);
  }

  public void setShare_when_likeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARE_WHEN_LIKE_ISSET_ID, value);
  }

  public int getFriends_entry() {
    return this.friends_entry;
  }

  public SettingView setFriends_entry(int friends_entry) {
    this.friends_entry = friends_entry;
    setFriends_entryIsSet(true);
    return this;
  }

  public void unsetFriends_entry() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRIENDS_ENTRY_ISSET_ID);
  }

  /** Returns true if field friends_entry is set (has been assigned a value) and false otherwise */
  public boolean isSetFriends_entry() {
    return EncodingUtils.testBit(__isset_bitfield, __FRIENDS_ENTRY_ISSET_ID);
  }

  public void setFriends_entryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRIENDS_ENTRY_ISSET_ID, value);
  }

  public int getNotify_comment() {
    return this.notify_comment;
  }

  public SettingView setNotify_comment(int notify_comment) {
    this.notify_comment = notify_comment;
    setNotify_commentIsSet(true);
    return this;
  }

  public void unsetNotify_comment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFY_COMMENT_ISSET_ID);
  }

  /** Returns true if field notify_comment is set (has been assigned a value) and false otherwise */
  public boolean isSetNotify_comment() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFY_COMMENT_ISSET_ID);
  }

  public void setNotify_commentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFY_COMMENT_ISSET_ID, value);
  }

  public int getNotify_like() {
    return this.notify_like;
  }

  public SettingView setNotify_like(int notify_like) {
    this.notify_like = notify_like;
    setNotify_likeIsSet(true);
    return this;
  }

  public void unsetNotify_like() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFY_LIKE_ISSET_ID);
  }

  /** Returns true if field notify_like is set (has been assigned a value) and false otherwise */
  public boolean isSetNotify_like() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFY_LIKE_ISSET_ID);
  }

  public void setNotify_likeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFY_LIKE_ISSET_ID, value);
  }

  public int getPushed() {
    return this.pushed;
  }

  public SettingView setPushed(int pushed) {
    this.pushed = pushed;
    setPushedIsSet(true);
    return this;
  }

  public void unsetPushed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUSHED_ISSET_ID);
  }

  /** Returns true if field pushed is set (has been assigned a value) and false otherwise */
  public boolean isSetPushed() {
    return EncodingUtils.testBit(__isset_bitfield, __PUSHED_ISSET_ID);
  }

  public void setPushedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUSHED_ISSET_ID, value);
  }

  public int getVibration() {
    return this.vibration;
  }

  public SettingView setVibration(int vibration) {
    this.vibration = vibration;
    setVibrationIsSet(true);
    return this;
  }

  public void unsetVibration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIBRATION_ISSET_ID);
  }

  /** Returns true if field vibration is set (has been assigned a value) and false otherwise */
  public boolean isSetVibration() {
    return EncodingUtils.testBit(__isset_bitfield, __VIBRATION_ISSET_ID);
  }

  public void setVibrationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIBRATION_ISSET_ID, value);
  }

  public int getPublish_video() {
    return this.publish_video;
  }

  public SettingView setPublish_video(int publish_video) {
    this.publish_video = publish_video;
    setPublish_videoIsSet(true);
    return this;
  }

  public void unsetPublish_video() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISH_VIDEO_ISSET_ID);
  }

  /** Returns true if field publish_video is set (has been assigned a value) and false otherwise */
  public boolean isSetPublish_video() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISH_VIDEO_ISSET_ID);
  }

  public void setPublish_videoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISH_VIDEO_ISSET_ID, value);
  }

  public int getGiftVideo() {
    return this.giftVideo;
  }

  public SettingView setGiftVideo(int giftVideo) {
    this.giftVideo = giftVideo;
    setGiftVideoIsSet(true);
    return this;
  }

  public void unsetGiftVideo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTVIDEO_ISSET_ID);
  }

  /** Returns true if field giftVideo is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftVideo() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTVIDEO_ISSET_ID);
  }

  public void setGiftVideoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTVIDEO_ISSET_ID, value);
  }

  public int getShare_when_comment() {
    return this.share_when_comment;
  }

  public SettingView setShare_when_comment(int share_when_comment) {
    this.share_when_comment = share_when_comment;
    setShare_when_commentIsSet(true);
    return this;
  }

  public void unsetShare_when_comment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARE_WHEN_COMMENT_ISSET_ID);
  }

  /** Returns true if field share_when_comment is set (has been assigned a value) and false otherwise */
  public boolean isSetShare_when_comment() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARE_WHEN_COMMENT_ISSET_ID);
  }

  public void setShare_when_commentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARE_WHEN_COMMENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case NO_DISTURB:
      if (value == null) {
        unsetNo_disturb();
      } else {
        setNo_disturb((Integer)value);
      }
      break;

    case NOTIFY_FOLLOW:
      if (value == null) {
        unsetNotify_follow();
      } else {
        setNotify_follow((Integer)value);
      }
      break;

    case DEFAULT_TEXT:
      if (value == null) {
        unsetDefault_text();
      } else {
        setDefault_text((Integer)value);
      }
      break;

    case HI:
      if (value == null) {
        unsetHi();
      } else {
        setHi((Integer)value);
      }
      break;

    case NOTIFY_AT:
      if (value == null) {
        unsetNotify_at();
      } else {
        setNotify_at((Integer)value);
      }
      break;

    case SHARE_WHEN_LIKE:
      if (value == null) {
        unsetShare_when_like();
      } else {
        setShare_when_like((Integer)value);
      }
      break;

    case FRIENDS_ENTRY:
      if (value == null) {
        unsetFriends_entry();
      } else {
        setFriends_entry((Integer)value);
      }
      break;

    case NOTIFY_COMMENT:
      if (value == null) {
        unsetNotify_comment();
      } else {
        setNotify_comment((Integer)value);
      }
      break;

    case NOTIFY_LIKE:
      if (value == null) {
        unsetNotify_like();
      } else {
        setNotify_like((Integer)value);
      }
      break;

    case PUSHED:
      if (value == null) {
        unsetPushed();
      } else {
        setPushed((Integer)value);
      }
      break;

    case VIBRATION:
      if (value == null) {
        unsetVibration();
      } else {
        setVibration((Integer)value);
      }
      break;

    case PUBLISH_VIDEO:
      if (value == null) {
        unsetPublish_video();
      } else {
        setPublish_video((Integer)value);
      }
      break;

    case GIFT_VIDEO:
      if (value == null) {
        unsetGiftVideo();
      } else {
        setGiftVideo((Integer)value);
      }
      break;

    case SHARE_WHEN_COMMENT:
      if (value == null) {
        unsetShare_when_comment();
      } else {
        setShare_when_comment((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case NO_DISTURB:
      return Integer.valueOf(getNo_disturb());

    case NOTIFY_FOLLOW:
      return Integer.valueOf(getNotify_follow());

    case DEFAULT_TEXT:
      return Integer.valueOf(getDefault_text());

    case HI:
      return Integer.valueOf(getHi());

    case NOTIFY_AT:
      return Integer.valueOf(getNotify_at());

    case SHARE_WHEN_LIKE:
      return Integer.valueOf(getShare_when_like());

    case FRIENDS_ENTRY:
      return Integer.valueOf(getFriends_entry());

    case NOTIFY_COMMENT:
      return Integer.valueOf(getNotify_comment());

    case NOTIFY_LIKE:
      return Integer.valueOf(getNotify_like());

    case PUSHED:
      return Integer.valueOf(getPushed());

    case VIBRATION:
      return Integer.valueOf(getVibration());

    case PUBLISH_VIDEO:
      return Integer.valueOf(getPublish_video());

    case GIFT_VIDEO:
      return Integer.valueOf(getGiftVideo());

    case SHARE_WHEN_COMMENT:
      return Integer.valueOf(getShare_when_comment());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case NO_DISTURB:
      return isSetNo_disturb();
    case NOTIFY_FOLLOW:
      return isSetNotify_follow();
    case DEFAULT_TEXT:
      return isSetDefault_text();
    case HI:
      return isSetHi();
    case NOTIFY_AT:
      return isSetNotify_at();
    case SHARE_WHEN_LIKE:
      return isSetShare_when_like();
    case FRIENDS_ENTRY:
      return isSetFriends_entry();
    case NOTIFY_COMMENT:
      return isSetNotify_comment();
    case NOTIFY_LIKE:
      return isSetNotify_like();
    case PUSHED:
      return isSetPushed();
    case VIBRATION:
      return isSetVibration();
    case PUBLISH_VIDEO:
      return isSetPublish_video();
    case GIFT_VIDEO:
      return isSetGiftVideo();
    case SHARE_WHEN_COMMENT:
      return isSetShare_when_comment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettingView)
      return this.equals((SettingView)that);
    return false;
  }

  public boolean equals(SettingView that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_no_disturb = true;
    boolean that_present_no_disturb = true;
    if (this_present_no_disturb || that_present_no_disturb) {
      if (!(this_present_no_disturb && that_present_no_disturb))
        return false;
      if (this.no_disturb != that.no_disturb)
        return false;
    }

    boolean this_present_notify_follow = true;
    boolean that_present_notify_follow = true;
    if (this_present_notify_follow || that_present_notify_follow) {
      if (!(this_present_notify_follow && that_present_notify_follow))
        return false;
      if (this.notify_follow != that.notify_follow)
        return false;
    }

    boolean this_present_default_text = true;
    boolean that_present_default_text = true;
    if (this_present_default_text || that_present_default_text) {
      if (!(this_present_default_text && that_present_default_text))
        return false;
      if (this.default_text != that.default_text)
        return false;
    }

    boolean this_present_hi = true;
    boolean that_present_hi = true;
    if (this_present_hi || that_present_hi) {
      if (!(this_present_hi && that_present_hi))
        return false;
      if (this.hi != that.hi)
        return false;
    }

    boolean this_present_notify_at = true;
    boolean that_present_notify_at = true;
    if (this_present_notify_at || that_present_notify_at) {
      if (!(this_present_notify_at && that_present_notify_at))
        return false;
      if (this.notify_at != that.notify_at)
        return false;
    }

    boolean this_present_share_when_like = true;
    boolean that_present_share_when_like = true;
    if (this_present_share_when_like || that_present_share_when_like) {
      if (!(this_present_share_when_like && that_present_share_when_like))
        return false;
      if (this.share_when_like != that.share_when_like)
        return false;
    }

    boolean this_present_friends_entry = true;
    boolean that_present_friends_entry = true;
    if (this_present_friends_entry || that_present_friends_entry) {
      if (!(this_present_friends_entry && that_present_friends_entry))
        return false;
      if (this.friends_entry != that.friends_entry)
        return false;
    }

    boolean this_present_notify_comment = true;
    boolean that_present_notify_comment = true;
    if (this_present_notify_comment || that_present_notify_comment) {
      if (!(this_present_notify_comment && that_present_notify_comment))
        return false;
      if (this.notify_comment != that.notify_comment)
        return false;
    }

    boolean this_present_notify_like = true;
    boolean that_present_notify_like = true;
    if (this_present_notify_like || that_present_notify_like) {
      if (!(this_present_notify_like && that_present_notify_like))
        return false;
      if (this.notify_like != that.notify_like)
        return false;
    }

    boolean this_present_pushed = true;
    boolean that_present_pushed = true;
    if (this_present_pushed || that_present_pushed) {
      if (!(this_present_pushed && that_present_pushed))
        return false;
      if (this.pushed != that.pushed)
        return false;
    }

    boolean this_present_vibration = true;
    boolean that_present_vibration = true;
    if (this_present_vibration || that_present_vibration) {
      if (!(this_present_vibration && that_present_vibration))
        return false;
      if (this.vibration != that.vibration)
        return false;
    }

    boolean this_present_publish_video = true;
    boolean that_present_publish_video = true;
    if (this_present_publish_video || that_present_publish_video) {
      if (!(this_present_publish_video && that_present_publish_video))
        return false;
      if (this.publish_video != that.publish_video)
        return false;
    }

    boolean this_present_giftVideo = true;
    boolean that_present_giftVideo = true;
    if (this_present_giftVideo || that_present_giftVideo) {
      if (!(this_present_giftVideo && that_present_giftVideo))
        return false;
      if (this.giftVideo != that.giftVideo)
        return false;
    }

    boolean this_present_share_when_comment = true;
    boolean that_present_share_when_comment = true;
    if (this_present_share_when_comment || that_present_share_when_comment) {
      if (!(this_present_share_when_comment && that_present_share_when_comment))
        return false;
      if (this.share_when_comment != that.share_when_comment)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SettingView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SettingView typedOther = (SettingView)other;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNo_disturb()).compareTo(typedOther.isSetNo_disturb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNo_disturb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no_disturb, typedOther.no_disturb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotify_follow()).compareTo(typedOther.isSetNotify_follow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotify_follow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notify_follow, typedOther.notify_follow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_text()).compareTo(typedOther.isSetDefault_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_text, typedOther.default_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHi()).compareTo(typedOther.isSetHi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hi, typedOther.hi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotify_at()).compareTo(typedOther.isSetNotify_at());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotify_at()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notify_at, typedOther.notify_at);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShare_when_like()).compareTo(typedOther.isSetShare_when_like());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare_when_like()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share_when_like, typedOther.share_when_like);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriends_entry()).compareTo(typedOther.isSetFriends_entry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriends_entry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friends_entry, typedOther.friends_entry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotify_comment()).compareTo(typedOther.isSetNotify_comment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotify_comment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notify_comment, typedOther.notify_comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotify_like()).compareTo(typedOther.isSetNotify_like());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotify_like()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notify_like, typedOther.notify_like);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushed()).compareTo(typedOther.isSetPushed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushed, typedOther.pushed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVibration()).compareTo(typedOther.isSetVibration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVibration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vibration, typedOther.vibration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublish_video()).compareTo(typedOther.isSetPublish_video());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublish_video()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish_video, typedOther.publish_video);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftVideo()).compareTo(typedOther.isSetGiftVideo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftVideo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftVideo, typedOther.giftVideo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShare_when_comment()).compareTo(typedOther.isSetShare_when_comment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare_when_comment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share_when_comment, typedOther.share_when_comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettingView(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("no_disturb:");
    sb.append(this.no_disturb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notify_follow:");
    sb.append(this.notify_follow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("default_text:");
    sb.append(this.default_text);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hi:");
    sb.append(this.hi);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notify_at:");
    sb.append(this.notify_at);
    first = false;
    if (!first) sb.append(", ");
    sb.append("share_when_like:");
    sb.append(this.share_when_like);
    first = false;
    if (!first) sb.append(", ");
    sb.append("friends_entry:");
    sb.append(this.friends_entry);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notify_comment:");
    sb.append(this.notify_comment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notify_like:");
    sb.append(this.notify_like);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushed:");
    sb.append(this.pushed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vibration:");
    sb.append(this.vibration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publish_video:");
    sb.append(this.publish_video);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftVideo:");
    sb.append(this.giftVideo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("share_when_comment:");
    sb.append(this.share_when_comment);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettingViewStandardSchemeFactory implements SchemeFactory {
    public SettingViewStandardScheme getScheme() {
      return new SettingViewStandardScheme();
    }
  }

  private static class SettingViewStandardScheme extends StandardScheme<SettingView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettingView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NO_DISTURB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.no_disturb = iprot.readI32();
              struct.setNo_disturbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTIFY_FOLLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notify_follow = iprot.readI32();
              struct.setNotify_followIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEFAULT_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.default_text = iprot.readI32();
              struct.setDefault_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HI
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hi = iprot.readI32();
              struct.setHiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOTIFY_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notify_at = iprot.readI32();
              struct.setNotify_atIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHARE_WHEN_LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.share_when_like = iprot.readI32();
              struct.setShare_when_likeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FRIENDS_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.friends_entry = iprot.readI32();
              struct.setFriends_entryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NOTIFY_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notify_comment = iprot.readI32();
              struct.setNotify_commentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NOTIFY_LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notify_like = iprot.readI32();
              struct.setNotify_likeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PUSHED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pushed = iprot.readI32();
              struct.setPushedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VIBRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vibration = iprot.readI32();
              struct.setVibrationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PUBLISH_VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publish_video = iprot.readI32();
              struct.setPublish_videoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // GIFT_VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giftVideo = iprot.readI32();
              struct.setGiftVideoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SHARE_WHEN_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.share_when_comment = iprot.readI32();
              struct.setShare_when_commentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettingView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NO_DISTURB_FIELD_DESC);
      oprot.writeI32(struct.no_disturb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFY_FOLLOW_FIELD_DESC);
      oprot.writeI32(struct.notify_follow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFAULT_TEXT_FIELD_DESC);
      oprot.writeI32(struct.default_text);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HI_FIELD_DESC);
      oprot.writeI32(struct.hi);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFY_AT_FIELD_DESC);
      oprot.writeI32(struct.notify_at);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_WHEN_LIKE_FIELD_DESC);
      oprot.writeI32(struct.share_when_like);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRIENDS_ENTRY_FIELD_DESC);
      oprot.writeI32(struct.friends_entry);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFY_COMMENT_FIELD_DESC);
      oprot.writeI32(struct.notify_comment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFY_LIKE_FIELD_DESC);
      oprot.writeI32(struct.notify_like);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUSHED_FIELD_DESC);
      oprot.writeI32(struct.pushed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIBRATION_FIELD_DESC);
      oprot.writeI32(struct.vibration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISH_VIDEO_FIELD_DESC);
      oprot.writeI32(struct.publish_video);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFT_VIDEO_FIELD_DESC);
      oprot.writeI32(struct.giftVideo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_WHEN_COMMENT_FIELD_DESC);
      oprot.writeI32(struct.share_when_comment);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettingViewTupleSchemeFactory implements SchemeFactory {
    public SettingViewTupleScheme getScheme() {
      return new SettingViewTupleScheme();
    }
  }

  private static class SettingViewTupleScheme extends TupleScheme<SettingView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettingView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetNo_disturb()) {
        optionals.set(1);
      }
      if (struct.isSetNotify_follow()) {
        optionals.set(2);
      }
      if (struct.isSetDefault_text()) {
        optionals.set(3);
      }
      if (struct.isSetHi()) {
        optionals.set(4);
      }
      if (struct.isSetNotify_at()) {
        optionals.set(5);
      }
      if (struct.isSetShare_when_like()) {
        optionals.set(6);
      }
      if (struct.isSetFriends_entry()) {
        optionals.set(7);
      }
      if (struct.isSetNotify_comment()) {
        optionals.set(8);
      }
      if (struct.isSetNotify_like()) {
        optionals.set(9);
      }
      if (struct.isSetPushed()) {
        optionals.set(10);
      }
      if (struct.isSetVibration()) {
        optionals.set(11);
      }
      if (struct.isSetPublish_video()) {
        optionals.set(12);
      }
      if (struct.isSetGiftVideo()) {
        optionals.set(13);
      }
      if (struct.isSetShare_when_comment()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetNo_disturb()) {
        oprot.writeI32(struct.no_disturb);
      }
      if (struct.isSetNotify_follow()) {
        oprot.writeI32(struct.notify_follow);
      }
      if (struct.isSetDefault_text()) {
        oprot.writeI32(struct.default_text);
      }
      if (struct.isSetHi()) {
        oprot.writeI32(struct.hi);
      }
      if (struct.isSetNotify_at()) {
        oprot.writeI32(struct.notify_at);
      }
      if (struct.isSetShare_when_like()) {
        oprot.writeI32(struct.share_when_like);
      }
      if (struct.isSetFriends_entry()) {
        oprot.writeI32(struct.friends_entry);
      }
      if (struct.isSetNotify_comment()) {
        oprot.writeI32(struct.notify_comment);
      }
      if (struct.isSetNotify_like()) {
        oprot.writeI32(struct.notify_like);
      }
      if (struct.isSetPushed()) {
        oprot.writeI32(struct.pushed);
      }
      if (struct.isSetVibration()) {
        oprot.writeI32(struct.vibration);
      }
      if (struct.isSetPublish_video()) {
        oprot.writeI32(struct.publish_video);
      }
      if (struct.isSetGiftVideo()) {
        oprot.writeI32(struct.giftVideo);
      }
      if (struct.isSetShare_when_comment()) {
        oprot.writeI32(struct.share_when_comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettingView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.no_disturb = iprot.readI32();
        struct.setNo_disturbIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notify_follow = iprot.readI32();
        struct.setNotify_followIsSet(true);
      }
      if (incoming.get(3)) {
        struct.default_text = iprot.readI32();
        struct.setDefault_textIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hi = iprot.readI32();
        struct.setHiIsSet(true);
      }
      if (incoming.get(5)) {
        struct.notify_at = iprot.readI32();
        struct.setNotify_atIsSet(true);
      }
      if (incoming.get(6)) {
        struct.share_when_like = iprot.readI32();
        struct.setShare_when_likeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.friends_entry = iprot.readI32();
        struct.setFriends_entryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.notify_comment = iprot.readI32();
        struct.setNotify_commentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.notify_like = iprot.readI32();
        struct.setNotify_likeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.pushed = iprot.readI32();
        struct.setPushedIsSet(true);
      }
      if (incoming.get(11)) {
        struct.vibration = iprot.readI32();
        struct.setVibrationIsSet(true);
      }
      if (incoming.get(12)) {
        struct.publish_video = iprot.readI32();
        struct.setPublish_videoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.giftVideo = iprot.readI32();
        struct.setGiftVideoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.share_when_comment = iprot.readI32();
        struct.setShare_when_commentIsSet(true);
      }
    }
  }

}

