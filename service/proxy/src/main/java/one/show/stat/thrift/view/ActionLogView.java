/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.stat.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActionLogView implements org.apache.thrift.TBase<ActionLogView, ActionLogView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActionLogView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MA_FIELD_DESC = new org.apache.thrift.protocol.TField("ma", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IM_FIELD_DESC = new org.apache.thrift.protocol.TField("im", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IDFA_FIELD_DESC = new org.apache.thrift.protocol.TField("idfa", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IDFY_FIELD_DESC = new org.apache.thrift.protocol.TField("idfy", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHL_FIELD_DESC = new org.apache.thrift.protocol.TField("chl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LO_FIELD_DESC = new org.apache.thrift.protocol.TField("lo", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField LT_FIELD_DESC = new org.apache.thrift.protocol.TField("lt", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MO_FIELD_DESC = new org.apache.thrift.protocol.TField("mo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CO_FIELD_DESC = new org.apache.thrift.protocol.TField("co", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SC_FIELD_DESC = new org.apache.thrift.protocol.TField("sc", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OV_FIELD_DESC = new org.apache.thrift.protocol.TField("ov", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField VC_FIELD_DESC = new org.apache.thrift.protocol.TField("vc", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField VN_FIELD_DESC = new org.apache.thrift.protocol.TField("vn", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField NE_FIELD_DESC = new org.apache.thrift.protocol.TField("ne", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField TN_FIELD_DESC = new org.apache.thrift.protocol.TField("tn", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField PNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pname", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField SEND_GIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("sendGift", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)35);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActionLogViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActionLogViewTupleSchemeFactory());
  }

  public long id; // required
  public String ma; // required
  public String im; // required
  public String idfa; // required
  public String idfy; // required
  public String chl; // required
  public double lo; // required
  public double lt; // required
  public String mo; // required
  public int op; // required
  public String co; // required
  public String os; // required
  public String sc; // required
  public String ov; // required
  public String vc; // required
  public String vn; // required
  public int ne; // required
  public String uuid; // required
  public long uid; // required
  public int tn; // required
  public String pname; // required
  public String content; // required
  public int aid; // required
  public long vid; // required
  public String city; // required
  public int platform; // required
  public String event; // required
  public int giftId; // required
  public int sendGift; // required
  public double amount; // required
  public int payType; // required
  public int duration; // required
  public String channel; // required
  public int time; // required
  public String ip; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MA((short)2, "ma"),
    IM((short)3, "im"),
    IDFA((short)4, "idfa"),
    IDFY((short)5, "idfy"),
    CHL((short)6, "chl"),
    LO((short)7, "lo"),
    LT((short)8, "lt"),
    MO((short)9, "mo"),
    OP((short)10, "op"),
    CO((short)11, "co"),
    OS((short)12, "os"),
    SC((short)13, "sc"),
    OV((short)14, "ov"),
    VC((short)15, "vc"),
    VN((short)16, "vn"),
    NE((short)17, "ne"),
    UUID((short)18, "uuid"),
    UID((short)19, "uid"),
    TN((short)20, "tn"),
    PNAME((short)21, "pname"),
    CONTENT((short)22, "content"),
    AID((short)23, "aid"),
    VID((short)24, "vid"),
    CITY((short)25, "city"),
    PLATFORM((short)26, "platform"),
    EVENT((short)27, "event"),
    GIFT_ID((short)28, "giftId"),
    SEND_GIFT((short)29, "sendGift"),
    AMOUNT((short)30, "amount"),
    PAY_TYPE((short)31, "payType"),
    DURATION((short)32, "duration"),
    CHANNEL((short)33, "channel"),
    TIME((short)34, "time"),
    IP((short)35, "ip");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MA
          return MA;
        case 3: // IM
          return IM;
        case 4: // IDFA
          return IDFA;
        case 5: // IDFY
          return IDFY;
        case 6: // CHL
          return CHL;
        case 7: // LO
          return LO;
        case 8: // LT
          return LT;
        case 9: // MO
          return MO;
        case 10: // OP
          return OP;
        case 11: // CO
          return CO;
        case 12: // OS
          return OS;
        case 13: // SC
          return SC;
        case 14: // OV
          return OV;
        case 15: // VC
          return VC;
        case 16: // VN
          return VN;
        case 17: // NE
          return NE;
        case 18: // UUID
          return UUID;
        case 19: // UID
          return UID;
        case 20: // TN
          return TN;
        case 21: // PNAME
          return PNAME;
        case 22: // CONTENT
          return CONTENT;
        case 23: // AID
          return AID;
        case 24: // VID
          return VID;
        case 25: // CITY
          return CITY;
        case 26: // PLATFORM
          return PLATFORM;
        case 27: // EVENT
          return EVENT;
        case 28: // GIFT_ID
          return GIFT_ID;
        case 29: // SEND_GIFT
          return SEND_GIFT;
        case 30: // AMOUNT
          return AMOUNT;
        case 31: // PAY_TYPE
          return PAY_TYPE;
        case 32: // DURATION
          return DURATION;
        case 33: // CHANNEL
          return CHANNEL;
        case 34: // TIME
          return TIME;
        case 35: // IP
          return IP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __LO_ISSET_ID = 1;
  private static final int __LT_ISSET_ID = 2;
  private static final int __OP_ISSET_ID = 3;
  private static final int __NE_ISSET_ID = 4;
  private static final int __UID_ISSET_ID = 5;
  private static final int __TN_ISSET_ID = 6;
  private static final int __AID_ISSET_ID = 7;
  private static final int __VID_ISSET_ID = 8;
  private static final int __PLATFORM_ISSET_ID = 9;
  private static final int __GIFTID_ISSET_ID = 10;
  private static final int __SENDGIFT_ISSET_ID = 11;
  private static final int __AMOUNT_ISSET_ID = 12;
  private static final int __PAYTYPE_ISSET_ID = 13;
  private static final int __DURATION_ISSET_ID = 14;
  private static final int __TIME_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MA, new org.apache.thrift.meta_data.FieldMetaData("ma", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IM, new org.apache.thrift.meta_data.FieldMetaData("im", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDFA, new org.apache.thrift.meta_data.FieldMetaData("idfa", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDFY, new org.apache.thrift.meta_data.FieldMetaData("idfy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHL, new org.apache.thrift.meta_data.FieldMetaData("chl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LO, new org.apache.thrift.meta_data.FieldMetaData("lo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LT, new org.apache.thrift.meta_data.FieldMetaData("lt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MO, new org.apache.thrift.meta_data.FieldMetaData("mo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CO, new org.apache.thrift.meta_data.FieldMetaData("co", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SC, new org.apache.thrift.meta_data.FieldMetaData("sc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OV, new org.apache.thrift.meta_data.FieldMetaData("ov", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VC, new org.apache.thrift.meta_data.FieldMetaData("vc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VN, new org.apache.thrift.meta_data.FieldMetaData("vn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NE, new org.apache.thrift.meta_data.FieldMetaData("ne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TN, new org.apache.thrift.meta_data.FieldMetaData("tn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PNAME, new org.apache.thrift.meta_data.FieldMetaData("pname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_GIFT, new org.apache.thrift.meta_data.FieldMetaData("sendGift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActionLogView.class, metaDataMap);
  }

  public ActionLogView() {
  }

  public ActionLogView(
    long id,
    String ma,
    String im,
    String idfa,
    String idfy,
    String chl,
    double lo,
    double lt,
    String mo,
    int op,
    String co,
    String os,
    String sc,
    String ov,
    String vc,
    String vn,
    int ne,
    String uuid,
    long uid,
    int tn,
    String pname,
    String content,
    int aid,
    long vid,
    String city,
    int platform,
    String event,
    int giftId,
    int sendGift,
    double amount,
    int payType,
    int duration,
    String channel,
    int time,
    String ip)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.ma = ma;
    this.im = im;
    this.idfa = idfa;
    this.idfy = idfy;
    this.chl = chl;
    this.lo = lo;
    setLoIsSet(true);
    this.lt = lt;
    setLtIsSet(true);
    this.mo = mo;
    this.op = op;
    setOpIsSet(true);
    this.co = co;
    this.os = os;
    this.sc = sc;
    this.ov = ov;
    this.vc = vc;
    this.vn = vn;
    this.ne = ne;
    setNeIsSet(true);
    this.uuid = uuid;
    this.uid = uid;
    setUidIsSet(true);
    this.tn = tn;
    setTnIsSet(true);
    this.pname = pname;
    this.content = content;
    this.aid = aid;
    setAidIsSet(true);
    this.vid = vid;
    setVidIsSet(true);
    this.city = city;
    this.platform = platform;
    setPlatformIsSet(true);
    this.event = event;
    this.giftId = giftId;
    setGiftIdIsSet(true);
    this.sendGift = sendGift;
    setSendGiftIsSet(true);
    this.amount = amount;
    setAmountIsSet(true);
    this.payType = payType;
    setPayTypeIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
    this.channel = channel;
    this.time = time;
    setTimeIsSet(true);
    this.ip = ip;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActionLogView(ActionLogView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetMa()) {
      this.ma = other.ma;
    }
    if (other.isSetIm()) {
      this.im = other.im;
    }
    if (other.isSetIdfa()) {
      this.idfa = other.idfa;
    }
    if (other.isSetIdfy()) {
      this.idfy = other.idfy;
    }
    if (other.isSetChl()) {
      this.chl = other.chl;
    }
    this.lo = other.lo;
    this.lt = other.lt;
    if (other.isSetMo()) {
      this.mo = other.mo;
    }
    this.op = other.op;
    if (other.isSetCo()) {
      this.co = other.co;
    }
    if (other.isSetOs()) {
      this.os = other.os;
    }
    if (other.isSetSc()) {
      this.sc = other.sc;
    }
    if (other.isSetOv()) {
      this.ov = other.ov;
    }
    if (other.isSetVc()) {
      this.vc = other.vc;
    }
    if (other.isSetVn()) {
      this.vn = other.vn;
    }
    this.ne = other.ne;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    this.uid = other.uid;
    this.tn = other.tn;
    if (other.isSetPname()) {
      this.pname = other.pname;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.aid = other.aid;
    this.vid = other.vid;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.platform = other.platform;
    if (other.isSetEvent()) {
      this.event = other.event;
    }
    this.giftId = other.giftId;
    this.sendGift = other.sendGift;
    this.amount = other.amount;
    this.payType = other.payType;
    this.duration = other.duration;
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    this.time = other.time;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
  }

  public ActionLogView deepCopy() {
    return new ActionLogView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.ma = null;
    this.im = null;
    this.idfa = null;
    this.idfy = null;
    this.chl = null;
    setLoIsSet(false);
    this.lo = 0.0;
    setLtIsSet(false);
    this.lt = 0.0;
    this.mo = null;
    setOpIsSet(false);
    this.op = 0;
    this.co = null;
    this.os = null;
    this.sc = null;
    this.ov = null;
    this.vc = null;
    this.vn = null;
    setNeIsSet(false);
    this.ne = 0;
    this.uuid = null;
    setUidIsSet(false);
    this.uid = 0;
    setTnIsSet(false);
    this.tn = 0;
    this.pname = null;
    this.content = null;
    setAidIsSet(false);
    this.aid = 0;
    setVidIsSet(false);
    this.vid = 0;
    this.city = null;
    setPlatformIsSet(false);
    this.platform = 0;
    this.event = null;
    setGiftIdIsSet(false);
    this.giftId = 0;
    setSendGiftIsSet(false);
    this.sendGift = 0;
    setAmountIsSet(false);
    this.amount = 0.0;
    setPayTypeIsSet(false);
    this.payType = 0;
    setDurationIsSet(false);
    this.duration = 0;
    this.channel = null;
    setTimeIsSet(false);
    this.time = 0;
    this.ip = null;
  }

  public long getId() {
    return this.id;
  }

  public ActionLogView setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getMa() {
    return this.ma;
  }

  public ActionLogView setMa(String ma) {
    this.ma = ma;
    return this;
  }

  public void unsetMa() {
    this.ma = null;
  }

  /** Returns true if field ma is set (has been assigned a value) and false otherwise */
  public boolean isSetMa() {
    return this.ma != null;
  }

  public void setMaIsSet(boolean value) {
    if (!value) {
      this.ma = null;
    }
  }

  public String getIm() {
    return this.im;
  }

  public ActionLogView setIm(String im) {
    this.im = im;
    return this;
  }

  public void unsetIm() {
    this.im = null;
  }

  /** Returns true if field im is set (has been assigned a value) and false otherwise */
  public boolean isSetIm() {
    return this.im != null;
  }

  public void setImIsSet(boolean value) {
    if (!value) {
      this.im = null;
    }
  }

  public String getIdfa() {
    return this.idfa;
  }

  public ActionLogView setIdfa(String idfa) {
    this.idfa = idfa;
    return this;
  }

  public void unsetIdfa() {
    this.idfa = null;
  }

  /** Returns true if field idfa is set (has been assigned a value) and false otherwise */
  public boolean isSetIdfa() {
    return this.idfa != null;
  }

  public void setIdfaIsSet(boolean value) {
    if (!value) {
      this.idfa = null;
    }
  }

  public String getIdfy() {
    return this.idfy;
  }

  public ActionLogView setIdfy(String idfy) {
    this.idfy = idfy;
    return this;
  }

  public void unsetIdfy() {
    this.idfy = null;
  }

  /** Returns true if field idfy is set (has been assigned a value) and false otherwise */
  public boolean isSetIdfy() {
    return this.idfy != null;
  }

  public void setIdfyIsSet(boolean value) {
    if (!value) {
      this.idfy = null;
    }
  }

  public String getChl() {
    return this.chl;
  }

  public ActionLogView setChl(String chl) {
    this.chl = chl;
    return this;
  }

  public void unsetChl() {
    this.chl = null;
  }

  /** Returns true if field chl is set (has been assigned a value) and false otherwise */
  public boolean isSetChl() {
    return this.chl != null;
  }

  public void setChlIsSet(boolean value) {
    if (!value) {
      this.chl = null;
    }
  }

  public double getLo() {
    return this.lo;
  }

  public ActionLogView setLo(double lo) {
    this.lo = lo;
    setLoIsSet(true);
    return this;
  }

  public void unsetLo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LO_ISSET_ID);
  }

  /** Returns true if field lo is set (has been assigned a value) and false otherwise */
  public boolean isSetLo() {
    return EncodingUtils.testBit(__isset_bitfield, __LO_ISSET_ID);
  }

  public void setLoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LO_ISSET_ID, value);
  }

  public double getLt() {
    return this.lt;
  }

  public ActionLogView setLt(double lt) {
    this.lt = lt;
    setLtIsSet(true);
    return this;
  }

  public void unsetLt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LT_ISSET_ID);
  }

  /** Returns true if field lt is set (has been assigned a value) and false otherwise */
  public boolean isSetLt() {
    return EncodingUtils.testBit(__isset_bitfield, __LT_ISSET_ID);
  }

  public void setLtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LT_ISSET_ID, value);
  }

  public String getMo() {
    return this.mo;
  }

  public ActionLogView setMo(String mo) {
    this.mo = mo;
    return this;
  }

  public void unsetMo() {
    this.mo = null;
  }

  /** Returns true if field mo is set (has been assigned a value) and false otherwise */
  public boolean isSetMo() {
    return this.mo != null;
  }

  public void setMoIsSet(boolean value) {
    if (!value) {
      this.mo = null;
    }
  }

  public int getOp() {
    return this.op;
  }

  public ActionLogView setOp(int op) {
    this.op = op;
    setOpIsSet(true);
    return this;
  }

  public void unsetOp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OP_ISSET_ID);
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return EncodingUtils.testBit(__isset_bitfield, __OP_ISSET_ID);
  }

  public void setOpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OP_ISSET_ID, value);
  }

  public String getCo() {
    return this.co;
  }

  public ActionLogView setCo(String co) {
    this.co = co;
    return this;
  }

  public void unsetCo() {
    this.co = null;
  }

  /** Returns true if field co is set (has been assigned a value) and false otherwise */
  public boolean isSetCo() {
    return this.co != null;
  }

  public void setCoIsSet(boolean value) {
    if (!value) {
      this.co = null;
    }
  }

  public String getOs() {
    return this.os;
  }

  public ActionLogView setOs(String os) {
    this.os = os;
    return this;
  }

  public void unsetOs() {
    this.os = null;
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return this.os != null;
  }

  public void setOsIsSet(boolean value) {
    if (!value) {
      this.os = null;
    }
  }

  public String getSc() {
    return this.sc;
  }

  public ActionLogView setSc(String sc) {
    this.sc = sc;
    return this;
  }

  public void unsetSc() {
    this.sc = null;
  }

  /** Returns true if field sc is set (has been assigned a value) and false otherwise */
  public boolean isSetSc() {
    return this.sc != null;
  }

  public void setScIsSet(boolean value) {
    if (!value) {
      this.sc = null;
    }
  }

  public String getOv() {
    return this.ov;
  }

  public ActionLogView setOv(String ov) {
    this.ov = ov;
    return this;
  }

  public void unsetOv() {
    this.ov = null;
  }

  /** Returns true if field ov is set (has been assigned a value) and false otherwise */
  public boolean isSetOv() {
    return this.ov != null;
  }

  public void setOvIsSet(boolean value) {
    if (!value) {
      this.ov = null;
    }
  }

  public String getVc() {
    return this.vc;
  }

  public ActionLogView setVc(String vc) {
    this.vc = vc;
    return this;
  }

  public void unsetVc() {
    this.vc = null;
  }

  /** Returns true if field vc is set (has been assigned a value) and false otherwise */
  public boolean isSetVc() {
    return this.vc != null;
  }

  public void setVcIsSet(boolean value) {
    if (!value) {
      this.vc = null;
    }
  }

  public String getVn() {
    return this.vn;
  }

  public ActionLogView setVn(String vn) {
    this.vn = vn;
    return this;
  }

  public void unsetVn() {
    this.vn = null;
  }

  /** Returns true if field vn is set (has been assigned a value) and false otherwise */
  public boolean isSetVn() {
    return this.vn != null;
  }

  public void setVnIsSet(boolean value) {
    if (!value) {
      this.vn = null;
    }
  }

  public int getNe() {
    return this.ne;
  }

  public ActionLogView setNe(int ne) {
    this.ne = ne;
    setNeIsSet(true);
    return this;
  }

  public void unsetNe() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NE_ISSET_ID);
  }

  /** Returns true if field ne is set (has been assigned a value) and false otherwise */
  public boolean isSetNe() {
    return EncodingUtils.testBit(__isset_bitfield, __NE_ISSET_ID);
  }

  public void setNeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NE_ISSET_ID, value);
  }

  public String getUuid() {
    return this.uuid;
  }

  public ActionLogView setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public long getUid() {
    return this.uid;
  }

  public ActionLogView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getTn() {
    return this.tn;
  }

  public ActionLogView setTn(int tn) {
    this.tn = tn;
    setTnIsSet(true);
    return this;
  }

  public void unsetTn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TN_ISSET_ID);
  }

  /** Returns true if field tn is set (has been assigned a value) and false otherwise */
  public boolean isSetTn() {
    return EncodingUtils.testBit(__isset_bitfield, __TN_ISSET_ID);
  }

  public void setTnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TN_ISSET_ID, value);
  }

  public String getPname() {
    return this.pname;
  }

  public ActionLogView setPname(String pname) {
    this.pname = pname;
    return this;
  }

  public void unsetPname() {
    this.pname = null;
  }

  /** Returns true if field pname is set (has been assigned a value) and false otherwise */
  public boolean isSetPname() {
    return this.pname != null;
  }

  public void setPnameIsSet(boolean value) {
    if (!value) {
      this.pname = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public ActionLogView setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getAid() {
    return this.aid;
  }

  public ActionLogView setAid(int aid) {
    this.aid = aid;
    setAidIsSet(true);
    return this;
  }

  public void unsetAid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
  }

  /** Returns true if field aid is set (has been assigned a value) and false otherwise */
  public boolean isSetAid() {
    return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
  }

  public void setAidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
  }

  public long getVid() {
    return this.vid;
  }

  public ActionLogView setVid(long vid) {
    this.vid = vid;
    setVidIsSet(true);
    return this;
  }

  public void unsetVid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
  }

  /** Returns true if field vid is set (has been assigned a value) and false otherwise */
  public boolean isSetVid() {
    return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
  }

  public void setVidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
  }

  public String getCity() {
    return this.city;
  }

  public ActionLogView setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getPlatform() {
    return this.platform;
  }

  public ActionLogView setPlatform(int platform) {
    this.platform = platform;
    setPlatformIsSet(true);
    return this;
  }

  public void unsetPlatform() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  public void setPlatformIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATFORM_ISSET_ID, value);
  }

  public String getEvent() {
    return this.event;
  }

  public ActionLogView setEvent(String event) {
    this.event = event;
    return this;
  }

  public void unsetEvent() {
    this.event = null;
  }

  /** Returns true if field event is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent() {
    return this.event != null;
  }

  public void setEventIsSet(boolean value) {
    if (!value) {
      this.event = null;
    }
  }

  public int getGiftId() {
    return this.giftId;
  }

  public ActionLogView setGiftId(int giftId) {
    this.giftId = giftId;
    setGiftIdIsSet(true);
    return this;
  }

  public void unsetGiftId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTID_ISSET_ID);
  }

  /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftId() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTID_ISSET_ID);
  }

  public void setGiftIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTID_ISSET_ID, value);
  }

  public int getSendGift() {
    return this.sendGift;
  }

  public ActionLogView setSendGift(int sendGift) {
    this.sendGift = sendGift;
    setSendGiftIsSet(true);
    return this;
  }

  public void unsetSendGift() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDGIFT_ISSET_ID);
  }

  /** Returns true if field sendGift is set (has been assigned a value) and false otherwise */
  public boolean isSetSendGift() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDGIFT_ISSET_ID);
  }

  public void setSendGiftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDGIFT_ISSET_ID, value);
  }

  public double getAmount() {
    return this.amount;
  }

  public ActionLogView setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public int getPayType() {
    return this.payType;
  }

  public ActionLogView setPayType(int payType) {
    this.payType = payType;
    setPayTypeIsSet(true);
    return this;
  }

  public void unsetPayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  public void setPayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYTYPE_ISSET_ID, value);
  }

  public int getDuration() {
    return this.duration;
  }

  public ActionLogView setDuration(int duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public String getChannel() {
    return this.channel;
  }

  public ActionLogView setChannel(String channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public int getTime() {
    return this.time;
  }

  public ActionLogView setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public String getIp() {
    return this.ip;
  }

  public ActionLogView setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MA:
      if (value == null) {
        unsetMa();
      } else {
        setMa((String)value);
      }
      break;

    case IM:
      if (value == null) {
        unsetIm();
      } else {
        setIm((String)value);
      }
      break;

    case IDFA:
      if (value == null) {
        unsetIdfa();
      } else {
        setIdfa((String)value);
      }
      break;

    case IDFY:
      if (value == null) {
        unsetIdfy();
      } else {
        setIdfy((String)value);
      }
      break;

    case CHL:
      if (value == null) {
        unsetChl();
      } else {
        setChl((String)value);
      }
      break;

    case LO:
      if (value == null) {
        unsetLo();
      } else {
        setLo((Double)value);
      }
      break;

    case LT:
      if (value == null) {
        unsetLt();
      } else {
        setLt((Double)value);
      }
      break;

    case MO:
      if (value == null) {
        unsetMo();
      } else {
        setMo((String)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((Integer)value);
      }
      break;

    case CO:
      if (value == null) {
        unsetCo();
      } else {
        setCo((String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((String)value);
      }
      break;

    case SC:
      if (value == null) {
        unsetSc();
      } else {
        setSc((String)value);
      }
      break;

    case OV:
      if (value == null) {
        unsetOv();
      } else {
        setOv((String)value);
      }
      break;

    case VC:
      if (value == null) {
        unsetVc();
      } else {
        setVc((String)value);
      }
      break;

    case VN:
      if (value == null) {
        unsetVn();
      } else {
        setVn((String)value);
      }
      break;

    case NE:
      if (value == null) {
        unsetNe();
      } else {
        setNe((Integer)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case TN:
      if (value == null) {
        unsetTn();
      } else {
        setTn((Integer)value);
      }
      break;

    case PNAME:
      if (value == null) {
        unsetPname();
      } else {
        setPname((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case AID:
      if (value == null) {
        unsetAid();
      } else {
        setAid((Integer)value);
      }
      break;

    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((Long)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((Integer)value);
      }
      break;

    case EVENT:
      if (value == null) {
        unsetEvent();
      } else {
        setEvent((String)value);
      }
      break;

    case GIFT_ID:
      if (value == null) {
        unsetGiftId();
      } else {
        setGiftId((Integer)value);
      }
      break;

    case SEND_GIFT:
      if (value == null) {
        unsetSendGift();
      } else {
        setSendGift((Integer)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((Integer)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Integer)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MA:
      return getMa();

    case IM:
      return getIm();

    case IDFA:
      return getIdfa();

    case IDFY:
      return getIdfy();

    case CHL:
      return getChl();

    case LO:
      return Double.valueOf(getLo());

    case LT:
      return Double.valueOf(getLt());

    case MO:
      return getMo();

    case OP:
      return Integer.valueOf(getOp());

    case CO:
      return getCo();

    case OS:
      return getOs();

    case SC:
      return getSc();

    case OV:
      return getOv();

    case VC:
      return getVc();

    case VN:
      return getVn();

    case NE:
      return Integer.valueOf(getNe());

    case UUID:
      return getUuid();

    case UID:
      return Long.valueOf(getUid());

    case TN:
      return Integer.valueOf(getTn());

    case PNAME:
      return getPname();

    case CONTENT:
      return getContent();

    case AID:
      return Integer.valueOf(getAid());

    case VID:
      return Long.valueOf(getVid());

    case CITY:
      return getCity();

    case PLATFORM:
      return Integer.valueOf(getPlatform());

    case EVENT:
      return getEvent();

    case GIFT_ID:
      return Integer.valueOf(getGiftId());

    case SEND_GIFT:
      return Integer.valueOf(getSendGift());

    case AMOUNT:
      return Double.valueOf(getAmount());

    case PAY_TYPE:
      return Integer.valueOf(getPayType());

    case DURATION:
      return Integer.valueOf(getDuration());

    case CHANNEL:
      return getChannel();

    case TIME:
      return Integer.valueOf(getTime());

    case IP:
      return getIp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MA:
      return isSetMa();
    case IM:
      return isSetIm();
    case IDFA:
      return isSetIdfa();
    case IDFY:
      return isSetIdfy();
    case CHL:
      return isSetChl();
    case LO:
      return isSetLo();
    case LT:
      return isSetLt();
    case MO:
      return isSetMo();
    case OP:
      return isSetOp();
    case CO:
      return isSetCo();
    case OS:
      return isSetOs();
    case SC:
      return isSetSc();
    case OV:
      return isSetOv();
    case VC:
      return isSetVc();
    case VN:
      return isSetVn();
    case NE:
      return isSetNe();
    case UUID:
      return isSetUuid();
    case UID:
      return isSetUid();
    case TN:
      return isSetTn();
    case PNAME:
      return isSetPname();
    case CONTENT:
      return isSetContent();
    case AID:
      return isSetAid();
    case VID:
      return isSetVid();
    case CITY:
      return isSetCity();
    case PLATFORM:
      return isSetPlatform();
    case EVENT:
      return isSetEvent();
    case GIFT_ID:
      return isSetGiftId();
    case SEND_GIFT:
      return isSetSendGift();
    case AMOUNT:
      return isSetAmount();
    case PAY_TYPE:
      return isSetPayType();
    case DURATION:
      return isSetDuration();
    case CHANNEL:
      return isSetChannel();
    case TIME:
      return isSetTime();
    case IP:
      return isSetIp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActionLogView)
      return this.equals((ActionLogView)that);
    return false;
  }

  public boolean equals(ActionLogView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_ma = true && this.isSetMa();
    boolean that_present_ma = true && that.isSetMa();
    if (this_present_ma || that_present_ma) {
      if (!(this_present_ma && that_present_ma))
        return false;
      if (!this.ma.equals(that.ma))
        return false;
    }

    boolean this_present_im = true && this.isSetIm();
    boolean that_present_im = true && that.isSetIm();
    if (this_present_im || that_present_im) {
      if (!(this_present_im && that_present_im))
        return false;
      if (!this.im.equals(that.im))
        return false;
    }

    boolean this_present_idfa = true && this.isSetIdfa();
    boolean that_present_idfa = true && that.isSetIdfa();
    if (this_present_idfa || that_present_idfa) {
      if (!(this_present_idfa && that_present_idfa))
        return false;
      if (!this.idfa.equals(that.idfa))
        return false;
    }

    boolean this_present_idfy = true && this.isSetIdfy();
    boolean that_present_idfy = true && that.isSetIdfy();
    if (this_present_idfy || that_present_idfy) {
      if (!(this_present_idfy && that_present_idfy))
        return false;
      if (!this.idfy.equals(that.idfy))
        return false;
    }

    boolean this_present_chl = true && this.isSetChl();
    boolean that_present_chl = true && that.isSetChl();
    if (this_present_chl || that_present_chl) {
      if (!(this_present_chl && that_present_chl))
        return false;
      if (!this.chl.equals(that.chl))
        return false;
    }

    boolean this_present_lo = true;
    boolean that_present_lo = true;
    if (this_present_lo || that_present_lo) {
      if (!(this_present_lo && that_present_lo))
        return false;
      if (this.lo != that.lo)
        return false;
    }

    boolean this_present_lt = true;
    boolean that_present_lt = true;
    if (this_present_lt || that_present_lt) {
      if (!(this_present_lt && that_present_lt))
        return false;
      if (this.lt != that.lt)
        return false;
    }

    boolean this_present_mo = true && this.isSetMo();
    boolean that_present_mo = true && that.isSetMo();
    if (this_present_mo || that_present_mo) {
      if (!(this_present_mo && that_present_mo))
        return false;
      if (!this.mo.equals(that.mo))
        return false;
    }

    boolean this_present_op = true;
    boolean that_present_op = true;
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (this.op != that.op)
        return false;
    }

    boolean this_present_co = true && this.isSetCo();
    boolean that_present_co = true && that.isSetCo();
    if (this_present_co || that_present_co) {
      if (!(this_present_co && that_present_co))
        return false;
      if (!this.co.equals(that.co))
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    boolean this_present_sc = true && this.isSetSc();
    boolean that_present_sc = true && that.isSetSc();
    if (this_present_sc || that_present_sc) {
      if (!(this_present_sc && that_present_sc))
        return false;
      if (!this.sc.equals(that.sc))
        return false;
    }

    boolean this_present_ov = true && this.isSetOv();
    boolean that_present_ov = true && that.isSetOv();
    if (this_present_ov || that_present_ov) {
      if (!(this_present_ov && that_present_ov))
        return false;
      if (!this.ov.equals(that.ov))
        return false;
    }

    boolean this_present_vc = true && this.isSetVc();
    boolean that_present_vc = true && that.isSetVc();
    if (this_present_vc || that_present_vc) {
      if (!(this_present_vc && that_present_vc))
        return false;
      if (!this.vc.equals(that.vc))
        return false;
    }

    boolean this_present_vn = true && this.isSetVn();
    boolean that_present_vn = true && that.isSetVn();
    if (this_present_vn || that_present_vn) {
      if (!(this_present_vn && that_present_vn))
        return false;
      if (!this.vn.equals(that.vn))
        return false;
    }

    boolean this_present_ne = true;
    boolean that_present_ne = true;
    if (this_present_ne || that_present_ne) {
      if (!(this_present_ne && that_present_ne))
        return false;
      if (this.ne != that.ne)
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_tn = true;
    boolean that_present_tn = true;
    if (this_present_tn || that_present_tn) {
      if (!(this_present_tn && that_present_tn))
        return false;
      if (this.tn != that.tn)
        return false;
    }

    boolean this_present_pname = true && this.isSetPname();
    boolean that_present_pname = true && that.isSetPname();
    if (this_present_pname || that_present_pname) {
      if (!(this_present_pname && that_present_pname))
        return false;
      if (!this.pname.equals(that.pname))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_aid = true;
    boolean that_present_aid = true;
    if (this_present_aid || that_present_aid) {
      if (!(this_present_aid && that_present_aid))
        return false;
      if (this.aid != that.aid)
        return false;
    }

    boolean this_present_vid = true;
    boolean that_present_vid = true;
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (this.vid != that.vid)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_platform = true;
    boolean that_present_platform = true;
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (this.platform != that.platform)
        return false;
    }

    boolean this_present_event = true && this.isSetEvent();
    boolean that_present_event = true && that.isSetEvent();
    if (this_present_event || that_present_event) {
      if (!(this_present_event && that_present_event))
        return false;
      if (!this.event.equals(that.event))
        return false;
    }

    boolean this_present_giftId = true;
    boolean that_present_giftId = true;
    if (this_present_giftId || that_present_giftId) {
      if (!(this_present_giftId && that_present_giftId))
        return false;
      if (this.giftId != that.giftId)
        return false;
    }

    boolean this_present_sendGift = true;
    boolean that_present_sendGift = true;
    if (this_present_sendGift || that_present_sendGift) {
      if (!(this_present_sendGift && that_present_sendGift))
        return false;
      if (this.sendGift != that.sendGift)
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_payType = true;
    boolean that_present_payType = true;
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (this.payType != that.payType)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActionLogView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActionLogView typedOther = (ActionLogView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMa()).compareTo(typedOther.isSetMa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ma, typedOther.ma);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIm()).compareTo(typedOther.isSetIm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im, typedOther.im);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdfa()).compareTo(typedOther.isSetIdfa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdfa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idfa, typedOther.idfa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdfy()).compareTo(typedOther.isSetIdfy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdfy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idfy, typedOther.idfy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChl()).compareTo(typedOther.isSetChl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chl, typedOther.chl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLo()).compareTo(typedOther.isSetLo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lo, typedOther.lo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLt()).compareTo(typedOther.isSetLt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lt, typedOther.lt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMo()).compareTo(typedOther.isSetMo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mo, typedOther.mo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp()).compareTo(typedOther.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, typedOther.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCo()).compareTo(typedOther.isSetCo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.co, typedOther.co);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs()).compareTo(typedOther.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, typedOther.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSc()).compareTo(typedOther.isSetSc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sc, typedOther.sc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOv()).compareTo(typedOther.isSetOv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ov, typedOther.ov);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVc()).compareTo(typedOther.isSetVc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vc, typedOther.vc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVn()).compareTo(typedOther.isSetVn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vn, typedOther.vn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNe()).compareTo(typedOther.isSetNe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ne, typedOther.ne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTn()).compareTo(typedOther.isSetTn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tn, typedOther.tn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPname()).compareTo(typedOther.isSetPname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pname, typedOther.pname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAid()).compareTo(typedOther.isSetAid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, typedOther.aid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent()).compareTo(typedOther.isSetEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, typedOther.event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendGift()).compareTo(typedOther.isSetSendGift());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendGift()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendGift, typedOther.sendGift);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(typedOther.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, typedOther.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActionLogView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ma:");
    if (this.ma == null) {
      sb.append("null");
    } else {
      sb.append(this.ma);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("im:");
    if (this.im == null) {
      sb.append("null");
    } else {
      sb.append(this.im);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idfa:");
    if (this.idfa == null) {
      sb.append("null");
    } else {
      sb.append(this.idfa);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idfy:");
    if (this.idfy == null) {
      sb.append("null");
    } else {
      sb.append(this.idfy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chl:");
    if (this.chl == null) {
      sb.append("null");
    } else {
      sb.append(this.chl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lo:");
    sb.append(this.lo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lt:");
    sb.append(this.lt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mo:");
    if (this.mo == null) {
      sb.append("null");
    } else {
      sb.append(this.mo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    sb.append(this.op);
    first = false;
    if (!first) sb.append(", ");
    sb.append("co:");
    if (this.co == null) {
      sb.append("null");
    } else {
      sb.append(this.co);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("os:");
    if (this.os == null) {
      sb.append("null");
    } else {
      sb.append(this.os);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sc:");
    if (this.sc == null) {
      sb.append("null");
    } else {
      sb.append(this.sc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ov:");
    if (this.ov == null) {
      sb.append("null");
    } else {
      sb.append(this.ov);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vc:");
    if (this.vc == null) {
      sb.append("null");
    } else {
      sb.append(this.vc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vn:");
    if (this.vn == null) {
      sb.append("null");
    } else {
      sb.append(this.vn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ne:");
    sb.append(this.ne);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tn:");
    sb.append(this.tn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pname:");
    if (this.pname == null) {
      sb.append("null");
    } else {
      sb.append(this.pname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aid:");
    sb.append(this.aid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vid:");
    sb.append(this.vid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platform:");
    sb.append(this.platform);
    first = false;
    if (!first) sb.append(", ");
    sb.append("event:");
    if (this.event == null) {
      sb.append("null");
    } else {
      sb.append(this.event);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftId:");
    sb.append(this.giftId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendGift:");
    sb.append(this.sendGift);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payType:");
    sb.append(this.payType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    if (this.channel == null) {
      sb.append("null");
    } else {
      sb.append(this.channel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActionLogViewStandardSchemeFactory implements SchemeFactory {
    public ActionLogViewStandardScheme getScheme() {
      return new ActionLogViewStandardScheme();
    }
  }

  private static class ActionLogViewStandardScheme extends StandardScheme<ActionLogView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActionLogView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ma = iprot.readString();
              struct.setMaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.im = iprot.readString();
              struct.setImIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDFA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idfa = iprot.readString();
              struct.setIdfaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idfy = iprot.readString();
              struct.setIdfyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chl = iprot.readString();
              struct.setChlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lo = iprot.readDouble();
              struct.setLoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lt = iprot.readDouble();
              struct.setLtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mo = iprot.readString();
              struct.setMoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = iprot.readI32();
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.co = iprot.readString();
              struct.setCoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os = iprot.readString();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sc = iprot.readString();
              struct.setScIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ov = iprot.readString();
              struct.setOvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vc = iprot.readString();
              struct.setVcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // VN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vn = iprot.readString();
              struct.setVnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ne = iprot.readI32();
              struct.setNeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tn = iprot.readI32();
              struct.setTnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pname = iprot.readString();
              struct.setPnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // AID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aid = iprot.readI32();
              struct.setAidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // VID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vid = iprot.readI64();
              struct.setVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platform = iprot.readI32();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event = iprot.readString();
              struct.setEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // GIFT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giftId = iprot.readI32();
              struct.setGiftIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SEND_GIFT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendGift = iprot.readI32();
              struct.setSendGiftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payType = iprot.readI32();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.duration = iprot.readI32();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel = iprot.readString();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActionLogView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.ma != null) {
        oprot.writeFieldBegin(MA_FIELD_DESC);
        oprot.writeString(struct.ma);
        oprot.writeFieldEnd();
      }
      if (struct.im != null) {
        oprot.writeFieldBegin(IM_FIELD_DESC);
        oprot.writeString(struct.im);
        oprot.writeFieldEnd();
      }
      if (struct.idfa != null) {
        oprot.writeFieldBegin(IDFA_FIELD_DESC);
        oprot.writeString(struct.idfa);
        oprot.writeFieldEnd();
      }
      if (struct.idfy != null) {
        oprot.writeFieldBegin(IDFY_FIELD_DESC);
        oprot.writeString(struct.idfy);
        oprot.writeFieldEnd();
      }
      if (struct.chl != null) {
        oprot.writeFieldBegin(CHL_FIELD_DESC);
        oprot.writeString(struct.chl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LO_FIELD_DESC);
      oprot.writeDouble(struct.lo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LT_FIELD_DESC);
      oprot.writeDouble(struct.lt);
      oprot.writeFieldEnd();
      if (struct.mo != null) {
        oprot.writeFieldBegin(MO_FIELD_DESC);
        oprot.writeString(struct.mo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OP_FIELD_DESC);
      oprot.writeI32(struct.op);
      oprot.writeFieldEnd();
      if (struct.co != null) {
        oprot.writeFieldBegin(CO_FIELD_DESC);
        oprot.writeString(struct.co);
        oprot.writeFieldEnd();
      }
      if (struct.os != null) {
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeString(struct.os);
        oprot.writeFieldEnd();
      }
      if (struct.sc != null) {
        oprot.writeFieldBegin(SC_FIELD_DESC);
        oprot.writeString(struct.sc);
        oprot.writeFieldEnd();
      }
      if (struct.ov != null) {
        oprot.writeFieldBegin(OV_FIELD_DESC);
        oprot.writeString(struct.ov);
        oprot.writeFieldEnd();
      }
      if (struct.vc != null) {
        oprot.writeFieldBegin(VC_FIELD_DESC);
        oprot.writeString(struct.vc);
        oprot.writeFieldEnd();
      }
      if (struct.vn != null) {
        oprot.writeFieldBegin(VN_FIELD_DESC);
        oprot.writeString(struct.vn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NE_FIELD_DESC);
      oprot.writeI32(struct.ne);
      oprot.writeFieldEnd();
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TN_FIELD_DESC);
      oprot.writeI32(struct.tn);
      oprot.writeFieldEnd();
      if (struct.pname != null) {
        oprot.writeFieldBegin(PNAME_FIELD_DESC);
        oprot.writeString(struct.pname);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AID_FIELD_DESC);
      oprot.writeI32(struct.aid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VID_FIELD_DESC);
      oprot.writeI64(struct.vid);
      oprot.writeFieldEnd();
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
      oprot.writeI32(struct.platform);
      oprot.writeFieldEnd();
      if (struct.event != null) {
        oprot.writeFieldBegin(EVENT_FIELD_DESC);
        oprot.writeString(struct.event);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
      oprot.writeI32(struct.giftId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEND_GIFT_FIELD_DESC);
      oprot.writeI32(struct.sendGift);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.payType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI32(struct.duration);
      oprot.writeFieldEnd();
      if (struct.channel != null) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeString(struct.channel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActionLogViewTupleSchemeFactory implements SchemeFactory {
    public ActionLogViewTupleScheme getScheme() {
      return new ActionLogViewTupleScheme();
    }
  }

  private static class ActionLogViewTupleScheme extends TupleScheme<ActionLogView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActionLogView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMa()) {
        optionals.set(1);
      }
      if (struct.isSetIm()) {
        optionals.set(2);
      }
      if (struct.isSetIdfa()) {
        optionals.set(3);
      }
      if (struct.isSetIdfy()) {
        optionals.set(4);
      }
      if (struct.isSetChl()) {
        optionals.set(5);
      }
      if (struct.isSetLo()) {
        optionals.set(6);
      }
      if (struct.isSetLt()) {
        optionals.set(7);
      }
      if (struct.isSetMo()) {
        optionals.set(8);
      }
      if (struct.isSetOp()) {
        optionals.set(9);
      }
      if (struct.isSetCo()) {
        optionals.set(10);
      }
      if (struct.isSetOs()) {
        optionals.set(11);
      }
      if (struct.isSetSc()) {
        optionals.set(12);
      }
      if (struct.isSetOv()) {
        optionals.set(13);
      }
      if (struct.isSetVc()) {
        optionals.set(14);
      }
      if (struct.isSetVn()) {
        optionals.set(15);
      }
      if (struct.isSetNe()) {
        optionals.set(16);
      }
      if (struct.isSetUuid()) {
        optionals.set(17);
      }
      if (struct.isSetUid()) {
        optionals.set(18);
      }
      if (struct.isSetTn()) {
        optionals.set(19);
      }
      if (struct.isSetPname()) {
        optionals.set(20);
      }
      if (struct.isSetContent()) {
        optionals.set(21);
      }
      if (struct.isSetAid()) {
        optionals.set(22);
      }
      if (struct.isSetVid()) {
        optionals.set(23);
      }
      if (struct.isSetCity()) {
        optionals.set(24);
      }
      if (struct.isSetPlatform()) {
        optionals.set(25);
      }
      if (struct.isSetEvent()) {
        optionals.set(26);
      }
      if (struct.isSetGiftId()) {
        optionals.set(27);
      }
      if (struct.isSetSendGift()) {
        optionals.set(28);
      }
      if (struct.isSetAmount()) {
        optionals.set(29);
      }
      if (struct.isSetPayType()) {
        optionals.set(30);
      }
      if (struct.isSetDuration()) {
        optionals.set(31);
      }
      if (struct.isSetChannel()) {
        optionals.set(32);
      }
      if (struct.isSetTime()) {
        optionals.set(33);
      }
      if (struct.isSetIp()) {
        optionals.set(34);
      }
      oprot.writeBitSet(optionals, 35);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMa()) {
        oprot.writeString(struct.ma);
      }
      if (struct.isSetIm()) {
        oprot.writeString(struct.im);
      }
      if (struct.isSetIdfa()) {
        oprot.writeString(struct.idfa);
      }
      if (struct.isSetIdfy()) {
        oprot.writeString(struct.idfy);
      }
      if (struct.isSetChl()) {
        oprot.writeString(struct.chl);
      }
      if (struct.isSetLo()) {
        oprot.writeDouble(struct.lo);
      }
      if (struct.isSetLt()) {
        oprot.writeDouble(struct.lt);
      }
      if (struct.isSetMo()) {
        oprot.writeString(struct.mo);
      }
      if (struct.isSetOp()) {
        oprot.writeI32(struct.op);
      }
      if (struct.isSetCo()) {
        oprot.writeString(struct.co);
      }
      if (struct.isSetOs()) {
        oprot.writeString(struct.os);
      }
      if (struct.isSetSc()) {
        oprot.writeString(struct.sc);
      }
      if (struct.isSetOv()) {
        oprot.writeString(struct.ov);
      }
      if (struct.isSetVc()) {
        oprot.writeString(struct.vc);
      }
      if (struct.isSetVn()) {
        oprot.writeString(struct.vn);
      }
      if (struct.isSetNe()) {
        oprot.writeI32(struct.ne);
      }
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetTn()) {
        oprot.writeI32(struct.tn);
      }
      if (struct.isSetPname()) {
        oprot.writeString(struct.pname);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetAid()) {
        oprot.writeI32(struct.aid);
      }
      if (struct.isSetVid()) {
        oprot.writeI64(struct.vid);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetPlatform()) {
        oprot.writeI32(struct.platform);
      }
      if (struct.isSetEvent()) {
        oprot.writeString(struct.event);
      }
      if (struct.isSetGiftId()) {
        oprot.writeI32(struct.giftId);
      }
      if (struct.isSetSendGift()) {
        oprot.writeI32(struct.sendGift);
      }
      if (struct.isSetAmount()) {
        oprot.writeDouble(struct.amount);
      }
      if (struct.isSetPayType()) {
        oprot.writeI32(struct.payType);
      }
      if (struct.isSetDuration()) {
        oprot.writeI32(struct.duration);
      }
      if (struct.isSetChannel()) {
        oprot.writeString(struct.channel);
      }
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActionLogView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(35);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ma = iprot.readString();
        struct.setMaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.im = iprot.readString();
        struct.setImIsSet(true);
      }
      if (incoming.get(3)) {
        struct.idfa = iprot.readString();
        struct.setIdfaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.idfy = iprot.readString();
        struct.setIdfyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.chl = iprot.readString();
        struct.setChlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lo = iprot.readDouble();
        struct.setLoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lt = iprot.readDouble();
        struct.setLtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mo = iprot.readString();
        struct.setMoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.op = iprot.readI32();
        struct.setOpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.co = iprot.readString();
        struct.setCoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.os = iprot.readString();
        struct.setOsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sc = iprot.readString();
        struct.setScIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ov = iprot.readString();
        struct.setOvIsSet(true);
      }
      if (incoming.get(14)) {
        struct.vc = iprot.readString();
        struct.setVcIsSet(true);
      }
      if (incoming.get(15)) {
        struct.vn = iprot.readString();
        struct.setVnIsSet(true);
      }
      if (incoming.get(16)) {
        struct.ne = iprot.readI32();
        struct.setNeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(18)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(19)) {
        struct.tn = iprot.readI32();
        struct.setTnIsSet(true);
      }
      if (incoming.get(20)) {
        struct.pname = iprot.readString();
        struct.setPnameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(22)) {
        struct.aid = iprot.readI32();
        struct.setAidIsSet(true);
      }
      if (incoming.get(23)) {
        struct.vid = iprot.readI64();
        struct.setVidIsSet(true);
      }
      if (incoming.get(24)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(25)) {
        struct.platform = iprot.readI32();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(26)) {
        struct.event = iprot.readString();
        struct.setEventIsSet(true);
      }
      if (incoming.get(27)) {
        struct.giftId = iprot.readI32();
        struct.setGiftIdIsSet(true);
      }
      if (incoming.get(28)) {
        struct.sendGift = iprot.readI32();
        struct.setSendGiftIsSet(true);
      }
      if (incoming.get(29)) {
        struct.amount = iprot.readDouble();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(30)) {
        struct.payType = iprot.readI32();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.duration = iprot.readI32();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(32)) {
        struct.channel = iprot.readString();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(33)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
    }
  }

}

