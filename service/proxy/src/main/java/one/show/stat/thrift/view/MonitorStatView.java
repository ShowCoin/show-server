/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.stat.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MonitorStatView implements org.apache.thrift.TBase<MonitorStatView, MonitorStatView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MonitorStatView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField AVG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("avgTime", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SUCCEED_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("succeedNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FAIL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("failNum", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNum", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FAIL_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("failRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MonitorStatViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MonitorStatViewTupleSchemeFactory());
  }

  public long id; // required
  public String name; // required
  public long totalTime; // required
  public double avgTime; // required
  public int succeedNum; // required
  public int failNum; // required
  public int totalNum; // required
  public int type; // required
  public int time; // required
  public double failRatio; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    TOTAL_TIME((short)3, "totalTime"),
    AVG_TIME((short)4, "avgTime"),
    SUCCEED_NUM((short)5, "succeedNum"),
    FAIL_NUM((short)6, "failNum"),
    TOTAL_NUM((short)7, "totalNum"),
    TYPE((short)8, "type"),
    TIME((short)9, "time"),
    FAIL_RATIO((short)10, "failRatio");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // TOTAL_TIME
          return TOTAL_TIME;
        case 4: // AVG_TIME
          return AVG_TIME;
        case 5: // SUCCEED_NUM
          return SUCCEED_NUM;
        case 6: // FAIL_NUM
          return FAIL_NUM;
        case 7: // TOTAL_NUM
          return TOTAL_NUM;
        case 8: // TYPE
          return TYPE;
        case 9: // TIME
          return TIME;
        case 10: // FAIL_RATIO
          return FAIL_RATIO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TOTALTIME_ISSET_ID = 1;
  private static final int __AVGTIME_ISSET_ID = 2;
  private static final int __SUCCEEDNUM_ISSET_ID = 3;
  private static final int __FAILNUM_ISSET_ID = 4;
  private static final int __TOTALNUM_ISSET_ID = 5;
  private static final int __TYPE_ISSET_ID = 6;
  private static final int __TIME_ISSET_ID = 7;
  private static final int __FAILRATIO_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("totalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVG_TIME, new org.apache.thrift.meta_data.FieldMetaData("avgTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUCCEED_NUM, new org.apache.thrift.meta_data.FieldMetaData("succeedNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAIL_NUM, new org.apache.thrift.meta_data.FieldMetaData("failNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAIL_RATIO, new org.apache.thrift.meta_data.FieldMetaData("failRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MonitorStatView.class, metaDataMap);
  }

  public MonitorStatView() {
  }

  public MonitorStatView(
    long id,
    String name,
    long totalTime,
    double avgTime,
    int succeedNum,
    int failNum,
    int totalNum,
    int type,
    int time,
    double failRatio)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.totalTime = totalTime;
    setTotalTimeIsSet(true);
    this.avgTime = avgTime;
    setAvgTimeIsSet(true);
    this.succeedNum = succeedNum;
    setSucceedNumIsSet(true);
    this.failNum = failNum;
    setFailNumIsSet(true);
    this.totalNum = totalNum;
    setTotalNumIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.time = time;
    setTimeIsSet(true);
    this.failRatio = failRatio;
    setFailRatioIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MonitorStatView(MonitorStatView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.totalTime = other.totalTime;
    this.avgTime = other.avgTime;
    this.succeedNum = other.succeedNum;
    this.failNum = other.failNum;
    this.totalNum = other.totalNum;
    this.type = other.type;
    this.time = other.time;
    this.failRatio = other.failRatio;
  }

  public MonitorStatView deepCopy() {
    return new MonitorStatView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setTotalTimeIsSet(false);
    this.totalTime = 0;
    setAvgTimeIsSet(false);
    this.avgTime = 0.0;
    setSucceedNumIsSet(false);
    this.succeedNum = 0;
    setFailNumIsSet(false);
    this.failNum = 0;
    setTotalNumIsSet(false);
    this.totalNum = 0;
    setTypeIsSet(false);
    this.type = 0;
    setTimeIsSet(false);
    this.time = 0;
    setFailRatioIsSet(false);
    this.failRatio = 0.0;
  }

  public long getId() {
    return this.id;
  }

  public MonitorStatView setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public MonitorStatView setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getTotalTime() {
    return this.totalTime;
  }

  public MonitorStatView setTotalTime(long totalTime) {
    this.totalTime = totalTime;
    setTotalTimeIsSet(true);
    return this;
  }

  public void unsetTotalTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALTIME_ISSET_ID);
  }

  /** Returns true if field totalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALTIME_ISSET_ID);
  }

  public void setTotalTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALTIME_ISSET_ID, value);
  }

  public double getAvgTime() {
    return this.avgTime;
  }

  public MonitorStatView setAvgTime(double avgTime) {
    this.avgTime = avgTime;
    setAvgTimeIsSet(true);
    return this;
  }

  public void unsetAvgTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVGTIME_ISSET_ID);
  }

  /** Returns true if field avgTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AVGTIME_ISSET_ID);
  }

  public void setAvgTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVGTIME_ISSET_ID, value);
  }

  public int getSucceedNum() {
    return this.succeedNum;
  }

  public MonitorStatView setSucceedNum(int succeedNum) {
    this.succeedNum = succeedNum;
    setSucceedNumIsSet(true);
    return this;
  }

  public void unsetSucceedNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCEEDNUM_ISSET_ID);
  }

  /** Returns true if field succeedNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSucceedNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCEEDNUM_ISSET_ID);
  }

  public void setSucceedNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCEEDNUM_ISSET_ID, value);
  }

  public int getFailNum() {
    return this.failNum;
  }

  public MonitorStatView setFailNum(int failNum) {
    this.failNum = failNum;
    setFailNumIsSet(true);
    return this;
  }

  public void unsetFailNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILNUM_ISSET_ID);
  }

  /** Returns true if field failNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFailNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILNUM_ISSET_ID);
  }

  public void setFailNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILNUM_ISSET_ID, value);
  }

  public int getTotalNum() {
    return this.totalNum;
  }

  public MonitorStatView setTotalNum(int totalNum) {
    this.totalNum = totalNum;
    setTotalNumIsSet(true);
    return this;
  }

  public void unsetTotalNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNUM_ISSET_ID);
  }

  /** Returns true if field totalNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNUM_ISSET_ID);
  }

  public void setTotalNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNUM_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public MonitorStatView setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getTime() {
    return this.time;
  }

  public MonitorStatView setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public double getFailRatio() {
    return this.failRatio;
  }

  public MonitorStatView setFailRatio(double failRatio) {
    this.failRatio = failRatio;
    setFailRatioIsSet(true);
    return this;
  }

  public void unsetFailRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILRATIO_ISSET_ID);
  }

  /** Returns true if field failRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetFailRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILRATIO_ISSET_ID);
  }

  public void setFailRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILRATIO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TOTAL_TIME:
      if (value == null) {
        unsetTotalTime();
      } else {
        setTotalTime((Long)value);
      }
      break;

    case AVG_TIME:
      if (value == null) {
        unsetAvgTime();
      } else {
        setAvgTime((Double)value);
      }
      break;

    case SUCCEED_NUM:
      if (value == null) {
        unsetSucceedNum();
      } else {
        setSucceedNum((Integer)value);
      }
      break;

    case FAIL_NUM:
      if (value == null) {
        unsetFailNum();
      } else {
        setFailNum((Integer)value);
      }
      break;

    case TOTAL_NUM:
      if (value == null) {
        unsetTotalNum();
      } else {
        setTotalNum((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    case FAIL_RATIO:
      if (value == null) {
        unsetFailRatio();
      } else {
        setFailRatio((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case TOTAL_TIME:
      return Long.valueOf(getTotalTime());

    case AVG_TIME:
      return Double.valueOf(getAvgTime());

    case SUCCEED_NUM:
      return Integer.valueOf(getSucceedNum());

    case FAIL_NUM:
      return Integer.valueOf(getFailNum());

    case TOTAL_NUM:
      return Integer.valueOf(getTotalNum());

    case TYPE:
      return Integer.valueOf(getType());

    case TIME:
      return Integer.valueOf(getTime());

    case FAIL_RATIO:
      return Double.valueOf(getFailRatio());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TOTAL_TIME:
      return isSetTotalTime();
    case AVG_TIME:
      return isSetAvgTime();
    case SUCCEED_NUM:
      return isSetSucceedNum();
    case FAIL_NUM:
      return isSetFailNum();
    case TOTAL_NUM:
      return isSetTotalNum();
    case TYPE:
      return isSetType();
    case TIME:
      return isSetTime();
    case FAIL_RATIO:
      return isSetFailRatio();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MonitorStatView)
      return this.equals((MonitorStatView)that);
    return false;
  }

  public boolean equals(MonitorStatView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_totalTime = true;
    boolean that_present_totalTime = true;
    if (this_present_totalTime || that_present_totalTime) {
      if (!(this_present_totalTime && that_present_totalTime))
        return false;
      if (this.totalTime != that.totalTime)
        return false;
    }

    boolean this_present_avgTime = true;
    boolean that_present_avgTime = true;
    if (this_present_avgTime || that_present_avgTime) {
      if (!(this_present_avgTime && that_present_avgTime))
        return false;
      if (this.avgTime != that.avgTime)
        return false;
    }

    boolean this_present_succeedNum = true;
    boolean that_present_succeedNum = true;
    if (this_present_succeedNum || that_present_succeedNum) {
      if (!(this_present_succeedNum && that_present_succeedNum))
        return false;
      if (this.succeedNum != that.succeedNum)
        return false;
    }

    boolean this_present_failNum = true;
    boolean that_present_failNum = true;
    if (this_present_failNum || that_present_failNum) {
      if (!(this_present_failNum && that_present_failNum))
        return false;
      if (this.failNum != that.failNum)
        return false;
    }

    boolean this_present_totalNum = true;
    boolean that_present_totalNum = true;
    if (this_present_totalNum || that_present_totalNum) {
      if (!(this_present_totalNum && that_present_totalNum))
        return false;
      if (this.totalNum != that.totalNum)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_failRatio = true;
    boolean that_present_failRatio = true;
    if (this_present_failRatio || that_present_failRatio) {
      if (!(this_present_failRatio && that_present_failRatio))
        return false;
      if (this.failRatio != that.failRatio)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MonitorStatView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MonitorStatView typedOther = (MonitorStatView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTime()).compareTo(typedOther.isSetTotalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTime, typedOther.totalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgTime()).compareTo(typedOther.isSetAvgTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgTime, typedOther.avgTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSucceedNum()).compareTo(typedOther.isSetSucceedNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSucceedNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.succeedNum, typedOther.succeedNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailNum()).compareTo(typedOther.isSetFailNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failNum, typedOther.failNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNum()).compareTo(typedOther.isSetTotalNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNum, typedOther.totalNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailRatio()).compareTo(typedOther.isSetFailRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failRatio, typedOther.failRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MonitorStatView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTime:");
    sb.append(this.totalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgTime:");
    sb.append(this.avgTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("succeedNum:");
    sb.append(this.succeedNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failNum:");
    sb.append(this.failNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalNum:");
    sb.append(this.totalNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failRatio:");
    sb.append(this.failRatio);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MonitorStatViewStandardSchemeFactory implements SchemeFactory {
    public MonitorStatViewStandardScheme getScheme() {
      return new MonitorStatViewStandardScheme();
    }
  }

  private static class MonitorStatViewStandardScheme extends StandardScheme<MonitorStatView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MonitorStatView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalTime = iprot.readI64();
              struct.setTotalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AVG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgTime = iprot.readDouble();
              struct.setAvgTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUCCEED_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.succeedNum = iprot.readI32();
              struct.setSucceedNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FAIL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.failNum = iprot.readI32();
              struct.setFailNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalNum = iprot.readI32();
              struct.setTotalNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FAIL_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.failRatio = iprot.readDouble();
              struct.setFailRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MonitorStatView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_TIME_FIELD_DESC);
      oprot.writeI64(struct.totalTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVG_TIME_FIELD_DESC);
      oprot.writeDouble(struct.avgTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCEED_NUM_FIELD_DESC);
      oprot.writeI32(struct.succeedNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_NUM_FIELD_DESC);
      oprot.writeI32(struct.failNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_NUM_FIELD_DESC);
      oprot.writeI32(struct.totalNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.failRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MonitorStatViewTupleSchemeFactory implements SchemeFactory {
    public MonitorStatViewTupleScheme getScheme() {
      return new MonitorStatViewTupleScheme();
    }
  }

  private static class MonitorStatViewTupleScheme extends TupleScheme<MonitorStatView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MonitorStatView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetTotalTime()) {
        optionals.set(2);
      }
      if (struct.isSetAvgTime()) {
        optionals.set(3);
      }
      if (struct.isSetSucceedNum()) {
        optionals.set(4);
      }
      if (struct.isSetFailNum()) {
        optionals.set(5);
      }
      if (struct.isSetTotalNum()) {
        optionals.set(6);
      }
      if (struct.isSetType()) {
        optionals.set(7);
      }
      if (struct.isSetTime()) {
        optionals.set(8);
      }
      if (struct.isSetFailRatio()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTotalTime()) {
        oprot.writeI64(struct.totalTime);
      }
      if (struct.isSetAvgTime()) {
        oprot.writeDouble(struct.avgTime);
      }
      if (struct.isSetSucceedNum()) {
        oprot.writeI32(struct.succeedNum);
      }
      if (struct.isSetFailNum()) {
        oprot.writeI32(struct.failNum);
      }
      if (struct.isSetTotalNum()) {
        oprot.writeI32(struct.totalNum);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
      if (struct.isSetFailRatio()) {
        oprot.writeDouble(struct.failRatio);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MonitorStatView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalTime = iprot.readI64();
        struct.setTotalTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.avgTime = iprot.readDouble();
        struct.setAvgTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.succeedNum = iprot.readI32();
        struct.setSucceedNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.failNum = iprot.readI32();
        struct.setFailNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalNum = iprot.readI32();
        struct.setTotalNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.failRatio = iprot.readDouble();
        struct.setFailRatioIsSet(true);
      }
    }
  }

}

