/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.stat.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatServiceProxy {

  public interface Iface {

    public one.show.stat.thrift.view.UserStatView findUserStatByUid(long uid) throws org.apache.thrift.TException;

    public List<one.show.stat.thrift.view.UserStatView> findUserStatByUids(List<Long> uids) throws org.apache.thrift.TException;

    public void deleteUserStat(long uid) throws org.apache.thrift.TException;

    public void saveUserStat(one.show.stat.thrift.view.UserStatView userStatView) throws org.apache.thrift.TException;

    public void updateUserStat(one.show.stat.thrift.view.UserStatView userStatView) throws org.apache.thrift.TException;

    public one.show.stat.thrift.view.VideoStatView findVideoStatByVid(long vid) throws org.apache.thrift.TException;

    public List<one.show.stat.thrift.view.VideoStatView> findVideoStatByVids(List<Long> uids) throws org.apache.thrift.TException;

    public void saveVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView) throws org.apache.thrift.TException;

    public void updateVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView) throws org.apache.thrift.TException;

    public void updateMonitorStatById(long id, String statement) throws org.apache.thrift.TException;

    public void saveMonitorStat(one.show.stat.thrift.view.MonitorStatView monitorStatView) throws org.apache.thrift.TException;

    public one.show.stat.thrift.view.MonitorStatView findMonitorStat(String name, int type, int time) throws org.apache.thrift.TException;

    public one.show.stat.thrift.view.MonitorStatListView findMonitorStatList(int beginTime, int endTime, int type, int start, int count) throws org.apache.thrift.TException;

    public List<one.show.stat.thrift.view.SummaryStatView> getSummaryStatList(int time) throws org.apache.thrift.TException;

    public one.show.stat.thrift.view.SummaryStatView getSummaryStat(int time) throws org.apache.thrift.TException;

    public void saveSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView) throws org.apache.thrift.TException;

    public void updateSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView) throws org.apache.thrift.TException;

    public void updateSummaryStatLiveMax(int num, int time) throws org.apache.thrift.TException;

    public one.show.stat.thrift.view.RankUserDailyView getRankUserDaily(long uid, int type, int date) throws org.apache.thrift.TException;

    public void savetRankUserDaily(one.show.stat.thrift.view.RankUserDailyView rankUserDailyView) throws org.apache.thrift.TException;

    public void updateRankUserDaily(long id, double number) throws org.apache.thrift.TException;

    public one.show.stat.thrift.view.RankUserListView findRankUserList(int beginTime, int endTime, int type, int start, int count) throws org.apache.thrift.TException;

    public void saveLog(one.show.stat.thrift.view.LogView logView) throws org.apache.thrift.TException;

    public void saveActionLog(one.show.stat.thrift.view.ActionLogView actionLogView) throws org.apache.thrift.TException;

    public one.show.stat.thrift.view.RobotStatDailyView findRobotStatDailyByDate(int date) throws org.apache.thrift.TException;

    public void saveRobotStatDaily(one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView) throws org.apache.thrift.TException;

    public void updateRobotStatDailyByDate(int date, Map<String,String> updateContent) throws org.apache.thrift.TException;

    public one.show.stat.thrift.view.ActiveXbStatView findActiveXbStatByUidAndTime(long uid, int time) throws org.apache.thrift.TException;

    public void saveActiveXbStat(one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView) throws org.apache.thrift.TException;

    public void updateActiveXbStatById(long id, Map<String,String> updateContent) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findUserStatByUid(long uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findUserStatByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void findUserStatByUids(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findUserStatByUids_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteUserStat(long uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteUserStat_call> resultHandler) throws org.apache.thrift.TException;

    public void saveUserStat(one.show.stat.thrift.view.UserStatView userStatView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveUserStat_call> resultHandler) throws org.apache.thrift.TException;

    public void updateUserStat(one.show.stat.thrift.view.UserStatView userStatView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateUserStat_call> resultHandler) throws org.apache.thrift.TException;

    public void findVideoStatByVid(long vid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findVideoStatByVid_call> resultHandler) throws org.apache.thrift.TException;

    public void findVideoStatByVids(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findVideoStatByVids_call> resultHandler) throws org.apache.thrift.TException;

    public void saveVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveVideoStat_call> resultHandler) throws org.apache.thrift.TException;

    public void updateVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateVideoStat_call> resultHandler) throws org.apache.thrift.TException;

    public void updateMonitorStatById(long id, String statement, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateMonitorStatById_call> resultHandler) throws org.apache.thrift.TException;

    public void saveMonitorStat(one.show.stat.thrift.view.MonitorStatView monitorStatView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveMonitorStat_call> resultHandler) throws org.apache.thrift.TException;

    public void findMonitorStat(String name, int type, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findMonitorStat_call> resultHandler) throws org.apache.thrift.TException;

    public void findMonitorStatList(int beginTime, int endTime, int type, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findMonitorStatList_call> resultHandler) throws org.apache.thrift.TException;

    public void getSummaryStatList(int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSummaryStatList_call> resultHandler) throws org.apache.thrift.TException;

    public void getSummaryStat(int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSummaryStat_call> resultHandler) throws org.apache.thrift.TException;

    public void saveSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveSummaryStat_call> resultHandler) throws org.apache.thrift.TException;

    public void updateSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateSummaryStat_call> resultHandler) throws org.apache.thrift.TException;

    public void updateSummaryStatLiveMax(int num, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateSummaryStatLiveMax_call> resultHandler) throws org.apache.thrift.TException;

    public void getRankUserDaily(long uid, int type, int date, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRankUserDaily_call> resultHandler) throws org.apache.thrift.TException;

    public void savetRankUserDaily(one.show.stat.thrift.view.RankUserDailyView rankUserDailyView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.savetRankUserDaily_call> resultHandler) throws org.apache.thrift.TException;

    public void updateRankUserDaily(long id, double number, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateRankUserDaily_call> resultHandler) throws org.apache.thrift.TException;

    public void findRankUserList(int beginTime, int endTime, int type, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findRankUserList_call> resultHandler) throws org.apache.thrift.TException;

    public void saveLog(one.show.stat.thrift.view.LogView logView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveLog_call> resultHandler) throws org.apache.thrift.TException;

    public void saveActionLog(one.show.stat.thrift.view.ActionLogView actionLogView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveActionLog_call> resultHandler) throws org.apache.thrift.TException;

    public void findRobotStatDailyByDate(int date, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findRobotStatDailyByDate_call> resultHandler) throws org.apache.thrift.TException;

    public void saveRobotStatDaily(one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveRobotStatDaily_call> resultHandler) throws org.apache.thrift.TException;

    public void updateRobotStatDailyByDate(int date, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateRobotStatDailyByDate_call> resultHandler) throws org.apache.thrift.TException;

    public void findActiveXbStatByUidAndTime(long uid, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findActiveXbStatByUidAndTime_call> resultHandler) throws org.apache.thrift.TException;

    public void saveActiveXbStat(one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveActiveXbStat_call> resultHandler) throws org.apache.thrift.TException;

    public void updateActiveXbStatById(long id, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateActiveXbStatById_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public one.show.stat.thrift.view.UserStatView findUserStatByUid(long uid) throws org.apache.thrift.TException
    {
      send_findUserStatByUid(uid);
      return recv_findUserStatByUid();
    }

    public void send_findUserStatByUid(long uid) throws org.apache.thrift.TException
    {
      findUserStatByUid_args args = new findUserStatByUid_args();
      args.setUid(uid);
      sendBase("findUserStatByUid", args);
    }

    public one.show.stat.thrift.view.UserStatView recv_findUserStatByUid() throws org.apache.thrift.TException
    {
      findUserStatByUid_result result = new findUserStatByUid_result();
      receiveBase(result, "findUserStatByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserStatByUid failed: unknown result");
    }

    public List<one.show.stat.thrift.view.UserStatView> findUserStatByUids(List<Long> uids) throws org.apache.thrift.TException
    {
      send_findUserStatByUids(uids);
      return recv_findUserStatByUids();
    }

    public void send_findUserStatByUids(List<Long> uids) throws org.apache.thrift.TException
    {
      findUserStatByUids_args args = new findUserStatByUids_args();
      args.setUids(uids);
      sendBase("findUserStatByUids", args);
    }

    public List<one.show.stat.thrift.view.UserStatView> recv_findUserStatByUids() throws org.apache.thrift.TException
    {
      findUserStatByUids_result result = new findUserStatByUids_result();
      receiveBase(result, "findUserStatByUids");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserStatByUids failed: unknown result");
    }

    public void deleteUserStat(long uid) throws org.apache.thrift.TException
    {
      send_deleteUserStat(uid);
      recv_deleteUserStat();
    }

    public void send_deleteUserStat(long uid) throws org.apache.thrift.TException
    {
      deleteUserStat_args args = new deleteUserStat_args();
      args.setUid(uid);
      sendBase("deleteUserStat", args);
    }

    public void recv_deleteUserStat() throws org.apache.thrift.TException
    {
      deleteUserStat_result result = new deleteUserStat_result();
      receiveBase(result, "deleteUserStat");
      return;
    }

    public void saveUserStat(one.show.stat.thrift.view.UserStatView userStatView) throws org.apache.thrift.TException
    {
      send_saveUserStat(userStatView);
      recv_saveUserStat();
    }

    public void send_saveUserStat(one.show.stat.thrift.view.UserStatView userStatView) throws org.apache.thrift.TException
    {
      saveUserStat_args args = new saveUserStat_args();
      args.setUserStatView(userStatView);
      sendBase("saveUserStat", args);
    }

    public void recv_saveUserStat() throws org.apache.thrift.TException
    {
      saveUserStat_result result = new saveUserStat_result();
      receiveBase(result, "saveUserStat");
      return;
    }

    public void updateUserStat(one.show.stat.thrift.view.UserStatView userStatView) throws org.apache.thrift.TException
    {
      send_updateUserStat(userStatView);
      recv_updateUserStat();
    }

    public void send_updateUserStat(one.show.stat.thrift.view.UserStatView userStatView) throws org.apache.thrift.TException
    {
      updateUserStat_args args = new updateUserStat_args();
      args.setUserStatView(userStatView);
      sendBase("updateUserStat", args);
    }

    public void recv_updateUserStat() throws org.apache.thrift.TException
    {
      updateUserStat_result result = new updateUserStat_result();
      receiveBase(result, "updateUserStat");
      return;
    }

    public one.show.stat.thrift.view.VideoStatView findVideoStatByVid(long vid) throws org.apache.thrift.TException
    {
      send_findVideoStatByVid(vid);
      return recv_findVideoStatByVid();
    }

    public void send_findVideoStatByVid(long vid) throws org.apache.thrift.TException
    {
      findVideoStatByVid_args args = new findVideoStatByVid_args();
      args.setVid(vid);
      sendBase("findVideoStatByVid", args);
    }

    public one.show.stat.thrift.view.VideoStatView recv_findVideoStatByVid() throws org.apache.thrift.TException
    {
      findVideoStatByVid_result result = new findVideoStatByVid_result();
      receiveBase(result, "findVideoStatByVid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findVideoStatByVid failed: unknown result");
    }

    public List<one.show.stat.thrift.view.VideoStatView> findVideoStatByVids(List<Long> uids) throws org.apache.thrift.TException
    {
      send_findVideoStatByVids(uids);
      return recv_findVideoStatByVids();
    }

    public void send_findVideoStatByVids(List<Long> uids) throws org.apache.thrift.TException
    {
      findVideoStatByVids_args args = new findVideoStatByVids_args();
      args.setUids(uids);
      sendBase("findVideoStatByVids", args);
    }

    public List<one.show.stat.thrift.view.VideoStatView> recv_findVideoStatByVids() throws org.apache.thrift.TException
    {
      findVideoStatByVids_result result = new findVideoStatByVids_result();
      receiveBase(result, "findVideoStatByVids");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findVideoStatByVids failed: unknown result");
    }

    public void saveVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView) throws org.apache.thrift.TException
    {
      send_saveVideoStat(videoStatView);
      recv_saveVideoStat();
    }

    public void send_saveVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView) throws org.apache.thrift.TException
    {
      saveVideoStat_args args = new saveVideoStat_args();
      args.setVideoStatView(videoStatView);
      sendBase("saveVideoStat", args);
    }

    public void recv_saveVideoStat() throws org.apache.thrift.TException
    {
      saveVideoStat_result result = new saveVideoStat_result();
      receiveBase(result, "saveVideoStat");
      return;
    }

    public void updateVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView) throws org.apache.thrift.TException
    {
      send_updateVideoStat(videoStatView);
      recv_updateVideoStat();
    }

    public void send_updateVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView) throws org.apache.thrift.TException
    {
      updateVideoStat_args args = new updateVideoStat_args();
      args.setVideoStatView(videoStatView);
      sendBase("updateVideoStat", args);
    }

    public void recv_updateVideoStat() throws org.apache.thrift.TException
    {
      updateVideoStat_result result = new updateVideoStat_result();
      receiveBase(result, "updateVideoStat");
      return;
    }

    public void updateMonitorStatById(long id, String statement) throws org.apache.thrift.TException
    {
      send_updateMonitorStatById(id, statement);
      recv_updateMonitorStatById();
    }

    public void send_updateMonitorStatById(long id, String statement) throws org.apache.thrift.TException
    {
      updateMonitorStatById_args args = new updateMonitorStatById_args();
      args.setId(id);
      args.setStatement(statement);
      sendBase("updateMonitorStatById", args);
    }

    public void recv_updateMonitorStatById() throws org.apache.thrift.TException
    {
      updateMonitorStatById_result result = new updateMonitorStatById_result();
      receiveBase(result, "updateMonitorStatById");
      return;
    }

    public void saveMonitorStat(one.show.stat.thrift.view.MonitorStatView monitorStatView) throws org.apache.thrift.TException
    {
      send_saveMonitorStat(monitorStatView);
      recv_saveMonitorStat();
    }

    public void send_saveMonitorStat(one.show.stat.thrift.view.MonitorStatView monitorStatView) throws org.apache.thrift.TException
    {
      saveMonitorStat_args args = new saveMonitorStat_args();
      args.setMonitorStatView(monitorStatView);
      sendBase("saveMonitorStat", args);
    }

    public void recv_saveMonitorStat() throws org.apache.thrift.TException
    {
      saveMonitorStat_result result = new saveMonitorStat_result();
      receiveBase(result, "saveMonitorStat");
      return;
    }

    public one.show.stat.thrift.view.MonitorStatView findMonitorStat(String name, int type, int time) throws org.apache.thrift.TException
    {
      send_findMonitorStat(name, type, time);
      return recv_findMonitorStat();
    }

    public void send_findMonitorStat(String name, int type, int time) throws org.apache.thrift.TException
    {
      findMonitorStat_args args = new findMonitorStat_args();
      args.setName(name);
      args.setType(type);
      args.setTime(time);
      sendBase("findMonitorStat", args);
    }

    public one.show.stat.thrift.view.MonitorStatView recv_findMonitorStat() throws org.apache.thrift.TException
    {
      findMonitorStat_result result = new findMonitorStat_result();
      receiveBase(result, "findMonitorStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMonitorStat failed: unknown result");
    }

    public one.show.stat.thrift.view.MonitorStatListView findMonitorStatList(int beginTime, int endTime, int type, int start, int count) throws org.apache.thrift.TException
    {
      send_findMonitorStatList(beginTime, endTime, type, start, count);
      return recv_findMonitorStatList();
    }

    public void send_findMonitorStatList(int beginTime, int endTime, int type, int start, int count) throws org.apache.thrift.TException
    {
      findMonitorStatList_args args = new findMonitorStatList_args();
      args.setBeginTime(beginTime);
      args.setEndTime(endTime);
      args.setType(type);
      args.setStart(start);
      args.setCount(count);
      sendBase("findMonitorStatList", args);
    }

    public one.show.stat.thrift.view.MonitorStatListView recv_findMonitorStatList() throws org.apache.thrift.TException
    {
      findMonitorStatList_result result = new findMonitorStatList_result();
      receiveBase(result, "findMonitorStatList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMonitorStatList failed: unknown result");
    }

    public List<one.show.stat.thrift.view.SummaryStatView> getSummaryStatList(int time) throws org.apache.thrift.TException
    {
      send_getSummaryStatList(time);
      return recv_getSummaryStatList();
    }

    public void send_getSummaryStatList(int time) throws org.apache.thrift.TException
    {
      getSummaryStatList_args args = new getSummaryStatList_args();
      args.setTime(time);
      sendBase("getSummaryStatList", args);
    }

    public List<one.show.stat.thrift.view.SummaryStatView> recv_getSummaryStatList() throws org.apache.thrift.TException
    {
      getSummaryStatList_result result = new getSummaryStatList_result();
      receiveBase(result, "getSummaryStatList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSummaryStatList failed: unknown result");
    }

    public one.show.stat.thrift.view.SummaryStatView getSummaryStat(int time) throws org.apache.thrift.TException
    {
      send_getSummaryStat(time);
      return recv_getSummaryStat();
    }

    public void send_getSummaryStat(int time) throws org.apache.thrift.TException
    {
      getSummaryStat_args args = new getSummaryStat_args();
      args.setTime(time);
      sendBase("getSummaryStat", args);
    }

    public one.show.stat.thrift.view.SummaryStatView recv_getSummaryStat() throws org.apache.thrift.TException
    {
      getSummaryStat_result result = new getSummaryStat_result();
      receiveBase(result, "getSummaryStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSummaryStat failed: unknown result");
    }

    public void saveSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView) throws org.apache.thrift.TException
    {
      send_saveSummaryStat(summaryStatView);
      recv_saveSummaryStat();
    }

    public void send_saveSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView) throws org.apache.thrift.TException
    {
      saveSummaryStat_args args = new saveSummaryStat_args();
      args.setSummaryStatView(summaryStatView);
      sendBase("saveSummaryStat", args);
    }

    public void recv_saveSummaryStat() throws org.apache.thrift.TException
    {
      saveSummaryStat_result result = new saveSummaryStat_result();
      receiveBase(result, "saveSummaryStat");
      return;
    }

    public void updateSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView) throws org.apache.thrift.TException
    {
      send_updateSummaryStat(summaryStatView);
      recv_updateSummaryStat();
    }

    public void send_updateSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView) throws org.apache.thrift.TException
    {
      updateSummaryStat_args args = new updateSummaryStat_args();
      args.setSummaryStatView(summaryStatView);
      sendBase("updateSummaryStat", args);
    }

    public void recv_updateSummaryStat() throws org.apache.thrift.TException
    {
      updateSummaryStat_result result = new updateSummaryStat_result();
      receiveBase(result, "updateSummaryStat");
      return;
    }

    public void updateSummaryStatLiveMax(int num, int time) throws org.apache.thrift.TException
    {
      send_updateSummaryStatLiveMax(num, time);
      recv_updateSummaryStatLiveMax();
    }

    public void send_updateSummaryStatLiveMax(int num, int time) throws org.apache.thrift.TException
    {
      updateSummaryStatLiveMax_args args = new updateSummaryStatLiveMax_args();
      args.setNum(num);
      args.setTime(time);
      sendBase("updateSummaryStatLiveMax", args);
    }

    public void recv_updateSummaryStatLiveMax() throws org.apache.thrift.TException
    {
      updateSummaryStatLiveMax_result result = new updateSummaryStatLiveMax_result();
      receiveBase(result, "updateSummaryStatLiveMax");
      return;
    }

    public one.show.stat.thrift.view.RankUserDailyView getRankUserDaily(long uid, int type, int date) throws org.apache.thrift.TException
    {
      send_getRankUserDaily(uid, type, date);
      return recv_getRankUserDaily();
    }

    public void send_getRankUserDaily(long uid, int type, int date) throws org.apache.thrift.TException
    {
      getRankUserDaily_args args = new getRankUserDaily_args();
      args.setUid(uid);
      args.setType(type);
      args.setDate(date);
      sendBase("getRankUserDaily", args);
    }

    public one.show.stat.thrift.view.RankUserDailyView recv_getRankUserDaily() throws org.apache.thrift.TException
    {
      getRankUserDaily_result result = new getRankUserDaily_result();
      receiveBase(result, "getRankUserDaily");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRankUserDaily failed: unknown result");
    }

    public void savetRankUserDaily(one.show.stat.thrift.view.RankUserDailyView rankUserDailyView) throws org.apache.thrift.TException
    {
      send_savetRankUserDaily(rankUserDailyView);
      recv_savetRankUserDaily();
    }

    public void send_savetRankUserDaily(one.show.stat.thrift.view.RankUserDailyView rankUserDailyView) throws org.apache.thrift.TException
    {
      savetRankUserDaily_args args = new savetRankUserDaily_args();
      args.setRankUserDailyView(rankUserDailyView);
      sendBase("savetRankUserDaily", args);
    }

    public void recv_savetRankUserDaily() throws org.apache.thrift.TException
    {
      savetRankUserDaily_result result = new savetRankUserDaily_result();
      receiveBase(result, "savetRankUserDaily");
      return;
    }

    public void updateRankUserDaily(long id, double number) throws org.apache.thrift.TException
    {
      send_updateRankUserDaily(id, number);
      recv_updateRankUserDaily();
    }

    public void send_updateRankUserDaily(long id, double number) throws org.apache.thrift.TException
    {
      updateRankUserDaily_args args = new updateRankUserDaily_args();
      args.setId(id);
      args.setNumber(number);
      sendBase("updateRankUserDaily", args);
    }

    public void recv_updateRankUserDaily() throws org.apache.thrift.TException
    {
      updateRankUserDaily_result result = new updateRankUserDaily_result();
      receiveBase(result, "updateRankUserDaily");
      return;
    }

    public one.show.stat.thrift.view.RankUserListView findRankUserList(int beginTime, int endTime, int type, int start, int count) throws org.apache.thrift.TException
    {
      send_findRankUserList(beginTime, endTime, type, start, count);
      return recv_findRankUserList();
    }

    public void send_findRankUserList(int beginTime, int endTime, int type, int start, int count) throws org.apache.thrift.TException
    {
      findRankUserList_args args = new findRankUserList_args();
      args.setBeginTime(beginTime);
      args.setEndTime(endTime);
      args.setType(type);
      args.setStart(start);
      args.setCount(count);
      sendBase("findRankUserList", args);
    }

    public one.show.stat.thrift.view.RankUserListView recv_findRankUserList() throws org.apache.thrift.TException
    {
      findRankUserList_result result = new findRankUserList_result();
      receiveBase(result, "findRankUserList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRankUserList failed: unknown result");
    }

    public void saveLog(one.show.stat.thrift.view.LogView logView) throws org.apache.thrift.TException
    {
      send_saveLog(logView);
      recv_saveLog();
    }

    public void send_saveLog(one.show.stat.thrift.view.LogView logView) throws org.apache.thrift.TException
    {
      saveLog_args args = new saveLog_args();
      args.setLogView(logView);
      sendBase("saveLog", args);
    }

    public void recv_saveLog() throws org.apache.thrift.TException
    {
      saveLog_result result = new saveLog_result();
      receiveBase(result, "saveLog");
      return;
    }

    public void saveActionLog(one.show.stat.thrift.view.ActionLogView actionLogView) throws org.apache.thrift.TException
    {
      send_saveActionLog(actionLogView);
      recv_saveActionLog();
    }

    public void send_saveActionLog(one.show.stat.thrift.view.ActionLogView actionLogView) throws org.apache.thrift.TException
    {
      saveActionLog_args args = new saveActionLog_args();
      args.setActionLogView(actionLogView);
      sendBase("saveActionLog", args);
    }

    public void recv_saveActionLog() throws org.apache.thrift.TException
    {
      saveActionLog_result result = new saveActionLog_result();
      receiveBase(result, "saveActionLog");
      return;
    }

    public one.show.stat.thrift.view.RobotStatDailyView findRobotStatDailyByDate(int date) throws org.apache.thrift.TException
    {
      send_findRobotStatDailyByDate(date);
      return recv_findRobotStatDailyByDate();
    }

    public void send_findRobotStatDailyByDate(int date) throws org.apache.thrift.TException
    {
      findRobotStatDailyByDate_args args = new findRobotStatDailyByDate_args();
      args.setDate(date);
      sendBase("findRobotStatDailyByDate", args);
    }

    public one.show.stat.thrift.view.RobotStatDailyView recv_findRobotStatDailyByDate() throws org.apache.thrift.TException
    {
      findRobotStatDailyByDate_result result = new findRobotStatDailyByDate_result();
      receiveBase(result, "findRobotStatDailyByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRobotStatDailyByDate failed: unknown result");
    }

    public void saveRobotStatDaily(one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView) throws org.apache.thrift.TException
    {
      send_saveRobotStatDaily(robotStatDailyView);
      recv_saveRobotStatDaily();
    }

    public void send_saveRobotStatDaily(one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView) throws org.apache.thrift.TException
    {
      saveRobotStatDaily_args args = new saveRobotStatDaily_args();
      args.setRobotStatDailyView(robotStatDailyView);
      sendBase("saveRobotStatDaily", args);
    }

    public void recv_saveRobotStatDaily() throws org.apache.thrift.TException
    {
      saveRobotStatDaily_result result = new saveRobotStatDaily_result();
      receiveBase(result, "saveRobotStatDaily");
      return;
    }

    public void updateRobotStatDailyByDate(int date, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      send_updateRobotStatDailyByDate(date, updateContent);
      recv_updateRobotStatDailyByDate();
    }

    public void send_updateRobotStatDailyByDate(int date, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      updateRobotStatDailyByDate_args args = new updateRobotStatDailyByDate_args();
      args.setDate(date);
      args.setUpdateContent(updateContent);
      sendBase("updateRobotStatDailyByDate", args);
    }

    public void recv_updateRobotStatDailyByDate() throws org.apache.thrift.TException
    {
      updateRobotStatDailyByDate_result result = new updateRobotStatDailyByDate_result();
      receiveBase(result, "updateRobotStatDailyByDate");
      return;
    }

    public one.show.stat.thrift.view.ActiveXbStatView findActiveXbStatByUidAndTime(long uid, int time) throws org.apache.thrift.TException
    {
      send_findActiveXbStatByUidAndTime(uid, time);
      return recv_findActiveXbStatByUidAndTime();
    }

    public void send_findActiveXbStatByUidAndTime(long uid, int time) throws org.apache.thrift.TException
    {
      findActiveXbStatByUidAndTime_args args = new findActiveXbStatByUidAndTime_args();
      args.setUid(uid);
      args.setTime(time);
      sendBase("findActiveXbStatByUidAndTime", args);
    }

    public one.show.stat.thrift.view.ActiveXbStatView recv_findActiveXbStatByUidAndTime() throws org.apache.thrift.TException
    {
      findActiveXbStatByUidAndTime_result result = new findActiveXbStatByUidAndTime_result();
      receiveBase(result, "findActiveXbStatByUidAndTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findActiveXbStatByUidAndTime failed: unknown result");
    }

    public void saveActiveXbStat(one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView) throws org.apache.thrift.TException
    {
      send_saveActiveXbStat(ActiveXbStatView);
      recv_saveActiveXbStat();
    }

    public void send_saveActiveXbStat(one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView) throws org.apache.thrift.TException
    {
      saveActiveXbStat_args args = new saveActiveXbStat_args();
      args.setActiveXbStatView(ActiveXbStatView);
      sendBase("saveActiveXbStat", args);
    }

    public void recv_saveActiveXbStat() throws org.apache.thrift.TException
    {
      saveActiveXbStat_result result = new saveActiveXbStat_result();
      receiveBase(result, "saveActiveXbStat");
      return;
    }

    public void updateActiveXbStatById(long id, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      send_updateActiveXbStatById(id, updateContent);
      recv_updateActiveXbStatById();
    }

    public void send_updateActiveXbStatById(long id, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      updateActiveXbStatById_args args = new updateActiveXbStatById_args();
      args.setId(id);
      args.setUpdateContent(updateContent);
      sendBase("updateActiveXbStatById", args);
    }

    public void recv_updateActiveXbStatById() throws org.apache.thrift.TException
    {
      updateActiveXbStatById_result result = new updateActiveXbStatById_result();
      receiveBase(result, "updateActiveXbStatById");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findUserStatByUid(long uid, org.apache.thrift.async.AsyncMethodCallback<findUserStatByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserStatByUid_call method_call = new findUserStatByUid_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserStatByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public findUserStatByUid_call(long uid, org.apache.thrift.async.AsyncMethodCallback<findUserStatByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserStatByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserStatByUid_args args = new findUserStatByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.UserStatView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserStatByUid();
      }
    }

    public void findUserStatByUids(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback<findUserStatByUids_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserStatByUids_call method_call = new findUserStatByUids_call(uids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserStatByUids_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> uids;
      public findUserStatByUids_call(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback<findUserStatByUids_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserStatByUids", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserStatByUids_args args = new findUserStatByUids_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.stat.thrift.view.UserStatView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserStatByUids();
      }
    }

    public void deleteUserStat(long uid, org.apache.thrift.async.AsyncMethodCallback<deleteUserStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUserStat_call method_call = new deleteUserStat_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUserStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public deleteUserStat_call(long uid, org.apache.thrift.async.AsyncMethodCallback<deleteUserStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUserStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUserStat_args args = new deleteUserStat_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteUserStat();
      }
    }

    public void saveUserStat(one.show.stat.thrift.view.UserStatView userStatView, org.apache.thrift.async.AsyncMethodCallback<saveUserStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveUserStat_call method_call = new saveUserStat_call(userStatView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveUserStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.UserStatView userStatView;
      public saveUserStat_call(one.show.stat.thrift.view.UserStatView userStatView, org.apache.thrift.async.AsyncMethodCallback<saveUserStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userStatView = userStatView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveUserStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveUserStat_args args = new saveUserStat_args();
        args.setUserStatView(userStatView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveUserStat();
      }
    }

    public void updateUserStat(one.show.stat.thrift.view.UserStatView userStatView, org.apache.thrift.async.AsyncMethodCallback<updateUserStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserStat_call method_call = new updateUserStat_call(userStatView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.UserStatView userStatView;
      public updateUserStat_call(one.show.stat.thrift.view.UserStatView userStatView, org.apache.thrift.async.AsyncMethodCallback<updateUserStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userStatView = userStatView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserStat_args args = new updateUserStat_args();
        args.setUserStatView(userStatView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateUserStat();
      }
    }

    public void findVideoStatByVid(long vid, org.apache.thrift.async.AsyncMethodCallback<findVideoStatByVid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findVideoStatByVid_call method_call = new findVideoStatByVid_call(vid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findVideoStatByVid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long vid;
      public findVideoStatByVid_call(long vid, org.apache.thrift.async.AsyncMethodCallback<findVideoStatByVid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vid = vid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findVideoStatByVid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findVideoStatByVid_args args = new findVideoStatByVid_args();
        args.setVid(vid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.VideoStatView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findVideoStatByVid();
      }
    }

    public void findVideoStatByVids(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback<findVideoStatByVids_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findVideoStatByVids_call method_call = new findVideoStatByVids_call(uids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findVideoStatByVids_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> uids;
      public findVideoStatByVids_call(List<Long> uids, org.apache.thrift.async.AsyncMethodCallback<findVideoStatByVids_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uids = uids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findVideoStatByVids", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findVideoStatByVids_args args = new findVideoStatByVids_args();
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.stat.thrift.view.VideoStatView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findVideoStatByVids();
      }
    }

    public void saveVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView, org.apache.thrift.async.AsyncMethodCallback<saveVideoStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveVideoStat_call method_call = new saveVideoStat_call(videoStatView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveVideoStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.VideoStatView videoStatView;
      public saveVideoStat_call(one.show.stat.thrift.view.VideoStatView videoStatView, org.apache.thrift.async.AsyncMethodCallback<saveVideoStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.videoStatView = videoStatView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveVideoStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveVideoStat_args args = new saveVideoStat_args();
        args.setVideoStatView(videoStatView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveVideoStat();
      }
    }

    public void updateVideoStat(one.show.stat.thrift.view.VideoStatView videoStatView, org.apache.thrift.async.AsyncMethodCallback<updateVideoStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVideoStat_call method_call = new updateVideoStat_call(videoStatView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVideoStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.VideoStatView videoStatView;
      public updateVideoStat_call(one.show.stat.thrift.view.VideoStatView videoStatView, org.apache.thrift.async.AsyncMethodCallback<updateVideoStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.videoStatView = videoStatView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVideoStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVideoStat_args args = new updateVideoStat_args();
        args.setVideoStatView(videoStatView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateVideoStat();
      }
    }

    public void updateMonitorStatById(long id, String statement, org.apache.thrift.async.AsyncMethodCallback<updateMonitorStatById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMonitorStatById_call method_call = new updateMonitorStatById_call(id, statement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMonitorStatById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private String statement;
      public updateMonitorStatById_call(long id, String statement, org.apache.thrift.async.AsyncMethodCallback<updateMonitorStatById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.statement = statement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMonitorStatById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMonitorStatById_args args = new updateMonitorStatById_args();
        args.setId(id);
        args.setStatement(statement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateMonitorStatById();
      }
    }

    public void saveMonitorStat(one.show.stat.thrift.view.MonitorStatView monitorStatView, org.apache.thrift.async.AsyncMethodCallback<saveMonitorStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveMonitorStat_call method_call = new saveMonitorStat_call(monitorStatView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveMonitorStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.MonitorStatView monitorStatView;
      public saveMonitorStat_call(one.show.stat.thrift.view.MonitorStatView monitorStatView, org.apache.thrift.async.AsyncMethodCallback<saveMonitorStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monitorStatView = monitorStatView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMonitorStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveMonitorStat_args args = new saveMonitorStat_args();
        args.setMonitorStatView(monitorStatView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveMonitorStat();
      }
    }

    public void findMonitorStat(String name, int type, int time, org.apache.thrift.async.AsyncMethodCallback<findMonitorStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMonitorStat_call method_call = new findMonitorStat_call(name, type, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMonitorStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private int type;
      private int time;
      public findMonitorStat_call(String name, int type, int time, org.apache.thrift.async.AsyncMethodCallback<findMonitorStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.type = type;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMonitorStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMonitorStat_args args = new findMonitorStat_args();
        args.setName(name);
        args.setType(type);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.MonitorStatView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMonitorStat();
      }
    }

    public void findMonitorStatList(int beginTime, int endTime, int type, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findMonitorStatList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMonitorStatList_call method_call = new findMonitorStatList_call(beginTime, endTime, type, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMonitorStatList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int beginTime;
      private int endTime;
      private int type;
      private int start;
      private int count;
      public findMonitorStatList_call(int beginTime, int endTime, int type, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findMonitorStatList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.beginTime = beginTime;
        this.endTime = endTime;
        this.type = type;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMonitorStatList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMonitorStatList_args args = new findMonitorStatList_args();
        args.setBeginTime(beginTime);
        args.setEndTime(endTime);
        args.setType(type);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.MonitorStatListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMonitorStatList();
      }
    }

    public void getSummaryStatList(int time, org.apache.thrift.async.AsyncMethodCallback<getSummaryStatList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSummaryStatList_call method_call = new getSummaryStatList_call(time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSummaryStatList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int time;
      public getSummaryStatList_call(int time, org.apache.thrift.async.AsyncMethodCallback<getSummaryStatList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSummaryStatList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSummaryStatList_args args = new getSummaryStatList_args();
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.stat.thrift.view.SummaryStatView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSummaryStatList();
      }
    }

    public void getSummaryStat(int time, org.apache.thrift.async.AsyncMethodCallback<getSummaryStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSummaryStat_call method_call = new getSummaryStat_call(time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSummaryStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int time;
      public getSummaryStat_call(int time, org.apache.thrift.async.AsyncMethodCallback<getSummaryStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSummaryStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSummaryStat_args args = new getSummaryStat_args();
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.SummaryStatView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSummaryStat();
      }
    }

    public void saveSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView, org.apache.thrift.async.AsyncMethodCallback<saveSummaryStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveSummaryStat_call method_call = new saveSummaryStat_call(summaryStatView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveSummaryStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.SummaryStatView summaryStatView;
      public saveSummaryStat_call(one.show.stat.thrift.view.SummaryStatView summaryStatView, org.apache.thrift.async.AsyncMethodCallback<saveSummaryStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.summaryStatView = summaryStatView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveSummaryStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveSummaryStat_args args = new saveSummaryStat_args();
        args.setSummaryStatView(summaryStatView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveSummaryStat();
      }
    }

    public void updateSummaryStat(one.show.stat.thrift.view.SummaryStatView summaryStatView, org.apache.thrift.async.AsyncMethodCallback<updateSummaryStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSummaryStat_call method_call = new updateSummaryStat_call(summaryStatView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSummaryStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.SummaryStatView summaryStatView;
      public updateSummaryStat_call(one.show.stat.thrift.view.SummaryStatView summaryStatView, org.apache.thrift.async.AsyncMethodCallback<updateSummaryStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.summaryStatView = summaryStatView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSummaryStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSummaryStat_args args = new updateSummaryStat_args();
        args.setSummaryStatView(summaryStatView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSummaryStat();
      }
    }

    public void updateSummaryStatLiveMax(int num, int time, org.apache.thrift.async.AsyncMethodCallback<updateSummaryStatLiveMax_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSummaryStatLiveMax_call method_call = new updateSummaryStatLiveMax_call(num, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSummaryStatLiveMax_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num;
      private int time;
      public updateSummaryStatLiveMax_call(int num, int time, org.apache.thrift.async.AsyncMethodCallback<updateSummaryStatLiveMax_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num = num;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSummaryStatLiveMax", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSummaryStatLiveMax_args args = new updateSummaryStatLiveMax_args();
        args.setNum(num);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSummaryStatLiveMax();
      }
    }

    public void getRankUserDaily(long uid, int type, int date, org.apache.thrift.async.AsyncMethodCallback<getRankUserDaily_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRankUserDaily_call method_call = new getRankUserDaily_call(uid, type, date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRankUserDaily_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int type;
      private int date;
      public getRankUserDaily_call(long uid, int type, int date, org.apache.thrift.async.AsyncMethodCallback<getRankUserDaily_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.type = type;
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRankUserDaily", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRankUserDaily_args args = new getRankUserDaily_args();
        args.setUid(uid);
        args.setType(type);
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.RankUserDailyView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRankUserDaily();
      }
    }

    public void savetRankUserDaily(one.show.stat.thrift.view.RankUserDailyView rankUserDailyView, org.apache.thrift.async.AsyncMethodCallback<savetRankUserDaily_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      savetRankUserDaily_call method_call = new savetRankUserDaily_call(rankUserDailyView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class savetRankUserDaily_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.RankUserDailyView rankUserDailyView;
      public savetRankUserDaily_call(one.show.stat.thrift.view.RankUserDailyView rankUserDailyView, org.apache.thrift.async.AsyncMethodCallback<savetRankUserDaily_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rankUserDailyView = rankUserDailyView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("savetRankUserDaily", org.apache.thrift.protocol.TMessageType.CALL, 0));
        savetRankUserDaily_args args = new savetRankUserDaily_args();
        args.setRankUserDailyView(rankUserDailyView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_savetRankUserDaily();
      }
    }

    public void updateRankUserDaily(long id, double number, org.apache.thrift.async.AsyncMethodCallback<updateRankUserDaily_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRankUserDaily_call method_call = new updateRankUserDaily_call(id, number, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRankUserDaily_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private double number;
      public updateRankUserDaily_call(long id, double number, org.apache.thrift.async.AsyncMethodCallback<updateRankUserDaily_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.number = number;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRankUserDaily", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRankUserDaily_args args = new updateRankUserDaily_args();
        args.setId(id);
        args.setNumber(number);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateRankUserDaily();
      }
    }

    public void findRankUserList(int beginTime, int endTime, int type, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findRankUserList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRankUserList_call method_call = new findRankUserList_call(beginTime, endTime, type, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRankUserList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int beginTime;
      private int endTime;
      private int type;
      private int start;
      private int count;
      public findRankUserList_call(int beginTime, int endTime, int type, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findRankUserList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.beginTime = beginTime;
        this.endTime = endTime;
        this.type = type;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRankUserList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRankUserList_args args = new findRankUserList_args();
        args.setBeginTime(beginTime);
        args.setEndTime(endTime);
        args.setType(type);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.RankUserListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRankUserList();
      }
    }

    public void saveLog(one.show.stat.thrift.view.LogView logView, org.apache.thrift.async.AsyncMethodCallback<saveLog_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveLog_call method_call = new saveLog_call(logView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.LogView logView;
      public saveLog_call(one.show.stat.thrift.view.LogView logView, org.apache.thrift.async.AsyncMethodCallback<saveLog_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logView = logView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveLog_args args = new saveLog_args();
        args.setLogView(logView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveLog();
      }
    }

    public void saveActionLog(one.show.stat.thrift.view.ActionLogView actionLogView, org.apache.thrift.async.AsyncMethodCallback<saveActionLog_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveActionLog_call method_call = new saveActionLog_call(actionLogView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveActionLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.ActionLogView actionLogView;
      public saveActionLog_call(one.show.stat.thrift.view.ActionLogView actionLogView, org.apache.thrift.async.AsyncMethodCallback<saveActionLog_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.actionLogView = actionLogView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveActionLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveActionLog_args args = new saveActionLog_args();
        args.setActionLogView(actionLogView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveActionLog();
      }
    }

    public void findRobotStatDailyByDate(int date, org.apache.thrift.async.AsyncMethodCallback<findRobotStatDailyByDate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRobotStatDailyByDate_call method_call = new findRobotStatDailyByDate_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRobotStatDailyByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int date;
      public findRobotStatDailyByDate_call(int date, org.apache.thrift.async.AsyncMethodCallback<findRobotStatDailyByDate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRobotStatDailyByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRobotStatDailyByDate_args args = new findRobotStatDailyByDate_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.RobotStatDailyView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRobotStatDailyByDate();
      }
    }

    public void saveRobotStatDaily(one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView, org.apache.thrift.async.AsyncMethodCallback<saveRobotStatDaily_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveRobotStatDaily_call method_call = new saveRobotStatDaily_call(robotStatDailyView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveRobotStatDaily_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView;
      public saveRobotStatDaily_call(one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView, org.apache.thrift.async.AsyncMethodCallback<saveRobotStatDaily_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.robotStatDailyView = robotStatDailyView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveRobotStatDaily", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveRobotStatDaily_args args = new saveRobotStatDaily_args();
        args.setRobotStatDailyView(robotStatDailyView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveRobotStatDaily();
      }
    }

    public void updateRobotStatDailyByDate(int date, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateRobotStatDailyByDate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRobotStatDailyByDate_call method_call = new updateRobotStatDailyByDate_call(date, updateContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRobotStatDailyByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int date;
      private Map<String,String> updateContent;
      public updateRobotStatDailyByDate_call(int date, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateRobotStatDailyByDate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
        this.updateContent = updateContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRobotStatDailyByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRobotStatDailyByDate_args args = new updateRobotStatDailyByDate_args();
        args.setDate(date);
        args.setUpdateContent(updateContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateRobotStatDailyByDate();
      }
    }

    public void findActiveXbStatByUidAndTime(long uid, int time, org.apache.thrift.async.AsyncMethodCallback<findActiveXbStatByUidAndTime_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findActiveXbStatByUidAndTime_call method_call = new findActiveXbStatByUidAndTime_call(uid, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findActiveXbStatByUidAndTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int time;
      public findActiveXbStatByUidAndTime_call(long uid, int time, org.apache.thrift.async.AsyncMethodCallback<findActiveXbStatByUidAndTime_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findActiveXbStatByUidAndTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findActiveXbStatByUidAndTime_args args = new findActiveXbStatByUidAndTime_args();
        args.setUid(uid);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.stat.thrift.view.ActiveXbStatView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findActiveXbStatByUidAndTime();
      }
    }

    public void saveActiveXbStat(one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView, org.apache.thrift.async.AsyncMethodCallback<saveActiveXbStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveActiveXbStat_call method_call = new saveActiveXbStat_call(ActiveXbStatView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveActiveXbStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView;
      public saveActiveXbStat_call(one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView, org.apache.thrift.async.AsyncMethodCallback<saveActiveXbStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ActiveXbStatView = ActiveXbStatView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveActiveXbStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveActiveXbStat_args args = new saveActiveXbStat_args();
        args.setActiveXbStatView(ActiveXbStatView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveActiveXbStat();
      }
    }

    public void updateActiveXbStatById(long id, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateActiveXbStatById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateActiveXbStatById_call method_call = new updateActiveXbStatById_call(id, updateContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateActiveXbStatById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private Map<String,String> updateContent;
      public updateActiveXbStatById_call(long id, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateActiveXbStatById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.updateContent = updateContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateActiveXbStatById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateActiveXbStatById_args args = new updateActiveXbStatById_args();
        args.setId(id);
        args.setUpdateContent(updateContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateActiveXbStatById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findUserStatByUid", new findUserStatByUid());
      processMap.put("findUserStatByUids", new findUserStatByUids());
      processMap.put("deleteUserStat", new deleteUserStat());
      processMap.put("saveUserStat", new saveUserStat());
      processMap.put("updateUserStat", new updateUserStat());
      processMap.put("findVideoStatByVid", new findVideoStatByVid());
      processMap.put("findVideoStatByVids", new findVideoStatByVids());
      processMap.put("saveVideoStat", new saveVideoStat());
      processMap.put("updateVideoStat", new updateVideoStat());
      processMap.put("updateMonitorStatById", new updateMonitorStatById());
      processMap.put("saveMonitorStat", new saveMonitorStat());
      processMap.put("findMonitorStat", new findMonitorStat());
      processMap.put("findMonitorStatList", new findMonitorStatList());
      processMap.put("getSummaryStatList", new getSummaryStatList());
      processMap.put("getSummaryStat", new getSummaryStat());
      processMap.put("saveSummaryStat", new saveSummaryStat());
      processMap.put("updateSummaryStat", new updateSummaryStat());
      processMap.put("updateSummaryStatLiveMax", new updateSummaryStatLiveMax());
      processMap.put("getRankUserDaily", new getRankUserDaily());
      processMap.put("savetRankUserDaily", new savetRankUserDaily());
      processMap.put("updateRankUserDaily", new updateRankUserDaily());
      processMap.put("findRankUserList", new findRankUserList());
      processMap.put("saveLog", new saveLog());
      processMap.put("saveActionLog", new saveActionLog());
      processMap.put("findRobotStatDailyByDate", new findRobotStatDailyByDate());
      processMap.put("saveRobotStatDaily", new saveRobotStatDaily());
      processMap.put("updateRobotStatDailyByDate", new updateRobotStatDailyByDate());
      processMap.put("findActiveXbStatByUidAndTime", new findActiveXbStatByUidAndTime());
      processMap.put("saveActiveXbStat", new saveActiveXbStat());
      processMap.put("updateActiveXbStatById", new updateActiveXbStatById());
      return processMap;
    }

    public static class findUserStatByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserStatByUid_args> {
      public findUserStatByUid() {
        super("findUserStatByUid");
      }

      public findUserStatByUid_args getEmptyArgsInstance() {
        return new findUserStatByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserStatByUid_result getResult(I iface, findUserStatByUid_args args) throws org.apache.thrift.TException {
        findUserStatByUid_result result = new findUserStatByUid_result();
        result.success = iface.findUserStatByUid(args.uid);
        return result;
      }
    }

    public static class findUserStatByUids<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserStatByUids_args> {
      public findUserStatByUids() {
        super("findUserStatByUids");
      }

      public findUserStatByUids_args getEmptyArgsInstance() {
        return new findUserStatByUids_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserStatByUids_result getResult(I iface, findUserStatByUids_args args) throws org.apache.thrift.TException {
        findUserStatByUids_result result = new findUserStatByUids_result();
        result.success = iface.findUserStatByUids(args.uids);
        return result;
      }
    }

    public static class deleteUserStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUserStat_args> {
      public deleteUserStat() {
        super("deleteUserStat");
      }

      public deleteUserStat_args getEmptyArgsInstance() {
        return new deleteUserStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUserStat_result getResult(I iface, deleteUserStat_args args) throws org.apache.thrift.TException {
        deleteUserStat_result result = new deleteUserStat_result();
        iface.deleteUserStat(args.uid);
        return result;
      }
    }

    public static class saveUserStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveUserStat_args> {
      public saveUserStat() {
        super("saveUserStat");
      }

      public saveUserStat_args getEmptyArgsInstance() {
        return new saveUserStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveUserStat_result getResult(I iface, saveUserStat_args args) throws org.apache.thrift.TException {
        saveUserStat_result result = new saveUserStat_result();
        iface.saveUserStat(args.userStatView);
        return result;
      }
    }

    public static class updateUserStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserStat_args> {
      public updateUserStat() {
        super("updateUserStat");
      }

      public updateUserStat_args getEmptyArgsInstance() {
        return new updateUserStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserStat_result getResult(I iface, updateUserStat_args args) throws org.apache.thrift.TException {
        updateUserStat_result result = new updateUserStat_result();
        iface.updateUserStat(args.userStatView);
        return result;
      }
    }

    public static class findVideoStatByVid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findVideoStatByVid_args> {
      public findVideoStatByVid() {
        super("findVideoStatByVid");
      }

      public findVideoStatByVid_args getEmptyArgsInstance() {
        return new findVideoStatByVid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findVideoStatByVid_result getResult(I iface, findVideoStatByVid_args args) throws org.apache.thrift.TException {
        findVideoStatByVid_result result = new findVideoStatByVid_result();
        result.success = iface.findVideoStatByVid(args.vid);
        return result;
      }
    }

    public static class findVideoStatByVids<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findVideoStatByVids_args> {
      public findVideoStatByVids() {
        super("findVideoStatByVids");
      }

      public findVideoStatByVids_args getEmptyArgsInstance() {
        return new findVideoStatByVids_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findVideoStatByVids_result getResult(I iface, findVideoStatByVids_args args) throws org.apache.thrift.TException {
        findVideoStatByVids_result result = new findVideoStatByVids_result();
        result.success = iface.findVideoStatByVids(args.uids);
        return result;
      }
    }

    public static class saveVideoStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveVideoStat_args> {
      public saveVideoStat() {
        super("saveVideoStat");
      }

      public saveVideoStat_args getEmptyArgsInstance() {
        return new saveVideoStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveVideoStat_result getResult(I iface, saveVideoStat_args args) throws org.apache.thrift.TException {
        saveVideoStat_result result = new saveVideoStat_result();
        iface.saveVideoStat(args.videoStatView);
        return result;
      }
    }

    public static class updateVideoStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVideoStat_args> {
      public updateVideoStat() {
        super("updateVideoStat");
      }

      public updateVideoStat_args getEmptyArgsInstance() {
        return new updateVideoStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateVideoStat_result getResult(I iface, updateVideoStat_args args) throws org.apache.thrift.TException {
        updateVideoStat_result result = new updateVideoStat_result();
        iface.updateVideoStat(args.videoStatView);
        return result;
      }
    }

    public static class updateMonitorStatById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMonitorStatById_args> {
      public updateMonitorStatById() {
        super("updateMonitorStatById");
      }

      public updateMonitorStatById_args getEmptyArgsInstance() {
        return new updateMonitorStatById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMonitorStatById_result getResult(I iface, updateMonitorStatById_args args) throws org.apache.thrift.TException {
        updateMonitorStatById_result result = new updateMonitorStatById_result();
        iface.updateMonitorStatById(args.id, args.statement);
        return result;
      }
    }

    public static class saveMonitorStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveMonitorStat_args> {
      public saveMonitorStat() {
        super("saveMonitorStat");
      }

      public saveMonitorStat_args getEmptyArgsInstance() {
        return new saveMonitorStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveMonitorStat_result getResult(I iface, saveMonitorStat_args args) throws org.apache.thrift.TException {
        saveMonitorStat_result result = new saveMonitorStat_result();
        iface.saveMonitorStat(args.monitorStatView);
        return result;
      }
    }

    public static class findMonitorStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMonitorStat_args> {
      public findMonitorStat() {
        super("findMonitorStat");
      }

      public findMonitorStat_args getEmptyArgsInstance() {
        return new findMonitorStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMonitorStat_result getResult(I iface, findMonitorStat_args args) throws org.apache.thrift.TException {
        findMonitorStat_result result = new findMonitorStat_result();
        result.success = iface.findMonitorStat(args.name, args.type, args.time);
        return result;
      }
    }

    public static class findMonitorStatList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMonitorStatList_args> {
      public findMonitorStatList() {
        super("findMonitorStatList");
      }

      public findMonitorStatList_args getEmptyArgsInstance() {
        return new findMonitorStatList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMonitorStatList_result getResult(I iface, findMonitorStatList_args args) throws org.apache.thrift.TException {
        findMonitorStatList_result result = new findMonitorStatList_result();
        result.success = iface.findMonitorStatList(args.beginTime, args.endTime, args.type, args.start, args.count);
        return result;
      }
    }

    public static class getSummaryStatList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSummaryStatList_args> {
      public getSummaryStatList() {
        super("getSummaryStatList");
      }

      public getSummaryStatList_args getEmptyArgsInstance() {
        return new getSummaryStatList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSummaryStatList_result getResult(I iface, getSummaryStatList_args args) throws org.apache.thrift.TException {
        getSummaryStatList_result result = new getSummaryStatList_result();
        result.success = iface.getSummaryStatList(args.time);
        return result;
      }
    }

    public static class getSummaryStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSummaryStat_args> {
      public getSummaryStat() {
        super("getSummaryStat");
      }

      public getSummaryStat_args getEmptyArgsInstance() {
        return new getSummaryStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSummaryStat_result getResult(I iface, getSummaryStat_args args) throws org.apache.thrift.TException {
        getSummaryStat_result result = new getSummaryStat_result();
        result.success = iface.getSummaryStat(args.time);
        return result;
      }
    }

    public static class saveSummaryStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveSummaryStat_args> {
      public saveSummaryStat() {
        super("saveSummaryStat");
      }

      public saveSummaryStat_args getEmptyArgsInstance() {
        return new saveSummaryStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveSummaryStat_result getResult(I iface, saveSummaryStat_args args) throws org.apache.thrift.TException {
        saveSummaryStat_result result = new saveSummaryStat_result();
        iface.saveSummaryStat(args.summaryStatView);
        return result;
      }
    }

    public static class updateSummaryStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSummaryStat_args> {
      public updateSummaryStat() {
        super("updateSummaryStat");
      }

      public updateSummaryStat_args getEmptyArgsInstance() {
        return new updateSummaryStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSummaryStat_result getResult(I iface, updateSummaryStat_args args) throws org.apache.thrift.TException {
        updateSummaryStat_result result = new updateSummaryStat_result();
        iface.updateSummaryStat(args.summaryStatView);
        return result;
      }
    }

    public static class updateSummaryStatLiveMax<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSummaryStatLiveMax_args> {
      public updateSummaryStatLiveMax() {
        super("updateSummaryStatLiveMax");
      }

      public updateSummaryStatLiveMax_args getEmptyArgsInstance() {
        return new updateSummaryStatLiveMax_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSummaryStatLiveMax_result getResult(I iface, updateSummaryStatLiveMax_args args) throws org.apache.thrift.TException {
        updateSummaryStatLiveMax_result result = new updateSummaryStatLiveMax_result();
        iface.updateSummaryStatLiveMax(args.num, args.time);
        return result;
      }
    }

    public static class getRankUserDaily<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRankUserDaily_args> {
      public getRankUserDaily() {
        super("getRankUserDaily");
      }

      public getRankUserDaily_args getEmptyArgsInstance() {
        return new getRankUserDaily_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRankUserDaily_result getResult(I iface, getRankUserDaily_args args) throws org.apache.thrift.TException {
        getRankUserDaily_result result = new getRankUserDaily_result();
        result.success = iface.getRankUserDaily(args.uid, args.type, args.date);
        return result;
      }
    }

    public static class savetRankUserDaily<I extends Iface> extends org.apache.thrift.ProcessFunction<I, savetRankUserDaily_args> {
      public savetRankUserDaily() {
        super("savetRankUserDaily");
      }

      public savetRankUserDaily_args getEmptyArgsInstance() {
        return new savetRankUserDaily_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public savetRankUserDaily_result getResult(I iface, savetRankUserDaily_args args) throws org.apache.thrift.TException {
        savetRankUserDaily_result result = new savetRankUserDaily_result();
        iface.savetRankUserDaily(args.rankUserDailyView);
        return result;
      }
    }

    public static class updateRankUserDaily<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRankUserDaily_args> {
      public updateRankUserDaily() {
        super("updateRankUserDaily");
      }

      public updateRankUserDaily_args getEmptyArgsInstance() {
        return new updateRankUserDaily_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRankUserDaily_result getResult(I iface, updateRankUserDaily_args args) throws org.apache.thrift.TException {
        updateRankUserDaily_result result = new updateRankUserDaily_result();
        iface.updateRankUserDaily(args.id, args.number);
        return result;
      }
    }

    public static class findRankUserList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRankUserList_args> {
      public findRankUserList() {
        super("findRankUserList");
      }

      public findRankUserList_args getEmptyArgsInstance() {
        return new findRankUserList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findRankUserList_result getResult(I iface, findRankUserList_args args) throws org.apache.thrift.TException {
        findRankUserList_result result = new findRankUserList_result();
        result.success = iface.findRankUserList(args.beginTime, args.endTime, args.type, args.start, args.count);
        return result;
      }
    }

    public static class saveLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveLog_args> {
      public saveLog() {
        super("saveLog");
      }

      public saveLog_args getEmptyArgsInstance() {
        return new saveLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveLog_result getResult(I iface, saveLog_args args) throws org.apache.thrift.TException {
        saveLog_result result = new saveLog_result();
        iface.saveLog(args.logView);
        return result;
      }
    }

    public static class saveActionLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveActionLog_args> {
      public saveActionLog() {
        super("saveActionLog");
      }

      public saveActionLog_args getEmptyArgsInstance() {
        return new saveActionLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveActionLog_result getResult(I iface, saveActionLog_args args) throws org.apache.thrift.TException {
        saveActionLog_result result = new saveActionLog_result();
        iface.saveActionLog(args.actionLogView);
        return result;
      }
    }

    public static class findRobotStatDailyByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRobotStatDailyByDate_args> {
      public findRobotStatDailyByDate() {
        super("findRobotStatDailyByDate");
      }

      public findRobotStatDailyByDate_args getEmptyArgsInstance() {
        return new findRobotStatDailyByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findRobotStatDailyByDate_result getResult(I iface, findRobotStatDailyByDate_args args) throws org.apache.thrift.TException {
        findRobotStatDailyByDate_result result = new findRobotStatDailyByDate_result();
        result.success = iface.findRobotStatDailyByDate(args.date);
        return result;
      }
    }

    public static class saveRobotStatDaily<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveRobotStatDaily_args> {
      public saveRobotStatDaily() {
        super("saveRobotStatDaily");
      }

      public saveRobotStatDaily_args getEmptyArgsInstance() {
        return new saveRobotStatDaily_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveRobotStatDaily_result getResult(I iface, saveRobotStatDaily_args args) throws org.apache.thrift.TException {
        saveRobotStatDaily_result result = new saveRobotStatDaily_result();
        iface.saveRobotStatDaily(args.robotStatDailyView);
        return result;
      }
    }

    public static class updateRobotStatDailyByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRobotStatDailyByDate_args> {
      public updateRobotStatDailyByDate() {
        super("updateRobotStatDailyByDate");
      }

      public updateRobotStatDailyByDate_args getEmptyArgsInstance() {
        return new updateRobotStatDailyByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRobotStatDailyByDate_result getResult(I iface, updateRobotStatDailyByDate_args args) throws org.apache.thrift.TException {
        updateRobotStatDailyByDate_result result = new updateRobotStatDailyByDate_result();
        iface.updateRobotStatDailyByDate(args.date, args.updateContent);
        return result;
      }
    }

    public static class findActiveXbStatByUidAndTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findActiveXbStatByUidAndTime_args> {
      public findActiveXbStatByUidAndTime() {
        super("findActiveXbStatByUidAndTime");
      }

      public findActiveXbStatByUidAndTime_args getEmptyArgsInstance() {
        return new findActiveXbStatByUidAndTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findActiveXbStatByUidAndTime_result getResult(I iface, findActiveXbStatByUidAndTime_args args) throws org.apache.thrift.TException {
        findActiveXbStatByUidAndTime_result result = new findActiveXbStatByUidAndTime_result();
        result.success = iface.findActiveXbStatByUidAndTime(args.uid, args.time);
        return result;
      }
    }

    public static class saveActiveXbStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveActiveXbStat_args> {
      public saveActiveXbStat() {
        super("saveActiveXbStat");
      }

      public saveActiveXbStat_args getEmptyArgsInstance() {
        return new saveActiveXbStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveActiveXbStat_result getResult(I iface, saveActiveXbStat_args args) throws org.apache.thrift.TException {
        saveActiveXbStat_result result = new saveActiveXbStat_result();
        iface.saveActiveXbStat(args.ActiveXbStatView);
        return result;
      }
    }

    public static class updateActiveXbStatById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateActiveXbStatById_args> {
      public updateActiveXbStatById() {
        super("updateActiveXbStatById");
      }

      public updateActiveXbStatById_args getEmptyArgsInstance() {
        return new updateActiveXbStatById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateActiveXbStatById_result getResult(I iface, updateActiveXbStatById_args args) throws org.apache.thrift.TException {
        updateActiveXbStatById_result result = new updateActiveXbStatById_result();
        iface.updateActiveXbStatById(args.id, args.updateContent);
        return result;
      }
    }

  }

  public static class findUserStatByUid_args implements org.apache.thrift.TBase<findUserStatByUid_args, findUserStatByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserStatByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserStatByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserStatByUid_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserStatByUid_args.class, metaDataMap);
    }

    public findUserStatByUid_args() {
    }

    public findUserStatByUid_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserStatByUid_args(findUserStatByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public findUserStatByUid_args deepCopy() {
      return new findUserStatByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findUserStatByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserStatByUid_args)
        return this.equals((findUserStatByUid_args)that);
      return false;
    }

    public boolean equals(findUserStatByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserStatByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserStatByUid_args typedOther = (findUserStatByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserStatByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserStatByUid_argsStandardSchemeFactory implements SchemeFactory {
      public findUserStatByUid_argsStandardScheme getScheme() {
        return new findUserStatByUid_argsStandardScheme();
      }
    }

    private static class findUserStatByUid_argsStandardScheme extends StandardScheme<findUserStatByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserStatByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserStatByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserStatByUid_argsTupleSchemeFactory implements SchemeFactory {
      public findUserStatByUid_argsTupleScheme getScheme() {
        return new findUserStatByUid_argsTupleScheme();
      }
    }

    private static class findUserStatByUid_argsTupleScheme extends TupleScheme<findUserStatByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserStatByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserStatByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class findUserStatByUid_result implements org.apache.thrift.TBase<findUserStatByUid_result, findUserStatByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserStatByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserStatByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserStatByUid_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.UserStatView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.UserStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserStatByUid_result.class, metaDataMap);
    }

    public findUserStatByUid_result() {
    }

    public findUserStatByUid_result(
      one.show.stat.thrift.view.UserStatView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserStatByUid_result(findUserStatByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.UserStatView(other.success);
      }
    }

    public findUserStatByUid_result deepCopy() {
      return new findUserStatByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.UserStatView getSuccess() {
      return this.success;
    }

    public findUserStatByUid_result setSuccess(one.show.stat.thrift.view.UserStatView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.UserStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserStatByUid_result)
        return this.equals((findUserStatByUid_result)that);
      return false;
    }

    public boolean equals(findUserStatByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserStatByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserStatByUid_result typedOther = (findUserStatByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserStatByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserStatByUid_resultStandardSchemeFactory implements SchemeFactory {
      public findUserStatByUid_resultStandardScheme getScheme() {
        return new findUserStatByUid_resultStandardScheme();
      }
    }

    private static class findUserStatByUid_resultStandardScheme extends StandardScheme<findUserStatByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserStatByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.UserStatView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserStatByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserStatByUid_resultTupleSchemeFactory implements SchemeFactory {
      public findUserStatByUid_resultTupleScheme getScheme() {
        return new findUserStatByUid_resultTupleScheme();
      }
    }

    private static class findUserStatByUid_resultTupleScheme extends TupleScheme<findUserStatByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserStatByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserStatByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.UserStatView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findUserStatByUids_args implements org.apache.thrift.TBase<findUserStatByUids_args, findUserStatByUids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserStatByUids_args");

    private static final org.apache.thrift.protocol.TField UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("uids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserStatByUids_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserStatByUids_argsTupleSchemeFactory());
    }

    public List<Long> uids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UIDS((short)1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new org.apache.thrift.meta_data.FieldMetaData("uids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserStatByUids_args.class, metaDataMap);
    }

    public findUserStatByUids_args() {
    }

    public findUserStatByUids_args(
      List<Long> uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserStatByUids_args(findUserStatByUids_args other) {
      if (other.isSetUids()) {
        List<Long> __this__uids = new ArrayList<Long>();
        for (Long other_element : other.uids) {
          __this__uids.add(other_element);
        }
        this.uids = __this__uids;
      }
    }

    public findUserStatByUids_args deepCopy() {
      return new findUserStatByUids_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<Long> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(long elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<Long>();
      }
      this.uids.add(elem);
    }

    public List<Long> getUids() {
      return this.uids;
    }

    public findUserStatByUids_args setUids(List<Long> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been assigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserStatByUids_args)
        return this.equals((findUserStatByUids_args)that);
      return false;
    }

    public boolean equals(findUserStatByUids_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserStatByUids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserStatByUids_args typedOther = (findUserStatByUids_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserStatByUids_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserStatByUids_argsStandardSchemeFactory implements SchemeFactory {
      public findUserStatByUids_argsStandardScheme getScheme() {
        return new findUserStatByUids_argsStandardScheme();
      }
    }

    private static class findUserStatByUids_argsStandardScheme extends StandardScheme<findUserStatByUids_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserStatByUids_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.uids = new ArrayList<Long>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    long _elem2; // required
                    _elem2 = iprot.readI64();
                    struct.uids.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setUidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserStatByUids_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uids != null) {
          oprot.writeFieldBegin(UIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.uids.size()));
            for (long _iter3 : struct.uids)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserStatByUids_argsTupleSchemeFactory implements SchemeFactory {
      public findUserStatByUids_argsTupleScheme getScheme() {
        return new findUserStatByUids_argsTupleScheme();
      }
    }

    private static class findUserStatByUids_argsTupleScheme extends TupleScheme<findUserStatByUids_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserStatByUids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUids()) {
          {
            oprot.writeI32(struct.uids.size());
            for (long _iter4 : struct.uids)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserStatByUids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.uids = new ArrayList<Long>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              long _elem7; // required
              _elem7 = iprot.readI64();
              struct.uids.add(_elem7);
            }
          }
          struct.setUidsIsSet(true);
        }
      }
    }

  }

  public static class findUserStatByUids_result implements org.apache.thrift.TBase<findUserStatByUids_result, findUserStatByUids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserStatByUids_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserStatByUids_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserStatByUids_resultTupleSchemeFactory());
    }

    public List<one.show.stat.thrift.view.UserStatView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.UserStatView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserStatByUids_result.class, metaDataMap);
    }

    public findUserStatByUids_result() {
    }

    public findUserStatByUids_result(
      List<one.show.stat.thrift.view.UserStatView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserStatByUids_result(findUserStatByUids_result other) {
      if (other.isSetSuccess()) {
        List<one.show.stat.thrift.view.UserStatView> __this__success = new ArrayList<one.show.stat.thrift.view.UserStatView>();
        for (one.show.stat.thrift.view.UserStatView other_element : other.success) {
          __this__success.add(new one.show.stat.thrift.view.UserStatView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findUserStatByUids_result deepCopy() {
      return new findUserStatByUids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.stat.thrift.view.UserStatView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.stat.thrift.view.UserStatView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.stat.thrift.view.UserStatView>();
      }
      this.success.add(elem);
    }

    public List<one.show.stat.thrift.view.UserStatView> getSuccess() {
      return this.success;
    }

    public findUserStatByUids_result setSuccess(List<one.show.stat.thrift.view.UserStatView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.stat.thrift.view.UserStatView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserStatByUids_result)
        return this.equals((findUserStatByUids_result)that);
      return false;
    }

    public boolean equals(findUserStatByUids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserStatByUids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserStatByUids_result typedOther = (findUserStatByUids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserStatByUids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserStatByUids_resultStandardSchemeFactory implements SchemeFactory {
      public findUserStatByUids_resultStandardScheme getScheme() {
        return new findUserStatByUids_resultStandardScheme();
      }
    }

    private static class findUserStatByUids_resultStandardScheme extends StandardScheme<findUserStatByUids_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserStatByUids_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.stat.thrift.view.UserStatView>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    one.show.stat.thrift.view.UserStatView _elem10; // required
                    _elem10 = new one.show.stat.thrift.view.UserStatView();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserStatByUids_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.stat.thrift.view.UserStatView _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserStatByUids_resultTupleSchemeFactory implements SchemeFactory {
      public findUserStatByUids_resultTupleScheme getScheme() {
        return new findUserStatByUids_resultTupleScheme();
      }
    }

    private static class findUserStatByUids_resultTupleScheme extends TupleScheme<findUserStatByUids_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserStatByUids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.stat.thrift.view.UserStatView _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserStatByUids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.stat.thrift.view.UserStatView>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              one.show.stat.thrift.view.UserStatView _elem15; // required
              _elem15 = new one.show.stat.thrift.view.UserStatView();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteUserStat_args implements org.apache.thrift.TBase<deleteUserStat_args, deleteUserStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserStat_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserStat_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserStat_args.class, metaDataMap);
    }

    public deleteUserStat_args() {
    }

    public deleteUserStat_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserStat_args(deleteUserStat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public deleteUserStat_args deepCopy() {
      return new deleteUserStat_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public deleteUserStat_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserStat_args)
        return this.equals((deleteUserStat_args)that);
      return false;
    }

    public boolean equals(deleteUserStat_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteUserStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteUserStat_args typedOther = (deleteUserStat_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserStat_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserStat_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUserStat_argsStandardScheme getScheme() {
        return new deleteUserStat_argsStandardScheme();
      }
    }

    private static class deleteUserStat_argsStandardScheme extends StandardScheme<deleteUserStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserStat_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUserStat_argsTupleScheme getScheme() {
        return new deleteUserStat_argsTupleScheme();
      }
    }

    private static class deleteUserStat_argsTupleScheme extends TupleScheme<deleteUserStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class deleteUserStat_result implements org.apache.thrift.TBase<deleteUserStat_result, deleteUserStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserStat_result.class, metaDataMap);
    }

    public deleteUserStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserStat_result(deleteUserStat_result other) {
    }

    public deleteUserStat_result deepCopy() {
      return new deleteUserStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserStat_result)
        return this.equals((deleteUserStat_result)that);
      return false;
    }

    public boolean equals(deleteUserStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteUserStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteUserStat_result typedOther = (deleteUserStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserStat_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUserStat_resultStandardScheme getScheme() {
        return new deleteUserStat_resultStandardScheme();
      }
    }

    private static class deleteUserStat_resultStandardScheme extends StandardScheme<deleteUserStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserStat_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUserStat_resultTupleScheme getScheme() {
        return new deleteUserStat_resultTupleScheme();
      }
    }

    private static class deleteUserStat_resultTupleScheme extends TupleScheme<deleteUserStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveUserStat_args implements org.apache.thrift.TBase<saveUserStat_args, saveUserStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserStat_args");

    private static final org.apache.thrift.protocol.TField USER_STAT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("userStatView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserStat_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.UserStatView userStatView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_STAT_VIEW((short)1, "userStatView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_STAT_VIEW
            return USER_STAT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_STAT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("userStatView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.UserStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserStat_args.class, metaDataMap);
    }

    public saveUserStat_args() {
    }

    public saveUserStat_args(
      one.show.stat.thrift.view.UserStatView userStatView)
    {
      this();
      this.userStatView = userStatView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserStat_args(saveUserStat_args other) {
      if (other.isSetUserStatView()) {
        this.userStatView = new one.show.stat.thrift.view.UserStatView(other.userStatView);
      }
    }

    public saveUserStat_args deepCopy() {
      return new saveUserStat_args(this);
    }

    @Override
    public void clear() {
      this.userStatView = null;
    }

    public one.show.stat.thrift.view.UserStatView getUserStatView() {
      return this.userStatView;
    }

    public saveUserStat_args setUserStatView(one.show.stat.thrift.view.UserStatView userStatView) {
      this.userStatView = userStatView;
      return this;
    }

    public void unsetUserStatView() {
      this.userStatView = null;
    }

    /** Returns true if field userStatView is set (has been assigned a value) and false otherwise */
    public boolean isSetUserStatView() {
      return this.userStatView != null;
    }

    public void setUserStatViewIsSet(boolean value) {
      if (!value) {
        this.userStatView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_STAT_VIEW:
        if (value == null) {
          unsetUserStatView();
        } else {
          setUserStatView((one.show.stat.thrift.view.UserStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_STAT_VIEW:
        return getUserStatView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_STAT_VIEW:
        return isSetUserStatView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserStat_args)
        return this.equals((saveUserStat_args)that);
      return false;
    }

    public boolean equals(saveUserStat_args that) {
      if (that == null)
        return false;

      boolean this_present_userStatView = true && this.isSetUserStatView();
      boolean that_present_userStatView = true && that.isSetUserStatView();
      if (this_present_userStatView || that_present_userStatView) {
        if (!(this_present_userStatView && that_present_userStatView))
          return false;
        if (!this.userStatView.equals(that.userStatView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveUserStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveUserStat_args typedOther = (saveUserStat_args)other;

      lastComparison = Boolean.valueOf(isSetUserStatView()).compareTo(typedOther.isSetUserStatView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserStatView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userStatView, typedOther.userStatView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserStat_args(");
      boolean first = true;

      sb.append("userStatView:");
      if (this.userStatView == null) {
        sb.append("null");
      } else {
        sb.append(this.userStatView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userStatView != null) {
        userStatView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserStat_argsStandardSchemeFactory implements SchemeFactory {
      public saveUserStat_argsStandardScheme getScheme() {
        return new saveUserStat_argsStandardScheme();
      }
    }

    private static class saveUserStat_argsStandardScheme extends StandardScheme<saveUserStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_STAT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userStatView = new one.show.stat.thrift.view.UserStatView();
                struct.userStatView.read(iprot);
                struct.setUserStatViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userStatView != null) {
          oprot.writeFieldBegin(USER_STAT_VIEW_FIELD_DESC);
          struct.userStatView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserStat_argsTupleSchemeFactory implements SchemeFactory {
      public saveUserStat_argsTupleScheme getScheme() {
        return new saveUserStat_argsTupleScheme();
      }
    }

    private static class saveUserStat_argsTupleScheme extends TupleScheme<saveUserStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserStatView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserStatView()) {
          struct.userStatView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userStatView = new one.show.stat.thrift.view.UserStatView();
          struct.userStatView.read(iprot);
          struct.setUserStatViewIsSet(true);
        }
      }
    }

  }

  public static class saveUserStat_result implements org.apache.thrift.TBase<saveUserStat_result, saveUserStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserStat_result.class, metaDataMap);
    }

    public saveUserStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserStat_result(saveUserStat_result other) {
    }

    public saveUserStat_result deepCopy() {
      return new saveUserStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserStat_result)
        return this.equals((saveUserStat_result)that);
      return false;
    }

    public boolean equals(saveUserStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveUserStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveUserStat_result typedOther = (saveUserStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserStat_resultStandardSchemeFactory implements SchemeFactory {
      public saveUserStat_resultStandardScheme getScheme() {
        return new saveUserStat_resultStandardScheme();
      }
    }

    private static class saveUserStat_resultStandardScheme extends StandardScheme<saveUserStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserStat_resultTupleSchemeFactory implements SchemeFactory {
      public saveUserStat_resultTupleScheme getScheme() {
        return new saveUserStat_resultTupleScheme();
      }
    }

    private static class saveUserStat_resultTupleScheme extends TupleScheme<saveUserStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateUserStat_args implements org.apache.thrift.TBase<updateUserStat_args, updateUserStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserStat_args");

    private static final org.apache.thrift.protocol.TField USER_STAT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("userStatView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserStat_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.UserStatView userStatView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_STAT_VIEW((short)1, "userStatView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_STAT_VIEW
            return USER_STAT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_STAT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("userStatView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.UserStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserStat_args.class, metaDataMap);
    }

    public updateUserStat_args() {
    }

    public updateUserStat_args(
      one.show.stat.thrift.view.UserStatView userStatView)
    {
      this();
      this.userStatView = userStatView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserStat_args(updateUserStat_args other) {
      if (other.isSetUserStatView()) {
        this.userStatView = new one.show.stat.thrift.view.UserStatView(other.userStatView);
      }
    }

    public updateUserStat_args deepCopy() {
      return new updateUserStat_args(this);
    }

    @Override
    public void clear() {
      this.userStatView = null;
    }

    public one.show.stat.thrift.view.UserStatView getUserStatView() {
      return this.userStatView;
    }

    public updateUserStat_args setUserStatView(one.show.stat.thrift.view.UserStatView userStatView) {
      this.userStatView = userStatView;
      return this;
    }

    public void unsetUserStatView() {
      this.userStatView = null;
    }

    /** Returns true if field userStatView is set (has been assigned a value) and false otherwise */
    public boolean isSetUserStatView() {
      return this.userStatView != null;
    }

    public void setUserStatViewIsSet(boolean value) {
      if (!value) {
        this.userStatView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_STAT_VIEW:
        if (value == null) {
          unsetUserStatView();
        } else {
          setUserStatView((one.show.stat.thrift.view.UserStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_STAT_VIEW:
        return getUserStatView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_STAT_VIEW:
        return isSetUserStatView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserStat_args)
        return this.equals((updateUserStat_args)that);
      return false;
    }

    public boolean equals(updateUserStat_args that) {
      if (that == null)
        return false;

      boolean this_present_userStatView = true && this.isSetUserStatView();
      boolean that_present_userStatView = true && that.isSetUserStatView();
      if (this_present_userStatView || that_present_userStatView) {
        if (!(this_present_userStatView && that_present_userStatView))
          return false;
        if (!this.userStatView.equals(that.userStatView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUserStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUserStat_args typedOther = (updateUserStat_args)other;

      lastComparison = Boolean.valueOf(isSetUserStatView()).compareTo(typedOther.isSetUserStatView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserStatView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userStatView, typedOther.userStatView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserStat_args(");
      boolean first = true;

      sb.append("userStatView:");
      if (this.userStatView == null) {
        sb.append("null");
      } else {
        sb.append(this.userStatView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userStatView != null) {
        userStatView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserStat_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserStat_argsStandardScheme getScheme() {
        return new updateUserStat_argsStandardScheme();
      }
    }

    private static class updateUserStat_argsStandardScheme extends StandardScheme<updateUserStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_STAT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userStatView = new one.show.stat.thrift.view.UserStatView();
                struct.userStatView.read(iprot);
                struct.setUserStatViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userStatView != null) {
          oprot.writeFieldBegin(USER_STAT_VIEW_FIELD_DESC);
          struct.userStatView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserStat_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserStat_argsTupleScheme getScheme() {
        return new updateUserStat_argsTupleScheme();
      }
    }

    private static class updateUserStat_argsTupleScheme extends TupleScheme<updateUserStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserStatView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserStatView()) {
          struct.userStatView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userStatView = new one.show.stat.thrift.view.UserStatView();
          struct.userStatView.read(iprot);
          struct.setUserStatViewIsSet(true);
        }
      }
    }

  }

  public static class updateUserStat_result implements org.apache.thrift.TBase<updateUserStat_result, updateUserStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserStat_result.class, metaDataMap);
    }

    public updateUserStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserStat_result(updateUserStat_result other) {
    }

    public updateUserStat_result deepCopy() {
      return new updateUserStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserStat_result)
        return this.equals((updateUserStat_result)that);
      return false;
    }

    public boolean equals(updateUserStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUserStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUserStat_result typedOther = (updateUserStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserStat_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserStat_resultStandardScheme getScheme() {
        return new updateUserStat_resultStandardScheme();
      }
    }

    private static class updateUserStat_resultStandardScheme extends StandardScheme<updateUserStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserStat_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserStat_resultTupleScheme getScheme() {
        return new updateUserStat_resultTupleScheme();
      }
    }

    private static class updateUserStat_resultTupleScheme extends TupleScheme<updateUserStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findVideoStatByVid_args implements org.apache.thrift.TBase<findVideoStatByVid_args, findVideoStatByVid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVideoStatByVid_args");

    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVideoStatByVid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVideoStatByVid_argsTupleSchemeFactory());
    }

    public long vid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VID((short)1, "vid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VID
            return VID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVideoStatByVid_args.class, metaDataMap);
    }

    public findVideoStatByVid_args() {
    }

    public findVideoStatByVid_args(
      long vid)
    {
      this();
      this.vid = vid;
      setVidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVideoStatByVid_args(findVideoStatByVid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vid = other.vid;
    }

    public findVideoStatByVid_args deepCopy() {
      return new findVideoStatByVid_args(this);
    }

    @Override
    public void clear() {
      setVidIsSet(false);
      this.vid = 0;
    }

    public long getVid() {
      return this.vid;
    }

    public findVideoStatByVid_args setVid(long vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VID:
        return Long.valueOf(getVid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VID:
        return isSetVid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVideoStatByVid_args)
        return this.equals((findVideoStatByVid_args)that);
      return false;
    }

    public boolean equals(findVideoStatByVid_args that) {
      if (that == null)
        return false;

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findVideoStatByVid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findVideoStatByVid_args typedOther = (findVideoStatByVid_args)other;

      lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVideoStatByVid_args(");
      boolean first = true;

      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVideoStatByVid_argsStandardSchemeFactory implements SchemeFactory {
      public findVideoStatByVid_argsStandardScheme getScheme() {
        return new findVideoStatByVid_argsStandardScheme();
      }
    }

    private static class findVideoStatByVid_argsStandardScheme extends StandardScheme<findVideoStatByVid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVideoStatByVid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.vid = iprot.readI64();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVideoStatByVid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI64(struct.vid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVideoStatByVid_argsTupleSchemeFactory implements SchemeFactory {
      public findVideoStatByVid_argsTupleScheme getScheme() {
        return new findVideoStatByVid_argsTupleScheme();
      }
    }

    private static class findVideoStatByVid_argsTupleScheme extends TupleScheme<findVideoStatByVid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVideoStatByVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVid()) {
          oprot.writeI64(struct.vid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVideoStatByVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vid = iprot.readI64();
          struct.setVidIsSet(true);
        }
      }
    }

  }

  public static class findVideoStatByVid_result implements org.apache.thrift.TBase<findVideoStatByVid_result, findVideoStatByVid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVideoStatByVid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVideoStatByVid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVideoStatByVid_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.VideoStatView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.VideoStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVideoStatByVid_result.class, metaDataMap);
    }

    public findVideoStatByVid_result() {
    }

    public findVideoStatByVid_result(
      one.show.stat.thrift.view.VideoStatView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVideoStatByVid_result(findVideoStatByVid_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.VideoStatView(other.success);
      }
    }

    public findVideoStatByVid_result deepCopy() {
      return new findVideoStatByVid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.VideoStatView getSuccess() {
      return this.success;
    }

    public findVideoStatByVid_result setSuccess(one.show.stat.thrift.view.VideoStatView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.VideoStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVideoStatByVid_result)
        return this.equals((findVideoStatByVid_result)that);
      return false;
    }

    public boolean equals(findVideoStatByVid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findVideoStatByVid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findVideoStatByVid_result typedOther = (findVideoStatByVid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVideoStatByVid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVideoStatByVid_resultStandardSchemeFactory implements SchemeFactory {
      public findVideoStatByVid_resultStandardScheme getScheme() {
        return new findVideoStatByVid_resultStandardScheme();
      }
    }

    private static class findVideoStatByVid_resultStandardScheme extends StandardScheme<findVideoStatByVid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVideoStatByVid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.VideoStatView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVideoStatByVid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVideoStatByVid_resultTupleSchemeFactory implements SchemeFactory {
      public findVideoStatByVid_resultTupleScheme getScheme() {
        return new findVideoStatByVid_resultTupleScheme();
      }
    }

    private static class findVideoStatByVid_resultTupleScheme extends TupleScheme<findVideoStatByVid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVideoStatByVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVideoStatByVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.VideoStatView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findVideoStatByVids_args implements org.apache.thrift.TBase<findVideoStatByVids_args, findVideoStatByVids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVideoStatByVids_args");

    private static final org.apache.thrift.protocol.TField UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("uids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVideoStatByVids_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVideoStatByVids_argsTupleSchemeFactory());
    }

    public List<Long> uids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UIDS((short)1, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UIDS, new org.apache.thrift.meta_data.FieldMetaData("uids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVideoStatByVids_args.class, metaDataMap);
    }

    public findVideoStatByVids_args() {
    }

    public findVideoStatByVids_args(
      List<Long> uids)
    {
      this();
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVideoStatByVids_args(findVideoStatByVids_args other) {
      if (other.isSetUids()) {
        List<Long> __this__uids = new ArrayList<Long>();
        for (Long other_element : other.uids) {
          __this__uids.add(other_element);
        }
        this.uids = __this__uids;
      }
    }

    public findVideoStatByVids_args deepCopy() {
      return new findVideoStatByVids_args(this);
    }

    @Override
    public void clear() {
      this.uids = null;
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<Long> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(long elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<Long>();
      }
      this.uids.add(elem);
    }

    public List<Long> getUids() {
      return this.uids;
    }

    public findVideoStatByVids_args setUids(List<Long> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been assigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVideoStatByVids_args)
        return this.equals((findVideoStatByVids_args)that);
      return false;
    }

    public boolean equals(findVideoStatByVids_args that) {
      if (that == null)
        return false;

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findVideoStatByVids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findVideoStatByVids_args typedOther = (findVideoStatByVids_args)other;

      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVideoStatByVids_args(");
      boolean first = true;

      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVideoStatByVids_argsStandardSchemeFactory implements SchemeFactory {
      public findVideoStatByVids_argsStandardScheme getScheme() {
        return new findVideoStatByVids_argsStandardScheme();
      }
    }

    private static class findVideoStatByVids_argsStandardScheme extends StandardScheme<findVideoStatByVids_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVideoStatByVids_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.uids = new ArrayList<Long>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    long _elem18; // required
                    _elem18 = iprot.readI64();
                    struct.uids.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setUidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVideoStatByVids_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uids != null) {
          oprot.writeFieldBegin(UIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.uids.size()));
            for (long _iter19 : struct.uids)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVideoStatByVids_argsTupleSchemeFactory implements SchemeFactory {
      public findVideoStatByVids_argsTupleScheme getScheme() {
        return new findVideoStatByVids_argsTupleScheme();
      }
    }

    private static class findVideoStatByVids_argsTupleScheme extends TupleScheme<findVideoStatByVids_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVideoStatByVids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUids()) {
          {
            oprot.writeI32(struct.uids.size());
            for (long _iter20 : struct.uids)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVideoStatByVids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.uids = new ArrayList<Long>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              long _elem23; // required
              _elem23 = iprot.readI64();
              struct.uids.add(_elem23);
            }
          }
          struct.setUidsIsSet(true);
        }
      }
    }

  }

  public static class findVideoStatByVids_result implements org.apache.thrift.TBase<findVideoStatByVids_result, findVideoStatByVids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVideoStatByVids_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVideoStatByVids_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVideoStatByVids_resultTupleSchemeFactory());
    }

    public List<one.show.stat.thrift.view.VideoStatView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.VideoStatView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVideoStatByVids_result.class, metaDataMap);
    }

    public findVideoStatByVids_result() {
    }

    public findVideoStatByVids_result(
      List<one.show.stat.thrift.view.VideoStatView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVideoStatByVids_result(findVideoStatByVids_result other) {
      if (other.isSetSuccess()) {
        List<one.show.stat.thrift.view.VideoStatView> __this__success = new ArrayList<one.show.stat.thrift.view.VideoStatView>();
        for (one.show.stat.thrift.view.VideoStatView other_element : other.success) {
          __this__success.add(new one.show.stat.thrift.view.VideoStatView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findVideoStatByVids_result deepCopy() {
      return new findVideoStatByVids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.stat.thrift.view.VideoStatView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.stat.thrift.view.VideoStatView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.stat.thrift.view.VideoStatView>();
      }
      this.success.add(elem);
    }

    public List<one.show.stat.thrift.view.VideoStatView> getSuccess() {
      return this.success;
    }

    public findVideoStatByVids_result setSuccess(List<one.show.stat.thrift.view.VideoStatView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.stat.thrift.view.VideoStatView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVideoStatByVids_result)
        return this.equals((findVideoStatByVids_result)that);
      return false;
    }

    public boolean equals(findVideoStatByVids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findVideoStatByVids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findVideoStatByVids_result typedOther = (findVideoStatByVids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVideoStatByVids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVideoStatByVids_resultStandardSchemeFactory implements SchemeFactory {
      public findVideoStatByVids_resultStandardScheme getScheme() {
        return new findVideoStatByVids_resultStandardScheme();
      }
    }

    private static class findVideoStatByVids_resultStandardScheme extends StandardScheme<findVideoStatByVids_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVideoStatByVids_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.stat.thrift.view.VideoStatView>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    one.show.stat.thrift.view.VideoStatView _elem26; // required
                    _elem26 = new one.show.stat.thrift.view.VideoStatView();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVideoStatByVids_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.stat.thrift.view.VideoStatView _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVideoStatByVids_resultTupleSchemeFactory implements SchemeFactory {
      public findVideoStatByVids_resultTupleScheme getScheme() {
        return new findVideoStatByVids_resultTupleScheme();
      }
    }

    private static class findVideoStatByVids_resultTupleScheme extends TupleScheme<findVideoStatByVids_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVideoStatByVids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.stat.thrift.view.VideoStatView _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVideoStatByVids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.stat.thrift.view.VideoStatView>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              one.show.stat.thrift.view.VideoStatView _elem31; // required
              _elem31 = new one.show.stat.thrift.view.VideoStatView();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveVideoStat_args implements org.apache.thrift.TBase<saveVideoStat_args, saveVideoStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveVideoStat_args");

    private static final org.apache.thrift.protocol.TField VIDEO_STAT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("videoStatView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveVideoStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveVideoStat_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.VideoStatView videoStatView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIDEO_STAT_VIEW((short)1, "videoStatView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIDEO_STAT_VIEW
            return VIDEO_STAT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIDEO_STAT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("videoStatView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.VideoStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveVideoStat_args.class, metaDataMap);
    }

    public saveVideoStat_args() {
    }

    public saveVideoStat_args(
      one.show.stat.thrift.view.VideoStatView videoStatView)
    {
      this();
      this.videoStatView = videoStatView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveVideoStat_args(saveVideoStat_args other) {
      if (other.isSetVideoStatView()) {
        this.videoStatView = new one.show.stat.thrift.view.VideoStatView(other.videoStatView);
      }
    }

    public saveVideoStat_args deepCopy() {
      return new saveVideoStat_args(this);
    }

    @Override
    public void clear() {
      this.videoStatView = null;
    }

    public one.show.stat.thrift.view.VideoStatView getVideoStatView() {
      return this.videoStatView;
    }

    public saveVideoStat_args setVideoStatView(one.show.stat.thrift.view.VideoStatView videoStatView) {
      this.videoStatView = videoStatView;
      return this;
    }

    public void unsetVideoStatView() {
      this.videoStatView = null;
    }

    /** Returns true if field videoStatView is set (has been assigned a value) and false otherwise */
    public boolean isSetVideoStatView() {
      return this.videoStatView != null;
    }

    public void setVideoStatViewIsSet(boolean value) {
      if (!value) {
        this.videoStatView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIDEO_STAT_VIEW:
        if (value == null) {
          unsetVideoStatView();
        } else {
          setVideoStatView((one.show.stat.thrift.view.VideoStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIDEO_STAT_VIEW:
        return getVideoStatView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIDEO_STAT_VIEW:
        return isSetVideoStatView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveVideoStat_args)
        return this.equals((saveVideoStat_args)that);
      return false;
    }

    public boolean equals(saveVideoStat_args that) {
      if (that == null)
        return false;

      boolean this_present_videoStatView = true && this.isSetVideoStatView();
      boolean that_present_videoStatView = true && that.isSetVideoStatView();
      if (this_present_videoStatView || that_present_videoStatView) {
        if (!(this_present_videoStatView && that_present_videoStatView))
          return false;
        if (!this.videoStatView.equals(that.videoStatView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveVideoStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveVideoStat_args typedOther = (saveVideoStat_args)other;

      lastComparison = Boolean.valueOf(isSetVideoStatView()).compareTo(typedOther.isSetVideoStatView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVideoStatView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoStatView, typedOther.videoStatView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveVideoStat_args(");
      boolean first = true;

      sb.append("videoStatView:");
      if (this.videoStatView == null) {
        sb.append("null");
      } else {
        sb.append(this.videoStatView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (videoStatView != null) {
        videoStatView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveVideoStat_argsStandardSchemeFactory implements SchemeFactory {
      public saveVideoStat_argsStandardScheme getScheme() {
        return new saveVideoStat_argsStandardScheme();
      }
    }

    private static class saveVideoStat_argsStandardScheme extends StandardScheme<saveVideoStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveVideoStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIDEO_STAT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.videoStatView = new one.show.stat.thrift.view.VideoStatView();
                struct.videoStatView.read(iprot);
                struct.setVideoStatViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveVideoStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.videoStatView != null) {
          oprot.writeFieldBegin(VIDEO_STAT_VIEW_FIELD_DESC);
          struct.videoStatView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveVideoStat_argsTupleSchemeFactory implements SchemeFactory {
      public saveVideoStat_argsTupleScheme getScheme() {
        return new saveVideoStat_argsTupleScheme();
      }
    }

    private static class saveVideoStat_argsTupleScheme extends TupleScheme<saveVideoStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveVideoStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVideoStatView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVideoStatView()) {
          struct.videoStatView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveVideoStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.videoStatView = new one.show.stat.thrift.view.VideoStatView();
          struct.videoStatView.read(iprot);
          struct.setVideoStatViewIsSet(true);
        }
      }
    }

  }

  public static class saveVideoStat_result implements org.apache.thrift.TBase<saveVideoStat_result, saveVideoStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveVideoStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveVideoStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveVideoStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveVideoStat_result.class, metaDataMap);
    }

    public saveVideoStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveVideoStat_result(saveVideoStat_result other) {
    }

    public saveVideoStat_result deepCopy() {
      return new saveVideoStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveVideoStat_result)
        return this.equals((saveVideoStat_result)that);
      return false;
    }

    public boolean equals(saveVideoStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveVideoStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveVideoStat_result typedOther = (saveVideoStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveVideoStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveVideoStat_resultStandardSchemeFactory implements SchemeFactory {
      public saveVideoStat_resultStandardScheme getScheme() {
        return new saveVideoStat_resultStandardScheme();
      }
    }

    private static class saveVideoStat_resultStandardScheme extends StandardScheme<saveVideoStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveVideoStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveVideoStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveVideoStat_resultTupleSchemeFactory implements SchemeFactory {
      public saveVideoStat_resultTupleScheme getScheme() {
        return new saveVideoStat_resultTupleScheme();
      }
    }

    private static class saveVideoStat_resultTupleScheme extends TupleScheme<saveVideoStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveVideoStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveVideoStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateVideoStat_args implements org.apache.thrift.TBase<updateVideoStat_args, updateVideoStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVideoStat_args");

    private static final org.apache.thrift.protocol.TField VIDEO_STAT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("videoStatView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVideoStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVideoStat_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.VideoStatView videoStatView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIDEO_STAT_VIEW((short)1, "videoStatView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIDEO_STAT_VIEW
            return VIDEO_STAT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIDEO_STAT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("videoStatView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.VideoStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVideoStat_args.class, metaDataMap);
    }

    public updateVideoStat_args() {
    }

    public updateVideoStat_args(
      one.show.stat.thrift.view.VideoStatView videoStatView)
    {
      this();
      this.videoStatView = videoStatView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVideoStat_args(updateVideoStat_args other) {
      if (other.isSetVideoStatView()) {
        this.videoStatView = new one.show.stat.thrift.view.VideoStatView(other.videoStatView);
      }
    }

    public updateVideoStat_args deepCopy() {
      return new updateVideoStat_args(this);
    }

    @Override
    public void clear() {
      this.videoStatView = null;
    }

    public one.show.stat.thrift.view.VideoStatView getVideoStatView() {
      return this.videoStatView;
    }

    public updateVideoStat_args setVideoStatView(one.show.stat.thrift.view.VideoStatView videoStatView) {
      this.videoStatView = videoStatView;
      return this;
    }

    public void unsetVideoStatView() {
      this.videoStatView = null;
    }

    /** Returns true if field videoStatView is set (has been assigned a value) and false otherwise */
    public boolean isSetVideoStatView() {
      return this.videoStatView != null;
    }

    public void setVideoStatViewIsSet(boolean value) {
      if (!value) {
        this.videoStatView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIDEO_STAT_VIEW:
        if (value == null) {
          unsetVideoStatView();
        } else {
          setVideoStatView((one.show.stat.thrift.view.VideoStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIDEO_STAT_VIEW:
        return getVideoStatView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIDEO_STAT_VIEW:
        return isSetVideoStatView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVideoStat_args)
        return this.equals((updateVideoStat_args)that);
      return false;
    }

    public boolean equals(updateVideoStat_args that) {
      if (that == null)
        return false;

      boolean this_present_videoStatView = true && this.isSetVideoStatView();
      boolean that_present_videoStatView = true && that.isSetVideoStatView();
      if (this_present_videoStatView || that_present_videoStatView) {
        if (!(this_present_videoStatView && that_present_videoStatView))
          return false;
        if (!this.videoStatView.equals(that.videoStatView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateVideoStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateVideoStat_args typedOther = (updateVideoStat_args)other;

      lastComparison = Boolean.valueOf(isSetVideoStatView()).compareTo(typedOther.isSetVideoStatView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVideoStatView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoStatView, typedOther.videoStatView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVideoStat_args(");
      boolean first = true;

      sb.append("videoStatView:");
      if (this.videoStatView == null) {
        sb.append("null");
      } else {
        sb.append(this.videoStatView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (videoStatView != null) {
        videoStatView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVideoStat_argsStandardSchemeFactory implements SchemeFactory {
      public updateVideoStat_argsStandardScheme getScheme() {
        return new updateVideoStat_argsStandardScheme();
      }
    }

    private static class updateVideoStat_argsStandardScheme extends StandardScheme<updateVideoStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVideoStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIDEO_STAT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.videoStatView = new one.show.stat.thrift.view.VideoStatView();
                struct.videoStatView.read(iprot);
                struct.setVideoStatViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVideoStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.videoStatView != null) {
          oprot.writeFieldBegin(VIDEO_STAT_VIEW_FIELD_DESC);
          struct.videoStatView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVideoStat_argsTupleSchemeFactory implements SchemeFactory {
      public updateVideoStat_argsTupleScheme getScheme() {
        return new updateVideoStat_argsTupleScheme();
      }
    }

    private static class updateVideoStat_argsTupleScheme extends TupleScheme<updateVideoStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVideoStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVideoStatView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVideoStatView()) {
          struct.videoStatView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVideoStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.videoStatView = new one.show.stat.thrift.view.VideoStatView();
          struct.videoStatView.read(iprot);
          struct.setVideoStatViewIsSet(true);
        }
      }
    }

  }

  public static class updateVideoStat_result implements org.apache.thrift.TBase<updateVideoStat_result, updateVideoStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVideoStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVideoStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVideoStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVideoStat_result.class, metaDataMap);
    }

    public updateVideoStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVideoStat_result(updateVideoStat_result other) {
    }

    public updateVideoStat_result deepCopy() {
      return new updateVideoStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVideoStat_result)
        return this.equals((updateVideoStat_result)that);
      return false;
    }

    public boolean equals(updateVideoStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateVideoStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateVideoStat_result typedOther = (updateVideoStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVideoStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVideoStat_resultStandardSchemeFactory implements SchemeFactory {
      public updateVideoStat_resultStandardScheme getScheme() {
        return new updateVideoStat_resultStandardScheme();
      }
    }

    private static class updateVideoStat_resultStandardScheme extends StandardScheme<updateVideoStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVideoStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVideoStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVideoStat_resultTupleSchemeFactory implements SchemeFactory {
      public updateVideoStat_resultTupleScheme getScheme() {
        return new updateVideoStat_resultTupleScheme();
      }
    }

    private static class updateVideoStat_resultTupleScheme extends TupleScheme<updateVideoStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVideoStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVideoStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateMonitorStatById_args implements org.apache.thrift.TBase<updateMonitorStatById_args, updateMonitorStatById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMonitorStatById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMonitorStatById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMonitorStatById_argsTupleSchemeFactory());
    }

    public long id; // required
    public String statement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      STATEMENT((short)2, "statement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // STATEMENT
            return STATEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMonitorStatById_args.class, metaDataMap);
    }

    public updateMonitorStatById_args() {
    }

    public updateMonitorStatById_args(
      long id,
      String statement)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.statement = statement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMonitorStatById_args(updateMonitorStatById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetStatement()) {
        this.statement = other.statement;
      }
    }

    public updateMonitorStatById_args deepCopy() {
      return new updateMonitorStatById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.statement = null;
    }

    public long getId() {
      return this.id;
    }

    public updateMonitorStatById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getStatement() {
      return this.statement;
    }

    public updateMonitorStatById_args setStatement(String statement) {
      this.statement = statement;
      return this;
    }

    public void unsetStatement() {
      this.statement = null;
    }

    /** Returns true if field statement is set (has been assigned a value) and false otherwise */
    public boolean isSetStatement() {
      return this.statement != null;
    }

    public void setStatementIsSet(boolean value) {
      if (!value) {
        this.statement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case STATEMENT:
        if (value == null) {
          unsetStatement();
        } else {
          setStatement((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case STATEMENT:
        return getStatement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case STATEMENT:
        return isSetStatement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMonitorStatById_args)
        return this.equals((updateMonitorStatById_args)that);
      return false;
    }

    public boolean equals(updateMonitorStatById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_statement = true && this.isSetStatement();
      boolean that_present_statement = true && that.isSetStatement();
      if (this_present_statement || that_present_statement) {
        if (!(this_present_statement && that_present_statement))
          return false;
        if (!this.statement.equals(that.statement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateMonitorStatById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateMonitorStatById_args typedOther = (updateMonitorStatById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatement()).compareTo(typedOther.isSetStatement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, typedOther.statement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMonitorStatById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMonitorStatById_argsStandardSchemeFactory implements SchemeFactory {
      public updateMonitorStatById_argsStandardScheme getScheme() {
        return new updateMonitorStatById_argsStandardScheme();
      }
    }

    private static class updateMonitorStatById_argsStandardScheme extends StandardScheme<updateMonitorStatById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMonitorStatById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.statement = iprot.readString();
                struct.setStatementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMonitorStatById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.statement != null) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          oprot.writeString(struct.statement);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMonitorStatById_argsTupleSchemeFactory implements SchemeFactory {
      public updateMonitorStatById_argsTupleScheme getScheme() {
        return new updateMonitorStatById_argsTupleScheme();
      }
    }

    private static class updateMonitorStatById_argsTupleScheme extends TupleScheme<updateMonitorStatById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMonitorStatById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetStatement()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetStatement()) {
          oprot.writeString(struct.statement);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMonitorStatById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.statement = iprot.readString();
          struct.setStatementIsSet(true);
        }
      }
    }

  }

  public static class updateMonitorStatById_result implements org.apache.thrift.TBase<updateMonitorStatById_result, updateMonitorStatById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMonitorStatById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMonitorStatById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMonitorStatById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMonitorStatById_result.class, metaDataMap);
    }

    public updateMonitorStatById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMonitorStatById_result(updateMonitorStatById_result other) {
    }

    public updateMonitorStatById_result deepCopy() {
      return new updateMonitorStatById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMonitorStatById_result)
        return this.equals((updateMonitorStatById_result)that);
      return false;
    }

    public boolean equals(updateMonitorStatById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateMonitorStatById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateMonitorStatById_result typedOther = (updateMonitorStatById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMonitorStatById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMonitorStatById_resultStandardSchemeFactory implements SchemeFactory {
      public updateMonitorStatById_resultStandardScheme getScheme() {
        return new updateMonitorStatById_resultStandardScheme();
      }
    }

    private static class updateMonitorStatById_resultStandardScheme extends StandardScheme<updateMonitorStatById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMonitorStatById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMonitorStatById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMonitorStatById_resultTupleSchemeFactory implements SchemeFactory {
      public updateMonitorStatById_resultTupleScheme getScheme() {
        return new updateMonitorStatById_resultTupleScheme();
      }
    }

    private static class updateMonitorStatById_resultTupleScheme extends TupleScheme<updateMonitorStatById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMonitorStatById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMonitorStatById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveMonitorStat_args implements org.apache.thrift.TBase<saveMonitorStat_args, saveMonitorStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMonitorStat_args");

    private static final org.apache.thrift.protocol.TField MONITOR_STAT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorStatView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMonitorStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMonitorStat_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.MonitorStatView monitorStatView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONITOR_STAT_VIEW((short)1, "monitorStatView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONITOR_STAT_VIEW
            return MONITOR_STAT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONITOR_STAT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("monitorStatView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.MonitorStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMonitorStat_args.class, metaDataMap);
    }

    public saveMonitorStat_args() {
    }

    public saveMonitorStat_args(
      one.show.stat.thrift.view.MonitorStatView monitorStatView)
    {
      this();
      this.monitorStatView = monitorStatView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMonitorStat_args(saveMonitorStat_args other) {
      if (other.isSetMonitorStatView()) {
        this.monitorStatView = new one.show.stat.thrift.view.MonitorStatView(other.monitorStatView);
      }
    }

    public saveMonitorStat_args deepCopy() {
      return new saveMonitorStat_args(this);
    }

    @Override
    public void clear() {
      this.monitorStatView = null;
    }

    public one.show.stat.thrift.view.MonitorStatView getMonitorStatView() {
      return this.monitorStatView;
    }

    public saveMonitorStat_args setMonitorStatView(one.show.stat.thrift.view.MonitorStatView monitorStatView) {
      this.monitorStatView = monitorStatView;
      return this;
    }

    public void unsetMonitorStatView() {
      this.monitorStatView = null;
    }

    /** Returns true if field monitorStatView is set (has been assigned a value) and false otherwise */
    public boolean isSetMonitorStatView() {
      return this.monitorStatView != null;
    }

    public void setMonitorStatViewIsSet(boolean value) {
      if (!value) {
        this.monitorStatView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONITOR_STAT_VIEW:
        if (value == null) {
          unsetMonitorStatView();
        } else {
          setMonitorStatView((one.show.stat.thrift.view.MonitorStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONITOR_STAT_VIEW:
        return getMonitorStatView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONITOR_STAT_VIEW:
        return isSetMonitorStatView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMonitorStat_args)
        return this.equals((saveMonitorStat_args)that);
      return false;
    }

    public boolean equals(saveMonitorStat_args that) {
      if (that == null)
        return false;

      boolean this_present_monitorStatView = true && this.isSetMonitorStatView();
      boolean that_present_monitorStatView = true && that.isSetMonitorStatView();
      if (this_present_monitorStatView || that_present_monitorStatView) {
        if (!(this_present_monitorStatView && that_present_monitorStatView))
          return false;
        if (!this.monitorStatView.equals(that.monitorStatView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveMonitorStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveMonitorStat_args typedOther = (saveMonitorStat_args)other;

      lastComparison = Boolean.valueOf(isSetMonitorStatView()).compareTo(typedOther.isSetMonitorStatView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonitorStatView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorStatView, typedOther.monitorStatView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMonitorStat_args(");
      boolean first = true;

      sb.append("monitorStatView:");
      if (this.monitorStatView == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorStatView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (monitorStatView != null) {
        monitorStatView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMonitorStat_argsStandardSchemeFactory implements SchemeFactory {
      public saveMonitorStat_argsStandardScheme getScheme() {
        return new saveMonitorStat_argsStandardScheme();
      }
    }

    private static class saveMonitorStat_argsStandardScheme extends StandardScheme<saveMonitorStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMonitorStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MONITOR_STAT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.monitorStatView = new one.show.stat.thrift.view.MonitorStatView();
                struct.monitorStatView.read(iprot);
                struct.setMonitorStatViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMonitorStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.monitorStatView != null) {
          oprot.writeFieldBegin(MONITOR_STAT_VIEW_FIELD_DESC);
          struct.monitorStatView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMonitorStat_argsTupleSchemeFactory implements SchemeFactory {
      public saveMonitorStat_argsTupleScheme getScheme() {
        return new saveMonitorStat_argsTupleScheme();
      }
    }

    private static class saveMonitorStat_argsTupleScheme extends TupleScheme<saveMonitorStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMonitorStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMonitorStatView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMonitorStatView()) {
          struct.monitorStatView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMonitorStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.monitorStatView = new one.show.stat.thrift.view.MonitorStatView();
          struct.monitorStatView.read(iprot);
          struct.setMonitorStatViewIsSet(true);
        }
      }
    }

  }

  public static class saveMonitorStat_result implements org.apache.thrift.TBase<saveMonitorStat_result, saveMonitorStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMonitorStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMonitorStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMonitorStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMonitorStat_result.class, metaDataMap);
    }

    public saveMonitorStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMonitorStat_result(saveMonitorStat_result other) {
    }

    public saveMonitorStat_result deepCopy() {
      return new saveMonitorStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMonitorStat_result)
        return this.equals((saveMonitorStat_result)that);
      return false;
    }

    public boolean equals(saveMonitorStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveMonitorStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveMonitorStat_result typedOther = (saveMonitorStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMonitorStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMonitorStat_resultStandardSchemeFactory implements SchemeFactory {
      public saveMonitorStat_resultStandardScheme getScheme() {
        return new saveMonitorStat_resultStandardScheme();
      }
    }

    private static class saveMonitorStat_resultStandardScheme extends StandardScheme<saveMonitorStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMonitorStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMonitorStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMonitorStat_resultTupleSchemeFactory implements SchemeFactory {
      public saveMonitorStat_resultTupleScheme getScheme() {
        return new saveMonitorStat_resultTupleScheme();
      }
    }

    private static class saveMonitorStat_resultTupleScheme extends TupleScheme<saveMonitorStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMonitorStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMonitorStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findMonitorStat_args implements org.apache.thrift.TBase<findMonitorStat_args, findMonitorStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMonitorStat_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMonitorStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMonitorStat_argsTupleSchemeFactory());
    }

    public String name; // required
    public int type; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      TYPE((short)2, "type"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // TYPE
            return TYPE;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMonitorStat_args.class, metaDataMap);
    }

    public findMonitorStat_args() {
    }

    public findMonitorStat_args(
      String name,
      int type,
      int time)
    {
      this();
      this.name = name;
      this.type = type;
      setTypeIsSet(true);
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMonitorStat_args(findMonitorStat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.type = other.type;
      this.time = other.time;
    }

    public findMonitorStat_args deepCopy() {
      return new findMonitorStat_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      setTypeIsSet(false);
      this.type = 0;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getName() {
      return this.name;
    }

    public findMonitorStat_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public findMonitorStat_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getTime() {
      return this.time;
    }

    public findMonitorStat_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case TYPE:
        return Integer.valueOf(getType());

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case TYPE:
        return isSetType();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMonitorStat_args)
        return this.equals((findMonitorStat_args)that);
      return false;
    }

    public boolean equals(findMonitorStat_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMonitorStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMonitorStat_args typedOther = (findMonitorStat_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMonitorStat_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMonitorStat_argsStandardSchemeFactory implements SchemeFactory {
      public findMonitorStat_argsStandardScheme getScheme() {
        return new findMonitorStat_argsStandardScheme();
      }
    }

    private static class findMonitorStat_argsStandardScheme extends StandardScheme<findMonitorStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMonitorStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMonitorStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMonitorStat_argsTupleSchemeFactory implements SchemeFactory {
      public findMonitorStat_argsTupleScheme getScheme() {
        return new findMonitorStat_argsTupleScheme();
      }
    }

    private static class findMonitorStat_argsTupleScheme extends TupleScheme<findMonitorStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMonitorStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMonitorStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class findMonitorStat_result implements org.apache.thrift.TBase<findMonitorStat_result, findMonitorStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMonitorStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMonitorStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMonitorStat_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.MonitorStatView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.MonitorStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMonitorStat_result.class, metaDataMap);
    }

    public findMonitorStat_result() {
    }

    public findMonitorStat_result(
      one.show.stat.thrift.view.MonitorStatView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMonitorStat_result(findMonitorStat_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.MonitorStatView(other.success);
      }
    }

    public findMonitorStat_result deepCopy() {
      return new findMonitorStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.MonitorStatView getSuccess() {
      return this.success;
    }

    public findMonitorStat_result setSuccess(one.show.stat.thrift.view.MonitorStatView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.MonitorStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMonitorStat_result)
        return this.equals((findMonitorStat_result)that);
      return false;
    }

    public boolean equals(findMonitorStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMonitorStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMonitorStat_result typedOther = (findMonitorStat_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMonitorStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMonitorStat_resultStandardSchemeFactory implements SchemeFactory {
      public findMonitorStat_resultStandardScheme getScheme() {
        return new findMonitorStat_resultStandardScheme();
      }
    }

    private static class findMonitorStat_resultStandardScheme extends StandardScheme<findMonitorStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMonitorStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.MonitorStatView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMonitorStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMonitorStat_resultTupleSchemeFactory implements SchemeFactory {
      public findMonitorStat_resultTupleScheme getScheme() {
        return new findMonitorStat_resultTupleScheme();
      }
    }

    private static class findMonitorStat_resultTupleScheme extends TupleScheme<findMonitorStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMonitorStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMonitorStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.MonitorStatView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findMonitorStatList_args implements org.apache.thrift.TBase<findMonitorStatList_args, findMonitorStatList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMonitorStatList_args");

    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMonitorStatList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMonitorStatList_argsTupleSchemeFactory());
    }

    public int beginTime; // required
    public int endTime; // required
    public int type; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEGIN_TIME((short)1, "beginTime"),
      END_TIME((short)2, "endTime"),
      TYPE((short)3, "type"),
      START((short)4, "start"),
      COUNT((short)5, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEGIN_TIME
            return BEGIN_TIME;
          case 2: // END_TIME
            return END_TIME;
          case 3: // TYPE
            return TYPE;
          case 4: // START
            return START;
          case 5: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __START_ISSET_ID = 3;
    private static final int __COUNT_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMonitorStatList_args.class, metaDataMap);
    }

    public findMonitorStatList_args() {
    }

    public findMonitorStatList_args(
      int beginTime,
      int endTime,
      int type,
      int start,
      int count)
    {
      this();
      this.beginTime = beginTime;
      setBeginTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMonitorStatList_args(findMonitorStatList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.beginTime = other.beginTime;
      this.endTime = other.endTime;
      this.type = other.type;
      this.start = other.start;
      this.count = other.count;
    }

    public findMonitorStatList_args deepCopy() {
      return new findMonitorStatList_args(this);
    }

    @Override
    public void clear() {
      setBeginTimeIsSet(false);
      this.beginTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      setTypeIsSet(false);
      this.type = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getBeginTime() {
      return this.beginTime;
    }

    public findMonitorStatList_args setBeginTime(int beginTime) {
      this.beginTime = beginTime;
      setBeginTimeIsSet(true);
      return this;
    }

    public void unsetBeginTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
    }

    public void setBeginTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public findMonitorStatList_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public findMonitorStatList_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findMonitorStatList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findMonitorStatList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BEGIN_TIME:
        if (value == null) {
          unsetBeginTime();
        } else {
          setBeginTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BEGIN_TIME:
        return Integer.valueOf(getBeginTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      case TYPE:
        return Integer.valueOf(getType());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BEGIN_TIME:
        return isSetBeginTime();
      case END_TIME:
        return isSetEndTime();
      case TYPE:
        return isSetType();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMonitorStatList_args)
        return this.equals((findMonitorStatList_args)that);
      return false;
    }

    public boolean equals(findMonitorStatList_args that) {
      if (that == null)
        return false;

      boolean this_present_beginTime = true;
      boolean that_present_beginTime = true;
      if (this_present_beginTime || that_present_beginTime) {
        if (!(this_present_beginTime && that_present_beginTime))
          return false;
        if (this.beginTime != that.beginTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMonitorStatList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMonitorStatList_args typedOther = (findMonitorStatList_args)other;

      lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMonitorStatList_args(");
      boolean first = true;

      sb.append("beginTime:");
      sb.append(this.beginTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMonitorStatList_argsStandardSchemeFactory implements SchemeFactory {
      public findMonitorStatList_argsStandardScheme getScheme() {
        return new findMonitorStatList_argsStandardScheme();
      }
    }

    private static class findMonitorStatList_argsStandardScheme extends StandardScheme<findMonitorStatList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMonitorStatList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BEGIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.beginTime = iprot.readI32();
                struct.setBeginTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMonitorStatList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
        oprot.writeI32(struct.beginTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMonitorStatList_argsTupleSchemeFactory implements SchemeFactory {
      public findMonitorStatList_argsTupleScheme getScheme() {
        return new findMonitorStatList_argsTupleScheme();
      }
    }

    private static class findMonitorStatList_argsTupleScheme extends TupleScheme<findMonitorStatList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMonitorStatList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBeginTime()) {
          optionals.set(0);
        }
        if (struct.isSetEndTime()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetCount()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetBeginTime()) {
          oprot.writeI32(struct.beginTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMonitorStatList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.beginTime = iprot.readI32();
          struct.setBeginTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findMonitorStatList_result implements org.apache.thrift.TBase<findMonitorStatList_result, findMonitorStatList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMonitorStatList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMonitorStatList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMonitorStatList_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.MonitorStatListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.MonitorStatListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMonitorStatList_result.class, metaDataMap);
    }

    public findMonitorStatList_result() {
    }

    public findMonitorStatList_result(
      one.show.stat.thrift.view.MonitorStatListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMonitorStatList_result(findMonitorStatList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.MonitorStatListView(other.success);
      }
    }

    public findMonitorStatList_result deepCopy() {
      return new findMonitorStatList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.MonitorStatListView getSuccess() {
      return this.success;
    }

    public findMonitorStatList_result setSuccess(one.show.stat.thrift.view.MonitorStatListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.MonitorStatListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMonitorStatList_result)
        return this.equals((findMonitorStatList_result)that);
      return false;
    }

    public boolean equals(findMonitorStatList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMonitorStatList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMonitorStatList_result typedOther = (findMonitorStatList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMonitorStatList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMonitorStatList_resultStandardSchemeFactory implements SchemeFactory {
      public findMonitorStatList_resultStandardScheme getScheme() {
        return new findMonitorStatList_resultStandardScheme();
      }
    }

    private static class findMonitorStatList_resultStandardScheme extends StandardScheme<findMonitorStatList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMonitorStatList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.MonitorStatListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMonitorStatList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMonitorStatList_resultTupleSchemeFactory implements SchemeFactory {
      public findMonitorStatList_resultTupleScheme getScheme() {
        return new findMonitorStatList_resultTupleScheme();
      }
    }

    private static class findMonitorStatList_resultTupleScheme extends TupleScheme<findMonitorStatList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMonitorStatList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMonitorStatList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.MonitorStatListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSummaryStatList_args implements org.apache.thrift.TBase<getSummaryStatList_args, getSummaryStatList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSummaryStatList_args");

    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSummaryStatList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSummaryStatList_argsTupleSchemeFactory());
    }

    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIME((short)1, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSummaryStatList_args.class, metaDataMap);
    }

    public getSummaryStatList_args() {
    }

    public getSummaryStatList_args(
      int time)
    {
      this();
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSummaryStatList_args(getSummaryStatList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.time = other.time;
    }

    public getSummaryStatList_args deepCopy() {
      return new getSummaryStatList_args(this);
    }

    @Override
    public void clear() {
      setTimeIsSet(false);
      this.time = 0;
    }

    public int getTime() {
      return this.time;
    }

    public getSummaryStatList_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSummaryStatList_args)
        return this.equals((getSummaryStatList_args)that);
      return false;
    }

    public boolean equals(getSummaryStatList_args that) {
      if (that == null)
        return false;

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSummaryStatList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSummaryStatList_args typedOther = (getSummaryStatList_args)other;

      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSummaryStatList_args(");
      boolean first = true;

      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSummaryStatList_argsStandardSchemeFactory implements SchemeFactory {
      public getSummaryStatList_argsStandardScheme getScheme() {
        return new getSummaryStatList_argsStandardScheme();
      }
    }

    private static class getSummaryStatList_argsStandardScheme extends StandardScheme<getSummaryStatList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSummaryStatList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSummaryStatList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSummaryStatList_argsTupleSchemeFactory implements SchemeFactory {
      public getSummaryStatList_argsTupleScheme getScheme() {
        return new getSummaryStatList_argsTupleScheme();
      }
    }

    private static class getSummaryStatList_argsTupleScheme extends TupleScheme<getSummaryStatList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSummaryStatList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSummaryStatList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class getSummaryStatList_result implements org.apache.thrift.TBase<getSummaryStatList_result, getSummaryStatList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSummaryStatList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSummaryStatList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSummaryStatList_resultTupleSchemeFactory());
    }

    public List<one.show.stat.thrift.view.SummaryStatView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.SummaryStatView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSummaryStatList_result.class, metaDataMap);
    }

    public getSummaryStatList_result() {
    }

    public getSummaryStatList_result(
      List<one.show.stat.thrift.view.SummaryStatView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSummaryStatList_result(getSummaryStatList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.stat.thrift.view.SummaryStatView> __this__success = new ArrayList<one.show.stat.thrift.view.SummaryStatView>();
        for (one.show.stat.thrift.view.SummaryStatView other_element : other.success) {
          __this__success.add(new one.show.stat.thrift.view.SummaryStatView(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSummaryStatList_result deepCopy() {
      return new getSummaryStatList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.stat.thrift.view.SummaryStatView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.stat.thrift.view.SummaryStatView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.stat.thrift.view.SummaryStatView>();
      }
      this.success.add(elem);
    }

    public List<one.show.stat.thrift.view.SummaryStatView> getSuccess() {
      return this.success;
    }

    public getSummaryStatList_result setSuccess(List<one.show.stat.thrift.view.SummaryStatView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.stat.thrift.view.SummaryStatView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSummaryStatList_result)
        return this.equals((getSummaryStatList_result)that);
      return false;
    }

    public boolean equals(getSummaryStatList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSummaryStatList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSummaryStatList_result typedOther = (getSummaryStatList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSummaryStatList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSummaryStatList_resultStandardSchemeFactory implements SchemeFactory {
      public getSummaryStatList_resultStandardScheme getScheme() {
        return new getSummaryStatList_resultStandardScheme();
      }
    }

    private static class getSummaryStatList_resultStandardScheme extends StandardScheme<getSummaryStatList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSummaryStatList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.stat.thrift.view.SummaryStatView>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    one.show.stat.thrift.view.SummaryStatView _elem34; // required
                    _elem34 = new one.show.stat.thrift.view.SummaryStatView();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSummaryStatList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.stat.thrift.view.SummaryStatView _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSummaryStatList_resultTupleSchemeFactory implements SchemeFactory {
      public getSummaryStatList_resultTupleScheme getScheme() {
        return new getSummaryStatList_resultTupleScheme();
      }
    }

    private static class getSummaryStatList_resultTupleScheme extends TupleScheme<getSummaryStatList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSummaryStatList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.stat.thrift.view.SummaryStatView _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSummaryStatList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.stat.thrift.view.SummaryStatView>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              one.show.stat.thrift.view.SummaryStatView _elem39; // required
              _elem39 = new one.show.stat.thrift.view.SummaryStatView();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSummaryStat_args implements org.apache.thrift.TBase<getSummaryStat_args, getSummaryStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSummaryStat_args");

    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSummaryStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSummaryStat_argsTupleSchemeFactory());
    }

    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIME((short)1, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSummaryStat_args.class, metaDataMap);
    }

    public getSummaryStat_args() {
    }

    public getSummaryStat_args(
      int time)
    {
      this();
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSummaryStat_args(getSummaryStat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.time = other.time;
    }

    public getSummaryStat_args deepCopy() {
      return new getSummaryStat_args(this);
    }

    @Override
    public void clear() {
      setTimeIsSet(false);
      this.time = 0;
    }

    public int getTime() {
      return this.time;
    }

    public getSummaryStat_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSummaryStat_args)
        return this.equals((getSummaryStat_args)that);
      return false;
    }

    public boolean equals(getSummaryStat_args that) {
      if (that == null)
        return false;

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSummaryStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSummaryStat_args typedOther = (getSummaryStat_args)other;

      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSummaryStat_args(");
      boolean first = true;

      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSummaryStat_argsStandardSchemeFactory implements SchemeFactory {
      public getSummaryStat_argsStandardScheme getScheme() {
        return new getSummaryStat_argsStandardScheme();
      }
    }

    private static class getSummaryStat_argsStandardScheme extends StandardScheme<getSummaryStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSummaryStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSummaryStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSummaryStat_argsTupleSchemeFactory implements SchemeFactory {
      public getSummaryStat_argsTupleScheme getScheme() {
        return new getSummaryStat_argsTupleScheme();
      }
    }

    private static class getSummaryStat_argsTupleScheme extends TupleScheme<getSummaryStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSummaryStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSummaryStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class getSummaryStat_result implements org.apache.thrift.TBase<getSummaryStat_result, getSummaryStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSummaryStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSummaryStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSummaryStat_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.SummaryStatView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.SummaryStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSummaryStat_result.class, metaDataMap);
    }

    public getSummaryStat_result() {
    }

    public getSummaryStat_result(
      one.show.stat.thrift.view.SummaryStatView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSummaryStat_result(getSummaryStat_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.SummaryStatView(other.success);
      }
    }

    public getSummaryStat_result deepCopy() {
      return new getSummaryStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.SummaryStatView getSuccess() {
      return this.success;
    }

    public getSummaryStat_result setSuccess(one.show.stat.thrift.view.SummaryStatView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.SummaryStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSummaryStat_result)
        return this.equals((getSummaryStat_result)that);
      return false;
    }

    public boolean equals(getSummaryStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSummaryStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSummaryStat_result typedOther = (getSummaryStat_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSummaryStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSummaryStat_resultStandardSchemeFactory implements SchemeFactory {
      public getSummaryStat_resultStandardScheme getScheme() {
        return new getSummaryStat_resultStandardScheme();
      }
    }

    private static class getSummaryStat_resultStandardScheme extends StandardScheme<getSummaryStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSummaryStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.SummaryStatView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSummaryStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSummaryStat_resultTupleSchemeFactory implements SchemeFactory {
      public getSummaryStat_resultTupleScheme getScheme() {
        return new getSummaryStat_resultTupleScheme();
      }
    }

    private static class getSummaryStat_resultTupleScheme extends TupleScheme<getSummaryStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSummaryStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSummaryStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.SummaryStatView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveSummaryStat_args implements org.apache.thrift.TBase<saveSummaryStat_args, saveSummaryStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveSummaryStat_args");

    private static final org.apache.thrift.protocol.TField SUMMARY_STAT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("summaryStatView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveSummaryStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveSummaryStat_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.SummaryStatView summaryStatView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUMMARY_STAT_VIEW((short)1, "summaryStatView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SUMMARY_STAT_VIEW
            return SUMMARY_STAT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUMMARY_STAT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("summaryStatView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.SummaryStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveSummaryStat_args.class, metaDataMap);
    }

    public saveSummaryStat_args() {
    }

    public saveSummaryStat_args(
      one.show.stat.thrift.view.SummaryStatView summaryStatView)
    {
      this();
      this.summaryStatView = summaryStatView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveSummaryStat_args(saveSummaryStat_args other) {
      if (other.isSetSummaryStatView()) {
        this.summaryStatView = new one.show.stat.thrift.view.SummaryStatView(other.summaryStatView);
      }
    }

    public saveSummaryStat_args deepCopy() {
      return new saveSummaryStat_args(this);
    }

    @Override
    public void clear() {
      this.summaryStatView = null;
    }

    public one.show.stat.thrift.view.SummaryStatView getSummaryStatView() {
      return this.summaryStatView;
    }

    public saveSummaryStat_args setSummaryStatView(one.show.stat.thrift.view.SummaryStatView summaryStatView) {
      this.summaryStatView = summaryStatView;
      return this;
    }

    public void unsetSummaryStatView() {
      this.summaryStatView = null;
    }

    /** Returns true if field summaryStatView is set (has been assigned a value) and false otherwise */
    public boolean isSetSummaryStatView() {
      return this.summaryStatView != null;
    }

    public void setSummaryStatViewIsSet(boolean value) {
      if (!value) {
        this.summaryStatView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUMMARY_STAT_VIEW:
        if (value == null) {
          unsetSummaryStatView();
        } else {
          setSummaryStatView((one.show.stat.thrift.view.SummaryStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUMMARY_STAT_VIEW:
        return getSummaryStatView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUMMARY_STAT_VIEW:
        return isSetSummaryStatView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveSummaryStat_args)
        return this.equals((saveSummaryStat_args)that);
      return false;
    }

    public boolean equals(saveSummaryStat_args that) {
      if (that == null)
        return false;

      boolean this_present_summaryStatView = true && this.isSetSummaryStatView();
      boolean that_present_summaryStatView = true && that.isSetSummaryStatView();
      if (this_present_summaryStatView || that_present_summaryStatView) {
        if (!(this_present_summaryStatView && that_present_summaryStatView))
          return false;
        if (!this.summaryStatView.equals(that.summaryStatView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveSummaryStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveSummaryStat_args typedOther = (saveSummaryStat_args)other;

      lastComparison = Boolean.valueOf(isSetSummaryStatView()).compareTo(typedOther.isSetSummaryStatView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSummaryStatView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summaryStatView, typedOther.summaryStatView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveSummaryStat_args(");
      boolean first = true;

      sb.append("summaryStatView:");
      if (this.summaryStatView == null) {
        sb.append("null");
      } else {
        sb.append(this.summaryStatView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (summaryStatView != null) {
        summaryStatView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveSummaryStat_argsStandardSchemeFactory implements SchemeFactory {
      public saveSummaryStat_argsStandardScheme getScheme() {
        return new saveSummaryStat_argsStandardScheme();
      }
    }

    private static class saveSummaryStat_argsStandardScheme extends StandardScheme<saveSummaryStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveSummaryStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SUMMARY_STAT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.summaryStatView = new one.show.stat.thrift.view.SummaryStatView();
                struct.summaryStatView.read(iprot);
                struct.setSummaryStatViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveSummaryStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.summaryStatView != null) {
          oprot.writeFieldBegin(SUMMARY_STAT_VIEW_FIELD_DESC);
          struct.summaryStatView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveSummaryStat_argsTupleSchemeFactory implements SchemeFactory {
      public saveSummaryStat_argsTupleScheme getScheme() {
        return new saveSummaryStat_argsTupleScheme();
      }
    }

    private static class saveSummaryStat_argsTupleScheme extends TupleScheme<saveSummaryStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveSummaryStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSummaryStatView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSummaryStatView()) {
          struct.summaryStatView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveSummaryStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.summaryStatView = new one.show.stat.thrift.view.SummaryStatView();
          struct.summaryStatView.read(iprot);
          struct.setSummaryStatViewIsSet(true);
        }
      }
    }

  }

  public static class saveSummaryStat_result implements org.apache.thrift.TBase<saveSummaryStat_result, saveSummaryStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveSummaryStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveSummaryStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveSummaryStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveSummaryStat_result.class, metaDataMap);
    }

    public saveSummaryStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveSummaryStat_result(saveSummaryStat_result other) {
    }

    public saveSummaryStat_result deepCopy() {
      return new saveSummaryStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveSummaryStat_result)
        return this.equals((saveSummaryStat_result)that);
      return false;
    }

    public boolean equals(saveSummaryStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveSummaryStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveSummaryStat_result typedOther = (saveSummaryStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveSummaryStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveSummaryStat_resultStandardSchemeFactory implements SchemeFactory {
      public saveSummaryStat_resultStandardScheme getScheme() {
        return new saveSummaryStat_resultStandardScheme();
      }
    }

    private static class saveSummaryStat_resultStandardScheme extends StandardScheme<saveSummaryStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveSummaryStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveSummaryStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveSummaryStat_resultTupleSchemeFactory implements SchemeFactory {
      public saveSummaryStat_resultTupleScheme getScheme() {
        return new saveSummaryStat_resultTupleScheme();
      }
    }

    private static class saveSummaryStat_resultTupleScheme extends TupleScheme<saveSummaryStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveSummaryStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveSummaryStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateSummaryStat_args implements org.apache.thrift.TBase<updateSummaryStat_args, updateSummaryStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSummaryStat_args");

    private static final org.apache.thrift.protocol.TField SUMMARY_STAT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("summaryStatView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSummaryStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSummaryStat_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.SummaryStatView summaryStatView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUMMARY_STAT_VIEW((short)1, "summaryStatView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SUMMARY_STAT_VIEW
            return SUMMARY_STAT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUMMARY_STAT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("summaryStatView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.SummaryStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSummaryStat_args.class, metaDataMap);
    }

    public updateSummaryStat_args() {
    }

    public updateSummaryStat_args(
      one.show.stat.thrift.view.SummaryStatView summaryStatView)
    {
      this();
      this.summaryStatView = summaryStatView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSummaryStat_args(updateSummaryStat_args other) {
      if (other.isSetSummaryStatView()) {
        this.summaryStatView = new one.show.stat.thrift.view.SummaryStatView(other.summaryStatView);
      }
    }

    public updateSummaryStat_args deepCopy() {
      return new updateSummaryStat_args(this);
    }

    @Override
    public void clear() {
      this.summaryStatView = null;
    }

    public one.show.stat.thrift.view.SummaryStatView getSummaryStatView() {
      return this.summaryStatView;
    }

    public updateSummaryStat_args setSummaryStatView(one.show.stat.thrift.view.SummaryStatView summaryStatView) {
      this.summaryStatView = summaryStatView;
      return this;
    }

    public void unsetSummaryStatView() {
      this.summaryStatView = null;
    }

    /** Returns true if field summaryStatView is set (has been assigned a value) and false otherwise */
    public boolean isSetSummaryStatView() {
      return this.summaryStatView != null;
    }

    public void setSummaryStatViewIsSet(boolean value) {
      if (!value) {
        this.summaryStatView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUMMARY_STAT_VIEW:
        if (value == null) {
          unsetSummaryStatView();
        } else {
          setSummaryStatView((one.show.stat.thrift.view.SummaryStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUMMARY_STAT_VIEW:
        return getSummaryStatView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUMMARY_STAT_VIEW:
        return isSetSummaryStatView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSummaryStat_args)
        return this.equals((updateSummaryStat_args)that);
      return false;
    }

    public boolean equals(updateSummaryStat_args that) {
      if (that == null)
        return false;

      boolean this_present_summaryStatView = true && this.isSetSummaryStatView();
      boolean that_present_summaryStatView = true && that.isSetSummaryStatView();
      if (this_present_summaryStatView || that_present_summaryStatView) {
        if (!(this_present_summaryStatView && that_present_summaryStatView))
          return false;
        if (!this.summaryStatView.equals(that.summaryStatView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSummaryStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSummaryStat_args typedOther = (updateSummaryStat_args)other;

      lastComparison = Boolean.valueOf(isSetSummaryStatView()).compareTo(typedOther.isSetSummaryStatView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSummaryStatView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summaryStatView, typedOther.summaryStatView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSummaryStat_args(");
      boolean first = true;

      sb.append("summaryStatView:");
      if (this.summaryStatView == null) {
        sb.append("null");
      } else {
        sb.append(this.summaryStatView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (summaryStatView != null) {
        summaryStatView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSummaryStat_argsStandardSchemeFactory implements SchemeFactory {
      public updateSummaryStat_argsStandardScheme getScheme() {
        return new updateSummaryStat_argsStandardScheme();
      }
    }

    private static class updateSummaryStat_argsStandardScheme extends StandardScheme<updateSummaryStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSummaryStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SUMMARY_STAT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.summaryStatView = new one.show.stat.thrift.view.SummaryStatView();
                struct.summaryStatView.read(iprot);
                struct.setSummaryStatViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSummaryStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.summaryStatView != null) {
          oprot.writeFieldBegin(SUMMARY_STAT_VIEW_FIELD_DESC);
          struct.summaryStatView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSummaryStat_argsTupleSchemeFactory implements SchemeFactory {
      public updateSummaryStat_argsTupleScheme getScheme() {
        return new updateSummaryStat_argsTupleScheme();
      }
    }

    private static class updateSummaryStat_argsTupleScheme extends TupleScheme<updateSummaryStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSummaryStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSummaryStatView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSummaryStatView()) {
          struct.summaryStatView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSummaryStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.summaryStatView = new one.show.stat.thrift.view.SummaryStatView();
          struct.summaryStatView.read(iprot);
          struct.setSummaryStatViewIsSet(true);
        }
      }
    }

  }

  public static class updateSummaryStat_result implements org.apache.thrift.TBase<updateSummaryStat_result, updateSummaryStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSummaryStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSummaryStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSummaryStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSummaryStat_result.class, metaDataMap);
    }

    public updateSummaryStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSummaryStat_result(updateSummaryStat_result other) {
    }

    public updateSummaryStat_result deepCopy() {
      return new updateSummaryStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSummaryStat_result)
        return this.equals((updateSummaryStat_result)that);
      return false;
    }

    public boolean equals(updateSummaryStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSummaryStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSummaryStat_result typedOther = (updateSummaryStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSummaryStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSummaryStat_resultStandardSchemeFactory implements SchemeFactory {
      public updateSummaryStat_resultStandardScheme getScheme() {
        return new updateSummaryStat_resultStandardScheme();
      }
    }

    private static class updateSummaryStat_resultStandardScheme extends StandardScheme<updateSummaryStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSummaryStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSummaryStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSummaryStat_resultTupleSchemeFactory implements SchemeFactory {
      public updateSummaryStat_resultTupleScheme getScheme() {
        return new updateSummaryStat_resultTupleScheme();
      }
    }

    private static class updateSummaryStat_resultTupleScheme extends TupleScheme<updateSummaryStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSummaryStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSummaryStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateSummaryStatLiveMax_args implements org.apache.thrift.TBase<updateSummaryStatLiveMax_args, updateSummaryStatLiveMax_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSummaryStatLiveMax_args");

    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSummaryStatLiveMax_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSummaryStatLiveMax_argsTupleSchemeFactory());
    }

    public int num; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM((short)1, "num"),
      TIME((short)2, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM
            return NUM;
          case 2: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSummaryStatLiveMax_args.class, metaDataMap);
    }

    public updateSummaryStatLiveMax_args() {
    }

    public updateSummaryStatLiveMax_args(
      int num,
      int time)
    {
      this();
      this.num = num;
      setNumIsSet(true);
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSummaryStatLiveMax_args(updateSummaryStatLiveMax_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num = other.num;
      this.time = other.time;
    }

    public updateSummaryStatLiveMax_args deepCopy() {
      return new updateSummaryStatLiveMax_args(this);
    }

    @Override
    public void clear() {
      setNumIsSet(false);
      this.num = 0;
      setTimeIsSet(false);
      this.time = 0;
    }

    public int getNum() {
      return this.num;
    }

    public updateSummaryStatLiveMax_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public int getTime() {
      return this.time;
    }

    public updateSummaryStatLiveMax_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM:
        return Integer.valueOf(getNum());

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM:
        return isSetNum();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSummaryStatLiveMax_args)
        return this.equals((updateSummaryStatLiveMax_args)that);
      return false;
    }

    public boolean equals(updateSummaryStatLiveMax_args that) {
      if (that == null)
        return false;

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSummaryStatLiveMax_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSummaryStatLiveMax_args typedOther = (updateSummaryStatLiveMax_args)other;

      lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, typedOther.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSummaryStatLiveMax_args(");
      boolean first = true;

      sb.append("num:");
      sb.append(this.num);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSummaryStatLiveMax_argsStandardSchemeFactory implements SchemeFactory {
      public updateSummaryStatLiveMax_argsStandardScheme getScheme() {
        return new updateSummaryStatLiveMax_argsStandardScheme();
      }
    }

    private static class updateSummaryStatLiveMax_argsStandardScheme extends StandardScheme<updateSummaryStatLiveMax_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSummaryStatLiveMax_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSummaryStatLiveMax_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSummaryStatLiveMax_argsTupleSchemeFactory implements SchemeFactory {
      public updateSummaryStatLiveMax_argsTupleScheme getScheme() {
        return new updateSummaryStatLiveMax_argsTupleScheme();
      }
    }

    private static class updateSummaryStatLiveMax_argsTupleScheme extends TupleScheme<updateSummaryStatLiveMax_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSummaryStatLiveMax_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSummaryStatLiveMax_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class updateSummaryStatLiveMax_result implements org.apache.thrift.TBase<updateSummaryStatLiveMax_result, updateSummaryStatLiveMax_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSummaryStatLiveMax_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSummaryStatLiveMax_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSummaryStatLiveMax_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSummaryStatLiveMax_result.class, metaDataMap);
    }

    public updateSummaryStatLiveMax_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSummaryStatLiveMax_result(updateSummaryStatLiveMax_result other) {
    }

    public updateSummaryStatLiveMax_result deepCopy() {
      return new updateSummaryStatLiveMax_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSummaryStatLiveMax_result)
        return this.equals((updateSummaryStatLiveMax_result)that);
      return false;
    }

    public boolean equals(updateSummaryStatLiveMax_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSummaryStatLiveMax_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSummaryStatLiveMax_result typedOther = (updateSummaryStatLiveMax_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSummaryStatLiveMax_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSummaryStatLiveMax_resultStandardSchemeFactory implements SchemeFactory {
      public updateSummaryStatLiveMax_resultStandardScheme getScheme() {
        return new updateSummaryStatLiveMax_resultStandardScheme();
      }
    }

    private static class updateSummaryStatLiveMax_resultStandardScheme extends StandardScheme<updateSummaryStatLiveMax_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSummaryStatLiveMax_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSummaryStatLiveMax_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSummaryStatLiveMax_resultTupleSchemeFactory implements SchemeFactory {
      public updateSummaryStatLiveMax_resultTupleScheme getScheme() {
        return new updateSummaryStatLiveMax_resultTupleScheme();
      }
    }

    private static class updateSummaryStatLiveMax_resultTupleScheme extends TupleScheme<updateSummaryStatLiveMax_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSummaryStatLiveMax_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSummaryStatLiveMax_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRankUserDaily_args implements org.apache.thrift.TBase<getRankUserDaily_args, getRankUserDaily_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRankUserDaily_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRankUserDaily_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRankUserDaily_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int type; // required
    public int date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      TYPE((short)2, "type"),
      DATE((short)3, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // TYPE
            return TYPE;
          case 3: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private static final int __DATE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRankUserDaily_args.class, metaDataMap);
    }

    public getRankUserDaily_args() {
    }

    public getRankUserDaily_args(
      long uid,
      int type,
      int date)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRankUserDaily_args(getRankUserDaily_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.type = other.type;
      this.date = other.date;
    }

    public getRankUserDaily_args deepCopy() {
      return new getRankUserDaily_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setTypeIsSet(false);
      this.type = 0;
      setDateIsSet(false);
      this.date = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public getRankUserDaily_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public getRankUserDaily_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getDate() {
      return this.date;
    }

    public getRankUserDaily_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case TYPE:
        return Integer.valueOf(getType());

      case DATE:
        return Integer.valueOf(getDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case TYPE:
        return isSetType();
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRankUserDaily_args)
        return this.equals((getRankUserDaily_args)that);
      return false;
    }

    public boolean equals(getRankUserDaily_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRankUserDaily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRankUserDaily_args typedOther = (getRankUserDaily_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRankUserDaily_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRankUserDaily_argsStandardSchemeFactory implements SchemeFactory {
      public getRankUserDaily_argsStandardScheme getScheme() {
        return new getRankUserDaily_argsStandardScheme();
      }
    }

    private static class getRankUserDaily_argsStandardScheme extends StandardScheme<getRankUserDaily_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRankUserDaily_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRankUserDaily_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRankUserDaily_argsTupleSchemeFactory implements SchemeFactory {
      public getRankUserDaily_argsTupleScheme getScheme() {
        return new getRankUserDaily_argsTupleScheme();
      }
    }

    private static class getRankUserDaily_argsTupleScheme extends TupleScheme<getRankUserDaily_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRankUserDaily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetDate()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRankUserDaily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class getRankUserDaily_result implements org.apache.thrift.TBase<getRankUserDaily_result, getRankUserDaily_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRankUserDaily_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRankUserDaily_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRankUserDaily_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.RankUserDailyView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.RankUserDailyView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRankUserDaily_result.class, metaDataMap);
    }

    public getRankUserDaily_result() {
    }

    public getRankUserDaily_result(
      one.show.stat.thrift.view.RankUserDailyView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRankUserDaily_result(getRankUserDaily_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.RankUserDailyView(other.success);
      }
    }

    public getRankUserDaily_result deepCopy() {
      return new getRankUserDaily_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.RankUserDailyView getSuccess() {
      return this.success;
    }

    public getRankUserDaily_result setSuccess(one.show.stat.thrift.view.RankUserDailyView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.RankUserDailyView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRankUserDaily_result)
        return this.equals((getRankUserDaily_result)that);
      return false;
    }

    public boolean equals(getRankUserDaily_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRankUserDaily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRankUserDaily_result typedOther = (getRankUserDaily_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRankUserDaily_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRankUserDaily_resultStandardSchemeFactory implements SchemeFactory {
      public getRankUserDaily_resultStandardScheme getScheme() {
        return new getRankUserDaily_resultStandardScheme();
      }
    }

    private static class getRankUserDaily_resultStandardScheme extends StandardScheme<getRankUserDaily_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRankUserDaily_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.RankUserDailyView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRankUserDaily_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRankUserDaily_resultTupleSchemeFactory implements SchemeFactory {
      public getRankUserDaily_resultTupleScheme getScheme() {
        return new getRankUserDaily_resultTupleScheme();
      }
    }

    private static class getRankUserDaily_resultTupleScheme extends TupleScheme<getRankUserDaily_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRankUserDaily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRankUserDaily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.RankUserDailyView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class savetRankUserDaily_args implements org.apache.thrift.TBase<savetRankUserDaily_args, savetRankUserDaily_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("savetRankUserDaily_args");

    private static final org.apache.thrift.protocol.TField RANK_USER_DAILY_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("rankUserDailyView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new savetRankUserDaily_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new savetRankUserDaily_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.RankUserDailyView rankUserDailyView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RANK_USER_DAILY_VIEW((short)1, "rankUserDailyView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RANK_USER_DAILY_VIEW
            return RANK_USER_DAILY_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RANK_USER_DAILY_VIEW, new org.apache.thrift.meta_data.FieldMetaData("rankUserDailyView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.RankUserDailyView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(savetRankUserDaily_args.class, metaDataMap);
    }

    public savetRankUserDaily_args() {
    }

    public savetRankUserDaily_args(
      one.show.stat.thrift.view.RankUserDailyView rankUserDailyView)
    {
      this();
      this.rankUserDailyView = rankUserDailyView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public savetRankUserDaily_args(savetRankUserDaily_args other) {
      if (other.isSetRankUserDailyView()) {
        this.rankUserDailyView = new one.show.stat.thrift.view.RankUserDailyView(other.rankUserDailyView);
      }
    }

    public savetRankUserDaily_args deepCopy() {
      return new savetRankUserDaily_args(this);
    }

    @Override
    public void clear() {
      this.rankUserDailyView = null;
    }

    public one.show.stat.thrift.view.RankUserDailyView getRankUserDailyView() {
      return this.rankUserDailyView;
    }

    public savetRankUserDaily_args setRankUserDailyView(one.show.stat.thrift.view.RankUserDailyView rankUserDailyView) {
      this.rankUserDailyView = rankUserDailyView;
      return this;
    }

    public void unsetRankUserDailyView() {
      this.rankUserDailyView = null;
    }

    /** Returns true if field rankUserDailyView is set (has been assigned a value) and false otherwise */
    public boolean isSetRankUserDailyView() {
      return this.rankUserDailyView != null;
    }

    public void setRankUserDailyViewIsSet(boolean value) {
      if (!value) {
        this.rankUserDailyView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RANK_USER_DAILY_VIEW:
        if (value == null) {
          unsetRankUserDailyView();
        } else {
          setRankUserDailyView((one.show.stat.thrift.view.RankUserDailyView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RANK_USER_DAILY_VIEW:
        return getRankUserDailyView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RANK_USER_DAILY_VIEW:
        return isSetRankUserDailyView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof savetRankUserDaily_args)
        return this.equals((savetRankUserDaily_args)that);
      return false;
    }

    public boolean equals(savetRankUserDaily_args that) {
      if (that == null)
        return false;

      boolean this_present_rankUserDailyView = true && this.isSetRankUserDailyView();
      boolean that_present_rankUserDailyView = true && that.isSetRankUserDailyView();
      if (this_present_rankUserDailyView || that_present_rankUserDailyView) {
        if (!(this_present_rankUserDailyView && that_present_rankUserDailyView))
          return false;
        if (!this.rankUserDailyView.equals(that.rankUserDailyView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(savetRankUserDaily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      savetRankUserDaily_args typedOther = (savetRankUserDaily_args)other;

      lastComparison = Boolean.valueOf(isSetRankUserDailyView()).compareTo(typedOther.isSetRankUserDailyView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRankUserDailyView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rankUserDailyView, typedOther.rankUserDailyView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("savetRankUserDaily_args(");
      boolean first = true;

      sb.append("rankUserDailyView:");
      if (this.rankUserDailyView == null) {
        sb.append("null");
      } else {
        sb.append(this.rankUserDailyView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rankUserDailyView != null) {
        rankUserDailyView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class savetRankUserDaily_argsStandardSchemeFactory implements SchemeFactory {
      public savetRankUserDaily_argsStandardScheme getScheme() {
        return new savetRankUserDaily_argsStandardScheme();
      }
    }

    private static class savetRankUserDaily_argsStandardScheme extends StandardScheme<savetRankUserDaily_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, savetRankUserDaily_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RANK_USER_DAILY_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rankUserDailyView = new one.show.stat.thrift.view.RankUserDailyView();
                struct.rankUserDailyView.read(iprot);
                struct.setRankUserDailyViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, savetRankUserDaily_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rankUserDailyView != null) {
          oprot.writeFieldBegin(RANK_USER_DAILY_VIEW_FIELD_DESC);
          struct.rankUserDailyView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class savetRankUserDaily_argsTupleSchemeFactory implements SchemeFactory {
      public savetRankUserDaily_argsTupleScheme getScheme() {
        return new savetRankUserDaily_argsTupleScheme();
      }
    }

    private static class savetRankUserDaily_argsTupleScheme extends TupleScheme<savetRankUserDaily_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, savetRankUserDaily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRankUserDailyView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRankUserDailyView()) {
          struct.rankUserDailyView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, savetRankUserDaily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rankUserDailyView = new one.show.stat.thrift.view.RankUserDailyView();
          struct.rankUserDailyView.read(iprot);
          struct.setRankUserDailyViewIsSet(true);
        }
      }
    }

  }

  public static class savetRankUserDaily_result implements org.apache.thrift.TBase<savetRankUserDaily_result, savetRankUserDaily_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("savetRankUserDaily_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new savetRankUserDaily_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new savetRankUserDaily_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(savetRankUserDaily_result.class, metaDataMap);
    }

    public savetRankUserDaily_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public savetRankUserDaily_result(savetRankUserDaily_result other) {
    }

    public savetRankUserDaily_result deepCopy() {
      return new savetRankUserDaily_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof savetRankUserDaily_result)
        return this.equals((savetRankUserDaily_result)that);
      return false;
    }

    public boolean equals(savetRankUserDaily_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(savetRankUserDaily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      savetRankUserDaily_result typedOther = (savetRankUserDaily_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("savetRankUserDaily_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class savetRankUserDaily_resultStandardSchemeFactory implements SchemeFactory {
      public savetRankUserDaily_resultStandardScheme getScheme() {
        return new savetRankUserDaily_resultStandardScheme();
      }
    }

    private static class savetRankUserDaily_resultStandardScheme extends StandardScheme<savetRankUserDaily_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, savetRankUserDaily_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, savetRankUserDaily_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class savetRankUserDaily_resultTupleSchemeFactory implements SchemeFactory {
      public savetRankUserDaily_resultTupleScheme getScheme() {
        return new savetRankUserDaily_resultTupleScheme();
      }
    }

    private static class savetRankUserDaily_resultTupleScheme extends TupleScheme<savetRankUserDaily_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, savetRankUserDaily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, savetRankUserDaily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateRankUserDaily_args implements org.apache.thrift.TBase<updateRankUserDaily_args, updateRankUserDaily_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRankUserDaily_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRankUserDaily_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRankUserDaily_argsTupleSchemeFactory());
    }

    public long id; // required
    public double number; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      NUMBER((short)2, "number");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // NUMBER
            return NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __NUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRankUserDaily_args.class, metaDataMap);
    }

    public updateRankUserDaily_args() {
    }

    public updateRankUserDaily_args(
      long id,
      double number)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.number = number;
      setNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRankUserDaily_args(updateRankUserDaily_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      this.number = other.number;
    }

    public updateRankUserDaily_args deepCopy() {
      return new updateRankUserDaily_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      setNumberIsSet(false);
      this.number = 0.0;
    }

    public long getId() {
      return this.id;
    }

    public updateRankUserDaily_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public double getNumber() {
      return this.number;
    }

    public updateRankUserDaily_args setNumber(double number) {
      this.number = number;
      setNumberIsSet(true);
      return this;
    }

    public void unsetNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          setNumber((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case NUMBER:
        return Double.valueOf(getNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case NUMBER:
        return isSetNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRankUserDaily_args)
        return this.equals((updateRankUserDaily_args)that);
      return false;
    }

    public boolean equals(updateRankUserDaily_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_number = true;
      boolean that_present_number = true;
      if (this_present_number || that_present_number) {
        if (!(this_present_number && that_present_number))
          return false;
        if (this.number != that.number)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRankUserDaily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRankUserDaily_args typedOther = (updateRankUserDaily_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRankUserDaily_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRankUserDaily_argsStandardSchemeFactory implements SchemeFactory {
      public updateRankUserDaily_argsStandardScheme getScheme() {
        return new updateRankUserDaily_argsStandardScheme();
      }
    }

    private static class updateRankUserDaily_argsStandardScheme extends StandardScheme<updateRankUserDaily_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRankUserDaily_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.number = iprot.readDouble();
                struct.setNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRankUserDaily_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeDouble(struct.number);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRankUserDaily_argsTupleSchemeFactory implements SchemeFactory {
      public updateRankUserDaily_argsTupleScheme getScheme() {
        return new updateRankUserDaily_argsTupleScheme();
      }
    }

    private static class updateRankUserDaily_argsTupleScheme extends TupleScheme<updateRankUserDaily_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRankUserDaily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetNumber()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetNumber()) {
          oprot.writeDouble(struct.number);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRankUserDaily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.number = iprot.readDouble();
          struct.setNumberIsSet(true);
        }
      }
    }

  }

  public static class updateRankUserDaily_result implements org.apache.thrift.TBase<updateRankUserDaily_result, updateRankUserDaily_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRankUserDaily_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRankUserDaily_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRankUserDaily_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRankUserDaily_result.class, metaDataMap);
    }

    public updateRankUserDaily_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRankUserDaily_result(updateRankUserDaily_result other) {
    }

    public updateRankUserDaily_result deepCopy() {
      return new updateRankUserDaily_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRankUserDaily_result)
        return this.equals((updateRankUserDaily_result)that);
      return false;
    }

    public boolean equals(updateRankUserDaily_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRankUserDaily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRankUserDaily_result typedOther = (updateRankUserDaily_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRankUserDaily_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRankUserDaily_resultStandardSchemeFactory implements SchemeFactory {
      public updateRankUserDaily_resultStandardScheme getScheme() {
        return new updateRankUserDaily_resultStandardScheme();
      }
    }

    private static class updateRankUserDaily_resultStandardScheme extends StandardScheme<updateRankUserDaily_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRankUserDaily_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRankUserDaily_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRankUserDaily_resultTupleSchemeFactory implements SchemeFactory {
      public updateRankUserDaily_resultTupleScheme getScheme() {
        return new updateRankUserDaily_resultTupleScheme();
      }
    }

    private static class updateRankUserDaily_resultTupleScheme extends TupleScheme<updateRankUserDaily_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRankUserDaily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRankUserDaily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findRankUserList_args implements org.apache.thrift.TBase<findRankUserList_args, findRankUserList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRankUserList_args");

    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRankUserList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRankUserList_argsTupleSchemeFactory());
    }

    public int beginTime; // required
    public int endTime; // required
    public int type; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEGIN_TIME((short)1, "beginTime"),
      END_TIME((short)2, "endTime"),
      TYPE((short)3, "type"),
      START((short)4, "start"),
      COUNT((short)5, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEGIN_TIME
            return BEGIN_TIME;
          case 2: // END_TIME
            return END_TIME;
          case 3: // TYPE
            return TYPE;
          case 4: // START
            return START;
          case 5: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __START_ISSET_ID = 3;
    private static final int __COUNT_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRankUserList_args.class, metaDataMap);
    }

    public findRankUserList_args() {
    }

    public findRankUserList_args(
      int beginTime,
      int endTime,
      int type,
      int start,
      int count)
    {
      this();
      this.beginTime = beginTime;
      setBeginTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRankUserList_args(findRankUserList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.beginTime = other.beginTime;
      this.endTime = other.endTime;
      this.type = other.type;
      this.start = other.start;
      this.count = other.count;
    }

    public findRankUserList_args deepCopy() {
      return new findRankUserList_args(this);
    }

    @Override
    public void clear() {
      setBeginTimeIsSet(false);
      this.beginTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      setTypeIsSet(false);
      this.type = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getBeginTime() {
      return this.beginTime;
    }

    public findRankUserList_args setBeginTime(int beginTime) {
      this.beginTime = beginTime;
      setBeginTimeIsSet(true);
      return this;
    }

    public void unsetBeginTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINTIME_ISSET_ID);
    }

    public void setBeginTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public findRankUserList_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public findRankUserList_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findRankUserList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findRankUserList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BEGIN_TIME:
        if (value == null) {
          unsetBeginTime();
        } else {
          setBeginTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BEGIN_TIME:
        return Integer.valueOf(getBeginTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      case TYPE:
        return Integer.valueOf(getType());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BEGIN_TIME:
        return isSetBeginTime();
      case END_TIME:
        return isSetEndTime();
      case TYPE:
        return isSetType();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRankUserList_args)
        return this.equals((findRankUserList_args)that);
      return false;
    }

    public boolean equals(findRankUserList_args that) {
      if (that == null)
        return false;

      boolean this_present_beginTime = true;
      boolean that_present_beginTime = true;
      if (this_present_beginTime || that_present_beginTime) {
        if (!(this_present_beginTime && that_present_beginTime))
          return false;
        if (this.beginTime != that.beginTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRankUserList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRankUserList_args typedOther = (findRankUserList_args)other;

      lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRankUserList_args(");
      boolean first = true;

      sb.append("beginTime:");
      sb.append(this.beginTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRankUserList_argsStandardSchemeFactory implements SchemeFactory {
      public findRankUserList_argsStandardScheme getScheme() {
        return new findRankUserList_argsStandardScheme();
      }
    }

    private static class findRankUserList_argsStandardScheme extends StandardScheme<findRankUserList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRankUserList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BEGIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.beginTime = iprot.readI32();
                struct.setBeginTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRankUserList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
        oprot.writeI32(struct.beginTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRankUserList_argsTupleSchemeFactory implements SchemeFactory {
      public findRankUserList_argsTupleScheme getScheme() {
        return new findRankUserList_argsTupleScheme();
      }
    }

    private static class findRankUserList_argsTupleScheme extends TupleScheme<findRankUserList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRankUserList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBeginTime()) {
          optionals.set(0);
        }
        if (struct.isSetEndTime()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetCount()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetBeginTime()) {
          oprot.writeI32(struct.beginTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRankUserList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.beginTime = iprot.readI32();
          struct.setBeginTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findRankUserList_result implements org.apache.thrift.TBase<findRankUserList_result, findRankUserList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRankUserList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRankUserList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRankUserList_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.RankUserListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.RankUserListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRankUserList_result.class, metaDataMap);
    }

    public findRankUserList_result() {
    }

    public findRankUserList_result(
      one.show.stat.thrift.view.RankUserListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRankUserList_result(findRankUserList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.RankUserListView(other.success);
      }
    }

    public findRankUserList_result deepCopy() {
      return new findRankUserList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.RankUserListView getSuccess() {
      return this.success;
    }

    public findRankUserList_result setSuccess(one.show.stat.thrift.view.RankUserListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.RankUserListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRankUserList_result)
        return this.equals((findRankUserList_result)that);
      return false;
    }

    public boolean equals(findRankUserList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRankUserList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRankUserList_result typedOther = (findRankUserList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRankUserList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRankUserList_resultStandardSchemeFactory implements SchemeFactory {
      public findRankUserList_resultStandardScheme getScheme() {
        return new findRankUserList_resultStandardScheme();
      }
    }

    private static class findRankUserList_resultStandardScheme extends StandardScheme<findRankUserList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRankUserList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.RankUserListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRankUserList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRankUserList_resultTupleSchemeFactory implements SchemeFactory {
      public findRankUserList_resultTupleScheme getScheme() {
        return new findRankUserList_resultTupleScheme();
      }
    }

    private static class findRankUserList_resultTupleScheme extends TupleScheme<findRankUserList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRankUserList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRankUserList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.RankUserListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveLog_args implements org.apache.thrift.TBase<saveLog_args, saveLog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveLog_args");

    private static final org.apache.thrift.protocol.TField LOG_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("logView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveLog_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.LogView logView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_VIEW((short)1, "logView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_VIEW
            return LOG_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_VIEW, new org.apache.thrift.meta_data.FieldMetaData("logView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.LogView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveLog_args.class, metaDataMap);
    }

    public saveLog_args() {
    }

    public saveLog_args(
      one.show.stat.thrift.view.LogView logView)
    {
      this();
      this.logView = logView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveLog_args(saveLog_args other) {
      if (other.isSetLogView()) {
        this.logView = new one.show.stat.thrift.view.LogView(other.logView);
      }
    }

    public saveLog_args deepCopy() {
      return new saveLog_args(this);
    }

    @Override
    public void clear() {
      this.logView = null;
    }

    public one.show.stat.thrift.view.LogView getLogView() {
      return this.logView;
    }

    public saveLog_args setLogView(one.show.stat.thrift.view.LogView logView) {
      this.logView = logView;
      return this;
    }

    public void unsetLogView() {
      this.logView = null;
    }

    /** Returns true if field logView is set (has been assigned a value) and false otherwise */
    public boolean isSetLogView() {
      return this.logView != null;
    }

    public void setLogViewIsSet(boolean value) {
      if (!value) {
        this.logView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_VIEW:
        if (value == null) {
          unsetLogView();
        } else {
          setLogView((one.show.stat.thrift.view.LogView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_VIEW:
        return getLogView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_VIEW:
        return isSetLogView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveLog_args)
        return this.equals((saveLog_args)that);
      return false;
    }

    public boolean equals(saveLog_args that) {
      if (that == null)
        return false;

      boolean this_present_logView = true && this.isSetLogView();
      boolean that_present_logView = true && that.isSetLogView();
      if (this_present_logView || that_present_logView) {
        if (!(this_present_logView && that_present_logView))
          return false;
        if (!this.logView.equals(that.logView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveLog_args typedOther = (saveLog_args)other;

      lastComparison = Boolean.valueOf(isSetLogView()).compareTo(typedOther.isSetLogView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logView, typedOther.logView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveLog_args(");
      boolean first = true;

      sb.append("logView:");
      if (this.logView == null) {
        sb.append("null");
      } else {
        sb.append(this.logView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (logView != null) {
        logView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveLog_argsStandardSchemeFactory implements SchemeFactory {
      public saveLog_argsStandardScheme getScheme() {
        return new saveLog_argsStandardScheme();
      }
    }

    private static class saveLog_argsStandardScheme extends StandardScheme<saveLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.logView = new one.show.stat.thrift.view.LogView();
                struct.logView.read(iprot);
                struct.setLogViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.logView != null) {
          oprot.writeFieldBegin(LOG_VIEW_FIELD_DESC);
          struct.logView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveLog_argsTupleSchemeFactory implements SchemeFactory {
      public saveLog_argsTupleScheme getScheme() {
        return new saveLog_argsTupleScheme();
      }
    }

    private static class saveLog_argsTupleScheme extends TupleScheme<saveLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLogView()) {
          struct.logView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.logView = new one.show.stat.thrift.view.LogView();
          struct.logView.read(iprot);
          struct.setLogViewIsSet(true);
        }
      }
    }

  }

  public static class saveLog_result implements org.apache.thrift.TBase<saveLog_result, saveLog_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveLog_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveLog_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveLog_result.class, metaDataMap);
    }

    public saveLog_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveLog_result(saveLog_result other) {
    }

    public saveLog_result deepCopy() {
      return new saveLog_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveLog_result)
        return this.equals((saveLog_result)that);
      return false;
    }

    public boolean equals(saveLog_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveLog_result typedOther = (saveLog_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveLog_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveLog_resultStandardSchemeFactory implements SchemeFactory {
      public saveLog_resultStandardScheme getScheme() {
        return new saveLog_resultStandardScheme();
      }
    }

    private static class saveLog_resultStandardScheme extends StandardScheme<saveLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveLog_resultTupleSchemeFactory implements SchemeFactory {
      public saveLog_resultTupleScheme getScheme() {
        return new saveLog_resultTupleScheme();
      }
    }

    private static class saveLog_resultTupleScheme extends TupleScheme<saveLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveActionLog_args implements org.apache.thrift.TBase<saveActionLog_args, saveActionLog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveActionLog_args");

    private static final org.apache.thrift.protocol.TField ACTION_LOG_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("actionLogView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveActionLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveActionLog_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.ActionLogView actionLogView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTION_LOG_VIEW((short)1, "actionLogView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTION_LOG_VIEW
            return ACTION_LOG_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTION_LOG_VIEW, new org.apache.thrift.meta_data.FieldMetaData("actionLogView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.ActionLogView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveActionLog_args.class, metaDataMap);
    }

    public saveActionLog_args() {
    }

    public saveActionLog_args(
      one.show.stat.thrift.view.ActionLogView actionLogView)
    {
      this();
      this.actionLogView = actionLogView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveActionLog_args(saveActionLog_args other) {
      if (other.isSetActionLogView()) {
        this.actionLogView = new one.show.stat.thrift.view.ActionLogView(other.actionLogView);
      }
    }

    public saveActionLog_args deepCopy() {
      return new saveActionLog_args(this);
    }

    @Override
    public void clear() {
      this.actionLogView = null;
    }

    public one.show.stat.thrift.view.ActionLogView getActionLogView() {
      return this.actionLogView;
    }

    public saveActionLog_args setActionLogView(one.show.stat.thrift.view.ActionLogView actionLogView) {
      this.actionLogView = actionLogView;
      return this;
    }

    public void unsetActionLogView() {
      this.actionLogView = null;
    }

    /** Returns true if field actionLogView is set (has been assigned a value) and false otherwise */
    public boolean isSetActionLogView() {
      return this.actionLogView != null;
    }

    public void setActionLogViewIsSet(boolean value) {
      if (!value) {
        this.actionLogView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTION_LOG_VIEW:
        if (value == null) {
          unsetActionLogView();
        } else {
          setActionLogView((one.show.stat.thrift.view.ActionLogView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTION_LOG_VIEW:
        return getActionLogView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTION_LOG_VIEW:
        return isSetActionLogView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveActionLog_args)
        return this.equals((saveActionLog_args)that);
      return false;
    }

    public boolean equals(saveActionLog_args that) {
      if (that == null)
        return false;

      boolean this_present_actionLogView = true && this.isSetActionLogView();
      boolean that_present_actionLogView = true && that.isSetActionLogView();
      if (this_present_actionLogView || that_present_actionLogView) {
        if (!(this_present_actionLogView && that_present_actionLogView))
          return false;
        if (!this.actionLogView.equals(that.actionLogView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveActionLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveActionLog_args typedOther = (saveActionLog_args)other;

      lastComparison = Boolean.valueOf(isSetActionLogView()).compareTo(typedOther.isSetActionLogView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionLogView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionLogView, typedOther.actionLogView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveActionLog_args(");
      boolean first = true;

      sb.append("actionLogView:");
      if (this.actionLogView == null) {
        sb.append("null");
      } else {
        sb.append(this.actionLogView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (actionLogView != null) {
        actionLogView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveActionLog_argsStandardSchemeFactory implements SchemeFactory {
      public saveActionLog_argsStandardScheme getScheme() {
        return new saveActionLog_argsStandardScheme();
      }
    }

    private static class saveActionLog_argsStandardScheme extends StandardScheme<saveActionLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveActionLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTION_LOG_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.actionLogView = new one.show.stat.thrift.view.ActionLogView();
                struct.actionLogView.read(iprot);
                struct.setActionLogViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveActionLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.actionLogView != null) {
          oprot.writeFieldBegin(ACTION_LOG_VIEW_FIELD_DESC);
          struct.actionLogView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveActionLog_argsTupleSchemeFactory implements SchemeFactory {
      public saveActionLog_argsTupleScheme getScheme() {
        return new saveActionLog_argsTupleScheme();
      }
    }

    private static class saveActionLog_argsTupleScheme extends TupleScheme<saveActionLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveActionLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActionLogView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActionLogView()) {
          struct.actionLogView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveActionLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.actionLogView = new one.show.stat.thrift.view.ActionLogView();
          struct.actionLogView.read(iprot);
          struct.setActionLogViewIsSet(true);
        }
      }
    }

  }

  public static class saveActionLog_result implements org.apache.thrift.TBase<saveActionLog_result, saveActionLog_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveActionLog_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveActionLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveActionLog_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveActionLog_result.class, metaDataMap);
    }

    public saveActionLog_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveActionLog_result(saveActionLog_result other) {
    }

    public saveActionLog_result deepCopy() {
      return new saveActionLog_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveActionLog_result)
        return this.equals((saveActionLog_result)that);
      return false;
    }

    public boolean equals(saveActionLog_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveActionLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveActionLog_result typedOther = (saveActionLog_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveActionLog_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveActionLog_resultStandardSchemeFactory implements SchemeFactory {
      public saveActionLog_resultStandardScheme getScheme() {
        return new saveActionLog_resultStandardScheme();
      }
    }

    private static class saveActionLog_resultStandardScheme extends StandardScheme<saveActionLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveActionLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveActionLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveActionLog_resultTupleSchemeFactory implements SchemeFactory {
      public saveActionLog_resultTupleScheme getScheme() {
        return new saveActionLog_resultTupleScheme();
      }
    }

    private static class saveActionLog_resultTupleScheme extends TupleScheme<saveActionLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveActionLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveActionLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findRobotStatDailyByDate_args implements org.apache.thrift.TBase<findRobotStatDailyByDate_args, findRobotStatDailyByDate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRobotStatDailyByDate_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRobotStatDailyByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRobotStatDailyByDate_argsTupleSchemeFactory());
    }

    public int date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRobotStatDailyByDate_args.class, metaDataMap);
    }

    public findRobotStatDailyByDate_args() {
    }

    public findRobotStatDailyByDate_args(
      int date)
    {
      this();
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRobotStatDailyByDate_args(findRobotStatDailyByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.date = other.date;
    }

    public findRobotStatDailyByDate_args deepCopy() {
      return new findRobotStatDailyByDate_args(this);
    }

    @Override
    public void clear() {
      setDateIsSet(false);
      this.date = 0;
    }

    public int getDate() {
      return this.date;
    }

    public findRobotStatDailyByDate_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return Integer.valueOf(getDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRobotStatDailyByDate_args)
        return this.equals((findRobotStatDailyByDate_args)that);
      return false;
    }

    public boolean equals(findRobotStatDailyByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRobotStatDailyByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRobotStatDailyByDate_args typedOther = (findRobotStatDailyByDate_args)other;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRobotStatDailyByDate_args(");
      boolean first = true;

      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRobotStatDailyByDate_argsStandardSchemeFactory implements SchemeFactory {
      public findRobotStatDailyByDate_argsStandardScheme getScheme() {
        return new findRobotStatDailyByDate_argsStandardScheme();
      }
    }

    private static class findRobotStatDailyByDate_argsStandardScheme extends StandardScheme<findRobotStatDailyByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRobotStatDailyByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRobotStatDailyByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRobotStatDailyByDate_argsTupleSchemeFactory implements SchemeFactory {
      public findRobotStatDailyByDate_argsTupleScheme getScheme() {
        return new findRobotStatDailyByDate_argsTupleScheme();
      }
    }

    private static class findRobotStatDailyByDate_argsTupleScheme extends TupleScheme<findRobotStatDailyByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRobotStatDailyByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRobotStatDailyByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class findRobotStatDailyByDate_result implements org.apache.thrift.TBase<findRobotStatDailyByDate_result, findRobotStatDailyByDate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRobotStatDailyByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRobotStatDailyByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRobotStatDailyByDate_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.RobotStatDailyView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.RobotStatDailyView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRobotStatDailyByDate_result.class, metaDataMap);
    }

    public findRobotStatDailyByDate_result() {
    }

    public findRobotStatDailyByDate_result(
      one.show.stat.thrift.view.RobotStatDailyView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRobotStatDailyByDate_result(findRobotStatDailyByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.RobotStatDailyView(other.success);
      }
    }

    public findRobotStatDailyByDate_result deepCopy() {
      return new findRobotStatDailyByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.RobotStatDailyView getSuccess() {
      return this.success;
    }

    public findRobotStatDailyByDate_result setSuccess(one.show.stat.thrift.view.RobotStatDailyView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.RobotStatDailyView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRobotStatDailyByDate_result)
        return this.equals((findRobotStatDailyByDate_result)that);
      return false;
    }

    public boolean equals(findRobotStatDailyByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRobotStatDailyByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRobotStatDailyByDate_result typedOther = (findRobotStatDailyByDate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRobotStatDailyByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRobotStatDailyByDate_resultStandardSchemeFactory implements SchemeFactory {
      public findRobotStatDailyByDate_resultStandardScheme getScheme() {
        return new findRobotStatDailyByDate_resultStandardScheme();
      }
    }

    private static class findRobotStatDailyByDate_resultStandardScheme extends StandardScheme<findRobotStatDailyByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRobotStatDailyByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.RobotStatDailyView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRobotStatDailyByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRobotStatDailyByDate_resultTupleSchemeFactory implements SchemeFactory {
      public findRobotStatDailyByDate_resultTupleScheme getScheme() {
        return new findRobotStatDailyByDate_resultTupleScheme();
      }
    }

    private static class findRobotStatDailyByDate_resultTupleScheme extends TupleScheme<findRobotStatDailyByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRobotStatDailyByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRobotStatDailyByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.RobotStatDailyView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveRobotStatDaily_args implements org.apache.thrift.TBase<saveRobotStatDaily_args, saveRobotStatDaily_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRobotStatDaily_args");

    private static final org.apache.thrift.protocol.TField ROBOT_STAT_DAILY_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("robotStatDailyView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRobotStatDaily_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRobotStatDaily_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROBOT_STAT_DAILY_VIEW((short)1, "robotStatDailyView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROBOT_STAT_DAILY_VIEW
            return ROBOT_STAT_DAILY_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROBOT_STAT_DAILY_VIEW, new org.apache.thrift.meta_data.FieldMetaData("robotStatDailyView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.RobotStatDailyView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRobotStatDaily_args.class, metaDataMap);
    }

    public saveRobotStatDaily_args() {
    }

    public saveRobotStatDaily_args(
      one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView)
    {
      this();
      this.robotStatDailyView = robotStatDailyView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRobotStatDaily_args(saveRobotStatDaily_args other) {
      if (other.isSetRobotStatDailyView()) {
        this.robotStatDailyView = new one.show.stat.thrift.view.RobotStatDailyView(other.robotStatDailyView);
      }
    }

    public saveRobotStatDaily_args deepCopy() {
      return new saveRobotStatDaily_args(this);
    }

    @Override
    public void clear() {
      this.robotStatDailyView = null;
    }

    public one.show.stat.thrift.view.RobotStatDailyView getRobotStatDailyView() {
      return this.robotStatDailyView;
    }

    public saveRobotStatDaily_args setRobotStatDailyView(one.show.stat.thrift.view.RobotStatDailyView robotStatDailyView) {
      this.robotStatDailyView = robotStatDailyView;
      return this;
    }

    public void unsetRobotStatDailyView() {
      this.robotStatDailyView = null;
    }

    /** Returns true if field robotStatDailyView is set (has been assigned a value) and false otherwise */
    public boolean isSetRobotStatDailyView() {
      return this.robotStatDailyView != null;
    }

    public void setRobotStatDailyViewIsSet(boolean value) {
      if (!value) {
        this.robotStatDailyView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROBOT_STAT_DAILY_VIEW:
        if (value == null) {
          unsetRobotStatDailyView();
        } else {
          setRobotStatDailyView((one.show.stat.thrift.view.RobotStatDailyView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROBOT_STAT_DAILY_VIEW:
        return getRobotStatDailyView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROBOT_STAT_DAILY_VIEW:
        return isSetRobotStatDailyView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRobotStatDaily_args)
        return this.equals((saveRobotStatDaily_args)that);
      return false;
    }

    public boolean equals(saveRobotStatDaily_args that) {
      if (that == null)
        return false;

      boolean this_present_robotStatDailyView = true && this.isSetRobotStatDailyView();
      boolean that_present_robotStatDailyView = true && that.isSetRobotStatDailyView();
      if (this_present_robotStatDailyView || that_present_robotStatDailyView) {
        if (!(this_present_robotStatDailyView && that_present_robotStatDailyView))
          return false;
        if (!this.robotStatDailyView.equals(that.robotStatDailyView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveRobotStatDaily_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveRobotStatDaily_args typedOther = (saveRobotStatDaily_args)other;

      lastComparison = Boolean.valueOf(isSetRobotStatDailyView()).compareTo(typedOther.isSetRobotStatDailyView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRobotStatDailyView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robotStatDailyView, typedOther.robotStatDailyView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRobotStatDaily_args(");
      boolean first = true;

      sb.append("robotStatDailyView:");
      if (this.robotStatDailyView == null) {
        sb.append("null");
      } else {
        sb.append(this.robotStatDailyView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (robotStatDailyView != null) {
        robotStatDailyView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRobotStatDaily_argsStandardSchemeFactory implements SchemeFactory {
      public saveRobotStatDaily_argsStandardScheme getScheme() {
        return new saveRobotStatDaily_argsStandardScheme();
      }
    }

    private static class saveRobotStatDaily_argsStandardScheme extends StandardScheme<saveRobotStatDaily_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRobotStatDaily_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROBOT_STAT_DAILY_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.robotStatDailyView = new one.show.stat.thrift.view.RobotStatDailyView();
                struct.robotStatDailyView.read(iprot);
                struct.setRobotStatDailyViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRobotStatDaily_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.robotStatDailyView != null) {
          oprot.writeFieldBegin(ROBOT_STAT_DAILY_VIEW_FIELD_DESC);
          struct.robotStatDailyView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRobotStatDaily_argsTupleSchemeFactory implements SchemeFactory {
      public saveRobotStatDaily_argsTupleScheme getScheme() {
        return new saveRobotStatDaily_argsTupleScheme();
      }
    }

    private static class saveRobotStatDaily_argsTupleScheme extends TupleScheme<saveRobotStatDaily_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRobotStatDaily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRobotStatDailyView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRobotStatDailyView()) {
          struct.robotStatDailyView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRobotStatDaily_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.robotStatDailyView = new one.show.stat.thrift.view.RobotStatDailyView();
          struct.robotStatDailyView.read(iprot);
          struct.setRobotStatDailyViewIsSet(true);
        }
      }
    }

  }

  public static class saveRobotStatDaily_result implements org.apache.thrift.TBase<saveRobotStatDaily_result, saveRobotStatDaily_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRobotStatDaily_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRobotStatDaily_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRobotStatDaily_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRobotStatDaily_result.class, metaDataMap);
    }

    public saveRobotStatDaily_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRobotStatDaily_result(saveRobotStatDaily_result other) {
    }

    public saveRobotStatDaily_result deepCopy() {
      return new saveRobotStatDaily_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRobotStatDaily_result)
        return this.equals((saveRobotStatDaily_result)that);
      return false;
    }

    public boolean equals(saveRobotStatDaily_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveRobotStatDaily_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveRobotStatDaily_result typedOther = (saveRobotStatDaily_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRobotStatDaily_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRobotStatDaily_resultStandardSchemeFactory implements SchemeFactory {
      public saveRobotStatDaily_resultStandardScheme getScheme() {
        return new saveRobotStatDaily_resultStandardScheme();
      }
    }

    private static class saveRobotStatDaily_resultStandardScheme extends StandardScheme<saveRobotStatDaily_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRobotStatDaily_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRobotStatDaily_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRobotStatDaily_resultTupleSchemeFactory implements SchemeFactory {
      public saveRobotStatDaily_resultTupleScheme getScheme() {
        return new saveRobotStatDaily_resultTupleScheme();
      }
    }

    private static class saveRobotStatDaily_resultTupleScheme extends TupleScheme<saveRobotStatDaily_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRobotStatDaily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRobotStatDaily_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateRobotStatDailyByDate_args implements org.apache.thrift.TBase<updateRobotStatDailyByDate_args, updateRobotStatDailyByDate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRobotStatDailyByDate_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateContent", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRobotStatDailyByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRobotStatDailyByDate_argsTupleSchemeFactory());
    }

    public int date; // required
    public Map<String,String> updateContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date"),
      UPDATE_CONTENT((short)2, "updateContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          case 2: // UPDATE_CONTENT
            return UPDATE_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UPDATE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("updateContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRobotStatDailyByDate_args.class, metaDataMap);
    }

    public updateRobotStatDailyByDate_args() {
    }

    public updateRobotStatDailyByDate_args(
      int date,
      Map<String,String> updateContent)
    {
      this();
      this.date = date;
      setDateIsSet(true);
      this.updateContent = updateContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRobotStatDailyByDate_args(updateRobotStatDailyByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.date = other.date;
      if (other.isSetUpdateContent()) {
        Map<String,String> __this__updateContent = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.updateContent.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__updateContent_copy_key = other_element_key;

          String __this__updateContent_copy_value = other_element_value;

          __this__updateContent.put(__this__updateContent_copy_key, __this__updateContent_copy_value);
        }
        this.updateContent = __this__updateContent;
      }
    }

    public updateRobotStatDailyByDate_args deepCopy() {
      return new updateRobotStatDailyByDate_args(this);
    }

    @Override
    public void clear() {
      setDateIsSet(false);
      this.date = 0;
      this.updateContent = null;
    }

    public int getDate() {
      return this.date;
    }

    public updateRobotStatDailyByDate_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public int getUpdateContentSize() {
      return (this.updateContent == null) ? 0 : this.updateContent.size();
    }

    public void putToUpdateContent(String key, String val) {
      if (this.updateContent == null) {
        this.updateContent = new HashMap<String,String>();
      }
      this.updateContent.put(key, val);
    }

    public Map<String,String> getUpdateContent() {
      return this.updateContent;
    }

    public updateRobotStatDailyByDate_args setUpdateContent(Map<String,String> updateContent) {
      this.updateContent = updateContent;
      return this;
    }

    public void unsetUpdateContent() {
      this.updateContent = null;
    }

    /** Returns true if field updateContent is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateContent() {
      return this.updateContent != null;
    }

    public void setUpdateContentIsSet(boolean value) {
      if (!value) {
        this.updateContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      case UPDATE_CONTENT:
        if (value == null) {
          unsetUpdateContent();
        } else {
          setUpdateContent((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return Integer.valueOf(getDate());

      case UPDATE_CONTENT:
        return getUpdateContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      case UPDATE_CONTENT:
        return isSetUpdateContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRobotStatDailyByDate_args)
        return this.equals((updateRobotStatDailyByDate_args)that);
      return false;
    }

    public boolean equals(updateRobotStatDailyByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      boolean this_present_updateContent = true && this.isSetUpdateContent();
      boolean that_present_updateContent = true && that.isSetUpdateContent();
      if (this_present_updateContent || that_present_updateContent) {
        if (!(this_present_updateContent && that_present_updateContent))
          return false;
        if (!this.updateContent.equals(that.updateContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRobotStatDailyByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRobotStatDailyByDate_args typedOther = (updateRobotStatDailyByDate_args)other;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateContent()).compareTo(typedOther.isSetUpdateContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateContent, typedOther.updateContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRobotStatDailyByDate_args(");
      boolean first = true;

      sb.append("date:");
      sb.append(this.date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateContent:");
      if (this.updateContent == null) {
        sb.append("null");
      } else {
        sb.append(this.updateContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRobotStatDailyByDate_argsStandardSchemeFactory implements SchemeFactory {
      public updateRobotStatDailyByDate_argsStandardScheme getScheme() {
        return new updateRobotStatDailyByDate_argsStandardScheme();
      }
    }

    private static class updateRobotStatDailyByDate_argsStandardScheme extends StandardScheme<updateRobotStatDailyByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRobotStatDailyByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATE_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.updateContent = new HashMap<String,String>(2*_map40.size);
                  for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                  {
                    String _key42; // required
                    String _val43; // required
                    _key42 = iprot.readString();
                    _val43 = iprot.readString();
                    struct.updateContent.put(_key42, _val43);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpdateContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRobotStatDailyByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        if (struct.updateContent != null) {
          oprot.writeFieldBegin(UPDATE_CONTENT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.updateContent.size()));
            for (Map.Entry<String, String> _iter44 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRobotStatDailyByDate_argsTupleSchemeFactory implements SchemeFactory {
      public updateRobotStatDailyByDate_argsTupleScheme getScheme() {
        return new updateRobotStatDailyByDate_argsTupleScheme();
      }
    }

    private static class updateRobotStatDailyByDate_argsTupleScheme extends TupleScheme<updateRobotStatDailyByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRobotStatDailyByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        if (struct.isSetUpdateContent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
        if (struct.isSetUpdateContent()) {
          {
            oprot.writeI32(struct.updateContent.size());
            for (Map.Entry<String, String> _iter45 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRobotStatDailyByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.updateContent = new HashMap<String,String>(2*_map46.size);
            for (int _i47 = 0; _i47 < _map46.size; ++_i47)
            {
              String _key48; // required
              String _val49; // required
              _key48 = iprot.readString();
              _val49 = iprot.readString();
              struct.updateContent.put(_key48, _val49);
            }
          }
          struct.setUpdateContentIsSet(true);
        }
      }
    }

  }

  public static class updateRobotStatDailyByDate_result implements org.apache.thrift.TBase<updateRobotStatDailyByDate_result, updateRobotStatDailyByDate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRobotStatDailyByDate_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRobotStatDailyByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRobotStatDailyByDate_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRobotStatDailyByDate_result.class, metaDataMap);
    }

    public updateRobotStatDailyByDate_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRobotStatDailyByDate_result(updateRobotStatDailyByDate_result other) {
    }

    public updateRobotStatDailyByDate_result deepCopy() {
      return new updateRobotStatDailyByDate_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRobotStatDailyByDate_result)
        return this.equals((updateRobotStatDailyByDate_result)that);
      return false;
    }

    public boolean equals(updateRobotStatDailyByDate_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRobotStatDailyByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRobotStatDailyByDate_result typedOther = (updateRobotStatDailyByDate_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRobotStatDailyByDate_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRobotStatDailyByDate_resultStandardSchemeFactory implements SchemeFactory {
      public updateRobotStatDailyByDate_resultStandardScheme getScheme() {
        return new updateRobotStatDailyByDate_resultStandardScheme();
      }
    }

    private static class updateRobotStatDailyByDate_resultStandardScheme extends StandardScheme<updateRobotStatDailyByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRobotStatDailyByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRobotStatDailyByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRobotStatDailyByDate_resultTupleSchemeFactory implements SchemeFactory {
      public updateRobotStatDailyByDate_resultTupleScheme getScheme() {
        return new updateRobotStatDailyByDate_resultTupleScheme();
      }
    }

    private static class updateRobotStatDailyByDate_resultTupleScheme extends TupleScheme<updateRobotStatDailyByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRobotStatDailyByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRobotStatDailyByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findActiveXbStatByUidAndTime_args implements org.apache.thrift.TBase<findActiveXbStatByUidAndTime_args, findActiveXbStatByUidAndTime_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findActiveXbStatByUidAndTime_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findActiveXbStatByUidAndTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findActiveXbStatByUidAndTime_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      TIME((short)2, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findActiveXbStatByUidAndTime_args.class, metaDataMap);
    }

    public findActiveXbStatByUidAndTime_args() {
    }

    public findActiveXbStatByUidAndTime_args(
      long uid,
      int time)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findActiveXbStatByUidAndTime_args(findActiveXbStatByUidAndTime_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.time = other.time;
    }

    public findActiveXbStatByUidAndTime_args deepCopy() {
      return new findActiveXbStatByUidAndTime_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setTimeIsSet(false);
      this.time = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findActiveXbStatByUidAndTime_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getTime() {
      return this.time;
    }

    public findActiveXbStatByUidAndTime_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findActiveXbStatByUidAndTime_args)
        return this.equals((findActiveXbStatByUidAndTime_args)that);
      return false;
    }

    public boolean equals(findActiveXbStatByUidAndTime_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findActiveXbStatByUidAndTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findActiveXbStatByUidAndTime_args typedOther = (findActiveXbStatByUidAndTime_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findActiveXbStatByUidAndTime_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findActiveXbStatByUidAndTime_argsStandardSchemeFactory implements SchemeFactory {
      public findActiveXbStatByUidAndTime_argsStandardScheme getScheme() {
        return new findActiveXbStatByUidAndTime_argsStandardScheme();
      }
    }

    private static class findActiveXbStatByUidAndTime_argsStandardScheme extends StandardScheme<findActiveXbStatByUidAndTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findActiveXbStatByUidAndTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findActiveXbStatByUidAndTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findActiveXbStatByUidAndTime_argsTupleSchemeFactory implements SchemeFactory {
      public findActiveXbStatByUidAndTime_argsTupleScheme getScheme() {
        return new findActiveXbStatByUidAndTime_argsTupleScheme();
      }
    }

    private static class findActiveXbStatByUidAndTime_argsTupleScheme extends TupleScheme<findActiveXbStatByUidAndTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findActiveXbStatByUidAndTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findActiveXbStatByUidAndTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class findActiveXbStatByUidAndTime_result implements org.apache.thrift.TBase<findActiveXbStatByUidAndTime_result, findActiveXbStatByUidAndTime_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findActiveXbStatByUidAndTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findActiveXbStatByUidAndTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findActiveXbStatByUidAndTime_resultTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.ActiveXbStatView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.ActiveXbStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findActiveXbStatByUidAndTime_result.class, metaDataMap);
    }

    public findActiveXbStatByUidAndTime_result() {
    }

    public findActiveXbStatByUidAndTime_result(
      one.show.stat.thrift.view.ActiveXbStatView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findActiveXbStatByUidAndTime_result(findActiveXbStatByUidAndTime_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.stat.thrift.view.ActiveXbStatView(other.success);
      }
    }

    public findActiveXbStatByUidAndTime_result deepCopy() {
      return new findActiveXbStatByUidAndTime_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.stat.thrift.view.ActiveXbStatView getSuccess() {
      return this.success;
    }

    public findActiveXbStatByUidAndTime_result setSuccess(one.show.stat.thrift.view.ActiveXbStatView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.stat.thrift.view.ActiveXbStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findActiveXbStatByUidAndTime_result)
        return this.equals((findActiveXbStatByUidAndTime_result)that);
      return false;
    }

    public boolean equals(findActiveXbStatByUidAndTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findActiveXbStatByUidAndTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findActiveXbStatByUidAndTime_result typedOther = (findActiveXbStatByUidAndTime_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findActiveXbStatByUidAndTime_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findActiveXbStatByUidAndTime_resultStandardSchemeFactory implements SchemeFactory {
      public findActiveXbStatByUidAndTime_resultStandardScheme getScheme() {
        return new findActiveXbStatByUidAndTime_resultStandardScheme();
      }
    }

    private static class findActiveXbStatByUidAndTime_resultStandardScheme extends StandardScheme<findActiveXbStatByUidAndTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findActiveXbStatByUidAndTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.stat.thrift.view.ActiveXbStatView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findActiveXbStatByUidAndTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findActiveXbStatByUidAndTime_resultTupleSchemeFactory implements SchemeFactory {
      public findActiveXbStatByUidAndTime_resultTupleScheme getScheme() {
        return new findActiveXbStatByUidAndTime_resultTupleScheme();
      }
    }

    private static class findActiveXbStatByUidAndTime_resultTupleScheme extends TupleScheme<findActiveXbStatByUidAndTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findActiveXbStatByUidAndTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findActiveXbStatByUidAndTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.stat.thrift.view.ActiveXbStatView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveActiveXbStat_args implements org.apache.thrift.TBase<saveActiveXbStat_args, saveActiveXbStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveActiveXbStat_args");

    private static final org.apache.thrift.protocol.TField ACTIVE_XB_STAT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("ActiveXbStatView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveActiveXbStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveActiveXbStat_argsTupleSchemeFactory());
    }

    public one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVE_XB_STAT_VIEW((short)1, "ActiveXbStatView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVE_XB_STAT_VIEW
            return ACTIVE_XB_STAT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVE_XB_STAT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("ActiveXbStatView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stat.thrift.view.ActiveXbStatView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveActiveXbStat_args.class, metaDataMap);
    }

    public saveActiveXbStat_args() {
    }

    public saveActiveXbStat_args(
      one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView)
    {
      this();
      this.ActiveXbStatView = ActiveXbStatView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveActiveXbStat_args(saveActiveXbStat_args other) {
      if (other.isSetActiveXbStatView()) {
        this.ActiveXbStatView = new one.show.stat.thrift.view.ActiveXbStatView(other.ActiveXbStatView);
      }
    }

    public saveActiveXbStat_args deepCopy() {
      return new saveActiveXbStat_args(this);
    }

    @Override
    public void clear() {
      this.ActiveXbStatView = null;
    }

    public one.show.stat.thrift.view.ActiveXbStatView getActiveXbStatView() {
      return this.ActiveXbStatView;
    }

    public saveActiveXbStat_args setActiveXbStatView(one.show.stat.thrift.view.ActiveXbStatView ActiveXbStatView) {
      this.ActiveXbStatView = ActiveXbStatView;
      return this;
    }

    public void unsetActiveXbStatView() {
      this.ActiveXbStatView = null;
    }

    /** Returns true if field ActiveXbStatView is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveXbStatView() {
      return this.ActiveXbStatView != null;
    }

    public void setActiveXbStatViewIsSet(boolean value) {
      if (!value) {
        this.ActiveXbStatView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVE_XB_STAT_VIEW:
        if (value == null) {
          unsetActiveXbStatView();
        } else {
          setActiveXbStatView((one.show.stat.thrift.view.ActiveXbStatView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVE_XB_STAT_VIEW:
        return getActiveXbStatView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVE_XB_STAT_VIEW:
        return isSetActiveXbStatView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveActiveXbStat_args)
        return this.equals((saveActiveXbStat_args)that);
      return false;
    }

    public boolean equals(saveActiveXbStat_args that) {
      if (that == null)
        return false;

      boolean this_present_ActiveXbStatView = true && this.isSetActiveXbStatView();
      boolean that_present_ActiveXbStatView = true && that.isSetActiveXbStatView();
      if (this_present_ActiveXbStatView || that_present_ActiveXbStatView) {
        if (!(this_present_ActiveXbStatView && that_present_ActiveXbStatView))
          return false;
        if (!this.ActiveXbStatView.equals(that.ActiveXbStatView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveActiveXbStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveActiveXbStat_args typedOther = (saveActiveXbStat_args)other;

      lastComparison = Boolean.valueOf(isSetActiveXbStatView()).compareTo(typedOther.isSetActiveXbStatView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveXbStatView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ActiveXbStatView, typedOther.ActiveXbStatView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveActiveXbStat_args(");
      boolean first = true;

      sb.append("ActiveXbStatView:");
      if (this.ActiveXbStatView == null) {
        sb.append("null");
      } else {
        sb.append(this.ActiveXbStatView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ActiveXbStatView != null) {
        ActiveXbStatView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveActiveXbStat_argsStandardSchemeFactory implements SchemeFactory {
      public saveActiveXbStat_argsStandardScheme getScheme() {
        return new saveActiveXbStat_argsStandardScheme();
      }
    }

    private static class saveActiveXbStat_argsStandardScheme extends StandardScheme<saveActiveXbStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveActiveXbStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVE_XB_STAT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ActiveXbStatView = new one.show.stat.thrift.view.ActiveXbStatView();
                struct.ActiveXbStatView.read(iprot);
                struct.setActiveXbStatViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveActiveXbStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ActiveXbStatView != null) {
          oprot.writeFieldBegin(ACTIVE_XB_STAT_VIEW_FIELD_DESC);
          struct.ActiveXbStatView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveActiveXbStat_argsTupleSchemeFactory implements SchemeFactory {
      public saveActiveXbStat_argsTupleScheme getScheme() {
        return new saveActiveXbStat_argsTupleScheme();
      }
    }

    private static class saveActiveXbStat_argsTupleScheme extends TupleScheme<saveActiveXbStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveActiveXbStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActiveXbStatView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActiveXbStatView()) {
          struct.ActiveXbStatView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveActiveXbStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ActiveXbStatView = new one.show.stat.thrift.view.ActiveXbStatView();
          struct.ActiveXbStatView.read(iprot);
          struct.setActiveXbStatViewIsSet(true);
        }
      }
    }

  }

  public static class saveActiveXbStat_result implements org.apache.thrift.TBase<saveActiveXbStat_result, saveActiveXbStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveActiveXbStat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveActiveXbStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveActiveXbStat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveActiveXbStat_result.class, metaDataMap);
    }

    public saveActiveXbStat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveActiveXbStat_result(saveActiveXbStat_result other) {
    }

    public saveActiveXbStat_result deepCopy() {
      return new saveActiveXbStat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveActiveXbStat_result)
        return this.equals((saveActiveXbStat_result)that);
      return false;
    }

    public boolean equals(saveActiveXbStat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveActiveXbStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveActiveXbStat_result typedOther = (saveActiveXbStat_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveActiveXbStat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveActiveXbStat_resultStandardSchemeFactory implements SchemeFactory {
      public saveActiveXbStat_resultStandardScheme getScheme() {
        return new saveActiveXbStat_resultStandardScheme();
      }
    }

    private static class saveActiveXbStat_resultStandardScheme extends StandardScheme<saveActiveXbStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveActiveXbStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveActiveXbStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveActiveXbStat_resultTupleSchemeFactory implements SchemeFactory {
      public saveActiveXbStat_resultTupleScheme getScheme() {
        return new saveActiveXbStat_resultTupleScheme();
      }
    }

    private static class saveActiveXbStat_resultTupleScheme extends TupleScheme<saveActiveXbStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveActiveXbStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveActiveXbStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateActiveXbStatById_args implements org.apache.thrift.TBase<updateActiveXbStatById_args, updateActiveXbStatById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActiveXbStatById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateContent", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActiveXbStatById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActiveXbStatById_argsTupleSchemeFactory());
    }

    public long id; // required
    public Map<String,String> updateContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      UPDATE_CONTENT((short)2, "updateContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // UPDATE_CONTENT
            return UPDATE_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UPDATE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("updateContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActiveXbStatById_args.class, metaDataMap);
    }

    public updateActiveXbStatById_args() {
    }

    public updateActiveXbStatById_args(
      long id,
      Map<String,String> updateContent)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.updateContent = updateContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActiveXbStatById_args(updateActiveXbStatById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetUpdateContent()) {
        Map<String,String> __this__updateContent = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.updateContent.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__updateContent_copy_key = other_element_key;

          String __this__updateContent_copy_value = other_element_value;

          __this__updateContent.put(__this__updateContent_copy_key, __this__updateContent_copy_value);
        }
        this.updateContent = __this__updateContent;
      }
    }

    public updateActiveXbStatById_args deepCopy() {
      return new updateActiveXbStatById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.updateContent = null;
    }

    public long getId() {
      return this.id;
    }

    public updateActiveXbStatById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getUpdateContentSize() {
      return (this.updateContent == null) ? 0 : this.updateContent.size();
    }

    public void putToUpdateContent(String key, String val) {
      if (this.updateContent == null) {
        this.updateContent = new HashMap<String,String>();
      }
      this.updateContent.put(key, val);
    }

    public Map<String,String> getUpdateContent() {
      return this.updateContent;
    }

    public updateActiveXbStatById_args setUpdateContent(Map<String,String> updateContent) {
      this.updateContent = updateContent;
      return this;
    }

    public void unsetUpdateContent() {
      this.updateContent = null;
    }

    /** Returns true if field updateContent is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateContent() {
      return this.updateContent != null;
    }

    public void setUpdateContentIsSet(boolean value) {
      if (!value) {
        this.updateContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case UPDATE_CONTENT:
        if (value == null) {
          unsetUpdateContent();
        } else {
          setUpdateContent((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case UPDATE_CONTENT:
        return getUpdateContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case UPDATE_CONTENT:
        return isSetUpdateContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActiveXbStatById_args)
        return this.equals((updateActiveXbStatById_args)that);
      return false;
    }

    public boolean equals(updateActiveXbStatById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_updateContent = true && this.isSetUpdateContent();
      boolean that_present_updateContent = true && that.isSetUpdateContent();
      if (this_present_updateContent || that_present_updateContent) {
        if (!(this_present_updateContent && that_present_updateContent))
          return false;
        if (!this.updateContent.equals(that.updateContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateActiveXbStatById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateActiveXbStatById_args typedOther = (updateActiveXbStatById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateContent()).compareTo(typedOther.isSetUpdateContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateContent, typedOther.updateContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActiveXbStatById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateContent:");
      if (this.updateContent == null) {
        sb.append("null");
      } else {
        sb.append(this.updateContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActiveXbStatById_argsStandardSchemeFactory implements SchemeFactory {
      public updateActiveXbStatById_argsStandardScheme getScheme() {
        return new updateActiveXbStatById_argsStandardScheme();
      }
    }

    private static class updateActiveXbStatById_argsStandardScheme extends StandardScheme<updateActiveXbStatById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActiveXbStatById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATE_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.updateContent = new HashMap<String,String>(2*_map50.size);
                  for (int _i51 = 0; _i51 < _map50.size; ++_i51)
                  {
                    String _key52; // required
                    String _val53; // required
                    _key52 = iprot.readString();
                    _val53 = iprot.readString();
                    struct.updateContent.put(_key52, _val53);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpdateContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActiveXbStatById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.updateContent != null) {
          oprot.writeFieldBegin(UPDATE_CONTENT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.updateContent.size()));
            for (Map.Entry<String, String> _iter54 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActiveXbStatById_argsTupleSchemeFactory implements SchemeFactory {
      public updateActiveXbStatById_argsTupleScheme getScheme() {
        return new updateActiveXbStatById_argsTupleScheme();
      }
    }

    private static class updateActiveXbStatById_argsTupleScheme extends TupleScheme<updateActiveXbStatById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActiveXbStatById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetUpdateContent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetUpdateContent()) {
          {
            oprot.writeI32(struct.updateContent.size());
            for (Map.Entry<String, String> _iter55 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActiveXbStatById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.updateContent = new HashMap<String,String>(2*_map56.size);
            for (int _i57 = 0; _i57 < _map56.size; ++_i57)
            {
              String _key58; // required
              String _val59; // required
              _key58 = iprot.readString();
              _val59 = iprot.readString();
              struct.updateContent.put(_key58, _val59);
            }
          }
          struct.setUpdateContentIsSet(true);
        }
      }
    }

  }

  public static class updateActiveXbStatById_result implements org.apache.thrift.TBase<updateActiveXbStatById_result, updateActiveXbStatById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActiveXbStatById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActiveXbStatById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActiveXbStatById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActiveXbStatById_result.class, metaDataMap);
    }

    public updateActiveXbStatById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActiveXbStatById_result(updateActiveXbStatById_result other) {
    }

    public updateActiveXbStatById_result deepCopy() {
      return new updateActiveXbStatById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActiveXbStatById_result)
        return this.equals((updateActiveXbStatById_result)that);
      return false;
    }

    public boolean equals(updateActiveXbStatById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateActiveXbStatById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateActiveXbStatById_result typedOther = (updateActiveXbStatById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActiveXbStatById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActiveXbStatById_resultStandardSchemeFactory implements SchemeFactory {
      public updateActiveXbStatById_resultStandardScheme getScheme() {
        return new updateActiveXbStatById_resultStandardScheme();
      }
    }

    private static class updateActiveXbStatById_resultStandardScheme extends StandardScheme<updateActiveXbStatById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActiveXbStatById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActiveXbStatById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActiveXbStatById_resultTupleSchemeFactory implements SchemeFactory {
      public updateActiveXbStatById_resultTupleScheme getScheme() {
        return new updateActiveXbStatById_resultTupleScheme();
      }
    }

    private static class updateActiveXbStatById_resultTupleScheme extends TupleScheme<updateActiveXbStatById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActiveXbStatById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActiveXbStatById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
