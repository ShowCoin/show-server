/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.stat.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActiveXbStatView implements org.apache.thrift.TBase<ActiveXbStatView, ActiveXbStatView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActiveXbStatView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GIFT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("giftPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField GIFT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("giftCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SHARE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("shareCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ONLINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActiveXbStatViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActiveXbStatViewTupleSchemeFactory());
  }

  public long id; // required
  public long uid; // required
  public double giftPrice; // required
  public int giftCount; // required
  public int shareCount; // required
  public int onlineCount; // required
  public int time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    UID((short)2, "uid"),
    GIFT_PRICE((short)3, "giftPrice"),
    GIFT_COUNT((short)4, "giftCount"),
    SHARE_COUNT((short)5, "shareCount"),
    ONLINE_COUNT((short)6, "onlineCount"),
    TIME((short)7, "time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // UID
          return UID;
        case 3: // GIFT_PRICE
          return GIFT_PRICE;
        case 4: // GIFT_COUNT
          return GIFT_COUNT;
        case 5: // SHARE_COUNT
          return SHARE_COUNT;
        case 6: // ONLINE_COUNT
          return ONLINE_COUNT;
        case 7: // TIME
          return TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __GIFTPRICE_ISSET_ID = 2;
  private static final int __GIFTCOUNT_ISSET_ID = 3;
  private static final int __SHARECOUNT_ISSET_ID = 4;
  private static final int __ONLINECOUNT_ISSET_ID = 5;
  private static final int __TIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GIFT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("giftPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GIFT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("giftCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("shareCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONLINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("onlineCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActiveXbStatView.class, metaDataMap);
  }

  public ActiveXbStatView() {
  }

  public ActiveXbStatView(
    long id,
    long uid,
    double giftPrice,
    int giftCount,
    int shareCount,
    int onlineCount,
    int time)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.giftPrice = giftPrice;
    setGiftPriceIsSet(true);
    this.giftCount = giftCount;
    setGiftCountIsSet(true);
    this.shareCount = shareCount;
    setShareCountIsSet(true);
    this.onlineCount = onlineCount;
    setOnlineCountIsSet(true);
    this.time = time;
    setTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActiveXbStatView(ActiveXbStatView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.uid = other.uid;
    this.giftPrice = other.giftPrice;
    this.giftCount = other.giftCount;
    this.shareCount = other.shareCount;
    this.onlineCount = other.onlineCount;
    this.time = other.time;
  }

  public ActiveXbStatView deepCopy() {
    return new ActiveXbStatView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUidIsSet(false);
    this.uid = 0;
    setGiftPriceIsSet(false);
    this.giftPrice = 0.0;
    setGiftCountIsSet(false);
    this.giftCount = 0;
    setShareCountIsSet(false);
    this.shareCount = 0;
    setOnlineCountIsSet(false);
    this.onlineCount = 0;
    setTimeIsSet(false);
    this.time = 0;
  }

  public long getId() {
    return this.id;
  }

  public ActiveXbStatView setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public ActiveXbStatView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public double getGiftPrice() {
    return this.giftPrice;
  }

  public ActiveXbStatView setGiftPrice(double giftPrice) {
    this.giftPrice = giftPrice;
    setGiftPriceIsSet(true);
    return this;
  }

  public void unsetGiftPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTPRICE_ISSET_ID);
  }

  /** Returns true if field giftPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTPRICE_ISSET_ID);
  }

  public void setGiftPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTPRICE_ISSET_ID, value);
  }

  public int getGiftCount() {
    return this.giftCount;
  }

  public ActiveXbStatView setGiftCount(int giftCount) {
    this.giftCount = giftCount;
    setGiftCountIsSet(true);
    return this;
  }

  public void unsetGiftCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTCOUNT_ISSET_ID);
  }

  /** Returns true if field giftCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTCOUNT_ISSET_ID);
  }

  public void setGiftCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTCOUNT_ISSET_ID, value);
  }

  public int getShareCount() {
    return this.shareCount;
  }

  public ActiveXbStatView setShareCount(int shareCount) {
    this.shareCount = shareCount;
    setShareCountIsSet(true);
    return this;
  }

  public void unsetShareCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARECOUNT_ISSET_ID);
  }

  /** Returns true if field shareCount is set (has been assigned a value) and false otherwise */
  public boolean isSetShareCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARECOUNT_ISSET_ID);
  }

  public void setShareCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARECOUNT_ISSET_ID, value);
  }

  public int getOnlineCount() {
    return this.onlineCount;
  }

  public ActiveXbStatView setOnlineCount(int onlineCount) {
    this.onlineCount = onlineCount;
    setOnlineCountIsSet(true);
    return this;
  }

  public void unsetOnlineCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID);
  }

  /** Returns true if field onlineCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID);
  }

  public void setOnlineCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID, value);
  }

  public int getTime() {
    return this.time;
  }

  public ActiveXbStatView setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case GIFT_PRICE:
      if (value == null) {
        unsetGiftPrice();
      } else {
        setGiftPrice((Double)value);
      }
      break;

    case GIFT_COUNT:
      if (value == null) {
        unsetGiftCount();
      } else {
        setGiftCount((Integer)value);
      }
      break;

    case SHARE_COUNT:
      if (value == null) {
        unsetShareCount();
      } else {
        setShareCount((Integer)value);
      }
      break;

    case ONLINE_COUNT:
      if (value == null) {
        unsetOnlineCount();
      } else {
        setOnlineCount((Integer)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case UID:
      return Long.valueOf(getUid());

    case GIFT_PRICE:
      return Double.valueOf(getGiftPrice());

    case GIFT_COUNT:
      return Integer.valueOf(getGiftCount());

    case SHARE_COUNT:
      return Integer.valueOf(getShareCount());

    case ONLINE_COUNT:
      return Integer.valueOf(getOnlineCount());

    case TIME:
      return Integer.valueOf(getTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case UID:
      return isSetUid();
    case GIFT_PRICE:
      return isSetGiftPrice();
    case GIFT_COUNT:
      return isSetGiftCount();
    case SHARE_COUNT:
      return isSetShareCount();
    case ONLINE_COUNT:
      return isSetOnlineCount();
    case TIME:
      return isSetTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActiveXbStatView)
      return this.equals((ActiveXbStatView)that);
    return false;
  }

  public boolean equals(ActiveXbStatView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_giftPrice = true;
    boolean that_present_giftPrice = true;
    if (this_present_giftPrice || that_present_giftPrice) {
      if (!(this_present_giftPrice && that_present_giftPrice))
        return false;
      if (this.giftPrice != that.giftPrice)
        return false;
    }

    boolean this_present_giftCount = true;
    boolean that_present_giftCount = true;
    if (this_present_giftCount || that_present_giftCount) {
      if (!(this_present_giftCount && that_present_giftCount))
        return false;
      if (this.giftCount != that.giftCount)
        return false;
    }

    boolean this_present_shareCount = true;
    boolean that_present_shareCount = true;
    if (this_present_shareCount || that_present_shareCount) {
      if (!(this_present_shareCount && that_present_shareCount))
        return false;
      if (this.shareCount != that.shareCount)
        return false;
    }

    boolean this_present_onlineCount = true;
    boolean that_present_onlineCount = true;
    if (this_present_onlineCount || that_present_onlineCount) {
      if (!(this_present_onlineCount && that_present_onlineCount))
        return false;
      if (this.onlineCount != that.onlineCount)
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActiveXbStatView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActiveXbStatView typedOther = (ActiveXbStatView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftPrice()).compareTo(typedOther.isSetGiftPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftPrice, typedOther.giftPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftCount()).compareTo(typedOther.isSetGiftCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftCount, typedOther.giftCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareCount()).compareTo(typedOther.isSetShareCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareCount, typedOther.shareCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineCount()).compareTo(typedOther.isSetOnlineCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineCount, typedOther.onlineCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActiveXbStatView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftPrice:");
    sb.append(this.giftPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftCount:");
    sb.append(this.giftCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareCount:");
    sb.append(this.shareCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlineCount:");
    sb.append(this.onlineCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActiveXbStatViewStandardSchemeFactory implements SchemeFactory {
    public ActiveXbStatViewStandardScheme getScheme() {
      return new ActiveXbStatViewStandardScheme();
    }
  }

  private static class ActiveXbStatViewStandardScheme extends StandardScheme<ActiveXbStatView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActiveXbStatView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GIFT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.giftPrice = iprot.readDouble();
              struct.setGiftPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GIFT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giftCount = iprot.readI32();
              struct.setGiftCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHARE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareCount = iprot.readI32();
              struct.setShareCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ONLINE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.onlineCount = iprot.readI32();
              struct.setOnlineCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActiveXbStatView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.giftPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.giftCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.shareCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONLINE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.onlineCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActiveXbStatViewTupleSchemeFactory implements SchemeFactory {
    public ActiveXbStatViewTupleScheme getScheme() {
      return new ActiveXbStatViewTupleScheme();
    }
  }

  private static class ActiveXbStatViewTupleScheme extends TupleScheme<ActiveXbStatView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActiveXbStatView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetGiftPrice()) {
        optionals.set(2);
      }
      if (struct.isSetGiftCount()) {
        optionals.set(3);
      }
      if (struct.isSetShareCount()) {
        optionals.set(4);
      }
      if (struct.isSetOnlineCount()) {
        optionals.set(5);
      }
      if (struct.isSetTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetGiftPrice()) {
        oprot.writeDouble(struct.giftPrice);
      }
      if (struct.isSetGiftCount()) {
        oprot.writeI32(struct.giftCount);
      }
      if (struct.isSetShareCount()) {
        oprot.writeI32(struct.shareCount);
      }
      if (struct.isSetOnlineCount()) {
        oprot.writeI32(struct.onlineCount);
      }
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActiveXbStatView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.giftPrice = iprot.readDouble();
        struct.setGiftPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.giftCount = iprot.readI32();
        struct.setGiftCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shareCount = iprot.readI32();
        struct.setShareCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.onlineCount = iprot.readI32();
        struct.setOnlineCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
    }
  }

}

