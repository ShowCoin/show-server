/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.stat.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VideoStatView implements org.apache.thrift.TBase<VideoStatView, VideoStatView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VideoStatView");

  private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField VIEWED_FIELD_DESC = new org.apache.thrift.protocol.TField("viewed", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("share", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIKED_FIELD_DESC = new org.apache.thrift.protocol.TField("liked", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("receive", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField GIFT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("giftNum", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VideoStatViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VideoStatViewTupleSchemeFactory());
  }

  public long vid; // required
  public int viewed; // required
  public int share; // required
  public int liked; // required
  public int receive; // required
  public int giftNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VID((short)1, "vid"),
    VIEWED((short)2, "viewed"),
    SHARE((short)3, "share"),
    LIKED((short)4, "liked"),
    RECEIVE((short)5, "receive"),
    GIFT_NUM((short)6, "giftNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VID
          return VID;
        case 2: // VIEWED
          return VIEWED;
        case 3: // SHARE
          return SHARE;
        case 4: // LIKED
          return LIKED;
        case 5: // RECEIVE
          return RECEIVE;
        case 6: // GIFT_NUM
          return GIFT_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VID_ISSET_ID = 0;
  private static final int __VIEWED_ISSET_ID = 1;
  private static final int __SHARE_ISSET_ID = 2;
  private static final int __LIKED_ISSET_ID = 3;
  private static final int __RECEIVE_ISSET_ID = 4;
  private static final int __GIFTNUM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIEWED, new org.apache.thrift.meta_data.FieldMetaData("viewed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE, new org.apache.thrift.meta_data.FieldMetaData("share", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIKED, new org.apache.thrift.meta_data.FieldMetaData("liked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("receive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIFT_NUM, new org.apache.thrift.meta_data.FieldMetaData("giftNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VideoStatView.class, metaDataMap);
  }

  public VideoStatView() {
  }

  public VideoStatView(
    long vid,
    int viewed,
    int share,
    int liked,
    int receive,
    int giftNum)
  {
    this();
    this.vid = vid;
    setVidIsSet(true);
    this.viewed = viewed;
    setViewedIsSet(true);
    this.share = share;
    setShareIsSet(true);
    this.liked = liked;
    setLikedIsSet(true);
    this.receive = receive;
    setReceiveIsSet(true);
    this.giftNum = giftNum;
    setGiftNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VideoStatView(VideoStatView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.vid = other.vid;
    this.viewed = other.viewed;
    this.share = other.share;
    this.liked = other.liked;
    this.receive = other.receive;
    this.giftNum = other.giftNum;
  }

  public VideoStatView deepCopy() {
    return new VideoStatView(this);
  }

  @Override
  public void clear() {
    setVidIsSet(false);
    this.vid = 0;
    setViewedIsSet(false);
    this.viewed = 0;
    setShareIsSet(false);
    this.share = 0;
    setLikedIsSet(false);
    this.liked = 0;
    setReceiveIsSet(false);
    this.receive = 0;
    setGiftNumIsSet(false);
    this.giftNum = 0;
  }

  public long getVid() {
    return this.vid;
  }

  public VideoStatView setVid(long vid) {
    this.vid = vid;
    setVidIsSet(true);
    return this;
  }

  public void unsetVid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
  }

  /** Returns true if field vid is set (has been assigned a value) and false otherwise */
  public boolean isSetVid() {
    return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
  }

  public void setVidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
  }

  public int getViewed() {
    return this.viewed;
  }

  public VideoStatView setViewed(int viewed) {
    this.viewed = viewed;
    setViewedIsSet(true);
    return this;
  }

  public void unsetViewed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWED_ISSET_ID);
  }

  /** Returns true if field viewed is set (has been assigned a value) and false otherwise */
  public boolean isSetViewed() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWED_ISSET_ID);
  }

  public void setViewedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWED_ISSET_ID, value);
  }

  public int getShare() {
    return this.share;
  }

  public VideoStatView setShare(int share) {
    this.share = share;
    setShareIsSet(true);
    return this;
  }

  public void unsetShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARE_ISSET_ID);
  }

  /** Returns true if field share is set (has been assigned a value) and false otherwise */
  public boolean isSetShare() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARE_ISSET_ID);
  }

  public void setShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARE_ISSET_ID, value);
  }

  public int getLiked() {
    return this.liked;
  }

  public VideoStatView setLiked(int liked) {
    this.liked = liked;
    setLikedIsSet(true);
    return this;
  }

  public void unsetLiked() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKED_ISSET_ID);
  }

  /** Returns true if field liked is set (has been assigned a value) and false otherwise */
  public boolean isSetLiked() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKED_ISSET_ID);
  }

  public void setLikedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKED_ISSET_ID, value);
  }

  public int getReceive() {
    return this.receive;
  }

  public VideoStatView setReceive(int receive) {
    this.receive = receive;
    setReceiveIsSet(true);
    return this;
  }

  public void unsetReceive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVE_ISSET_ID);
  }

  /** Returns true if field receive is set (has been assigned a value) and false otherwise */
  public boolean isSetReceive() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVE_ISSET_ID);
  }

  public void setReceiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVE_ISSET_ID, value);
  }

  public int getGiftNum() {
    return this.giftNum;
  }

  public VideoStatView setGiftNum(int giftNum) {
    this.giftNum = giftNum;
    setGiftNumIsSet(true);
    return this;
  }

  public void unsetGiftNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTNUM_ISSET_ID);
  }

  /** Returns true if field giftNum is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftNum() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTNUM_ISSET_ID);
  }

  public void setGiftNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((Long)value);
      }
      break;

    case VIEWED:
      if (value == null) {
        unsetViewed();
      } else {
        setViewed((Integer)value);
      }
      break;

    case SHARE:
      if (value == null) {
        unsetShare();
      } else {
        setShare((Integer)value);
      }
      break;

    case LIKED:
      if (value == null) {
        unsetLiked();
      } else {
        setLiked((Integer)value);
      }
      break;

    case RECEIVE:
      if (value == null) {
        unsetReceive();
      } else {
        setReceive((Integer)value);
      }
      break;

    case GIFT_NUM:
      if (value == null) {
        unsetGiftNum();
      } else {
        setGiftNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VID:
      return Long.valueOf(getVid());

    case VIEWED:
      return Integer.valueOf(getViewed());

    case SHARE:
      return Integer.valueOf(getShare());

    case LIKED:
      return Integer.valueOf(getLiked());

    case RECEIVE:
      return Integer.valueOf(getReceive());

    case GIFT_NUM:
      return Integer.valueOf(getGiftNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VID:
      return isSetVid();
    case VIEWED:
      return isSetViewed();
    case SHARE:
      return isSetShare();
    case LIKED:
      return isSetLiked();
    case RECEIVE:
      return isSetReceive();
    case GIFT_NUM:
      return isSetGiftNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VideoStatView)
      return this.equals((VideoStatView)that);
    return false;
  }

  public boolean equals(VideoStatView that) {
    if (that == null)
      return false;

    boolean this_present_vid = true;
    boolean that_present_vid = true;
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (this.vid != that.vid)
        return false;
    }

    boolean this_present_viewed = true;
    boolean that_present_viewed = true;
    if (this_present_viewed || that_present_viewed) {
      if (!(this_present_viewed && that_present_viewed))
        return false;
      if (this.viewed != that.viewed)
        return false;
    }

    boolean this_present_share = true;
    boolean that_present_share = true;
    if (this_present_share || that_present_share) {
      if (!(this_present_share && that_present_share))
        return false;
      if (this.share != that.share)
        return false;
    }

    boolean this_present_liked = true;
    boolean that_present_liked = true;
    if (this_present_liked || that_present_liked) {
      if (!(this_present_liked && that_present_liked))
        return false;
      if (this.liked != that.liked)
        return false;
    }

    boolean this_present_receive = true;
    boolean that_present_receive = true;
    if (this_present_receive || that_present_receive) {
      if (!(this_present_receive && that_present_receive))
        return false;
      if (this.receive != that.receive)
        return false;
    }

    boolean this_present_giftNum = true;
    boolean that_present_giftNum = true;
    if (this_present_giftNum || that_present_giftNum) {
      if (!(this_present_giftNum && that_present_giftNum))
        return false;
      if (this.giftNum != that.giftNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(VideoStatView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    VideoStatView typedOther = (VideoStatView)other;

    lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewed()).compareTo(typedOther.isSetViewed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewed, typedOther.viewed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShare()).compareTo(typedOther.isSetShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.share, typedOther.share);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiked()).compareTo(typedOther.isSetLiked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liked, typedOther.liked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceive()).compareTo(typedOther.isSetReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receive, typedOther.receive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftNum()).compareTo(typedOther.isSetGiftNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftNum, typedOther.giftNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VideoStatView(");
    boolean first = true;

    sb.append("vid:");
    sb.append(this.vid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewed:");
    sb.append(this.viewed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("share:");
    sb.append(this.share);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liked:");
    sb.append(this.liked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receive:");
    sb.append(this.receive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftNum:");
    sb.append(this.giftNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VideoStatViewStandardSchemeFactory implements SchemeFactory {
    public VideoStatViewStandardScheme getScheme() {
      return new VideoStatViewStandardScheme();
    }
  }

  private static class VideoStatViewStandardScheme extends StandardScheme<VideoStatView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VideoStatView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vid = iprot.readI64();
              struct.setVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIEWED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewed = iprot.readI32();
              struct.setViewedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.share = iprot.readI32();
              struct.setShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIKED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liked = iprot.readI32();
              struct.setLikedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receive = iprot.readI32();
              struct.setReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GIFT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giftNum = iprot.readI32();
              struct.setGiftNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VideoStatView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VID_FIELD_DESC);
      oprot.writeI64(struct.vid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEWED_FIELD_DESC);
      oprot.writeI32(struct.viewed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_FIELD_DESC);
      oprot.writeI32(struct.share);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIKED_FIELD_DESC);
      oprot.writeI32(struct.liked);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVE_FIELD_DESC);
      oprot.writeI32(struct.receive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFT_NUM_FIELD_DESC);
      oprot.writeI32(struct.giftNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VideoStatViewTupleSchemeFactory implements SchemeFactory {
    public VideoStatViewTupleScheme getScheme() {
      return new VideoStatViewTupleScheme();
    }
  }

  private static class VideoStatViewTupleScheme extends TupleScheme<VideoStatView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VideoStatView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVid()) {
        optionals.set(0);
      }
      if (struct.isSetViewed()) {
        optionals.set(1);
      }
      if (struct.isSetShare()) {
        optionals.set(2);
      }
      if (struct.isSetLiked()) {
        optionals.set(3);
      }
      if (struct.isSetReceive()) {
        optionals.set(4);
      }
      if (struct.isSetGiftNum()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetVid()) {
        oprot.writeI64(struct.vid);
      }
      if (struct.isSetViewed()) {
        oprot.writeI32(struct.viewed);
      }
      if (struct.isSetShare()) {
        oprot.writeI32(struct.share);
      }
      if (struct.isSetLiked()) {
        oprot.writeI32(struct.liked);
      }
      if (struct.isSetReceive()) {
        oprot.writeI32(struct.receive);
      }
      if (struct.isSetGiftNum()) {
        oprot.writeI32(struct.giftNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VideoStatView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.vid = iprot.readI64();
        struct.setVidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.viewed = iprot.readI32();
        struct.setViewedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.share = iprot.readI32();
        struct.setShareIsSet(true);
      }
      if (incoming.get(3)) {
        struct.liked = iprot.readI32();
        struct.setLikedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.receive = iprot.readI32();
        struct.setReceiveIsSet(true);
      }
      if (incoming.get(5)) {
        struct.giftNum = iprot.readI32();
        struct.setGiftNumIsSet(true);
      }
    }
  }

}

