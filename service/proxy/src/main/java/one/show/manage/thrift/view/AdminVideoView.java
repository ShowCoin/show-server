/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdminVideoView implements org.apache.thrift.TBase<AdminVideoView, AdminVideoView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdminVideoView");

  private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("activeAt", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PUSHED_FIELD_DESC = new org.apache.thrift.protocol.TField("pushed", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PUSHED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("pushedAt", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RECOMMENDED_FIELD_DESC = new org.apache.thrift.protocol.TField("recommended", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RECOMMENDED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendedAt", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RECOMMENDED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendedBy", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ACTIVE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("activeBy", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("clientVersion", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CLIENT_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("clientAgent", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField EFFECT_FIELD_DESC = new org.apache.thrift.protocol.TField("effect", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField M3U8_FIELD_DESC = new org.apache.thrift.protocol.TField("m3u8", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField UPLOAD_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadStartTime", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField UPLOAD_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadStopTime", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField PROCESS_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("processStartTime", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField PROCESS_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("processStopTime", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField PUBLISH_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("publishStartTime", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField PUBLISH_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("publishStopTime", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField RECORD_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("recordStartTime", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField RECORD_STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("recordStopTime", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField TRANSCODED_FIELD_DESC = new org.apache.thrift.protocol.TField("transcoded", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField AUDIO_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("audioPath", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField IMG3IN1_FIELD_DESC = new org.apache.thrift.protocol.TField("img3in1", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField NEED_AUDIO_FIELD_DESC = new org.apache.thrift.protocol.TField("needAudio", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField SHOW_GEO_FIELD_DESC = new org.apache.thrift.protocol.TField("showGeo", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField ALBUM_FIELD_DESC = new org.apache.thrift.protocol.TField("album", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField WEIPAI_VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("weipaiVideo", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField POSTED_FIELD_DESC = new org.apache.thrift.protocol.TField("posted", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField CUSTOM_COVER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("customCoverNum", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField DEFAULT_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultImg", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField IMG_LAST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("imgLastModified", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField DEL_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("delAt", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField DEL_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("delBy", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField PROFILE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImg", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField HOTUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("hotuser", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField DANGER_FIELD_DESC = new org.apache.thrift.protocol.TField("danger", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField FIRST_UPLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("firstUpload", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField POPULAR_FIELD_DESC = new org.apache.thrift.protocol.TField("popular", org.apache.thrift.protocol.TType.DOUBLE, (short)53);
  private static final org.apache.thrift.protocol.TField POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("pool", org.apache.thrift.protocol.TType.I32, (short)54);
  private static final org.apache.thrift.protocol.TField TOTAL_PLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPlay", org.apache.thrift.protocol.TType.I32, (short)55);
  private static final org.apache.thrift.protocol.TField COMMENTED_FIELD_DESC = new org.apache.thrift.protocol.TField("commented", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField GIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("gift", org.apache.thrift.protocol.TType.I32, (short)57);
  private static final org.apache.thrift.protocol.TField LIKED_FIELD_DESC = new org.apache.thrift.protocol.TField("liked", org.apache.thrift.protocol.TType.I32, (short)58);
  private static final org.apache.thrift.protocol.TField FANS_FIELD_DESC = new org.apache.thrift.protocol.TField("fans", org.apache.thrift.protocol.TType.I32, (short)59);
  private static final org.apache.thrift.protocol.TField FOLLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("follow", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField VIDEOS_FIELD_DESC = new org.apache.thrift.protocol.TField("videos", org.apache.thrift.protocol.TType.I32, (short)61);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.DOUBLE, (short)62);
  private static final org.apache.thrift.protocol.TField HEART_LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("heartLike", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField HEART_STOP_FIELD_DESC = new org.apache.thrift.protocol.TField("heartStop", org.apache.thrift.protocol.TType.I32, (short)64);
  private static final org.apache.thrift.protocol.TField POOL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("poolStatus", org.apache.thrift.protocol.TType.I32, (short)65);
  private static final org.apache.thrift.protocol.TField VIDEO_SCREENSHOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("videoScreenshots", org.apache.thrift.protocol.TType.STRING, (short)66);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdminVideoViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdminVideoViewTupleSchemeFactory());
  }

  public String vid; // required
  public int createdAt; // required
  public int active; // required
  public int activeAt; // required
  public int pushed; // required
  public int pushedAt; // required
  public int recommended; // required
  public int recommendedAt; // required
  public String recommendedBy; // required
  public String activeBy; // required
  public String clientVersion; // required
  public String catalog; // required
  public String clientAgent; // required
  public String desc; // required
  public int direction; // required
  public String effect; // required
  public double latitude; // required
  public double longitude; // required
  public double length; // required
  public int m3u8; // required
  public int uploadStartTime; // required
  public int uploadStopTime; // required
  public int processStartTime; // required
  public int processStopTime; // required
  public int publishStartTime; // required
  public int publishStopTime; // required
  public int recordStartTime; // required
  public int recordStopTime; // required
  public int transcoded; // required
  public String user; // required
  public String uuid; // required
  public String audioPath; // required
  public String filePath; // required
  public String img3in1; // required
  public int needAudio; // required
  public int showGeo; // required
  public String type; // required
  public int album; // required
  public int weipaiVideo; // required
  public int posted; // required
  public int customCoverNum; // required
  public String defaultImg; // required
  public int imgLastModified; // required
  public int deleted; // required
  public String city; // required
  public int delAt; // required
  public String delBy; // required
  public String nickName; // required
  public String profileImg; // required
  public int hotuser; // required
  public int danger; // required
  public int firstUpload; // required
  public double popular; // required
  public int pool; // required
  public int totalPlay; // required
  public int commented; // required
  public int gift; // required
  public int liked; // required
  public int fans; // required
  public int follow; // required
  public int videos; // required
  public double total; // required
  public int heartLike; // required
  public int heartStop; // required
  public int poolStatus; // required
  public String videoScreenshots; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VID((short)1, "vid"),
    CREATED_AT((short)2, "createdAt"),
    ACTIVE((short)3, "active"),
    ACTIVE_AT((short)4, "activeAt"),
    PUSHED((short)5, "pushed"),
    PUSHED_AT((short)6, "pushedAt"),
    RECOMMENDED((short)7, "recommended"),
    RECOMMENDED_AT((short)8, "recommendedAt"),
    RECOMMENDED_BY((short)9, "recommendedBy"),
    ACTIVE_BY((short)10, "activeBy"),
    CLIENT_VERSION((short)11, "clientVersion"),
    CATALOG((short)12, "catalog"),
    CLIENT_AGENT((short)13, "clientAgent"),
    DESC((short)14, "desc"),
    DIRECTION((short)15, "direction"),
    EFFECT((short)16, "effect"),
    LATITUDE((short)17, "latitude"),
    LONGITUDE((short)18, "longitude"),
    LENGTH((short)19, "length"),
    M3U8((short)20, "m3u8"),
    UPLOAD_START_TIME((short)21, "uploadStartTime"),
    UPLOAD_STOP_TIME((short)22, "uploadStopTime"),
    PROCESS_START_TIME((short)23, "processStartTime"),
    PROCESS_STOP_TIME((short)24, "processStopTime"),
    PUBLISH_START_TIME((short)25, "publishStartTime"),
    PUBLISH_STOP_TIME((short)26, "publishStopTime"),
    RECORD_START_TIME((short)27, "recordStartTime"),
    RECORD_STOP_TIME((short)28, "recordStopTime"),
    TRANSCODED((short)29, "transcoded"),
    USER((short)30, "user"),
    UUID((short)31, "uuid"),
    AUDIO_PATH((short)32, "audioPath"),
    FILE_PATH((short)33, "filePath"),
    IMG3IN1((short)34, "img3in1"),
    NEED_AUDIO((short)35, "needAudio"),
    SHOW_GEO((short)36, "showGeo"),
    TYPE((short)37, "type"),
    ALBUM((short)38, "album"),
    WEIPAI_VIDEO((short)39, "weipaiVideo"),
    POSTED((short)40, "posted"),
    CUSTOM_COVER_NUM((short)41, "customCoverNum"),
    DEFAULT_IMG((short)42, "defaultImg"),
    IMG_LAST_MODIFIED((short)43, "imgLastModified"),
    DELETED((short)44, "deleted"),
    CITY((short)45, "city"),
    DEL_AT((short)46, "delAt"),
    DEL_BY((short)47, "delBy"),
    NICK_NAME((short)48, "nickName"),
    PROFILE_IMG((short)49, "profileImg"),
    HOTUSER((short)50, "hotuser"),
    DANGER((short)51, "danger"),
    FIRST_UPLOAD((short)52, "firstUpload"),
    POPULAR((short)53, "popular"),
    POOL((short)54, "pool"),
    TOTAL_PLAY((short)55, "totalPlay"),
    COMMENTED((short)56, "commented"),
    GIFT((short)57, "gift"),
    LIKED((short)58, "liked"),
    FANS((short)59, "fans"),
    FOLLOW((short)60, "follow"),
    VIDEOS((short)61, "videos"),
    TOTAL((short)62, "total"),
    HEART_LIKE((short)63, "heartLike"),
    HEART_STOP((short)64, "heartStop"),
    POOL_STATUS((short)65, "poolStatus"),
    VIDEO_SCREENSHOTS((short)66, "videoScreenshots");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VID
          return VID;
        case 2: // CREATED_AT
          return CREATED_AT;
        case 3: // ACTIVE
          return ACTIVE;
        case 4: // ACTIVE_AT
          return ACTIVE_AT;
        case 5: // PUSHED
          return PUSHED;
        case 6: // PUSHED_AT
          return PUSHED_AT;
        case 7: // RECOMMENDED
          return RECOMMENDED;
        case 8: // RECOMMENDED_AT
          return RECOMMENDED_AT;
        case 9: // RECOMMENDED_BY
          return RECOMMENDED_BY;
        case 10: // ACTIVE_BY
          return ACTIVE_BY;
        case 11: // CLIENT_VERSION
          return CLIENT_VERSION;
        case 12: // CATALOG
          return CATALOG;
        case 13: // CLIENT_AGENT
          return CLIENT_AGENT;
        case 14: // DESC
          return DESC;
        case 15: // DIRECTION
          return DIRECTION;
        case 16: // EFFECT
          return EFFECT;
        case 17: // LATITUDE
          return LATITUDE;
        case 18: // LONGITUDE
          return LONGITUDE;
        case 19: // LENGTH
          return LENGTH;
        case 20: // M3U8
          return M3U8;
        case 21: // UPLOAD_START_TIME
          return UPLOAD_START_TIME;
        case 22: // UPLOAD_STOP_TIME
          return UPLOAD_STOP_TIME;
        case 23: // PROCESS_START_TIME
          return PROCESS_START_TIME;
        case 24: // PROCESS_STOP_TIME
          return PROCESS_STOP_TIME;
        case 25: // PUBLISH_START_TIME
          return PUBLISH_START_TIME;
        case 26: // PUBLISH_STOP_TIME
          return PUBLISH_STOP_TIME;
        case 27: // RECORD_START_TIME
          return RECORD_START_TIME;
        case 28: // RECORD_STOP_TIME
          return RECORD_STOP_TIME;
        case 29: // TRANSCODED
          return TRANSCODED;
        case 30: // USER
          return USER;
        case 31: // UUID
          return UUID;
        case 32: // AUDIO_PATH
          return AUDIO_PATH;
        case 33: // FILE_PATH
          return FILE_PATH;
        case 34: // IMG3IN1
          return IMG3IN1;
        case 35: // NEED_AUDIO
          return NEED_AUDIO;
        case 36: // SHOW_GEO
          return SHOW_GEO;
        case 37: // TYPE
          return TYPE;
        case 38: // ALBUM
          return ALBUM;
        case 39: // WEIPAI_VIDEO
          return WEIPAI_VIDEO;
        case 40: // POSTED
          return POSTED;
        case 41: // CUSTOM_COVER_NUM
          return CUSTOM_COVER_NUM;
        case 42: // DEFAULT_IMG
          return DEFAULT_IMG;
        case 43: // IMG_LAST_MODIFIED
          return IMG_LAST_MODIFIED;
        case 44: // DELETED
          return DELETED;
        case 45: // CITY
          return CITY;
        case 46: // DEL_AT
          return DEL_AT;
        case 47: // DEL_BY
          return DEL_BY;
        case 48: // NICK_NAME
          return NICK_NAME;
        case 49: // PROFILE_IMG
          return PROFILE_IMG;
        case 50: // HOTUSER
          return HOTUSER;
        case 51: // DANGER
          return DANGER;
        case 52: // FIRST_UPLOAD
          return FIRST_UPLOAD;
        case 53: // POPULAR
          return POPULAR;
        case 54: // POOL
          return POOL;
        case 55: // TOTAL_PLAY
          return TOTAL_PLAY;
        case 56: // COMMENTED
          return COMMENTED;
        case 57: // GIFT
          return GIFT;
        case 58: // LIKED
          return LIKED;
        case 59: // FANS
          return FANS;
        case 60: // FOLLOW
          return FOLLOW;
        case 61: // VIDEOS
          return VIDEOS;
        case 62: // TOTAL
          return TOTAL;
        case 63: // HEART_LIKE
          return HEART_LIKE;
        case 64: // HEART_STOP
          return HEART_STOP;
        case 65: // POOL_STATUS
          return POOL_STATUS;
        case 66: // VIDEO_SCREENSHOTS
          return VIDEO_SCREENSHOTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDAT_ISSET_ID = 0;
  private static final int __ACTIVE_ISSET_ID = 1;
  private static final int __ACTIVEAT_ISSET_ID = 2;
  private static final int __PUSHED_ISSET_ID = 3;
  private static final int __PUSHEDAT_ISSET_ID = 4;
  private static final int __RECOMMENDED_ISSET_ID = 5;
  private static final int __RECOMMENDEDAT_ISSET_ID = 6;
  private static final int __DIRECTION_ISSET_ID = 7;
  private static final int __LATITUDE_ISSET_ID = 8;
  private static final int __LONGITUDE_ISSET_ID = 9;
  private static final int __LENGTH_ISSET_ID = 10;
  private static final int __M3U8_ISSET_ID = 11;
  private static final int __UPLOADSTARTTIME_ISSET_ID = 12;
  private static final int __UPLOADSTOPTIME_ISSET_ID = 13;
  private static final int __PROCESSSTARTTIME_ISSET_ID = 14;
  private static final int __PROCESSSTOPTIME_ISSET_ID = 15;
  private static final int __PUBLISHSTARTTIME_ISSET_ID = 16;
  private static final int __PUBLISHSTOPTIME_ISSET_ID = 17;
  private static final int __RECORDSTARTTIME_ISSET_ID = 18;
  private static final int __RECORDSTOPTIME_ISSET_ID = 19;
  private static final int __TRANSCODED_ISSET_ID = 20;
  private static final int __NEEDAUDIO_ISSET_ID = 21;
  private static final int __SHOWGEO_ISSET_ID = 22;
  private static final int __ALBUM_ISSET_ID = 23;
  private static final int __WEIPAIVIDEO_ISSET_ID = 24;
  private static final int __POSTED_ISSET_ID = 25;
  private static final int __CUSTOMCOVERNUM_ISSET_ID = 26;
  private static final int __IMGLASTMODIFIED_ISSET_ID = 27;
  private static final int __DELETED_ISSET_ID = 28;
  private static final int __DELAT_ISSET_ID = 29;
  private static final int __HOTUSER_ISSET_ID = 30;
  private static final int __DANGER_ISSET_ID = 31;
  private static final int __FIRSTUPLOAD_ISSET_ID = 32;
  private static final int __POPULAR_ISSET_ID = 33;
  private static final int __POOL_ISSET_ID = 34;
  private static final int __TOTALPLAY_ISSET_ID = 35;
  private static final int __COMMENTED_ISSET_ID = 36;
  private static final int __GIFT_ISSET_ID = 37;
  private static final int __LIKED_ISSET_ID = 38;
  private static final int __FANS_ISSET_ID = 39;
  private static final int __FOLLOW_ISSET_ID = 40;
  private static final int __VIDEOS_ISSET_ID = 41;
  private static final int __TOTAL_ISSET_ID = 42;
  private static final int __HEARTLIKE_ISSET_ID = 43;
  private static final int __HEARTSTOP_ISSET_ID = 44;
  private static final int __POOLSTATUS_ISSET_ID = 45;
  private long __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_AT, new org.apache.thrift.meta_data.FieldMetaData("activeAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUSHED, new org.apache.thrift.meta_data.FieldMetaData("pushed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUSHED_AT, new org.apache.thrift.meta_data.FieldMetaData("pushedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOMMENDED, new org.apache.thrift.meta_data.FieldMetaData("recommended", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOMMENDED_AT, new org.apache.thrift.meta_data.FieldMetaData("recommendedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOMMENDED_BY, new org.apache.thrift.meta_data.FieldMetaData("recommendedBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_BY, new org.apache.thrift.meta_data.FieldMetaData("activeBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("clientVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_AGENT, new org.apache.thrift.meta_data.FieldMetaData("clientAgent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EFFECT, new org.apache.thrift.meta_data.FieldMetaData("effect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.M3U8, new org.apache.thrift.meta_data.FieldMetaData("m3u8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPLOAD_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("uploadStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPLOAD_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("uploadStopTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESS_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("processStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESS_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("processStopTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("publishStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("publishStopTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORD_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("recordStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORD_STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("recordStopTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSCODED, new org.apache.thrift.meta_data.FieldMetaData("transcoded", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIO_PATH, new org.apache.thrift.meta_data.FieldMetaData("audioPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG3IN1, new org.apache.thrift.meta_data.FieldMetaData("img3in1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEED_AUDIO, new org.apache.thrift.meta_data.FieldMetaData("needAudio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_GEO, new org.apache.thrift.meta_data.FieldMetaData("showGeo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALBUM, new org.apache.thrift.meta_data.FieldMetaData("album", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIPAI_VIDEO, new org.apache.thrift.meta_data.FieldMetaData("weipaiVideo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSTED, new org.apache.thrift.meta_data.FieldMetaData("posted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUSTOM_COVER_NUM, new org.apache.thrift.meta_data.FieldMetaData("customCoverNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_IMG, new org.apache.thrift.meta_data.FieldMetaData("defaultImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_LAST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("imgLastModified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEL_AT, new org.apache.thrift.meta_data.FieldMetaData("delAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEL_BY, new org.apache.thrift.meta_data.FieldMetaData("delBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_IMG, new org.apache.thrift.meta_data.FieldMetaData("profileImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOTUSER, new org.apache.thrift.meta_data.FieldMetaData("hotuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DANGER, new org.apache.thrift.meta_data.FieldMetaData("danger", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRST_UPLOAD, new org.apache.thrift.meta_data.FieldMetaData("firstUpload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POPULAR, new org.apache.thrift.meta_data.FieldMetaData("popular", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POOL, new org.apache.thrift.meta_data.FieldMetaData("pool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_PLAY, new org.apache.thrift.meta_data.FieldMetaData("totalPlay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENTED, new org.apache.thrift.meta_data.FieldMetaData("commented", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIFT, new org.apache.thrift.meta_data.FieldMetaData("gift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIKED, new org.apache.thrift.meta_data.FieldMetaData("liked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FANS, new org.apache.thrift.meta_data.FieldMetaData("fans", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLLOW, new org.apache.thrift.meta_data.FieldMetaData("follow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIDEOS, new org.apache.thrift.meta_data.FieldMetaData("videos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HEART_LIKE, new org.apache.thrift.meta_data.FieldMetaData("heartLike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEART_STOP, new org.apache.thrift.meta_data.FieldMetaData("heartStop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POOL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("poolStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIDEO_SCREENSHOTS, new org.apache.thrift.meta_data.FieldMetaData("videoScreenshots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdminVideoView.class, metaDataMap);
  }

  public AdminVideoView() {
  }

  public AdminVideoView(
    String vid,
    int createdAt,
    int active,
    int activeAt,
    int pushed,
    int pushedAt,
    int recommended,
    int recommendedAt,
    String recommendedBy,
    String activeBy,
    String clientVersion,
    String catalog,
    String clientAgent,
    String desc,
    int direction,
    String effect,
    double latitude,
    double longitude,
    double length,
    int m3u8,
    int uploadStartTime,
    int uploadStopTime,
    int processStartTime,
    int processStopTime,
    int publishStartTime,
    int publishStopTime,
    int recordStartTime,
    int recordStopTime,
    int transcoded,
    String user,
    String uuid,
    String audioPath,
    String filePath,
    String img3in1,
    int needAudio,
    int showGeo,
    String type,
    int album,
    int weipaiVideo,
    int posted,
    int customCoverNum,
    String defaultImg,
    int imgLastModified,
    int deleted,
    String city,
    int delAt,
    String delBy,
    String nickName,
    String profileImg,
    int hotuser,
    int danger,
    int firstUpload,
    double popular,
    int pool,
    int totalPlay,
    int commented,
    int gift,
    int liked,
    int fans,
    int follow,
    int videos,
    double total,
    int heartLike,
    int heartStop,
    int poolStatus,
    String videoScreenshots)
  {
    this();
    this.vid = vid;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.active = active;
    setActiveIsSet(true);
    this.activeAt = activeAt;
    setActiveAtIsSet(true);
    this.pushed = pushed;
    setPushedIsSet(true);
    this.pushedAt = pushedAt;
    setPushedAtIsSet(true);
    this.recommended = recommended;
    setRecommendedIsSet(true);
    this.recommendedAt = recommendedAt;
    setRecommendedAtIsSet(true);
    this.recommendedBy = recommendedBy;
    this.activeBy = activeBy;
    this.clientVersion = clientVersion;
    this.catalog = catalog;
    this.clientAgent = clientAgent;
    this.desc = desc;
    this.direction = direction;
    setDirectionIsSet(true);
    this.effect = effect;
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.longitude = longitude;
    setLongitudeIsSet(true);
    this.length = length;
    setLengthIsSet(true);
    this.m3u8 = m3u8;
    setM3u8IsSet(true);
    this.uploadStartTime = uploadStartTime;
    setUploadStartTimeIsSet(true);
    this.uploadStopTime = uploadStopTime;
    setUploadStopTimeIsSet(true);
    this.processStartTime = processStartTime;
    setProcessStartTimeIsSet(true);
    this.processStopTime = processStopTime;
    setProcessStopTimeIsSet(true);
    this.publishStartTime = publishStartTime;
    setPublishStartTimeIsSet(true);
    this.publishStopTime = publishStopTime;
    setPublishStopTimeIsSet(true);
    this.recordStartTime = recordStartTime;
    setRecordStartTimeIsSet(true);
    this.recordStopTime = recordStopTime;
    setRecordStopTimeIsSet(true);
    this.transcoded = transcoded;
    setTranscodedIsSet(true);
    this.user = user;
    this.uuid = uuid;
    this.audioPath = audioPath;
    this.filePath = filePath;
    this.img3in1 = img3in1;
    this.needAudio = needAudio;
    setNeedAudioIsSet(true);
    this.showGeo = showGeo;
    setShowGeoIsSet(true);
    this.type = type;
    this.album = album;
    setAlbumIsSet(true);
    this.weipaiVideo = weipaiVideo;
    setWeipaiVideoIsSet(true);
    this.posted = posted;
    setPostedIsSet(true);
    this.customCoverNum = customCoverNum;
    setCustomCoverNumIsSet(true);
    this.defaultImg = defaultImg;
    this.imgLastModified = imgLastModified;
    setImgLastModifiedIsSet(true);
    this.deleted = deleted;
    setDeletedIsSet(true);
    this.city = city;
    this.delAt = delAt;
    setDelAtIsSet(true);
    this.delBy = delBy;
    this.nickName = nickName;
    this.profileImg = profileImg;
    this.hotuser = hotuser;
    setHotuserIsSet(true);
    this.danger = danger;
    setDangerIsSet(true);
    this.firstUpload = firstUpload;
    setFirstUploadIsSet(true);
    this.popular = popular;
    setPopularIsSet(true);
    this.pool = pool;
    setPoolIsSet(true);
    this.totalPlay = totalPlay;
    setTotalPlayIsSet(true);
    this.commented = commented;
    setCommentedIsSet(true);
    this.gift = gift;
    setGiftIsSet(true);
    this.liked = liked;
    setLikedIsSet(true);
    this.fans = fans;
    setFansIsSet(true);
    this.follow = follow;
    setFollowIsSet(true);
    this.videos = videos;
    setVideosIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.heartLike = heartLike;
    setHeartLikeIsSet(true);
    this.heartStop = heartStop;
    setHeartStopIsSet(true);
    this.poolStatus = poolStatus;
    setPoolStatusIsSet(true);
    this.videoScreenshots = videoScreenshots;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdminVideoView(AdminVideoView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVid()) {
      this.vid = other.vid;
    }
    this.createdAt = other.createdAt;
    this.active = other.active;
    this.activeAt = other.activeAt;
    this.pushed = other.pushed;
    this.pushedAt = other.pushedAt;
    this.recommended = other.recommended;
    this.recommendedAt = other.recommendedAt;
    if (other.isSetRecommendedBy()) {
      this.recommendedBy = other.recommendedBy;
    }
    if (other.isSetActiveBy()) {
      this.activeBy = other.activeBy;
    }
    if (other.isSetClientVersion()) {
      this.clientVersion = other.clientVersion;
    }
    if (other.isSetCatalog()) {
      this.catalog = other.catalog;
    }
    if (other.isSetClientAgent()) {
      this.clientAgent = other.clientAgent;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.direction = other.direction;
    if (other.isSetEffect()) {
      this.effect = other.effect;
    }
    this.latitude = other.latitude;
    this.longitude = other.longitude;
    this.length = other.length;
    this.m3u8 = other.m3u8;
    this.uploadStartTime = other.uploadStartTime;
    this.uploadStopTime = other.uploadStopTime;
    this.processStartTime = other.processStartTime;
    this.processStopTime = other.processStopTime;
    this.publishStartTime = other.publishStartTime;
    this.publishStopTime = other.publishStopTime;
    this.recordStartTime = other.recordStartTime;
    this.recordStopTime = other.recordStopTime;
    this.transcoded = other.transcoded;
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetAudioPath()) {
      this.audioPath = other.audioPath;
    }
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    if (other.isSetImg3in1()) {
      this.img3in1 = other.img3in1;
    }
    this.needAudio = other.needAudio;
    this.showGeo = other.showGeo;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.album = other.album;
    this.weipaiVideo = other.weipaiVideo;
    this.posted = other.posted;
    this.customCoverNum = other.customCoverNum;
    if (other.isSetDefaultImg()) {
      this.defaultImg = other.defaultImg;
    }
    this.imgLastModified = other.imgLastModified;
    this.deleted = other.deleted;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.delAt = other.delAt;
    if (other.isSetDelBy()) {
      this.delBy = other.delBy;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetProfileImg()) {
      this.profileImg = other.profileImg;
    }
    this.hotuser = other.hotuser;
    this.danger = other.danger;
    this.firstUpload = other.firstUpload;
    this.popular = other.popular;
    this.pool = other.pool;
    this.totalPlay = other.totalPlay;
    this.commented = other.commented;
    this.gift = other.gift;
    this.liked = other.liked;
    this.fans = other.fans;
    this.follow = other.follow;
    this.videos = other.videos;
    this.total = other.total;
    this.heartLike = other.heartLike;
    this.heartStop = other.heartStop;
    this.poolStatus = other.poolStatus;
    if (other.isSetVideoScreenshots()) {
      this.videoScreenshots = other.videoScreenshots;
    }
  }

  public AdminVideoView deepCopy() {
    return new AdminVideoView(this);
  }

  @Override
  public void clear() {
    this.vid = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setActiveIsSet(false);
    this.active = 0;
    setActiveAtIsSet(false);
    this.activeAt = 0;
    setPushedIsSet(false);
    this.pushed = 0;
    setPushedAtIsSet(false);
    this.pushedAt = 0;
    setRecommendedIsSet(false);
    this.recommended = 0;
    setRecommendedAtIsSet(false);
    this.recommendedAt = 0;
    this.recommendedBy = null;
    this.activeBy = null;
    this.clientVersion = null;
    this.catalog = null;
    this.clientAgent = null;
    this.desc = null;
    setDirectionIsSet(false);
    this.direction = 0;
    this.effect = null;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setLengthIsSet(false);
    this.length = 0.0;
    setM3u8IsSet(false);
    this.m3u8 = 0;
    setUploadStartTimeIsSet(false);
    this.uploadStartTime = 0;
    setUploadStopTimeIsSet(false);
    this.uploadStopTime = 0;
    setProcessStartTimeIsSet(false);
    this.processStartTime = 0;
    setProcessStopTimeIsSet(false);
    this.processStopTime = 0;
    setPublishStartTimeIsSet(false);
    this.publishStartTime = 0;
    setPublishStopTimeIsSet(false);
    this.publishStopTime = 0;
    setRecordStartTimeIsSet(false);
    this.recordStartTime = 0;
    setRecordStopTimeIsSet(false);
    this.recordStopTime = 0;
    setTranscodedIsSet(false);
    this.transcoded = 0;
    this.user = null;
    this.uuid = null;
    this.audioPath = null;
    this.filePath = null;
    this.img3in1 = null;
    setNeedAudioIsSet(false);
    this.needAudio = 0;
    setShowGeoIsSet(false);
    this.showGeo = 0;
    this.type = null;
    setAlbumIsSet(false);
    this.album = 0;
    setWeipaiVideoIsSet(false);
    this.weipaiVideo = 0;
    setPostedIsSet(false);
    this.posted = 0;
    setCustomCoverNumIsSet(false);
    this.customCoverNum = 0;
    this.defaultImg = null;
    setImgLastModifiedIsSet(false);
    this.imgLastModified = 0;
    setDeletedIsSet(false);
    this.deleted = 0;
    this.city = null;
    setDelAtIsSet(false);
    this.delAt = 0;
    this.delBy = null;
    this.nickName = null;
    this.profileImg = null;
    setHotuserIsSet(false);
    this.hotuser = 0;
    setDangerIsSet(false);
    this.danger = 0;
    setFirstUploadIsSet(false);
    this.firstUpload = 0;
    setPopularIsSet(false);
    this.popular = 0.0;
    setPoolIsSet(false);
    this.pool = 0;
    setTotalPlayIsSet(false);
    this.totalPlay = 0;
    setCommentedIsSet(false);
    this.commented = 0;
    setGiftIsSet(false);
    this.gift = 0;
    setLikedIsSet(false);
    this.liked = 0;
    setFansIsSet(false);
    this.fans = 0;
    setFollowIsSet(false);
    this.follow = 0;
    setVideosIsSet(false);
    this.videos = 0;
    setTotalIsSet(false);
    this.total = 0.0;
    setHeartLikeIsSet(false);
    this.heartLike = 0;
    setHeartStopIsSet(false);
    this.heartStop = 0;
    setPoolStatusIsSet(false);
    this.poolStatus = 0;
    this.videoScreenshots = null;
  }

  public String getVid() {
    return this.vid;
  }

  public AdminVideoView setVid(String vid) {
    this.vid = vid;
    return this;
  }

  public void unsetVid() {
    this.vid = null;
  }

  /** Returns true if field vid is set (has been assigned a value) and false otherwise */
  public boolean isSetVid() {
    return this.vid != null;
  }

  public void setVidIsSet(boolean value) {
    if (!value) {
      this.vid = null;
    }
  }

  public int getCreatedAt() {
    return this.createdAt;
  }

  public AdminVideoView setCreatedAt(int createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public int getActive() {
    return this.active;
  }

  public AdminVideoView setActive(int active) {
    this.active = active;
    setActiveIsSet(true);
    return this;
  }

  public void unsetActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public int getActiveAt() {
    return this.activeAt;
  }

  public AdminVideoView setActiveAt(int activeAt) {
    this.activeAt = activeAt;
    setActiveAtIsSet(true);
    return this;
  }

  public void unsetActiveAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEAT_ISSET_ID);
  }

  /** Returns true if field activeAt is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveAt() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEAT_ISSET_ID);
  }

  public void setActiveAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEAT_ISSET_ID, value);
  }

  public int getPushed() {
    return this.pushed;
  }

  public AdminVideoView setPushed(int pushed) {
    this.pushed = pushed;
    setPushedIsSet(true);
    return this;
  }

  public void unsetPushed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUSHED_ISSET_ID);
  }

  /** Returns true if field pushed is set (has been assigned a value) and false otherwise */
  public boolean isSetPushed() {
    return EncodingUtils.testBit(__isset_bitfield, __PUSHED_ISSET_ID);
  }

  public void setPushedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUSHED_ISSET_ID, value);
  }

  public int getPushedAt() {
    return this.pushedAt;
  }

  public AdminVideoView setPushedAt(int pushedAt) {
    this.pushedAt = pushedAt;
    setPushedAtIsSet(true);
    return this;
  }

  public void unsetPushedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUSHEDAT_ISSET_ID);
  }

  /** Returns true if field pushedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPushedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __PUSHEDAT_ISSET_ID);
  }

  public void setPushedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUSHEDAT_ISSET_ID, value);
  }

  public int getRecommended() {
    return this.recommended;
  }

  public AdminVideoView setRecommended(int recommended) {
    this.recommended = recommended;
    setRecommendedIsSet(true);
    return this;
  }

  public void unsetRecommended() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOMMENDED_ISSET_ID);
  }

  /** Returns true if field recommended is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommended() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOMMENDED_ISSET_ID);
  }

  public void setRecommendedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOMMENDED_ISSET_ID, value);
  }

  public int getRecommendedAt() {
    return this.recommendedAt;
  }

  public AdminVideoView setRecommendedAt(int recommendedAt) {
    this.recommendedAt = recommendedAt;
    setRecommendedAtIsSet(true);
    return this;
  }

  public void unsetRecommendedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOMMENDEDAT_ISSET_ID);
  }

  /** Returns true if field recommendedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOMMENDEDAT_ISSET_ID);
  }

  public void setRecommendedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOMMENDEDAT_ISSET_ID, value);
  }

  public String getRecommendedBy() {
    return this.recommendedBy;
  }

  public AdminVideoView setRecommendedBy(String recommendedBy) {
    this.recommendedBy = recommendedBy;
    return this;
  }

  public void unsetRecommendedBy() {
    this.recommendedBy = null;
  }

  /** Returns true if field recommendedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendedBy() {
    return this.recommendedBy != null;
  }

  public void setRecommendedByIsSet(boolean value) {
    if (!value) {
      this.recommendedBy = null;
    }
  }

  public String getActiveBy() {
    return this.activeBy;
  }

  public AdminVideoView setActiveBy(String activeBy) {
    this.activeBy = activeBy;
    return this;
  }

  public void unsetActiveBy() {
    this.activeBy = null;
  }

  /** Returns true if field activeBy is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveBy() {
    return this.activeBy != null;
  }

  public void setActiveByIsSet(boolean value) {
    if (!value) {
      this.activeBy = null;
    }
  }

  public String getClientVersion() {
    return this.clientVersion;
  }

  public AdminVideoView setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

  public void unsetClientVersion() {
    this.clientVersion = null;
  }

  /** Returns true if field clientVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetClientVersion() {
    return this.clientVersion != null;
  }

  public void setClientVersionIsSet(boolean value) {
    if (!value) {
      this.clientVersion = null;
    }
  }

  public String getCatalog() {
    return this.catalog;
  }

  public AdminVideoView setCatalog(String catalog) {
    this.catalog = catalog;
    return this;
  }

  public void unsetCatalog() {
    this.catalog = null;
  }

  /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog() {
    return this.catalog != null;
  }

  public void setCatalogIsSet(boolean value) {
    if (!value) {
      this.catalog = null;
    }
  }

  public String getClientAgent() {
    return this.clientAgent;
  }

  public AdminVideoView setClientAgent(String clientAgent) {
    this.clientAgent = clientAgent;
    return this;
  }

  public void unsetClientAgent() {
    this.clientAgent = null;
  }

  /** Returns true if field clientAgent is set (has been assigned a value) and false otherwise */
  public boolean isSetClientAgent() {
    return this.clientAgent != null;
  }

  public void setClientAgentIsSet(boolean value) {
    if (!value) {
      this.clientAgent = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public AdminVideoView setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getDirection() {
    return this.direction;
  }

  public AdminVideoView setDirection(int direction) {
    this.direction = direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return EncodingUtils.testBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECTION_ISSET_ID, value);
  }

  public String getEffect() {
    return this.effect;
  }

  public AdminVideoView setEffect(String effect) {
    this.effect = effect;
    return this;
  }

  public void unsetEffect() {
    this.effect = null;
  }

  /** Returns true if field effect is set (has been assigned a value) and false otherwise */
  public boolean isSetEffect() {
    return this.effect != null;
  }

  public void setEffectIsSet(boolean value) {
    if (!value) {
      this.effect = null;
    }
  }

  public double getLatitude() {
    return this.latitude;
  }

  public AdminVideoView setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public AdminVideoView setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public double getLength() {
    return this.length;
  }

  public AdminVideoView setLength(double length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public int getM3u8() {
    return this.m3u8;
  }

  public AdminVideoView setM3u8(int m3u8) {
    this.m3u8 = m3u8;
    setM3u8IsSet(true);
    return this;
  }

  public void unsetM3u8() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __M3U8_ISSET_ID);
  }

  /** Returns true if field m3u8 is set (has been assigned a value) and false otherwise */
  public boolean isSetM3u8() {
    return EncodingUtils.testBit(__isset_bitfield, __M3U8_ISSET_ID);
  }

  public void setM3u8IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __M3U8_ISSET_ID, value);
  }

  public int getUploadStartTime() {
    return this.uploadStartTime;
  }

  public AdminVideoView setUploadStartTime(int uploadStartTime) {
    this.uploadStartTime = uploadStartTime;
    setUploadStartTimeIsSet(true);
    return this;
  }

  public void unsetUploadStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADSTARTTIME_ISSET_ID);
  }

  /** Returns true if field uploadStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADSTARTTIME_ISSET_ID);
  }

  public void setUploadStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADSTARTTIME_ISSET_ID, value);
  }

  public int getUploadStopTime() {
    return this.uploadStopTime;
  }

  public AdminVideoView setUploadStopTime(int uploadStopTime) {
    this.uploadStopTime = uploadStopTime;
    setUploadStopTimeIsSet(true);
    return this;
  }

  public void unsetUploadStopTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADSTOPTIME_ISSET_ID);
  }

  /** Returns true if field uploadStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadStopTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADSTOPTIME_ISSET_ID);
  }

  public void setUploadStopTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADSTOPTIME_ISSET_ID, value);
  }

  public int getProcessStartTime() {
    return this.processStartTime;
  }

  public AdminVideoView setProcessStartTime(int processStartTime) {
    this.processStartTime = processStartTime;
    setProcessStartTimeIsSet(true);
    return this;
  }

  public void unsetProcessStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESSSTARTTIME_ISSET_ID);
  }

  /** Returns true if field processStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESSSTARTTIME_ISSET_ID);
  }

  public void setProcessStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESSSTARTTIME_ISSET_ID, value);
  }

  public int getProcessStopTime() {
    return this.processStopTime;
  }

  public AdminVideoView setProcessStopTime(int processStopTime) {
    this.processStopTime = processStopTime;
    setProcessStopTimeIsSet(true);
    return this;
  }

  public void unsetProcessStopTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESSSTOPTIME_ISSET_ID);
  }

  /** Returns true if field processStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessStopTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESSSTOPTIME_ISSET_ID);
  }

  public void setProcessStopTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESSSTOPTIME_ISSET_ID, value);
  }

  public int getPublishStartTime() {
    return this.publishStartTime;
  }

  public AdminVideoView setPublishStartTime(int publishStartTime) {
    this.publishStartTime = publishStartTime;
    setPublishStartTimeIsSet(true);
    return this;
  }

  public void unsetPublishStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHSTARTTIME_ISSET_ID);
  }

  /** Returns true if field publishStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHSTARTTIME_ISSET_ID);
  }

  public void setPublishStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHSTARTTIME_ISSET_ID, value);
  }

  public int getPublishStopTime() {
    return this.publishStopTime;
  }

  public AdminVideoView setPublishStopTime(int publishStopTime) {
    this.publishStopTime = publishStopTime;
    setPublishStopTimeIsSet(true);
    return this;
  }

  public void unsetPublishStopTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHSTOPTIME_ISSET_ID);
  }

  /** Returns true if field publishStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishStopTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHSTOPTIME_ISSET_ID);
  }

  public void setPublishStopTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHSTOPTIME_ISSET_ID, value);
  }

  public int getRecordStartTime() {
    return this.recordStartTime;
  }

  public AdminVideoView setRecordStartTime(int recordStartTime) {
    this.recordStartTime = recordStartTime;
    setRecordStartTimeIsSet(true);
    return this;
  }

  public void unsetRecordStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDSTARTTIME_ISSET_ID);
  }

  /** Returns true if field recordStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDSTARTTIME_ISSET_ID);
  }

  public void setRecordStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDSTARTTIME_ISSET_ID, value);
  }

  public int getRecordStopTime() {
    return this.recordStopTime;
  }

  public AdminVideoView setRecordStopTime(int recordStopTime) {
    this.recordStopTime = recordStopTime;
    setRecordStopTimeIsSet(true);
    return this;
  }

  public void unsetRecordStopTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDSTOPTIME_ISSET_ID);
  }

  /** Returns true if field recordStopTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordStopTime() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDSTOPTIME_ISSET_ID);
  }

  public void setRecordStopTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDSTOPTIME_ISSET_ID, value);
  }

  public int getTranscoded() {
    return this.transcoded;
  }

  public AdminVideoView setTranscoded(int transcoded) {
    this.transcoded = transcoded;
    setTranscodedIsSet(true);
    return this;
  }

  public void unsetTranscoded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSCODED_ISSET_ID);
  }

  /** Returns true if field transcoded is set (has been assigned a value) and false otherwise */
  public boolean isSetTranscoded() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSCODED_ISSET_ID);
  }

  public void setTranscodedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSCODED_ISSET_ID, value);
  }

  public String getUser() {
    return this.user;
  }

  public AdminVideoView setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getUuid() {
    return this.uuid;
  }

  public AdminVideoView setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public String getAudioPath() {
    return this.audioPath;
  }

  public AdminVideoView setAudioPath(String audioPath) {
    this.audioPath = audioPath;
    return this;
  }

  public void unsetAudioPath() {
    this.audioPath = null;
  }

  /** Returns true if field audioPath is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioPath() {
    return this.audioPath != null;
  }

  public void setAudioPathIsSet(boolean value) {
    if (!value) {
      this.audioPath = null;
    }
  }

  public String getFilePath() {
    return this.filePath;
  }

  public AdminVideoView setFilePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public String getImg3in1() {
    return this.img3in1;
  }

  public AdminVideoView setImg3in1(String img3in1) {
    this.img3in1 = img3in1;
    return this;
  }

  public void unsetImg3in1() {
    this.img3in1 = null;
  }

  /** Returns true if field img3in1 is set (has been assigned a value) and false otherwise */
  public boolean isSetImg3in1() {
    return this.img3in1 != null;
  }

  public void setImg3in1IsSet(boolean value) {
    if (!value) {
      this.img3in1 = null;
    }
  }

  public int getNeedAudio() {
    return this.needAudio;
  }

  public AdminVideoView setNeedAudio(int needAudio) {
    this.needAudio = needAudio;
    setNeedAudioIsSet(true);
    return this;
  }

  public void unsetNeedAudio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDAUDIO_ISSET_ID);
  }

  /** Returns true if field needAudio is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedAudio() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDAUDIO_ISSET_ID);
  }

  public void setNeedAudioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDAUDIO_ISSET_ID, value);
  }

  public int getShowGeo() {
    return this.showGeo;
  }

  public AdminVideoView setShowGeo(int showGeo) {
    this.showGeo = showGeo;
    setShowGeoIsSet(true);
    return this;
  }

  public void unsetShowGeo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWGEO_ISSET_ID);
  }

  /** Returns true if field showGeo is set (has been assigned a value) and false otherwise */
  public boolean isSetShowGeo() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWGEO_ISSET_ID);
  }

  public void setShowGeoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWGEO_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public AdminVideoView setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getAlbum() {
    return this.album;
  }

  public AdminVideoView setAlbum(int album) {
    this.album = album;
    setAlbumIsSet(true);
    return this;
  }

  public void unsetAlbum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALBUM_ISSET_ID);
  }

  /** Returns true if field album is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbum() {
    return EncodingUtils.testBit(__isset_bitfield, __ALBUM_ISSET_ID);
  }

  public void setAlbumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALBUM_ISSET_ID, value);
  }

  public int getWeipaiVideo() {
    return this.weipaiVideo;
  }

  public AdminVideoView setWeipaiVideo(int weipaiVideo) {
    this.weipaiVideo = weipaiVideo;
    setWeipaiVideoIsSet(true);
    return this;
  }

  public void unsetWeipaiVideo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIPAIVIDEO_ISSET_ID);
  }

  /** Returns true if field weipaiVideo is set (has been assigned a value) and false otherwise */
  public boolean isSetWeipaiVideo() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIPAIVIDEO_ISSET_ID);
  }

  public void setWeipaiVideoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIPAIVIDEO_ISSET_ID, value);
  }

  public int getPosted() {
    return this.posted;
  }

  public AdminVideoView setPosted(int posted) {
    this.posted = posted;
    setPostedIsSet(true);
    return this;
  }

  public void unsetPosted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSTED_ISSET_ID);
  }

  /** Returns true if field posted is set (has been assigned a value) and false otherwise */
  public boolean isSetPosted() {
    return EncodingUtils.testBit(__isset_bitfield, __POSTED_ISSET_ID);
  }

  public void setPostedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSTED_ISSET_ID, value);
  }

  public int getCustomCoverNum() {
    return this.customCoverNum;
  }

  public AdminVideoView setCustomCoverNum(int customCoverNum) {
    this.customCoverNum = customCoverNum;
    setCustomCoverNumIsSet(true);
    return this;
  }

  public void unsetCustomCoverNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTOMCOVERNUM_ISSET_ID);
  }

  /** Returns true if field customCoverNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomCoverNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTOMCOVERNUM_ISSET_ID);
  }

  public void setCustomCoverNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTOMCOVERNUM_ISSET_ID, value);
  }

  public String getDefaultImg() {
    return this.defaultImg;
  }

  public AdminVideoView setDefaultImg(String defaultImg) {
    this.defaultImg = defaultImg;
    return this;
  }

  public void unsetDefaultImg() {
    this.defaultImg = null;
  }

  /** Returns true if field defaultImg is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultImg() {
    return this.defaultImg != null;
  }

  public void setDefaultImgIsSet(boolean value) {
    if (!value) {
      this.defaultImg = null;
    }
  }

  public int getImgLastModified() {
    return this.imgLastModified;
  }

  public AdminVideoView setImgLastModified(int imgLastModified) {
    this.imgLastModified = imgLastModified;
    setImgLastModifiedIsSet(true);
    return this;
  }

  public void unsetImgLastModified() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMGLASTMODIFIED_ISSET_ID);
  }

  /** Returns true if field imgLastModified is set (has been assigned a value) and false otherwise */
  public boolean isSetImgLastModified() {
    return EncodingUtils.testBit(__isset_bitfield, __IMGLASTMODIFIED_ISSET_ID);
  }

  public void setImgLastModifiedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMGLASTMODIFIED_ISSET_ID, value);
  }

  public int getDeleted() {
    return this.deleted;
  }

  public AdminVideoView setDeleted(int deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
    return this;
  }

  public void unsetDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  public String getCity() {
    return this.city;
  }

  public AdminVideoView setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getDelAt() {
    return this.delAt;
  }

  public AdminVideoView setDelAt(int delAt) {
    this.delAt = delAt;
    setDelAtIsSet(true);
    return this;
  }

  public void unsetDelAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELAT_ISSET_ID);
  }

  /** Returns true if field delAt is set (has been assigned a value) and false otherwise */
  public boolean isSetDelAt() {
    return EncodingUtils.testBit(__isset_bitfield, __DELAT_ISSET_ID);
  }

  public void setDelAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELAT_ISSET_ID, value);
  }

  public String getDelBy() {
    return this.delBy;
  }

  public AdminVideoView setDelBy(String delBy) {
    this.delBy = delBy;
    return this;
  }

  public void unsetDelBy() {
    this.delBy = null;
  }

  /** Returns true if field delBy is set (has been assigned a value) and false otherwise */
  public boolean isSetDelBy() {
    return this.delBy != null;
  }

  public void setDelByIsSet(boolean value) {
    if (!value) {
      this.delBy = null;
    }
  }

  public String getNickName() {
    return this.nickName;
  }

  public AdminVideoView setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String getProfileImg() {
    return this.profileImg;
  }

  public AdminVideoView setProfileImg(String profileImg) {
    this.profileImg = profileImg;
    return this;
  }

  public void unsetProfileImg() {
    this.profileImg = null;
  }

  /** Returns true if field profileImg is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileImg() {
    return this.profileImg != null;
  }

  public void setProfileImgIsSet(boolean value) {
    if (!value) {
      this.profileImg = null;
    }
  }

  public int getHotuser() {
    return this.hotuser;
  }

  public AdminVideoView setHotuser(int hotuser) {
    this.hotuser = hotuser;
    setHotuserIsSet(true);
    return this;
  }

  public void unsetHotuser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOTUSER_ISSET_ID);
  }

  /** Returns true if field hotuser is set (has been assigned a value) and false otherwise */
  public boolean isSetHotuser() {
    return EncodingUtils.testBit(__isset_bitfield, __HOTUSER_ISSET_ID);
  }

  public void setHotuserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOTUSER_ISSET_ID, value);
  }

  public int getDanger() {
    return this.danger;
  }

  public AdminVideoView setDanger(int danger) {
    this.danger = danger;
    setDangerIsSet(true);
    return this;
  }

  public void unsetDanger() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DANGER_ISSET_ID);
  }

  /** Returns true if field danger is set (has been assigned a value) and false otherwise */
  public boolean isSetDanger() {
    return EncodingUtils.testBit(__isset_bitfield, __DANGER_ISSET_ID);
  }

  public void setDangerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DANGER_ISSET_ID, value);
  }

  public int getFirstUpload() {
    return this.firstUpload;
  }

  public AdminVideoView setFirstUpload(int firstUpload) {
    this.firstUpload = firstUpload;
    setFirstUploadIsSet(true);
    return this;
  }

  public void unsetFirstUpload() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTUPLOAD_ISSET_ID);
  }

  /** Returns true if field firstUpload is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstUpload() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTUPLOAD_ISSET_ID);
  }

  public void setFirstUploadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTUPLOAD_ISSET_ID, value);
  }

  public double getPopular() {
    return this.popular;
  }

  public AdminVideoView setPopular(double popular) {
    this.popular = popular;
    setPopularIsSet(true);
    return this;
  }

  public void unsetPopular() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULAR_ISSET_ID);
  }

  /** Returns true if field popular is set (has been assigned a value) and false otherwise */
  public boolean isSetPopular() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULAR_ISSET_ID);
  }

  public void setPopularIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULAR_ISSET_ID, value);
  }

  public int getPool() {
    return this.pool;
  }

  public AdminVideoView setPool(int pool) {
    this.pool = pool;
    setPoolIsSet(true);
    return this;
  }

  public void unsetPool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POOL_ISSET_ID);
  }

  /** Returns true if field pool is set (has been assigned a value) and false otherwise */
  public boolean isSetPool() {
    return EncodingUtils.testBit(__isset_bitfield, __POOL_ISSET_ID);
  }

  public void setPoolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POOL_ISSET_ID, value);
  }

  public int getTotalPlay() {
    return this.totalPlay;
  }

  public AdminVideoView setTotalPlay(int totalPlay) {
    this.totalPlay = totalPlay;
    setTotalPlayIsSet(true);
    return this;
  }

  public void unsetTotalPlay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPLAY_ISSET_ID);
  }

  /** Returns true if field totalPlay is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPlay() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPLAY_ISSET_ID);
  }

  public void setTotalPlayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPLAY_ISSET_ID, value);
  }

  public int getCommented() {
    return this.commented;
  }

  public AdminVideoView setCommented(int commented) {
    this.commented = commented;
    setCommentedIsSet(true);
    return this;
  }

  public void unsetCommented() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTED_ISSET_ID);
  }

  /** Returns true if field commented is set (has been assigned a value) and false otherwise */
  public boolean isSetCommented() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTED_ISSET_ID);
  }

  public void setCommentedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTED_ISSET_ID, value);
  }

  public int getGift() {
    return this.gift;
  }

  public AdminVideoView setGift(int gift) {
    this.gift = gift;
    setGiftIsSet(true);
    return this;
  }

  public void unsetGift() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFT_ISSET_ID);
  }

  /** Returns true if field gift is set (has been assigned a value) and false otherwise */
  public boolean isSetGift() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFT_ISSET_ID);
  }

  public void setGiftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFT_ISSET_ID, value);
  }

  public int getLiked() {
    return this.liked;
  }

  public AdminVideoView setLiked(int liked) {
    this.liked = liked;
    setLikedIsSet(true);
    return this;
  }

  public void unsetLiked() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKED_ISSET_ID);
  }

  /** Returns true if field liked is set (has been assigned a value) and false otherwise */
  public boolean isSetLiked() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKED_ISSET_ID);
  }

  public void setLikedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKED_ISSET_ID, value);
  }

  public int getFans() {
    return this.fans;
  }

  public AdminVideoView setFans(int fans) {
    this.fans = fans;
    setFansIsSet(true);
    return this;
  }

  public void unsetFans() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FANS_ISSET_ID);
  }

  /** Returns true if field fans is set (has been assigned a value) and false otherwise */
  public boolean isSetFans() {
    return EncodingUtils.testBit(__isset_bitfield, __FANS_ISSET_ID);
  }

  public void setFansIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FANS_ISSET_ID, value);
  }

  public int getFollow() {
    return this.follow;
  }

  public AdminVideoView setFollow(int follow) {
    this.follow = follow;
    setFollowIsSet(true);
    return this;
  }

  public void unsetFollow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOW_ISSET_ID);
  }

  /** Returns true if field follow is set (has been assigned a value) and false otherwise */
  public boolean isSetFollow() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOW_ISSET_ID);
  }

  public void setFollowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOW_ISSET_ID, value);
  }

  public int getVideos() {
    return this.videos;
  }

  public AdminVideoView setVideos(int videos) {
    this.videos = videos;
    setVideosIsSet(true);
    return this;
  }

  public void unsetVideos() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIDEOS_ISSET_ID);
  }

  /** Returns true if field videos is set (has been assigned a value) and false otherwise */
  public boolean isSetVideos() {
    return EncodingUtils.testBit(__isset_bitfield, __VIDEOS_ISSET_ID);
  }

  public void setVideosIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIDEOS_ISSET_ID, value);
  }

  public double getTotal() {
    return this.total;
  }

  public AdminVideoView setTotal(double total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public int getHeartLike() {
    return this.heartLike;
  }

  public AdminVideoView setHeartLike(int heartLike) {
    this.heartLike = heartLike;
    setHeartLikeIsSet(true);
    return this;
  }

  public void unsetHeartLike() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEARTLIKE_ISSET_ID);
  }

  /** Returns true if field heartLike is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartLike() {
    return EncodingUtils.testBit(__isset_bitfield, __HEARTLIKE_ISSET_ID);
  }

  public void setHeartLikeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEARTLIKE_ISSET_ID, value);
  }

  public int getHeartStop() {
    return this.heartStop;
  }

  public AdminVideoView setHeartStop(int heartStop) {
    this.heartStop = heartStop;
    setHeartStopIsSet(true);
    return this;
  }

  public void unsetHeartStop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEARTSTOP_ISSET_ID);
  }

  /** Returns true if field heartStop is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartStop() {
    return EncodingUtils.testBit(__isset_bitfield, __HEARTSTOP_ISSET_ID);
  }

  public void setHeartStopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEARTSTOP_ISSET_ID, value);
  }

  public int getPoolStatus() {
    return this.poolStatus;
  }

  public AdminVideoView setPoolStatus(int poolStatus) {
    this.poolStatus = poolStatus;
    setPoolStatusIsSet(true);
    return this;
  }

  public void unsetPoolStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POOLSTATUS_ISSET_ID);
  }

  /** Returns true if field poolStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPoolStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __POOLSTATUS_ISSET_ID);
  }

  public void setPoolStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POOLSTATUS_ISSET_ID, value);
  }

  public String getVideoScreenshots() {
    return this.videoScreenshots;
  }

  public AdminVideoView setVideoScreenshots(String videoScreenshots) {
    this.videoScreenshots = videoScreenshots;
    return this;
  }

  public void unsetVideoScreenshots() {
    this.videoScreenshots = null;
  }

  /** Returns true if field videoScreenshots is set (has been assigned a value) and false otherwise */
  public boolean isSetVideoScreenshots() {
    return this.videoScreenshots != null;
  }

  public void setVideoScreenshotsIsSet(boolean value) {
    if (!value) {
      this.videoScreenshots = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Integer)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((Integer)value);
      }
      break;

    case ACTIVE_AT:
      if (value == null) {
        unsetActiveAt();
      } else {
        setActiveAt((Integer)value);
      }
      break;

    case PUSHED:
      if (value == null) {
        unsetPushed();
      } else {
        setPushed((Integer)value);
      }
      break;

    case PUSHED_AT:
      if (value == null) {
        unsetPushedAt();
      } else {
        setPushedAt((Integer)value);
      }
      break;

    case RECOMMENDED:
      if (value == null) {
        unsetRecommended();
      } else {
        setRecommended((Integer)value);
      }
      break;

    case RECOMMENDED_AT:
      if (value == null) {
        unsetRecommendedAt();
      } else {
        setRecommendedAt((Integer)value);
      }
      break;

    case RECOMMENDED_BY:
      if (value == null) {
        unsetRecommendedBy();
      } else {
        setRecommendedBy((String)value);
      }
      break;

    case ACTIVE_BY:
      if (value == null) {
        unsetActiveBy();
      } else {
        setActiveBy((String)value);
      }
      break;

    case CLIENT_VERSION:
      if (value == null) {
        unsetClientVersion();
      } else {
        setClientVersion((String)value);
      }
      break;

    case CATALOG:
      if (value == null) {
        unsetCatalog();
      } else {
        setCatalog((String)value);
      }
      break;

    case CLIENT_AGENT:
      if (value == null) {
        unsetClientAgent();
      } else {
        setClientAgent((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((Integer)value);
      }
      break;

    case EFFECT:
      if (value == null) {
        unsetEffect();
      } else {
        setEffect((String)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Double)value);
      }
      break;

    case M3U8:
      if (value == null) {
        unsetM3u8();
      } else {
        setM3u8((Integer)value);
      }
      break;

    case UPLOAD_START_TIME:
      if (value == null) {
        unsetUploadStartTime();
      } else {
        setUploadStartTime((Integer)value);
      }
      break;

    case UPLOAD_STOP_TIME:
      if (value == null) {
        unsetUploadStopTime();
      } else {
        setUploadStopTime((Integer)value);
      }
      break;

    case PROCESS_START_TIME:
      if (value == null) {
        unsetProcessStartTime();
      } else {
        setProcessStartTime((Integer)value);
      }
      break;

    case PROCESS_STOP_TIME:
      if (value == null) {
        unsetProcessStopTime();
      } else {
        setProcessStopTime((Integer)value);
      }
      break;

    case PUBLISH_START_TIME:
      if (value == null) {
        unsetPublishStartTime();
      } else {
        setPublishStartTime((Integer)value);
      }
      break;

    case PUBLISH_STOP_TIME:
      if (value == null) {
        unsetPublishStopTime();
      } else {
        setPublishStopTime((Integer)value);
      }
      break;

    case RECORD_START_TIME:
      if (value == null) {
        unsetRecordStartTime();
      } else {
        setRecordStartTime((Integer)value);
      }
      break;

    case RECORD_STOP_TIME:
      if (value == null) {
        unsetRecordStopTime();
      } else {
        setRecordStopTime((Integer)value);
      }
      break;

    case TRANSCODED:
      if (value == null) {
        unsetTranscoded();
      } else {
        setTranscoded((Integer)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case AUDIO_PATH:
      if (value == null) {
        unsetAudioPath();
      } else {
        setAudioPath((String)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((String)value);
      }
      break;

    case IMG3IN1:
      if (value == null) {
        unsetImg3in1();
      } else {
        setImg3in1((String)value);
      }
      break;

    case NEED_AUDIO:
      if (value == null) {
        unsetNeedAudio();
      } else {
        setNeedAudio((Integer)value);
      }
      break;

    case SHOW_GEO:
      if (value == null) {
        unsetShowGeo();
      } else {
        setShowGeo((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ALBUM:
      if (value == null) {
        unsetAlbum();
      } else {
        setAlbum((Integer)value);
      }
      break;

    case WEIPAI_VIDEO:
      if (value == null) {
        unsetWeipaiVideo();
      } else {
        setWeipaiVideo((Integer)value);
      }
      break;

    case POSTED:
      if (value == null) {
        unsetPosted();
      } else {
        setPosted((Integer)value);
      }
      break;

    case CUSTOM_COVER_NUM:
      if (value == null) {
        unsetCustomCoverNum();
      } else {
        setCustomCoverNum((Integer)value);
      }
      break;

    case DEFAULT_IMG:
      if (value == null) {
        unsetDefaultImg();
      } else {
        setDefaultImg((String)value);
      }
      break;

    case IMG_LAST_MODIFIED:
      if (value == null) {
        unsetImgLastModified();
      } else {
        setImgLastModified((Integer)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case DEL_AT:
      if (value == null) {
        unsetDelAt();
      } else {
        setDelAt((Integer)value);
      }
      break;

    case DEL_BY:
      if (value == null) {
        unsetDelBy();
      } else {
        setDelBy((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case PROFILE_IMG:
      if (value == null) {
        unsetProfileImg();
      } else {
        setProfileImg((String)value);
      }
      break;

    case HOTUSER:
      if (value == null) {
        unsetHotuser();
      } else {
        setHotuser((Integer)value);
      }
      break;

    case DANGER:
      if (value == null) {
        unsetDanger();
      } else {
        setDanger((Integer)value);
      }
      break;

    case FIRST_UPLOAD:
      if (value == null) {
        unsetFirstUpload();
      } else {
        setFirstUpload((Integer)value);
      }
      break;

    case POPULAR:
      if (value == null) {
        unsetPopular();
      } else {
        setPopular((Double)value);
      }
      break;

    case POOL:
      if (value == null) {
        unsetPool();
      } else {
        setPool((Integer)value);
      }
      break;

    case TOTAL_PLAY:
      if (value == null) {
        unsetTotalPlay();
      } else {
        setTotalPlay((Integer)value);
      }
      break;

    case COMMENTED:
      if (value == null) {
        unsetCommented();
      } else {
        setCommented((Integer)value);
      }
      break;

    case GIFT:
      if (value == null) {
        unsetGift();
      } else {
        setGift((Integer)value);
      }
      break;

    case LIKED:
      if (value == null) {
        unsetLiked();
      } else {
        setLiked((Integer)value);
      }
      break;

    case FANS:
      if (value == null) {
        unsetFans();
      } else {
        setFans((Integer)value);
      }
      break;

    case FOLLOW:
      if (value == null) {
        unsetFollow();
      } else {
        setFollow((Integer)value);
      }
      break;

    case VIDEOS:
      if (value == null) {
        unsetVideos();
      } else {
        setVideos((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Double)value);
      }
      break;

    case HEART_LIKE:
      if (value == null) {
        unsetHeartLike();
      } else {
        setHeartLike((Integer)value);
      }
      break;

    case HEART_STOP:
      if (value == null) {
        unsetHeartStop();
      } else {
        setHeartStop((Integer)value);
      }
      break;

    case POOL_STATUS:
      if (value == null) {
        unsetPoolStatus();
      } else {
        setPoolStatus((Integer)value);
      }
      break;

    case VIDEO_SCREENSHOTS:
      if (value == null) {
        unsetVideoScreenshots();
      } else {
        setVideoScreenshots((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VID:
      return getVid();

    case CREATED_AT:
      return Integer.valueOf(getCreatedAt());

    case ACTIVE:
      return Integer.valueOf(getActive());

    case ACTIVE_AT:
      return Integer.valueOf(getActiveAt());

    case PUSHED:
      return Integer.valueOf(getPushed());

    case PUSHED_AT:
      return Integer.valueOf(getPushedAt());

    case RECOMMENDED:
      return Integer.valueOf(getRecommended());

    case RECOMMENDED_AT:
      return Integer.valueOf(getRecommendedAt());

    case RECOMMENDED_BY:
      return getRecommendedBy();

    case ACTIVE_BY:
      return getActiveBy();

    case CLIENT_VERSION:
      return getClientVersion();

    case CATALOG:
      return getCatalog();

    case CLIENT_AGENT:
      return getClientAgent();

    case DESC:
      return getDesc();

    case DIRECTION:
      return Integer.valueOf(getDirection());

    case EFFECT:
      return getEffect();

    case LATITUDE:
      return Double.valueOf(getLatitude());

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case LENGTH:
      return Double.valueOf(getLength());

    case M3U8:
      return Integer.valueOf(getM3u8());

    case UPLOAD_START_TIME:
      return Integer.valueOf(getUploadStartTime());

    case UPLOAD_STOP_TIME:
      return Integer.valueOf(getUploadStopTime());

    case PROCESS_START_TIME:
      return Integer.valueOf(getProcessStartTime());

    case PROCESS_STOP_TIME:
      return Integer.valueOf(getProcessStopTime());

    case PUBLISH_START_TIME:
      return Integer.valueOf(getPublishStartTime());

    case PUBLISH_STOP_TIME:
      return Integer.valueOf(getPublishStopTime());

    case RECORD_START_TIME:
      return Integer.valueOf(getRecordStartTime());

    case RECORD_STOP_TIME:
      return Integer.valueOf(getRecordStopTime());

    case TRANSCODED:
      return Integer.valueOf(getTranscoded());

    case USER:
      return getUser();

    case UUID:
      return getUuid();

    case AUDIO_PATH:
      return getAudioPath();

    case FILE_PATH:
      return getFilePath();

    case IMG3IN1:
      return getImg3in1();

    case NEED_AUDIO:
      return Integer.valueOf(getNeedAudio());

    case SHOW_GEO:
      return Integer.valueOf(getShowGeo());

    case TYPE:
      return getType();

    case ALBUM:
      return Integer.valueOf(getAlbum());

    case WEIPAI_VIDEO:
      return Integer.valueOf(getWeipaiVideo());

    case POSTED:
      return Integer.valueOf(getPosted());

    case CUSTOM_COVER_NUM:
      return Integer.valueOf(getCustomCoverNum());

    case DEFAULT_IMG:
      return getDefaultImg();

    case IMG_LAST_MODIFIED:
      return Integer.valueOf(getImgLastModified());

    case DELETED:
      return Integer.valueOf(getDeleted());

    case CITY:
      return getCity();

    case DEL_AT:
      return Integer.valueOf(getDelAt());

    case DEL_BY:
      return getDelBy();

    case NICK_NAME:
      return getNickName();

    case PROFILE_IMG:
      return getProfileImg();

    case HOTUSER:
      return Integer.valueOf(getHotuser());

    case DANGER:
      return Integer.valueOf(getDanger());

    case FIRST_UPLOAD:
      return Integer.valueOf(getFirstUpload());

    case POPULAR:
      return Double.valueOf(getPopular());

    case POOL:
      return Integer.valueOf(getPool());

    case TOTAL_PLAY:
      return Integer.valueOf(getTotalPlay());

    case COMMENTED:
      return Integer.valueOf(getCommented());

    case GIFT:
      return Integer.valueOf(getGift());

    case LIKED:
      return Integer.valueOf(getLiked());

    case FANS:
      return Integer.valueOf(getFans());

    case FOLLOW:
      return Integer.valueOf(getFollow());

    case VIDEOS:
      return Integer.valueOf(getVideos());

    case TOTAL:
      return Double.valueOf(getTotal());

    case HEART_LIKE:
      return Integer.valueOf(getHeartLike());

    case HEART_STOP:
      return Integer.valueOf(getHeartStop());

    case POOL_STATUS:
      return Integer.valueOf(getPoolStatus());

    case VIDEO_SCREENSHOTS:
      return getVideoScreenshots();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VID:
      return isSetVid();
    case CREATED_AT:
      return isSetCreatedAt();
    case ACTIVE:
      return isSetActive();
    case ACTIVE_AT:
      return isSetActiveAt();
    case PUSHED:
      return isSetPushed();
    case PUSHED_AT:
      return isSetPushedAt();
    case RECOMMENDED:
      return isSetRecommended();
    case RECOMMENDED_AT:
      return isSetRecommendedAt();
    case RECOMMENDED_BY:
      return isSetRecommendedBy();
    case ACTIVE_BY:
      return isSetActiveBy();
    case CLIENT_VERSION:
      return isSetClientVersion();
    case CATALOG:
      return isSetCatalog();
    case CLIENT_AGENT:
      return isSetClientAgent();
    case DESC:
      return isSetDesc();
    case DIRECTION:
      return isSetDirection();
    case EFFECT:
      return isSetEffect();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    case LENGTH:
      return isSetLength();
    case M3U8:
      return isSetM3u8();
    case UPLOAD_START_TIME:
      return isSetUploadStartTime();
    case UPLOAD_STOP_TIME:
      return isSetUploadStopTime();
    case PROCESS_START_TIME:
      return isSetProcessStartTime();
    case PROCESS_STOP_TIME:
      return isSetProcessStopTime();
    case PUBLISH_START_TIME:
      return isSetPublishStartTime();
    case PUBLISH_STOP_TIME:
      return isSetPublishStopTime();
    case RECORD_START_TIME:
      return isSetRecordStartTime();
    case RECORD_STOP_TIME:
      return isSetRecordStopTime();
    case TRANSCODED:
      return isSetTranscoded();
    case USER:
      return isSetUser();
    case UUID:
      return isSetUuid();
    case AUDIO_PATH:
      return isSetAudioPath();
    case FILE_PATH:
      return isSetFilePath();
    case IMG3IN1:
      return isSetImg3in1();
    case NEED_AUDIO:
      return isSetNeedAudio();
    case SHOW_GEO:
      return isSetShowGeo();
    case TYPE:
      return isSetType();
    case ALBUM:
      return isSetAlbum();
    case WEIPAI_VIDEO:
      return isSetWeipaiVideo();
    case POSTED:
      return isSetPosted();
    case CUSTOM_COVER_NUM:
      return isSetCustomCoverNum();
    case DEFAULT_IMG:
      return isSetDefaultImg();
    case IMG_LAST_MODIFIED:
      return isSetImgLastModified();
    case DELETED:
      return isSetDeleted();
    case CITY:
      return isSetCity();
    case DEL_AT:
      return isSetDelAt();
    case DEL_BY:
      return isSetDelBy();
    case NICK_NAME:
      return isSetNickName();
    case PROFILE_IMG:
      return isSetProfileImg();
    case HOTUSER:
      return isSetHotuser();
    case DANGER:
      return isSetDanger();
    case FIRST_UPLOAD:
      return isSetFirstUpload();
    case POPULAR:
      return isSetPopular();
    case POOL:
      return isSetPool();
    case TOTAL_PLAY:
      return isSetTotalPlay();
    case COMMENTED:
      return isSetCommented();
    case GIFT:
      return isSetGift();
    case LIKED:
      return isSetLiked();
    case FANS:
      return isSetFans();
    case FOLLOW:
      return isSetFollow();
    case VIDEOS:
      return isSetVideos();
    case TOTAL:
      return isSetTotal();
    case HEART_LIKE:
      return isSetHeartLike();
    case HEART_STOP:
      return isSetHeartStop();
    case POOL_STATUS:
      return isSetPoolStatus();
    case VIDEO_SCREENSHOTS:
      return isSetVideoScreenshots();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdminVideoView)
      return this.equals((AdminVideoView)that);
    return false;
  }

  public boolean equals(AdminVideoView that) {
    if (that == null)
      return false;

    boolean this_present_vid = true && this.isSetVid();
    boolean that_present_vid = true && that.isSetVid();
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (!this.vid.equals(that.vid))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    boolean this_present_activeAt = true;
    boolean that_present_activeAt = true;
    if (this_present_activeAt || that_present_activeAt) {
      if (!(this_present_activeAt && that_present_activeAt))
        return false;
      if (this.activeAt != that.activeAt)
        return false;
    }

    boolean this_present_pushed = true;
    boolean that_present_pushed = true;
    if (this_present_pushed || that_present_pushed) {
      if (!(this_present_pushed && that_present_pushed))
        return false;
      if (this.pushed != that.pushed)
        return false;
    }

    boolean this_present_pushedAt = true;
    boolean that_present_pushedAt = true;
    if (this_present_pushedAt || that_present_pushedAt) {
      if (!(this_present_pushedAt && that_present_pushedAt))
        return false;
      if (this.pushedAt != that.pushedAt)
        return false;
    }

    boolean this_present_recommended = true;
    boolean that_present_recommended = true;
    if (this_present_recommended || that_present_recommended) {
      if (!(this_present_recommended && that_present_recommended))
        return false;
      if (this.recommended != that.recommended)
        return false;
    }

    boolean this_present_recommendedAt = true;
    boolean that_present_recommendedAt = true;
    if (this_present_recommendedAt || that_present_recommendedAt) {
      if (!(this_present_recommendedAt && that_present_recommendedAt))
        return false;
      if (this.recommendedAt != that.recommendedAt)
        return false;
    }

    boolean this_present_recommendedBy = true && this.isSetRecommendedBy();
    boolean that_present_recommendedBy = true && that.isSetRecommendedBy();
    if (this_present_recommendedBy || that_present_recommendedBy) {
      if (!(this_present_recommendedBy && that_present_recommendedBy))
        return false;
      if (!this.recommendedBy.equals(that.recommendedBy))
        return false;
    }

    boolean this_present_activeBy = true && this.isSetActiveBy();
    boolean that_present_activeBy = true && that.isSetActiveBy();
    if (this_present_activeBy || that_present_activeBy) {
      if (!(this_present_activeBy && that_present_activeBy))
        return false;
      if (!this.activeBy.equals(that.activeBy))
        return false;
    }

    boolean this_present_clientVersion = true && this.isSetClientVersion();
    boolean that_present_clientVersion = true && that.isSetClientVersion();
    if (this_present_clientVersion || that_present_clientVersion) {
      if (!(this_present_clientVersion && that_present_clientVersion))
        return false;
      if (!this.clientVersion.equals(that.clientVersion))
        return false;
    }

    boolean this_present_catalog = true && this.isSetCatalog();
    boolean that_present_catalog = true && that.isSetCatalog();
    if (this_present_catalog || that_present_catalog) {
      if (!(this_present_catalog && that_present_catalog))
        return false;
      if (!this.catalog.equals(that.catalog))
        return false;
    }

    boolean this_present_clientAgent = true && this.isSetClientAgent();
    boolean that_present_clientAgent = true && that.isSetClientAgent();
    if (this_present_clientAgent || that_present_clientAgent) {
      if (!(this_present_clientAgent && that_present_clientAgent))
        return false;
      if (!this.clientAgent.equals(that.clientAgent))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_direction = true;
    boolean that_present_direction = true;
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (this.direction != that.direction)
        return false;
    }

    boolean this_present_effect = true && this.isSetEffect();
    boolean that_present_effect = true && that.isSetEffect();
    if (this_present_effect || that_present_effect) {
      if (!(this_present_effect && that_present_effect))
        return false;
      if (!this.effect.equals(that.effect))
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_m3u8 = true;
    boolean that_present_m3u8 = true;
    if (this_present_m3u8 || that_present_m3u8) {
      if (!(this_present_m3u8 && that_present_m3u8))
        return false;
      if (this.m3u8 != that.m3u8)
        return false;
    }

    boolean this_present_uploadStartTime = true;
    boolean that_present_uploadStartTime = true;
    if (this_present_uploadStartTime || that_present_uploadStartTime) {
      if (!(this_present_uploadStartTime && that_present_uploadStartTime))
        return false;
      if (this.uploadStartTime != that.uploadStartTime)
        return false;
    }

    boolean this_present_uploadStopTime = true;
    boolean that_present_uploadStopTime = true;
    if (this_present_uploadStopTime || that_present_uploadStopTime) {
      if (!(this_present_uploadStopTime && that_present_uploadStopTime))
        return false;
      if (this.uploadStopTime != that.uploadStopTime)
        return false;
    }

    boolean this_present_processStartTime = true;
    boolean that_present_processStartTime = true;
    if (this_present_processStartTime || that_present_processStartTime) {
      if (!(this_present_processStartTime && that_present_processStartTime))
        return false;
      if (this.processStartTime != that.processStartTime)
        return false;
    }

    boolean this_present_processStopTime = true;
    boolean that_present_processStopTime = true;
    if (this_present_processStopTime || that_present_processStopTime) {
      if (!(this_present_processStopTime && that_present_processStopTime))
        return false;
      if (this.processStopTime != that.processStopTime)
        return false;
    }

    boolean this_present_publishStartTime = true;
    boolean that_present_publishStartTime = true;
    if (this_present_publishStartTime || that_present_publishStartTime) {
      if (!(this_present_publishStartTime && that_present_publishStartTime))
        return false;
      if (this.publishStartTime != that.publishStartTime)
        return false;
    }

    boolean this_present_publishStopTime = true;
    boolean that_present_publishStopTime = true;
    if (this_present_publishStopTime || that_present_publishStopTime) {
      if (!(this_present_publishStopTime && that_present_publishStopTime))
        return false;
      if (this.publishStopTime != that.publishStopTime)
        return false;
    }

    boolean this_present_recordStartTime = true;
    boolean that_present_recordStartTime = true;
    if (this_present_recordStartTime || that_present_recordStartTime) {
      if (!(this_present_recordStartTime && that_present_recordStartTime))
        return false;
      if (this.recordStartTime != that.recordStartTime)
        return false;
    }

    boolean this_present_recordStopTime = true;
    boolean that_present_recordStopTime = true;
    if (this_present_recordStopTime || that_present_recordStopTime) {
      if (!(this_present_recordStopTime && that_present_recordStopTime))
        return false;
      if (this.recordStopTime != that.recordStopTime)
        return false;
    }

    boolean this_present_transcoded = true;
    boolean that_present_transcoded = true;
    if (this_present_transcoded || that_present_transcoded) {
      if (!(this_present_transcoded && that_present_transcoded))
        return false;
      if (this.transcoded != that.transcoded)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_audioPath = true && this.isSetAudioPath();
    boolean that_present_audioPath = true && that.isSetAudioPath();
    if (this_present_audioPath || that_present_audioPath) {
      if (!(this_present_audioPath && that_present_audioPath))
        return false;
      if (!this.audioPath.equals(that.audioPath))
        return false;
    }

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_img3in1 = true && this.isSetImg3in1();
    boolean that_present_img3in1 = true && that.isSetImg3in1();
    if (this_present_img3in1 || that_present_img3in1) {
      if (!(this_present_img3in1 && that_present_img3in1))
        return false;
      if (!this.img3in1.equals(that.img3in1))
        return false;
    }

    boolean this_present_needAudio = true;
    boolean that_present_needAudio = true;
    if (this_present_needAudio || that_present_needAudio) {
      if (!(this_present_needAudio && that_present_needAudio))
        return false;
      if (this.needAudio != that.needAudio)
        return false;
    }

    boolean this_present_showGeo = true;
    boolean that_present_showGeo = true;
    if (this_present_showGeo || that_present_showGeo) {
      if (!(this_present_showGeo && that_present_showGeo))
        return false;
      if (this.showGeo != that.showGeo)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_album = true;
    boolean that_present_album = true;
    if (this_present_album || that_present_album) {
      if (!(this_present_album && that_present_album))
        return false;
      if (this.album != that.album)
        return false;
    }

    boolean this_present_weipaiVideo = true;
    boolean that_present_weipaiVideo = true;
    if (this_present_weipaiVideo || that_present_weipaiVideo) {
      if (!(this_present_weipaiVideo && that_present_weipaiVideo))
        return false;
      if (this.weipaiVideo != that.weipaiVideo)
        return false;
    }

    boolean this_present_posted = true;
    boolean that_present_posted = true;
    if (this_present_posted || that_present_posted) {
      if (!(this_present_posted && that_present_posted))
        return false;
      if (this.posted != that.posted)
        return false;
    }

    boolean this_present_customCoverNum = true;
    boolean that_present_customCoverNum = true;
    if (this_present_customCoverNum || that_present_customCoverNum) {
      if (!(this_present_customCoverNum && that_present_customCoverNum))
        return false;
      if (this.customCoverNum != that.customCoverNum)
        return false;
    }

    boolean this_present_defaultImg = true && this.isSetDefaultImg();
    boolean that_present_defaultImg = true && that.isSetDefaultImg();
    if (this_present_defaultImg || that_present_defaultImg) {
      if (!(this_present_defaultImg && that_present_defaultImg))
        return false;
      if (!this.defaultImg.equals(that.defaultImg))
        return false;
    }

    boolean this_present_imgLastModified = true;
    boolean that_present_imgLastModified = true;
    if (this_present_imgLastModified || that_present_imgLastModified) {
      if (!(this_present_imgLastModified && that_present_imgLastModified))
        return false;
      if (this.imgLastModified != that.imgLastModified)
        return false;
    }

    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_delAt = true;
    boolean that_present_delAt = true;
    if (this_present_delAt || that_present_delAt) {
      if (!(this_present_delAt && that_present_delAt))
        return false;
      if (this.delAt != that.delAt)
        return false;
    }

    boolean this_present_delBy = true && this.isSetDelBy();
    boolean that_present_delBy = true && that.isSetDelBy();
    if (this_present_delBy || that_present_delBy) {
      if (!(this_present_delBy && that_present_delBy))
        return false;
      if (!this.delBy.equals(that.delBy))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_profileImg = true && this.isSetProfileImg();
    boolean that_present_profileImg = true && that.isSetProfileImg();
    if (this_present_profileImg || that_present_profileImg) {
      if (!(this_present_profileImg && that_present_profileImg))
        return false;
      if (!this.profileImg.equals(that.profileImg))
        return false;
    }

    boolean this_present_hotuser = true;
    boolean that_present_hotuser = true;
    if (this_present_hotuser || that_present_hotuser) {
      if (!(this_present_hotuser && that_present_hotuser))
        return false;
      if (this.hotuser != that.hotuser)
        return false;
    }

    boolean this_present_danger = true;
    boolean that_present_danger = true;
    if (this_present_danger || that_present_danger) {
      if (!(this_present_danger && that_present_danger))
        return false;
      if (this.danger != that.danger)
        return false;
    }

    boolean this_present_firstUpload = true;
    boolean that_present_firstUpload = true;
    if (this_present_firstUpload || that_present_firstUpload) {
      if (!(this_present_firstUpload && that_present_firstUpload))
        return false;
      if (this.firstUpload != that.firstUpload)
        return false;
    }

    boolean this_present_popular = true;
    boolean that_present_popular = true;
    if (this_present_popular || that_present_popular) {
      if (!(this_present_popular && that_present_popular))
        return false;
      if (this.popular != that.popular)
        return false;
    }

    boolean this_present_pool = true;
    boolean that_present_pool = true;
    if (this_present_pool || that_present_pool) {
      if (!(this_present_pool && that_present_pool))
        return false;
      if (this.pool != that.pool)
        return false;
    }

    boolean this_present_totalPlay = true;
    boolean that_present_totalPlay = true;
    if (this_present_totalPlay || that_present_totalPlay) {
      if (!(this_present_totalPlay && that_present_totalPlay))
        return false;
      if (this.totalPlay != that.totalPlay)
        return false;
    }

    boolean this_present_commented = true;
    boolean that_present_commented = true;
    if (this_present_commented || that_present_commented) {
      if (!(this_present_commented && that_present_commented))
        return false;
      if (this.commented != that.commented)
        return false;
    }

    boolean this_present_gift = true;
    boolean that_present_gift = true;
    if (this_present_gift || that_present_gift) {
      if (!(this_present_gift && that_present_gift))
        return false;
      if (this.gift != that.gift)
        return false;
    }

    boolean this_present_liked = true;
    boolean that_present_liked = true;
    if (this_present_liked || that_present_liked) {
      if (!(this_present_liked && that_present_liked))
        return false;
      if (this.liked != that.liked)
        return false;
    }

    boolean this_present_fans = true;
    boolean that_present_fans = true;
    if (this_present_fans || that_present_fans) {
      if (!(this_present_fans && that_present_fans))
        return false;
      if (this.fans != that.fans)
        return false;
    }

    boolean this_present_follow = true;
    boolean that_present_follow = true;
    if (this_present_follow || that_present_follow) {
      if (!(this_present_follow && that_present_follow))
        return false;
      if (this.follow != that.follow)
        return false;
    }

    boolean this_present_videos = true;
    boolean that_present_videos = true;
    if (this_present_videos || that_present_videos) {
      if (!(this_present_videos && that_present_videos))
        return false;
      if (this.videos != that.videos)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_heartLike = true;
    boolean that_present_heartLike = true;
    if (this_present_heartLike || that_present_heartLike) {
      if (!(this_present_heartLike && that_present_heartLike))
        return false;
      if (this.heartLike != that.heartLike)
        return false;
    }

    boolean this_present_heartStop = true;
    boolean that_present_heartStop = true;
    if (this_present_heartStop || that_present_heartStop) {
      if (!(this_present_heartStop && that_present_heartStop))
        return false;
      if (this.heartStop != that.heartStop)
        return false;
    }

    boolean this_present_poolStatus = true;
    boolean that_present_poolStatus = true;
    if (this_present_poolStatus || that_present_poolStatus) {
      if (!(this_present_poolStatus && that_present_poolStatus))
        return false;
      if (this.poolStatus != that.poolStatus)
        return false;
    }

    boolean this_present_videoScreenshots = true && this.isSetVideoScreenshots();
    boolean that_present_videoScreenshots = true && that.isSetVideoScreenshots();
    if (this_present_videoScreenshots || that_present_videoScreenshots) {
      if (!(this_present_videoScreenshots && that_present_videoScreenshots))
        return false;
      if (!this.videoScreenshots.equals(that.videoScreenshots))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AdminVideoView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AdminVideoView typedOther = (AdminVideoView)other;

    lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(typedOther.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, typedOther.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive()).compareTo(typedOther.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, typedOther.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveAt()).compareTo(typedOther.isSetActiveAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeAt, typedOther.activeAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushed()).compareTo(typedOther.isSetPushed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushed, typedOther.pushed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushedAt()).compareTo(typedOther.isSetPushedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushedAt, typedOther.pushedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommended()).compareTo(typedOther.isSetRecommended());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommended()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommended, typedOther.recommended);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendedAt()).compareTo(typedOther.isSetRecommendedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendedAt, typedOther.recommendedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendedBy()).compareTo(typedOther.isSetRecommendedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendedBy, typedOther.recommendedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveBy()).compareTo(typedOther.isSetActiveBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeBy, typedOther.activeBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientVersion()).compareTo(typedOther.isSetClientVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientVersion, typedOther.clientVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog()).compareTo(typedOther.isSetCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, typedOther.catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientAgent()).compareTo(typedOther.isSetClientAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientAgent, typedOther.clientAgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(typedOther.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, typedOther.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffect()).compareTo(typedOther.isSetEffect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effect, typedOther.effect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM3u8()).compareTo(typedOther.isSetM3u8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM3u8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m3u8, typedOther.m3u8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadStartTime()).compareTo(typedOther.isSetUploadStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadStartTime, typedOther.uploadStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadStopTime()).compareTo(typedOther.isSetUploadStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadStopTime, typedOther.uploadStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessStartTime()).compareTo(typedOther.isSetProcessStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processStartTime, typedOther.processStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessStopTime()).compareTo(typedOther.isSetProcessStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processStopTime, typedOther.processStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishStartTime()).compareTo(typedOther.isSetPublishStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishStartTime, typedOther.publishStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishStopTime()).compareTo(typedOther.isSetPublishStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishStopTime, typedOther.publishStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordStartTime()).compareTo(typedOther.isSetRecordStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordStartTime, typedOther.recordStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordStopTime()).compareTo(typedOther.isSetRecordStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordStopTime, typedOther.recordStopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTranscoded()).compareTo(typedOther.isSetTranscoded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranscoded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transcoded, typedOther.transcoded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioPath()).compareTo(typedOther.isSetAudioPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioPath, typedOther.audioPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(typedOther.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, typedOther.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg3in1()).compareTo(typedOther.isSetImg3in1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg3in1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img3in1, typedOther.img3in1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedAudio()).compareTo(typedOther.isSetNeedAudio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedAudio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needAudio, typedOther.needAudio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowGeo()).compareTo(typedOther.isSetShowGeo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowGeo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showGeo, typedOther.showGeo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbum()).compareTo(typedOther.isSetAlbum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.album, typedOther.album);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeipaiVideo()).compareTo(typedOther.isSetWeipaiVideo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeipaiVideo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weipaiVideo, typedOther.weipaiVideo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosted()).compareTo(typedOther.isSetPosted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posted, typedOther.posted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomCoverNum()).compareTo(typedOther.isSetCustomCoverNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomCoverNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customCoverNum, typedOther.customCoverNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultImg()).compareTo(typedOther.isSetDefaultImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultImg, typedOther.defaultImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgLastModified()).compareTo(typedOther.isSetImgLastModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgLastModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgLastModified, typedOther.imgLastModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(typedOther.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, typedOther.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelAt()).compareTo(typedOther.isSetDelAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delAt, typedOther.delAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelBy()).compareTo(typedOther.isSetDelBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delBy, typedOther.delBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(typedOther.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, typedOther.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileImg()).compareTo(typedOther.isSetProfileImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImg, typedOther.profileImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotuser()).compareTo(typedOther.isSetHotuser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotuser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotuser, typedOther.hotuser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDanger()).compareTo(typedOther.isSetDanger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDanger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.danger, typedOther.danger);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstUpload()).compareTo(typedOther.isSetFirstUpload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstUpload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstUpload, typedOther.firstUpload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopular()).compareTo(typedOther.isSetPopular());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopular()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popular, typedOther.popular);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPool()).compareTo(typedOther.isSetPool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pool, typedOther.pool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPlay()).compareTo(typedOther.isSetTotalPlay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPlay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPlay, typedOther.totalPlay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommented()).compareTo(typedOther.isSetCommented());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommented()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commented, typedOther.commented);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGift()).compareTo(typedOther.isSetGift());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGift()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gift, typedOther.gift);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiked()).compareTo(typedOther.isSetLiked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liked, typedOther.liked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFans()).compareTo(typedOther.isSetFans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fans, typedOther.fans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollow()).compareTo(typedOther.isSetFollow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.follow, typedOther.follow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideos()).compareTo(typedOther.isSetVideos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videos, typedOther.videos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartLike()).compareTo(typedOther.isSetHeartLike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartLike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartLike, typedOther.heartLike);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartStop()).compareTo(typedOther.isSetHeartStop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartStop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartStop, typedOther.heartStop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoolStatus()).compareTo(typedOther.isSetPoolStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoolStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poolStatus, typedOther.poolStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideoScreenshots()).compareTo(typedOther.isSetVideoScreenshots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideoScreenshots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoScreenshots, typedOther.videoScreenshots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdminVideoView(");
    boolean first = true;

    sb.append("vid:");
    if (this.vid == null) {
      sb.append("null");
    } else {
      sb.append(this.vid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeAt:");
    sb.append(this.activeAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushed:");
    sb.append(this.pushed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushedAt:");
    sb.append(this.pushedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommended:");
    sb.append(this.recommended);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommendedAt:");
    sb.append(this.recommendedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommendedBy:");
    if (this.recommendedBy == null) {
      sb.append("null");
    } else {
      sb.append(this.recommendedBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeBy:");
    if (this.activeBy == null) {
      sb.append("null");
    } else {
      sb.append(this.activeBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientVersion:");
    if (this.clientVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.clientVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catalog:");
    if (this.catalog == null) {
      sb.append("null");
    } else {
      sb.append(this.catalog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientAgent:");
    if (this.clientAgent == null) {
      sb.append("null");
    } else {
      sb.append(this.clientAgent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    sb.append(this.direction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("effect:");
    if (this.effect == null) {
      sb.append("null");
    } else {
      sb.append(this.effect);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m3u8:");
    sb.append(this.m3u8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadStartTime:");
    sb.append(this.uploadStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadStopTime:");
    sb.append(this.uploadStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processStartTime:");
    sb.append(this.processStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processStopTime:");
    sb.append(this.processStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishStartTime:");
    sb.append(this.publishStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishStopTime:");
    sb.append(this.publishStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordStartTime:");
    sb.append(this.recordStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordStopTime:");
    sb.append(this.recordStopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transcoded:");
    sb.append(this.transcoded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audioPath:");
    if (this.audioPath == null) {
      sb.append("null");
    } else {
      sb.append(this.audioPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filePath:");
    if (this.filePath == null) {
      sb.append("null");
    } else {
      sb.append(this.filePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("img3in1:");
    if (this.img3in1 == null) {
      sb.append("null");
    } else {
      sb.append(this.img3in1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("needAudio:");
    sb.append(this.needAudio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showGeo:");
    sb.append(this.showGeo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("album:");
    sb.append(this.album);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weipaiVideo:");
    sb.append(this.weipaiVideo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posted:");
    sb.append(this.posted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("customCoverNum:");
    sb.append(this.customCoverNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultImg:");
    if (this.defaultImg == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgLastModified:");
    sb.append(this.imgLastModified);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("delAt:");
    sb.append(this.delAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("delBy:");
    if (this.delBy == null) {
      sb.append("null");
    } else {
      sb.append(this.delBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileImg:");
    if (this.profileImg == null) {
      sb.append("null");
    } else {
      sb.append(this.profileImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hotuser:");
    sb.append(this.hotuser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("danger:");
    sb.append(this.danger);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstUpload:");
    sb.append(this.firstUpload);
    first = false;
    if (!first) sb.append(", ");
    sb.append("popular:");
    sb.append(this.popular);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pool:");
    sb.append(this.pool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPlay:");
    sb.append(this.totalPlay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commented:");
    sb.append(this.commented);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gift:");
    sb.append(this.gift);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liked:");
    sb.append(this.liked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fans:");
    sb.append(this.fans);
    first = false;
    if (!first) sb.append(", ");
    sb.append("follow:");
    sb.append(this.follow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("videos:");
    sb.append(this.videos);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartLike:");
    sb.append(this.heartLike);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartStop:");
    sb.append(this.heartStop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poolStatus:");
    sb.append(this.poolStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("videoScreenshots:");
    if (this.videoScreenshots == null) {
      sb.append("null");
    } else {
      sb.append(this.videoScreenshots);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdminVideoViewStandardSchemeFactory implements SchemeFactory {
    public AdminVideoViewStandardScheme getScheme() {
      return new AdminVideoViewStandardScheme();
    }
  }

  private static class AdminVideoViewStandardScheme extends StandardScheme<AdminVideoView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdminVideoView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vid = iprot.readString();
              struct.setVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createdAt = iprot.readI32();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.active = iprot.readI32();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeAt = iprot.readI32();
              struct.setActiveAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PUSHED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pushed = iprot.readI32();
              struct.setPushedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUSHED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pushedAt = iprot.readI32();
              struct.setPushedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECOMMENDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recommended = iprot.readI32();
              struct.setRecommendedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECOMMENDED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recommendedAt = iprot.readI32();
              struct.setRecommendedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECOMMENDED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recommendedBy = iprot.readString();
              struct.setRecommendedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTIVE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeBy = iprot.readString();
              struct.setActiveByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLIENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientVersion = iprot.readString();
              struct.setClientVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalog = iprot.readString();
              struct.setCatalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLIENT_AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientAgent = iprot.readString();
              struct.setClientAgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = iprot.readI32();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EFFECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.effect = iprot.readString();
              struct.setEffectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.length = iprot.readDouble();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // M3U8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.m3u8 = iprot.readI32();
              struct.setM3u8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPLOAD_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uploadStartTime = iprot.readI32();
              struct.setUploadStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UPLOAD_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uploadStopTime = iprot.readI32();
              struct.setUploadStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PROCESS_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.processStartTime = iprot.readI32();
              struct.setProcessStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PROCESS_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.processStopTime = iprot.readI32();
              struct.setProcessStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PUBLISH_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publishStartTime = iprot.readI32();
              struct.setPublishStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PUBLISH_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publishStopTime = iprot.readI32();
              struct.setPublishStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // RECORD_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordStartTime = iprot.readI32();
              struct.setRecordStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // RECORD_STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordStopTime = iprot.readI32();
              struct.setRecordStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // TRANSCODED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transcoded = iprot.readI32();
              struct.setTranscodedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // AUDIO_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audioPath = iprot.readString();
              struct.setAudioPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // IMG3IN1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img3in1 = iprot.readString();
              struct.setImg3in1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // NEED_AUDIO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.needAudio = iprot.readI32();
              struct.setNeedAudioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // SHOW_GEO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showGeo = iprot.readI32();
              struct.setShowGeoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // ALBUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.album = iprot.readI32();
              struct.setAlbumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // WEIPAI_VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weipaiVideo = iprot.readI32();
              struct.setWeipaiVideoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // POSTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.posted = iprot.readI32();
              struct.setPostedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // CUSTOM_COVER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.customCoverNum = iprot.readI32();
              struct.setCustomCoverNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // DEFAULT_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.defaultImg = iprot.readString();
              struct.setDefaultImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // IMG_LAST_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.imgLastModified = iprot.readI32();
              struct.setImgLastModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deleted = iprot.readI32();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // DEL_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.delAt = iprot.readI32();
              struct.setDelAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // DEL_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delBy = iprot.readString();
              struct.setDelByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // PROFILE_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileImg = iprot.readString();
              struct.setProfileImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // HOTUSER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hotuser = iprot.readI32();
              struct.setHotuserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // DANGER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.danger = iprot.readI32();
              struct.setDangerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // FIRST_UPLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.firstUpload = iprot.readI32();
              struct.setFirstUploadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // POPULAR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.popular = iprot.readDouble();
              struct.setPopularIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pool = iprot.readI32();
              struct.setPoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // TOTAL_PLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPlay = iprot.readI32();
              struct.setTotalPlayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // COMMENTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commented = iprot.readI32();
              struct.setCommentedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // GIFT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gift = iprot.readI32();
              struct.setGiftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // LIKED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liked = iprot.readI32();
              struct.setLikedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // FANS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fans = iprot.readI32();
              struct.setFansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // FOLLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.follow = iprot.readI32();
              struct.setFollowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // VIDEOS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.videos = iprot.readI32();
              struct.setVideosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total = iprot.readDouble();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // HEART_LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heartLike = iprot.readI32();
              struct.setHeartLikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // HEART_STOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heartStop = iprot.readI32();
              struct.setHeartStopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // POOL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.poolStatus = iprot.readI32();
              struct.setPoolStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // VIDEO_SCREENSHOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.videoScreenshots = iprot.readString();
              struct.setVideoScreenshotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdminVideoView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vid != null) {
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeString(struct.vid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI32(struct.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeI32(struct.active);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_AT_FIELD_DESC);
      oprot.writeI32(struct.activeAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUSHED_FIELD_DESC);
      oprot.writeI32(struct.pushed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUSHED_AT_FIELD_DESC);
      oprot.writeI32(struct.pushedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECOMMENDED_FIELD_DESC);
      oprot.writeI32(struct.recommended);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECOMMENDED_AT_FIELD_DESC);
      oprot.writeI32(struct.recommendedAt);
      oprot.writeFieldEnd();
      if (struct.recommendedBy != null) {
        oprot.writeFieldBegin(RECOMMENDED_BY_FIELD_DESC);
        oprot.writeString(struct.recommendedBy);
        oprot.writeFieldEnd();
      }
      if (struct.activeBy != null) {
        oprot.writeFieldBegin(ACTIVE_BY_FIELD_DESC);
        oprot.writeString(struct.activeBy);
        oprot.writeFieldEnd();
      }
      if (struct.clientVersion != null) {
        oprot.writeFieldBegin(CLIENT_VERSION_FIELD_DESC);
        oprot.writeString(struct.clientVersion);
        oprot.writeFieldEnd();
      }
      if (struct.catalog != null) {
        oprot.writeFieldBegin(CATALOG_FIELD_DESC);
        oprot.writeString(struct.catalog);
        oprot.writeFieldEnd();
      }
      if (struct.clientAgent != null) {
        oprot.writeFieldBegin(CLIENT_AGENT_FIELD_DESC);
        oprot.writeString(struct.clientAgent);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
      oprot.writeI32(struct.direction);
      oprot.writeFieldEnd();
      if (struct.effect != null) {
        oprot.writeFieldBegin(EFFECT_FIELD_DESC);
        oprot.writeString(struct.effect);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.latitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeDouble(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M3U8_FIELD_DESC);
      oprot.writeI32(struct.m3u8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPLOAD_START_TIME_FIELD_DESC);
      oprot.writeI32(struct.uploadStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPLOAD_STOP_TIME_FIELD_DESC);
      oprot.writeI32(struct.uploadStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROCESS_START_TIME_FIELD_DESC);
      oprot.writeI32(struct.processStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROCESS_STOP_TIME_FIELD_DESC);
      oprot.writeI32(struct.processStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISH_START_TIME_FIELD_DESC);
      oprot.writeI32(struct.publishStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISH_STOP_TIME_FIELD_DESC);
      oprot.writeI32(struct.publishStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_START_TIME_FIELD_DESC);
      oprot.writeI32(struct.recordStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_STOP_TIME_FIELD_DESC);
      oprot.writeI32(struct.recordStopTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSCODED_FIELD_DESC);
      oprot.writeI32(struct.transcoded);
      oprot.writeFieldEnd();
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.audioPath != null) {
        oprot.writeFieldBegin(AUDIO_PATH_FIELD_DESC);
        oprot.writeString(struct.audioPath);
        oprot.writeFieldEnd();
      }
      if (struct.filePath != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.filePath);
        oprot.writeFieldEnd();
      }
      if (struct.img3in1 != null) {
        oprot.writeFieldBegin(IMG3IN1_FIELD_DESC);
        oprot.writeString(struct.img3in1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEED_AUDIO_FIELD_DESC);
      oprot.writeI32(struct.needAudio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_GEO_FIELD_DESC);
      oprot.writeI32(struct.showGeo);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALBUM_FIELD_DESC);
      oprot.writeI32(struct.album);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEIPAI_VIDEO_FIELD_DESC);
      oprot.writeI32(struct.weipaiVideo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSTED_FIELD_DESC);
      oprot.writeI32(struct.posted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUSTOM_COVER_NUM_FIELD_DESC);
      oprot.writeI32(struct.customCoverNum);
      oprot.writeFieldEnd();
      if (struct.defaultImg != null) {
        oprot.writeFieldBegin(DEFAULT_IMG_FIELD_DESC);
        oprot.writeString(struct.defaultImg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMG_LAST_MODIFIED_FIELD_DESC);
      oprot.writeI32(struct.imgLastModified);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETED_FIELD_DESC);
      oprot.writeI32(struct.deleted);
      oprot.writeFieldEnd();
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEL_AT_FIELD_DESC);
      oprot.writeI32(struct.delAt);
      oprot.writeFieldEnd();
      if (struct.delBy != null) {
        oprot.writeFieldBegin(DEL_BY_FIELD_DESC);
        oprot.writeString(struct.delBy);
        oprot.writeFieldEnd();
      }
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.profileImg != null) {
        oprot.writeFieldBegin(PROFILE_IMG_FIELD_DESC);
        oprot.writeString(struct.profileImg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOTUSER_FIELD_DESC);
      oprot.writeI32(struct.hotuser);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DANGER_FIELD_DESC);
      oprot.writeI32(struct.danger);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_UPLOAD_FIELD_DESC);
      oprot.writeI32(struct.firstUpload);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POPULAR_FIELD_DESC);
      oprot.writeDouble(struct.popular);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POOL_FIELD_DESC);
      oprot.writeI32(struct.pool);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PLAY_FIELD_DESC);
      oprot.writeI32(struct.totalPlay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENTED_FIELD_DESC);
      oprot.writeI32(struct.commented);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFT_FIELD_DESC);
      oprot.writeI32(struct.gift);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIKED_FIELD_DESC);
      oprot.writeI32(struct.liked);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FANS_FIELD_DESC);
      oprot.writeI32(struct.fans);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOW_FIELD_DESC);
      oprot.writeI32(struct.follow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIDEOS_FIELD_DESC);
      oprot.writeI32(struct.videos);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEART_LIKE_FIELD_DESC);
      oprot.writeI32(struct.heartLike);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEART_STOP_FIELD_DESC);
      oprot.writeI32(struct.heartStop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POOL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.poolStatus);
      oprot.writeFieldEnd();
      if (struct.videoScreenshots != null) {
        oprot.writeFieldBegin(VIDEO_SCREENSHOTS_FIELD_DESC);
        oprot.writeString(struct.videoScreenshots);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdminVideoViewTupleSchemeFactory implements SchemeFactory {
    public AdminVideoViewTupleScheme getScheme() {
      return new AdminVideoViewTupleScheme();
    }
  }

  private static class AdminVideoViewTupleScheme extends TupleScheme<AdminVideoView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdminVideoView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVid()) {
        optionals.set(0);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(1);
      }
      if (struct.isSetActive()) {
        optionals.set(2);
      }
      if (struct.isSetActiveAt()) {
        optionals.set(3);
      }
      if (struct.isSetPushed()) {
        optionals.set(4);
      }
      if (struct.isSetPushedAt()) {
        optionals.set(5);
      }
      if (struct.isSetRecommended()) {
        optionals.set(6);
      }
      if (struct.isSetRecommendedAt()) {
        optionals.set(7);
      }
      if (struct.isSetRecommendedBy()) {
        optionals.set(8);
      }
      if (struct.isSetActiveBy()) {
        optionals.set(9);
      }
      if (struct.isSetClientVersion()) {
        optionals.set(10);
      }
      if (struct.isSetCatalog()) {
        optionals.set(11);
      }
      if (struct.isSetClientAgent()) {
        optionals.set(12);
      }
      if (struct.isSetDesc()) {
        optionals.set(13);
      }
      if (struct.isSetDirection()) {
        optionals.set(14);
      }
      if (struct.isSetEffect()) {
        optionals.set(15);
      }
      if (struct.isSetLatitude()) {
        optionals.set(16);
      }
      if (struct.isSetLongitude()) {
        optionals.set(17);
      }
      if (struct.isSetLength()) {
        optionals.set(18);
      }
      if (struct.isSetM3u8()) {
        optionals.set(19);
      }
      if (struct.isSetUploadStartTime()) {
        optionals.set(20);
      }
      if (struct.isSetUploadStopTime()) {
        optionals.set(21);
      }
      if (struct.isSetProcessStartTime()) {
        optionals.set(22);
      }
      if (struct.isSetProcessStopTime()) {
        optionals.set(23);
      }
      if (struct.isSetPublishStartTime()) {
        optionals.set(24);
      }
      if (struct.isSetPublishStopTime()) {
        optionals.set(25);
      }
      if (struct.isSetRecordStartTime()) {
        optionals.set(26);
      }
      if (struct.isSetRecordStopTime()) {
        optionals.set(27);
      }
      if (struct.isSetTranscoded()) {
        optionals.set(28);
      }
      if (struct.isSetUser()) {
        optionals.set(29);
      }
      if (struct.isSetUuid()) {
        optionals.set(30);
      }
      if (struct.isSetAudioPath()) {
        optionals.set(31);
      }
      if (struct.isSetFilePath()) {
        optionals.set(32);
      }
      if (struct.isSetImg3in1()) {
        optionals.set(33);
      }
      if (struct.isSetNeedAudio()) {
        optionals.set(34);
      }
      if (struct.isSetShowGeo()) {
        optionals.set(35);
      }
      if (struct.isSetType()) {
        optionals.set(36);
      }
      if (struct.isSetAlbum()) {
        optionals.set(37);
      }
      if (struct.isSetWeipaiVideo()) {
        optionals.set(38);
      }
      if (struct.isSetPosted()) {
        optionals.set(39);
      }
      if (struct.isSetCustomCoverNum()) {
        optionals.set(40);
      }
      if (struct.isSetDefaultImg()) {
        optionals.set(41);
      }
      if (struct.isSetImgLastModified()) {
        optionals.set(42);
      }
      if (struct.isSetDeleted()) {
        optionals.set(43);
      }
      if (struct.isSetCity()) {
        optionals.set(44);
      }
      if (struct.isSetDelAt()) {
        optionals.set(45);
      }
      if (struct.isSetDelBy()) {
        optionals.set(46);
      }
      if (struct.isSetNickName()) {
        optionals.set(47);
      }
      if (struct.isSetProfileImg()) {
        optionals.set(48);
      }
      if (struct.isSetHotuser()) {
        optionals.set(49);
      }
      if (struct.isSetDanger()) {
        optionals.set(50);
      }
      if (struct.isSetFirstUpload()) {
        optionals.set(51);
      }
      if (struct.isSetPopular()) {
        optionals.set(52);
      }
      if (struct.isSetPool()) {
        optionals.set(53);
      }
      if (struct.isSetTotalPlay()) {
        optionals.set(54);
      }
      if (struct.isSetCommented()) {
        optionals.set(55);
      }
      if (struct.isSetGift()) {
        optionals.set(56);
      }
      if (struct.isSetLiked()) {
        optionals.set(57);
      }
      if (struct.isSetFans()) {
        optionals.set(58);
      }
      if (struct.isSetFollow()) {
        optionals.set(59);
      }
      if (struct.isSetVideos()) {
        optionals.set(60);
      }
      if (struct.isSetTotal()) {
        optionals.set(61);
      }
      if (struct.isSetHeartLike()) {
        optionals.set(62);
      }
      if (struct.isSetHeartStop()) {
        optionals.set(63);
      }
      if (struct.isSetPoolStatus()) {
        optionals.set(64);
      }
      if (struct.isSetVideoScreenshots()) {
        optionals.set(65);
      }
      oprot.writeBitSet(optionals, 66);
      if (struct.isSetVid()) {
        oprot.writeString(struct.vid);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeI32(struct.createdAt);
      }
      if (struct.isSetActive()) {
        oprot.writeI32(struct.active);
      }
      if (struct.isSetActiveAt()) {
        oprot.writeI32(struct.activeAt);
      }
      if (struct.isSetPushed()) {
        oprot.writeI32(struct.pushed);
      }
      if (struct.isSetPushedAt()) {
        oprot.writeI32(struct.pushedAt);
      }
      if (struct.isSetRecommended()) {
        oprot.writeI32(struct.recommended);
      }
      if (struct.isSetRecommendedAt()) {
        oprot.writeI32(struct.recommendedAt);
      }
      if (struct.isSetRecommendedBy()) {
        oprot.writeString(struct.recommendedBy);
      }
      if (struct.isSetActiveBy()) {
        oprot.writeString(struct.activeBy);
      }
      if (struct.isSetClientVersion()) {
        oprot.writeString(struct.clientVersion);
      }
      if (struct.isSetCatalog()) {
        oprot.writeString(struct.catalog);
      }
      if (struct.isSetClientAgent()) {
        oprot.writeString(struct.clientAgent);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction);
      }
      if (struct.isSetEffect()) {
        oprot.writeString(struct.effect);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetLength()) {
        oprot.writeDouble(struct.length);
      }
      if (struct.isSetM3u8()) {
        oprot.writeI32(struct.m3u8);
      }
      if (struct.isSetUploadStartTime()) {
        oprot.writeI32(struct.uploadStartTime);
      }
      if (struct.isSetUploadStopTime()) {
        oprot.writeI32(struct.uploadStopTime);
      }
      if (struct.isSetProcessStartTime()) {
        oprot.writeI32(struct.processStartTime);
      }
      if (struct.isSetProcessStopTime()) {
        oprot.writeI32(struct.processStopTime);
      }
      if (struct.isSetPublishStartTime()) {
        oprot.writeI32(struct.publishStartTime);
      }
      if (struct.isSetPublishStopTime()) {
        oprot.writeI32(struct.publishStopTime);
      }
      if (struct.isSetRecordStartTime()) {
        oprot.writeI32(struct.recordStartTime);
      }
      if (struct.isSetRecordStopTime()) {
        oprot.writeI32(struct.recordStopTime);
      }
      if (struct.isSetTranscoded()) {
        oprot.writeI32(struct.transcoded);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetAudioPath()) {
        oprot.writeString(struct.audioPath);
      }
      if (struct.isSetFilePath()) {
        oprot.writeString(struct.filePath);
      }
      if (struct.isSetImg3in1()) {
        oprot.writeString(struct.img3in1);
      }
      if (struct.isSetNeedAudio()) {
        oprot.writeI32(struct.needAudio);
      }
      if (struct.isSetShowGeo()) {
        oprot.writeI32(struct.showGeo);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetAlbum()) {
        oprot.writeI32(struct.album);
      }
      if (struct.isSetWeipaiVideo()) {
        oprot.writeI32(struct.weipaiVideo);
      }
      if (struct.isSetPosted()) {
        oprot.writeI32(struct.posted);
      }
      if (struct.isSetCustomCoverNum()) {
        oprot.writeI32(struct.customCoverNum);
      }
      if (struct.isSetDefaultImg()) {
        oprot.writeString(struct.defaultImg);
      }
      if (struct.isSetImgLastModified()) {
        oprot.writeI32(struct.imgLastModified);
      }
      if (struct.isSetDeleted()) {
        oprot.writeI32(struct.deleted);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetDelAt()) {
        oprot.writeI32(struct.delAt);
      }
      if (struct.isSetDelBy()) {
        oprot.writeString(struct.delBy);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetProfileImg()) {
        oprot.writeString(struct.profileImg);
      }
      if (struct.isSetHotuser()) {
        oprot.writeI32(struct.hotuser);
      }
      if (struct.isSetDanger()) {
        oprot.writeI32(struct.danger);
      }
      if (struct.isSetFirstUpload()) {
        oprot.writeI32(struct.firstUpload);
      }
      if (struct.isSetPopular()) {
        oprot.writeDouble(struct.popular);
      }
      if (struct.isSetPool()) {
        oprot.writeI32(struct.pool);
      }
      if (struct.isSetTotalPlay()) {
        oprot.writeI32(struct.totalPlay);
      }
      if (struct.isSetCommented()) {
        oprot.writeI32(struct.commented);
      }
      if (struct.isSetGift()) {
        oprot.writeI32(struct.gift);
      }
      if (struct.isSetLiked()) {
        oprot.writeI32(struct.liked);
      }
      if (struct.isSetFans()) {
        oprot.writeI32(struct.fans);
      }
      if (struct.isSetFollow()) {
        oprot.writeI32(struct.follow);
      }
      if (struct.isSetVideos()) {
        oprot.writeI32(struct.videos);
      }
      if (struct.isSetTotal()) {
        oprot.writeDouble(struct.total);
      }
      if (struct.isSetHeartLike()) {
        oprot.writeI32(struct.heartLike);
      }
      if (struct.isSetHeartStop()) {
        oprot.writeI32(struct.heartStop);
      }
      if (struct.isSetPoolStatus()) {
        oprot.writeI32(struct.poolStatus);
      }
      if (struct.isSetVideoScreenshots()) {
        oprot.writeString(struct.videoScreenshots);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdminVideoView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(66);
      if (incoming.get(0)) {
        struct.vid = iprot.readString();
        struct.setVidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createdAt = iprot.readI32();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.active = iprot.readI32();
        struct.setActiveIsSet(true);
      }
      if (incoming.get(3)) {
        struct.activeAt = iprot.readI32();
        struct.setActiveAtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pushed = iprot.readI32();
        struct.setPushedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pushedAt = iprot.readI32();
        struct.setPushedAtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recommended = iprot.readI32();
        struct.setRecommendedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.recommendedAt = iprot.readI32();
        struct.setRecommendedAtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.recommendedBy = iprot.readString();
        struct.setRecommendedByIsSet(true);
      }
      if (incoming.get(9)) {
        struct.activeBy = iprot.readString();
        struct.setActiveByIsSet(true);
      }
      if (incoming.get(10)) {
        struct.clientVersion = iprot.readString();
        struct.setClientVersionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.catalog = iprot.readString();
        struct.setCatalogIsSet(true);
      }
      if (incoming.get(12)) {
        struct.clientAgent = iprot.readString();
        struct.setClientAgentIsSet(true);
      }
      if (incoming.get(13)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(14)) {
        struct.direction = iprot.readI32();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.effect = iprot.readString();
        struct.setEffectIsSet(true);
      }
      if (incoming.get(16)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.length = iprot.readDouble();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(19)) {
        struct.m3u8 = iprot.readI32();
        struct.setM3u8IsSet(true);
      }
      if (incoming.get(20)) {
        struct.uploadStartTime = iprot.readI32();
        struct.setUploadStartTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.uploadStopTime = iprot.readI32();
        struct.setUploadStopTimeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.processStartTime = iprot.readI32();
        struct.setProcessStartTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.processStopTime = iprot.readI32();
        struct.setProcessStopTimeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.publishStartTime = iprot.readI32();
        struct.setPublishStartTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.publishStopTime = iprot.readI32();
        struct.setPublishStopTimeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.recordStartTime = iprot.readI32();
        struct.setRecordStartTimeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.recordStopTime = iprot.readI32();
        struct.setRecordStopTimeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.transcoded = iprot.readI32();
        struct.setTranscodedIsSet(true);
      }
      if (incoming.get(29)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(30)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(31)) {
        struct.audioPath = iprot.readString();
        struct.setAudioPathIsSet(true);
      }
      if (incoming.get(32)) {
        struct.filePath = iprot.readString();
        struct.setFilePathIsSet(true);
      }
      if (incoming.get(33)) {
        struct.img3in1 = iprot.readString();
        struct.setImg3in1IsSet(true);
      }
      if (incoming.get(34)) {
        struct.needAudio = iprot.readI32();
        struct.setNeedAudioIsSet(true);
      }
      if (incoming.get(35)) {
        struct.showGeo = iprot.readI32();
        struct.setShowGeoIsSet(true);
      }
      if (incoming.get(36)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.album = iprot.readI32();
        struct.setAlbumIsSet(true);
      }
      if (incoming.get(38)) {
        struct.weipaiVideo = iprot.readI32();
        struct.setWeipaiVideoIsSet(true);
      }
      if (incoming.get(39)) {
        struct.posted = iprot.readI32();
        struct.setPostedIsSet(true);
      }
      if (incoming.get(40)) {
        struct.customCoverNum = iprot.readI32();
        struct.setCustomCoverNumIsSet(true);
      }
      if (incoming.get(41)) {
        struct.defaultImg = iprot.readString();
        struct.setDefaultImgIsSet(true);
      }
      if (incoming.get(42)) {
        struct.imgLastModified = iprot.readI32();
        struct.setImgLastModifiedIsSet(true);
      }
      if (incoming.get(43)) {
        struct.deleted = iprot.readI32();
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(44)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(45)) {
        struct.delAt = iprot.readI32();
        struct.setDelAtIsSet(true);
      }
      if (incoming.get(46)) {
        struct.delBy = iprot.readString();
        struct.setDelByIsSet(true);
      }
      if (incoming.get(47)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(48)) {
        struct.profileImg = iprot.readString();
        struct.setProfileImgIsSet(true);
      }
      if (incoming.get(49)) {
        struct.hotuser = iprot.readI32();
        struct.setHotuserIsSet(true);
      }
      if (incoming.get(50)) {
        struct.danger = iprot.readI32();
        struct.setDangerIsSet(true);
      }
      if (incoming.get(51)) {
        struct.firstUpload = iprot.readI32();
        struct.setFirstUploadIsSet(true);
      }
      if (incoming.get(52)) {
        struct.popular = iprot.readDouble();
        struct.setPopularIsSet(true);
      }
      if (incoming.get(53)) {
        struct.pool = iprot.readI32();
        struct.setPoolIsSet(true);
      }
      if (incoming.get(54)) {
        struct.totalPlay = iprot.readI32();
        struct.setTotalPlayIsSet(true);
      }
      if (incoming.get(55)) {
        struct.commented = iprot.readI32();
        struct.setCommentedIsSet(true);
      }
      if (incoming.get(56)) {
        struct.gift = iprot.readI32();
        struct.setGiftIsSet(true);
      }
      if (incoming.get(57)) {
        struct.liked = iprot.readI32();
        struct.setLikedIsSet(true);
      }
      if (incoming.get(58)) {
        struct.fans = iprot.readI32();
        struct.setFansIsSet(true);
      }
      if (incoming.get(59)) {
        struct.follow = iprot.readI32();
        struct.setFollowIsSet(true);
      }
      if (incoming.get(60)) {
        struct.videos = iprot.readI32();
        struct.setVideosIsSet(true);
      }
      if (incoming.get(61)) {
        struct.total = iprot.readDouble();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(62)) {
        struct.heartLike = iprot.readI32();
        struct.setHeartLikeIsSet(true);
      }
      if (incoming.get(63)) {
        struct.heartStop = iprot.readI32();
        struct.setHeartStopIsSet(true);
      }
      if (incoming.get(64)) {
        struct.poolStatus = iprot.readI32();
        struct.setPoolStatusIsSet(true);
      }
      if (incoming.get(65)) {
        struct.videoScreenshots = iprot.readString();
        struct.setVideoScreenshotsIsSet(true);
      }
    }
  }

}

