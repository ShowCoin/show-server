/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdminUserPayView implements org.apache.thrift.TBase<AdminUserPayView, AdminUserPayView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdminUserPayView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("receive", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("spend", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VIP_EXPIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("vipExpire", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdminUserPayViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdminUserPayViewTupleSchemeFactory());
  }

  public String id; // required
  public String nickName; // required
  public int account; // required
  public int receive; // required
  public int spend; // required
  public String vipExpire; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NICK_NAME((short)2, "nickName"),
    ACCOUNT((short)3, "account"),
    RECEIVE((short)4, "receive"),
    SPEND((short)5, "spend"),
    VIP_EXPIRE((short)6, "vipExpire");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NICK_NAME
          return NICK_NAME;
        case 3: // ACCOUNT
          return ACCOUNT;
        case 4: // RECEIVE
          return RECEIVE;
        case 5: // SPEND
          return SPEND;
        case 6: // VIP_EXPIRE
          return VIP_EXPIRE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCOUNT_ISSET_ID = 0;
  private static final int __RECEIVE_ISSET_ID = 1;
  private static final int __SPEND_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("receive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEND, new org.apache.thrift.meta_data.FieldMetaData("spend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIP_EXPIRE, new org.apache.thrift.meta_data.FieldMetaData("vipExpire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdminUserPayView.class, metaDataMap);
  }

  public AdminUserPayView() {
  }

  public AdminUserPayView(
    String id,
    String nickName,
    int account,
    int receive,
    int spend,
    String vipExpire)
  {
    this();
    this.id = id;
    this.nickName = nickName;
    this.account = account;
    setAccountIsSet(true);
    this.receive = receive;
    setReceiveIsSet(true);
    this.spend = spend;
    setSpendIsSet(true);
    this.vipExpire = vipExpire;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdminUserPayView(AdminUserPayView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    this.account = other.account;
    this.receive = other.receive;
    this.spend = other.spend;
    if (other.isSetVipExpire()) {
      this.vipExpire = other.vipExpire;
    }
  }

  public AdminUserPayView deepCopy() {
    return new AdminUserPayView(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.nickName = null;
    setAccountIsSet(false);
    this.account = 0;
    setReceiveIsSet(false);
    this.receive = 0;
    setSpendIsSet(false);
    this.spend = 0;
    this.vipExpire = null;
  }

  public String getId() {
    return this.id;
  }

  public AdminUserPayView setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getNickName() {
    return this.nickName;
  }

  public AdminUserPayView setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public int getAccount() {
    return this.account;
  }

  public AdminUserPayView setAccount(int account) {
    this.account = account;
    setAccountIsSet(true);
    return this;
  }

  public void unsetAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNT_ISSET_ID);
  }

  /** Returns true if field account is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNT_ISSET_ID);
  }

  public void setAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNT_ISSET_ID, value);
  }

  public int getReceive() {
    return this.receive;
  }

  public AdminUserPayView setReceive(int receive) {
    this.receive = receive;
    setReceiveIsSet(true);
    return this;
  }

  public void unsetReceive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVE_ISSET_ID);
  }

  /** Returns true if field receive is set (has been assigned a value) and false otherwise */
  public boolean isSetReceive() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVE_ISSET_ID);
  }

  public void setReceiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVE_ISSET_ID, value);
  }

  public int getSpend() {
    return this.spend;
  }

  public AdminUserPayView setSpend(int spend) {
    this.spend = spend;
    setSpendIsSet(true);
    return this;
  }

  public void unsetSpend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEND_ISSET_ID);
  }

  /** Returns true if field spend is set (has been assigned a value) and false otherwise */
  public boolean isSetSpend() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEND_ISSET_ID);
  }

  public void setSpendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEND_ISSET_ID, value);
  }

  public String getVipExpire() {
    return this.vipExpire;
  }

  public AdminUserPayView setVipExpire(String vipExpire) {
    this.vipExpire = vipExpire;
    return this;
  }

  public void unsetVipExpire() {
    this.vipExpire = null;
  }

  /** Returns true if field vipExpire is set (has been assigned a value) and false otherwise */
  public boolean isSetVipExpire() {
    return this.vipExpire != null;
  }

  public void setVipExpireIsSet(boolean value) {
    if (!value) {
      this.vipExpire = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case ACCOUNT:
      if (value == null) {
        unsetAccount();
      } else {
        setAccount((Integer)value);
      }
      break;

    case RECEIVE:
      if (value == null) {
        unsetReceive();
      } else {
        setReceive((Integer)value);
      }
      break;

    case SPEND:
      if (value == null) {
        unsetSpend();
      } else {
        setSpend((Integer)value);
      }
      break;

    case VIP_EXPIRE:
      if (value == null) {
        unsetVipExpire();
      } else {
        setVipExpire((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NICK_NAME:
      return getNickName();

    case ACCOUNT:
      return Integer.valueOf(getAccount());

    case RECEIVE:
      return Integer.valueOf(getReceive());

    case SPEND:
      return Integer.valueOf(getSpend());

    case VIP_EXPIRE:
      return getVipExpire();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NICK_NAME:
      return isSetNickName();
    case ACCOUNT:
      return isSetAccount();
    case RECEIVE:
      return isSetReceive();
    case SPEND:
      return isSetSpend();
    case VIP_EXPIRE:
      return isSetVipExpire();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdminUserPayView)
      return this.equals((AdminUserPayView)that);
    return false;
  }

  public boolean equals(AdminUserPayView that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_account = true;
    boolean that_present_account = true;
    if (this_present_account || that_present_account) {
      if (!(this_present_account && that_present_account))
        return false;
      if (this.account != that.account)
        return false;
    }

    boolean this_present_receive = true;
    boolean that_present_receive = true;
    if (this_present_receive || that_present_receive) {
      if (!(this_present_receive && that_present_receive))
        return false;
      if (this.receive != that.receive)
        return false;
    }

    boolean this_present_spend = true;
    boolean that_present_spend = true;
    if (this_present_spend || that_present_spend) {
      if (!(this_present_spend && that_present_spend))
        return false;
      if (this.spend != that.spend)
        return false;
    }

    boolean this_present_vipExpire = true && this.isSetVipExpire();
    boolean that_present_vipExpire = true && that.isSetVipExpire();
    if (this_present_vipExpire || that_present_vipExpire) {
      if (!(this_present_vipExpire && that_present_vipExpire))
        return false;
      if (!this.vipExpire.equals(that.vipExpire))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AdminUserPayView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AdminUserPayView typedOther = (AdminUserPayView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(typedOther.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, typedOther.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, typedOther.account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceive()).compareTo(typedOther.isSetReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receive, typedOther.receive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpend()).compareTo(typedOther.isSetSpend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spend, typedOther.spend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipExpire()).compareTo(typedOther.isSetVipExpire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipExpire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipExpire, typedOther.vipExpire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdminUserPayView(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("account:");
    sb.append(this.account);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receive:");
    sb.append(this.receive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spend:");
    sb.append(this.spend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipExpire:");
    if (this.vipExpire == null) {
      sb.append("null");
    } else {
      sb.append(this.vipExpire);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdminUserPayViewStandardSchemeFactory implements SchemeFactory {
    public AdminUserPayViewStandardScheme getScheme() {
      return new AdminUserPayViewStandardScheme();
    }
  }

  private static class AdminUserPayViewStandardScheme extends StandardScheme<AdminUserPayView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdminUserPayView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.account = iprot.readI32();
              struct.setAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receive = iprot.readI32();
              struct.setReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spend = iprot.readI32();
              struct.setSpendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIP_EXPIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vipExpire = iprot.readString();
              struct.setVipExpireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdminUserPayView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
      oprot.writeI32(struct.account);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVE_FIELD_DESC);
      oprot.writeI32(struct.receive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPEND_FIELD_DESC);
      oprot.writeI32(struct.spend);
      oprot.writeFieldEnd();
      if (struct.vipExpire != null) {
        oprot.writeFieldBegin(VIP_EXPIRE_FIELD_DESC);
        oprot.writeString(struct.vipExpire);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdminUserPayViewTupleSchemeFactory implements SchemeFactory {
    public AdminUserPayViewTupleScheme getScheme() {
      return new AdminUserPayViewTupleScheme();
    }
  }

  private static class AdminUserPayViewTupleScheme extends TupleScheme<AdminUserPayView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdminUserPayView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNickName()) {
        optionals.set(1);
      }
      if (struct.isSetAccount()) {
        optionals.set(2);
      }
      if (struct.isSetReceive()) {
        optionals.set(3);
      }
      if (struct.isSetSpend()) {
        optionals.set(4);
      }
      if (struct.isSetVipExpire()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetAccount()) {
        oprot.writeI32(struct.account);
      }
      if (struct.isSetReceive()) {
        oprot.writeI32(struct.receive);
      }
      if (struct.isSetSpend()) {
        oprot.writeI32(struct.spend);
      }
      if (struct.isSetVipExpire()) {
        oprot.writeString(struct.vipExpire);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdminUserPayView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.account = iprot.readI32();
        struct.setAccountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.receive = iprot.readI32();
        struct.setReceiveIsSet(true);
      }
      if (incoming.get(4)) {
        struct.spend = iprot.readI32();
        struct.setSpendIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vipExpire = iprot.readString();
        struct.setVipExpireIsSet(true);
      }
    }
  }

}

