/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActivityShareView implements org.apache.thrift.TBase<ActivityShareView, ActivityShareView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityShareView");

  private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHARE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("shareTimes", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SHARE_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("shareReward", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_SHARE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastShareTime", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityShareViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityShareViewTupleSchemeFactory());
  }

  public String did; // required
  public int shareTimes; // required
  public String shareReward; // required
  public int lastShareTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DID((short)1, "did"),
    SHARE_TIMES((short)2, "shareTimes"),
    SHARE_REWARD((short)3, "shareReward"),
    LAST_SHARE_TIME((short)4, "lastShareTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DID
          return DID;
        case 2: // SHARE_TIMES
          return SHARE_TIMES;
        case 3: // SHARE_REWARD
          return SHARE_REWARD;
        case 4: // LAST_SHARE_TIME
          return LAST_SHARE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHARETIMES_ISSET_ID = 0;
  private static final int __LASTSHARETIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("shareTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_REWARD, new org.apache.thrift.meta_data.FieldMetaData("shareReward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_SHARE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastShareTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityShareView.class, metaDataMap);
  }

  public ActivityShareView() {
  }

  public ActivityShareView(
    String did,
    int shareTimes,
    String shareReward,
    int lastShareTime)
  {
    this();
    this.did = did;
    this.shareTimes = shareTimes;
    setShareTimesIsSet(true);
    this.shareReward = shareReward;
    this.lastShareTime = lastShareTime;
    setLastShareTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityShareView(ActivityShareView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDid()) {
      this.did = other.did;
    }
    this.shareTimes = other.shareTimes;
    if (other.isSetShareReward()) {
      this.shareReward = other.shareReward;
    }
    this.lastShareTime = other.lastShareTime;
  }

  public ActivityShareView deepCopy() {
    return new ActivityShareView(this);
  }

  @Override
  public void clear() {
    this.did = null;
    setShareTimesIsSet(false);
    this.shareTimes = 0;
    this.shareReward = null;
    setLastShareTimeIsSet(false);
    this.lastShareTime = 0;
  }

  public String getDid() {
    return this.did;
  }

  public ActivityShareView setDid(String did) {
    this.did = did;
    return this;
  }

  public void unsetDid() {
    this.did = null;
  }

  /** Returns true if field did is set (has been assigned a value) and false otherwise */
  public boolean isSetDid() {
    return this.did != null;
  }

  public void setDidIsSet(boolean value) {
    if (!value) {
      this.did = null;
    }
  }

  public int getShareTimes() {
    return this.shareTimes;
  }

  public ActivityShareView setShareTimes(int shareTimes) {
    this.shareTimes = shareTimes;
    setShareTimesIsSet(true);
    return this;
  }

  public void unsetShareTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARETIMES_ISSET_ID);
  }

  /** Returns true if field shareTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetShareTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARETIMES_ISSET_ID);
  }

  public void setShareTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARETIMES_ISSET_ID, value);
  }

  public String getShareReward() {
    return this.shareReward;
  }

  public ActivityShareView setShareReward(String shareReward) {
    this.shareReward = shareReward;
    return this;
  }

  public void unsetShareReward() {
    this.shareReward = null;
  }

  /** Returns true if field shareReward is set (has been assigned a value) and false otherwise */
  public boolean isSetShareReward() {
    return this.shareReward != null;
  }

  public void setShareRewardIsSet(boolean value) {
    if (!value) {
      this.shareReward = null;
    }
  }

  public int getLastShareTime() {
    return this.lastShareTime;
  }

  public ActivityShareView setLastShareTime(int lastShareTime) {
    this.lastShareTime = lastShareTime;
    setLastShareTimeIsSet(true);
    return this;
  }

  public void unsetLastShareTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSHARETIME_ISSET_ID);
  }

  /** Returns true if field lastShareTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastShareTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTSHARETIME_ISSET_ID);
  }

  public void setLastShareTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSHARETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DID:
      if (value == null) {
        unsetDid();
      } else {
        setDid((String)value);
      }
      break;

    case SHARE_TIMES:
      if (value == null) {
        unsetShareTimes();
      } else {
        setShareTimes((Integer)value);
      }
      break;

    case SHARE_REWARD:
      if (value == null) {
        unsetShareReward();
      } else {
        setShareReward((String)value);
      }
      break;

    case LAST_SHARE_TIME:
      if (value == null) {
        unsetLastShareTime();
      } else {
        setLastShareTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DID:
      return getDid();

    case SHARE_TIMES:
      return Integer.valueOf(getShareTimes());

    case SHARE_REWARD:
      return getShareReward();

    case LAST_SHARE_TIME:
      return Integer.valueOf(getLastShareTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DID:
      return isSetDid();
    case SHARE_TIMES:
      return isSetShareTimes();
    case SHARE_REWARD:
      return isSetShareReward();
    case LAST_SHARE_TIME:
      return isSetLastShareTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityShareView)
      return this.equals((ActivityShareView)that);
    return false;
  }

  public boolean equals(ActivityShareView that) {
    if (that == null)
      return false;

    boolean this_present_did = true && this.isSetDid();
    boolean that_present_did = true && that.isSetDid();
    if (this_present_did || that_present_did) {
      if (!(this_present_did && that_present_did))
        return false;
      if (!this.did.equals(that.did))
        return false;
    }

    boolean this_present_shareTimes = true;
    boolean that_present_shareTimes = true;
    if (this_present_shareTimes || that_present_shareTimes) {
      if (!(this_present_shareTimes && that_present_shareTimes))
        return false;
      if (this.shareTimes != that.shareTimes)
        return false;
    }

    boolean this_present_shareReward = true && this.isSetShareReward();
    boolean that_present_shareReward = true && that.isSetShareReward();
    if (this_present_shareReward || that_present_shareReward) {
      if (!(this_present_shareReward && that_present_shareReward))
        return false;
      if (!this.shareReward.equals(that.shareReward))
        return false;
    }

    boolean this_present_lastShareTime = true;
    boolean that_present_lastShareTime = true;
    if (this_present_lastShareTime || that_present_lastShareTime) {
      if (!(this_present_lastShareTime && that_present_lastShareTime))
        return false;
      if (this.lastShareTime != that.lastShareTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityShareView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityShareView typedOther = (ActivityShareView)other;

    lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareTimes()).compareTo(typedOther.isSetShareTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareTimes, typedOther.shareTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareReward()).compareTo(typedOther.isSetShareReward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareReward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareReward, typedOther.shareReward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastShareTime()).compareTo(typedOther.isSetLastShareTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastShareTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastShareTime, typedOther.lastShareTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityShareView(");
    boolean first = true;

    sb.append("did:");
    if (this.did == null) {
      sb.append("null");
    } else {
      sb.append(this.did);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareTimes:");
    sb.append(this.shareTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareReward:");
    if (this.shareReward == null) {
      sb.append("null");
    } else {
      sb.append(this.shareReward);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastShareTime:");
    sb.append(this.lastShareTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityShareViewStandardSchemeFactory implements SchemeFactory {
    public ActivityShareViewStandardScheme getScheme() {
      return new ActivityShareViewStandardScheme();
    }
  }

  private static class ActivityShareViewStandardScheme extends StandardScheme<ActivityShareView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityShareView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.did = iprot.readString();
              struct.setDidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHARE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareTimes = iprot.readI32();
              struct.setShareTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHARE_REWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareReward = iprot.readString();
              struct.setShareRewardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_SHARE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastShareTime = iprot.readI32();
              struct.setLastShareTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityShareView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.did != null) {
        oprot.writeFieldBegin(DID_FIELD_DESC);
        oprot.writeString(struct.did);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHARE_TIMES_FIELD_DESC);
      oprot.writeI32(struct.shareTimes);
      oprot.writeFieldEnd();
      if (struct.shareReward != null) {
        oprot.writeFieldBegin(SHARE_REWARD_FIELD_DESC);
        oprot.writeString(struct.shareReward);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_SHARE_TIME_FIELD_DESC);
      oprot.writeI32(struct.lastShareTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityShareViewTupleSchemeFactory implements SchemeFactory {
    public ActivityShareViewTupleScheme getScheme() {
      return new ActivityShareViewTupleScheme();
    }
  }

  private static class ActivityShareViewTupleScheme extends TupleScheme<ActivityShareView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityShareView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDid()) {
        optionals.set(0);
      }
      if (struct.isSetShareTimes()) {
        optionals.set(1);
      }
      if (struct.isSetShareReward()) {
        optionals.set(2);
      }
      if (struct.isSetLastShareTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDid()) {
        oprot.writeString(struct.did);
      }
      if (struct.isSetShareTimes()) {
        oprot.writeI32(struct.shareTimes);
      }
      if (struct.isSetShareReward()) {
        oprot.writeString(struct.shareReward);
      }
      if (struct.isSetLastShareTime()) {
        oprot.writeI32(struct.lastShareTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityShareView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.did = iprot.readString();
        struct.setDidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shareTimes = iprot.readI32();
        struct.setShareTimesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shareReward = iprot.readString();
        struct.setShareRewardIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastShareTime = iprot.readI32();
        struct.setLastShareTimeIsSet(true);
      }
    }
  }

}

