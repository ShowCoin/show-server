/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SystemConfigView implements org.apache.thrift.TBase<SystemConfigView, SystemConfigView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemConfigView");

  private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BITRATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bitrate", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frame", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ALIPAY_FIELD_DESC = new org.apache.thrift.protocol.TField("alipay", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField WEIXINPAY_FIELD_DESC = new org.apache.thrift.protocol.TField("weixinpay", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SHARE_SINA_FIELD_DESC = new org.apache.thrift.protocol.TField("shareSina", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SHARE_QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("shareQq", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SHARE_QQZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareQqzone", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SHARE_WX_FIELD_DESC = new org.apache.thrift.protocol.TField("shareWx", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SHARE_WX_PYQ_FIELD_DESC = new org.apache.thrift.protocol.TField("shareWxPyq", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SHOW_AD_FIELD_DESC = new org.apache.thrift.protocol.TField("showAd", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SHOW_QQLOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("showQQLogin", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SHOW_EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("showExchange", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField APPLEPAY_FIELD_DESC = new org.apache.thrift.protocol.TField("applepay", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SystemConfigViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SystemConfigViewTupleSchemeFactory());
  }

  public int configId; // required
  public String version; // required
  public int bitrate; // required
  public int frame; // required
  public int width; // required
  public int height; // required
  public int alipay; // required
  public int weixinpay; // required
  public String shareSina; // required
  public String shareQq; // required
  public String shareQqzone; // required
  public String shareWx; // required
  public String shareWxPyq; // required
  public int showAd; // required
  public int showQQLogin; // required
  public int showExchange; // required
  public int createTime; // required
  public int applepay; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONFIG_ID((short)1, "configId"),
    VERSION((short)2, "version"),
    BITRATE((short)3, "bitrate"),
    FRAME((short)4, "frame"),
    WIDTH((short)5, "width"),
    HEIGHT((short)6, "height"),
    ALIPAY((short)7, "alipay"),
    WEIXINPAY((short)8, "weixinpay"),
    SHARE_SINA((short)9, "shareSina"),
    SHARE_QQ((short)10, "shareQq"),
    SHARE_QQZONE((short)11, "shareQqzone"),
    SHARE_WX((short)12, "shareWx"),
    SHARE_WX_PYQ((short)13, "shareWxPyq"),
    SHOW_AD((short)14, "showAd"),
    SHOW_QQLOGIN((short)15, "showQQLogin"),
    SHOW_EXCHANGE((short)16, "showExchange"),
    CREATE_TIME((short)17, "createTime"),
    APPLEPAY((short)18, "applepay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONFIG_ID
          return CONFIG_ID;
        case 2: // VERSION
          return VERSION;
        case 3: // BITRATE
          return BITRATE;
        case 4: // FRAME
          return FRAME;
        case 5: // WIDTH
          return WIDTH;
        case 6: // HEIGHT
          return HEIGHT;
        case 7: // ALIPAY
          return ALIPAY;
        case 8: // WEIXINPAY
          return WEIXINPAY;
        case 9: // SHARE_SINA
          return SHARE_SINA;
        case 10: // SHARE_QQ
          return SHARE_QQ;
        case 11: // SHARE_QQZONE
          return SHARE_QQZONE;
        case 12: // SHARE_WX
          return SHARE_WX;
        case 13: // SHARE_WX_PYQ
          return SHARE_WX_PYQ;
        case 14: // SHOW_AD
          return SHOW_AD;
        case 15: // SHOW_QQLOGIN
          return SHOW_QQLOGIN;
        case 16: // SHOW_EXCHANGE
          return SHOW_EXCHANGE;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // APPLEPAY
          return APPLEPAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIGID_ISSET_ID = 0;
  private static final int __BITRATE_ISSET_ID = 1;
  private static final int __FRAME_ISSET_ID = 2;
  private static final int __WIDTH_ISSET_ID = 3;
  private static final int __HEIGHT_ISSET_ID = 4;
  private static final int __ALIPAY_ISSET_ID = 5;
  private static final int __WEIXINPAY_ISSET_ID = 6;
  private static final int __SHOWAD_ISSET_ID = 7;
  private static final int __SHOWQQLOGIN_ISSET_ID = 8;
  private static final int __SHOWEXCHANGE_ISSET_ID = 9;
  private static final int __CREATETIME_ISSET_ID = 10;
  private static final int __APPLEPAY_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BITRATE, new org.apache.thrift.meta_data.FieldMetaData("bitrate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAME, new org.apache.thrift.meta_data.FieldMetaData("frame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALIPAY, new org.apache.thrift.meta_data.FieldMetaData("alipay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIXINPAY, new org.apache.thrift.meta_data.FieldMetaData("weixinpay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHARE_SINA, new org.apache.thrift.meta_data.FieldMetaData("shareSina", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_QQ, new org.apache.thrift.meta_data.FieldMetaData("shareQq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_QQZONE, new org.apache.thrift.meta_data.FieldMetaData("shareQqzone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_WX, new org.apache.thrift.meta_data.FieldMetaData("shareWx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_WX_PYQ, new org.apache.thrift.meta_data.FieldMetaData("shareWxPyq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOW_AD, new org.apache.thrift.meta_data.FieldMetaData("showAd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_QQLOGIN, new org.apache.thrift.meta_data.FieldMetaData("showQQLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("showExchange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLEPAY, new org.apache.thrift.meta_data.FieldMetaData("applepay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemConfigView.class, metaDataMap);
  }

  public SystemConfigView() {
  }

  public SystemConfigView(
    int configId,
    String version,
    int bitrate,
    int frame,
    int width,
    int height,
    int alipay,
    int weixinpay,
    String shareSina,
    String shareQq,
    String shareQqzone,
    String shareWx,
    String shareWxPyq,
    int showAd,
    int showQQLogin,
    int showExchange,
    int createTime,
    int applepay)
  {
    this();
    this.configId = configId;
    setConfigIdIsSet(true);
    this.version = version;
    this.bitrate = bitrate;
    setBitrateIsSet(true);
    this.frame = frame;
    setFrameIsSet(true);
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.alipay = alipay;
    setAlipayIsSet(true);
    this.weixinpay = weixinpay;
    setWeixinpayIsSet(true);
    this.shareSina = shareSina;
    this.shareQq = shareQq;
    this.shareQqzone = shareQqzone;
    this.shareWx = shareWx;
    this.shareWxPyq = shareWxPyq;
    this.showAd = showAd;
    setShowAdIsSet(true);
    this.showQQLogin = showQQLogin;
    setShowQQLoginIsSet(true);
    this.showExchange = showExchange;
    setShowExchangeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.applepay = applepay;
    setApplepayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemConfigView(SystemConfigView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.configId = other.configId;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.bitrate = other.bitrate;
    this.frame = other.frame;
    this.width = other.width;
    this.height = other.height;
    this.alipay = other.alipay;
    this.weixinpay = other.weixinpay;
    if (other.isSetShareSina()) {
      this.shareSina = other.shareSina;
    }
    if (other.isSetShareQq()) {
      this.shareQq = other.shareQq;
    }
    if (other.isSetShareQqzone()) {
      this.shareQqzone = other.shareQqzone;
    }
    if (other.isSetShareWx()) {
      this.shareWx = other.shareWx;
    }
    if (other.isSetShareWxPyq()) {
      this.shareWxPyq = other.shareWxPyq;
    }
    this.showAd = other.showAd;
    this.showQQLogin = other.showQQLogin;
    this.showExchange = other.showExchange;
    this.createTime = other.createTime;
    this.applepay = other.applepay;
  }

  public SystemConfigView deepCopy() {
    return new SystemConfigView(this);
  }

  @Override
  public void clear() {
    setConfigIdIsSet(false);
    this.configId = 0;
    this.version = null;
    setBitrateIsSet(false);
    this.bitrate = 0;
    setFrameIsSet(false);
    this.frame = 0;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    setAlipayIsSet(false);
    this.alipay = 0;
    setWeixinpayIsSet(false);
    this.weixinpay = 0;
    this.shareSina = null;
    this.shareQq = null;
    this.shareQqzone = null;
    this.shareWx = null;
    this.shareWxPyq = null;
    setShowAdIsSet(false);
    this.showAd = 0;
    setShowQQLoginIsSet(false);
    this.showQQLogin = 0;
    setShowExchangeIsSet(false);
    this.showExchange = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setApplepayIsSet(false);
    this.applepay = 0;
  }

  public int getConfigId() {
    return this.configId;
  }

  public SystemConfigView setConfigId(int configId) {
    this.configId = configId;
    setConfigIdIsSet(true);
    return this;
  }

  public void unsetConfigId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGID_ISSET_ID);
  }

  /** Returns true if field configId is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIGID_ISSET_ID);
  }

  public void setConfigIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGID_ISSET_ID, value);
  }

  public String getVersion() {
    return this.version;
  }

  public SystemConfigView setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getBitrate() {
    return this.bitrate;
  }

  public SystemConfigView setBitrate(int bitrate) {
    this.bitrate = bitrate;
    setBitrateIsSet(true);
    return this;
  }

  public void unsetBitrate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BITRATE_ISSET_ID);
  }

  /** Returns true if field bitrate is set (has been assigned a value) and false otherwise */
  public boolean isSetBitrate() {
    return EncodingUtils.testBit(__isset_bitfield, __BITRATE_ISSET_ID);
  }

  public void setBitrateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BITRATE_ISSET_ID, value);
  }

  public int getFrame() {
    return this.frame;
  }

  public SystemConfigView setFrame(int frame) {
    this.frame = frame;
    setFrameIsSet(true);
    return this;
  }

  public void unsetFrame() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAME_ISSET_ID);
  }

  /** Returns true if field frame is set (has been assigned a value) and false otherwise */
  public boolean isSetFrame() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAME_ISSET_ID);
  }

  public void setFrameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAME_ISSET_ID, value);
  }

  public int getWidth() {
    return this.width;
  }

  public SystemConfigView setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public SystemConfigView setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public int getAlipay() {
    return this.alipay;
  }

  public SystemConfigView setAlipay(int alipay) {
    this.alipay = alipay;
    setAlipayIsSet(true);
    return this;
  }

  public void unsetAlipay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALIPAY_ISSET_ID);
  }

  /** Returns true if field alipay is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipay() {
    return EncodingUtils.testBit(__isset_bitfield, __ALIPAY_ISSET_ID);
  }

  public void setAlipayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALIPAY_ISSET_ID, value);
  }

  public int getWeixinpay() {
    return this.weixinpay;
  }

  public SystemConfigView setWeixinpay(int weixinpay) {
    this.weixinpay = weixinpay;
    setWeixinpayIsSet(true);
    return this;
  }

  public void unsetWeixinpay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIXINPAY_ISSET_ID);
  }

  /** Returns true if field weixinpay is set (has been assigned a value) and false otherwise */
  public boolean isSetWeixinpay() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIXINPAY_ISSET_ID);
  }

  public void setWeixinpayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIXINPAY_ISSET_ID, value);
  }

  public String getShareSina() {
    return this.shareSina;
  }

  public SystemConfigView setShareSina(String shareSina) {
    this.shareSina = shareSina;
    return this;
  }

  public void unsetShareSina() {
    this.shareSina = null;
  }

  /** Returns true if field shareSina is set (has been assigned a value) and false otherwise */
  public boolean isSetShareSina() {
    return this.shareSina != null;
  }

  public void setShareSinaIsSet(boolean value) {
    if (!value) {
      this.shareSina = null;
    }
  }

  public String getShareQq() {
    return this.shareQq;
  }

  public SystemConfigView setShareQq(String shareQq) {
    this.shareQq = shareQq;
    return this;
  }

  public void unsetShareQq() {
    this.shareQq = null;
  }

  /** Returns true if field shareQq is set (has been assigned a value) and false otherwise */
  public boolean isSetShareQq() {
    return this.shareQq != null;
  }

  public void setShareQqIsSet(boolean value) {
    if (!value) {
      this.shareQq = null;
    }
  }

  public String getShareQqzone() {
    return this.shareQqzone;
  }

  public SystemConfigView setShareQqzone(String shareQqzone) {
    this.shareQqzone = shareQqzone;
    return this;
  }

  public void unsetShareQqzone() {
    this.shareQqzone = null;
  }

  /** Returns true if field shareQqzone is set (has been assigned a value) and false otherwise */
  public boolean isSetShareQqzone() {
    return this.shareQqzone != null;
  }

  public void setShareQqzoneIsSet(boolean value) {
    if (!value) {
      this.shareQqzone = null;
    }
  }

  public String getShareWx() {
    return this.shareWx;
  }

  public SystemConfigView setShareWx(String shareWx) {
    this.shareWx = shareWx;
    return this;
  }

  public void unsetShareWx() {
    this.shareWx = null;
  }

  /** Returns true if field shareWx is set (has been assigned a value) and false otherwise */
  public boolean isSetShareWx() {
    return this.shareWx != null;
  }

  public void setShareWxIsSet(boolean value) {
    if (!value) {
      this.shareWx = null;
    }
  }

  public String getShareWxPyq() {
    return this.shareWxPyq;
  }

  public SystemConfigView setShareWxPyq(String shareWxPyq) {
    this.shareWxPyq = shareWxPyq;
    return this;
  }

  public void unsetShareWxPyq() {
    this.shareWxPyq = null;
  }

  /** Returns true if field shareWxPyq is set (has been assigned a value) and false otherwise */
  public boolean isSetShareWxPyq() {
    return this.shareWxPyq != null;
  }

  public void setShareWxPyqIsSet(boolean value) {
    if (!value) {
      this.shareWxPyq = null;
    }
  }

  public int getShowAd() {
    return this.showAd;
  }

  public SystemConfigView setShowAd(int showAd) {
    this.showAd = showAd;
    setShowAdIsSet(true);
    return this;
  }

  public void unsetShowAd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWAD_ISSET_ID);
  }

  /** Returns true if field showAd is set (has been assigned a value) and false otherwise */
  public boolean isSetShowAd() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWAD_ISSET_ID);
  }

  public void setShowAdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWAD_ISSET_ID, value);
  }

  public int getShowQQLogin() {
    return this.showQQLogin;
  }

  public SystemConfigView setShowQQLogin(int showQQLogin) {
    this.showQQLogin = showQQLogin;
    setShowQQLoginIsSet(true);
    return this;
  }

  public void unsetShowQQLogin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWQQLOGIN_ISSET_ID);
  }

  /** Returns true if field showQQLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetShowQQLogin() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWQQLOGIN_ISSET_ID);
  }

  public void setShowQQLoginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWQQLOGIN_ISSET_ID, value);
  }

  public int getShowExchange() {
    return this.showExchange;
  }

  public SystemConfigView setShowExchange(int showExchange) {
    this.showExchange = showExchange;
    setShowExchangeIsSet(true);
    return this;
  }

  public void unsetShowExchange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWEXCHANGE_ISSET_ID);
  }

  /** Returns true if field showExchange is set (has been assigned a value) and false otherwise */
  public boolean isSetShowExchange() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWEXCHANGE_ISSET_ID);
  }

  public void setShowExchangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWEXCHANGE_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public SystemConfigView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getApplepay() {
    return this.applepay;
  }

  public SystemConfigView setApplepay(int applepay) {
    this.applepay = applepay;
    setApplepayIsSet(true);
    return this;
  }

  public void unsetApplepay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLEPAY_ISSET_ID);
  }

  /** Returns true if field applepay is set (has been assigned a value) and false otherwise */
  public boolean isSetApplepay() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLEPAY_ISSET_ID);
  }

  public void setApplepayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLEPAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONFIG_ID:
      if (value == null) {
        unsetConfigId();
      } else {
        setConfigId((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case BITRATE:
      if (value == null) {
        unsetBitrate();
      } else {
        setBitrate((Integer)value);
      }
      break;

    case FRAME:
      if (value == null) {
        unsetFrame();
      } else {
        setFrame((Integer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case ALIPAY:
      if (value == null) {
        unsetAlipay();
      } else {
        setAlipay((Integer)value);
      }
      break;

    case WEIXINPAY:
      if (value == null) {
        unsetWeixinpay();
      } else {
        setWeixinpay((Integer)value);
      }
      break;

    case SHARE_SINA:
      if (value == null) {
        unsetShareSina();
      } else {
        setShareSina((String)value);
      }
      break;

    case SHARE_QQ:
      if (value == null) {
        unsetShareQq();
      } else {
        setShareQq((String)value);
      }
      break;

    case SHARE_QQZONE:
      if (value == null) {
        unsetShareQqzone();
      } else {
        setShareQqzone((String)value);
      }
      break;

    case SHARE_WX:
      if (value == null) {
        unsetShareWx();
      } else {
        setShareWx((String)value);
      }
      break;

    case SHARE_WX_PYQ:
      if (value == null) {
        unsetShareWxPyq();
      } else {
        setShareWxPyq((String)value);
      }
      break;

    case SHOW_AD:
      if (value == null) {
        unsetShowAd();
      } else {
        setShowAd((Integer)value);
      }
      break;

    case SHOW_QQLOGIN:
      if (value == null) {
        unsetShowQQLogin();
      } else {
        setShowQQLogin((Integer)value);
      }
      break;

    case SHOW_EXCHANGE:
      if (value == null) {
        unsetShowExchange();
      } else {
        setShowExchange((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case APPLEPAY:
      if (value == null) {
        unsetApplepay();
      } else {
        setApplepay((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONFIG_ID:
      return Integer.valueOf(getConfigId());

    case VERSION:
      return getVersion();

    case BITRATE:
      return Integer.valueOf(getBitrate());

    case FRAME:
      return Integer.valueOf(getFrame());

    case WIDTH:
      return Integer.valueOf(getWidth());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case ALIPAY:
      return Integer.valueOf(getAlipay());

    case WEIXINPAY:
      return Integer.valueOf(getWeixinpay());

    case SHARE_SINA:
      return getShareSina();

    case SHARE_QQ:
      return getShareQq();

    case SHARE_QQZONE:
      return getShareQqzone();

    case SHARE_WX:
      return getShareWx();

    case SHARE_WX_PYQ:
      return getShareWxPyq();

    case SHOW_AD:
      return Integer.valueOf(getShowAd());

    case SHOW_QQLOGIN:
      return Integer.valueOf(getShowQQLogin());

    case SHOW_EXCHANGE:
      return Integer.valueOf(getShowExchange());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case APPLEPAY:
      return Integer.valueOf(getApplepay());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONFIG_ID:
      return isSetConfigId();
    case VERSION:
      return isSetVersion();
    case BITRATE:
      return isSetBitrate();
    case FRAME:
      return isSetFrame();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case ALIPAY:
      return isSetAlipay();
    case WEIXINPAY:
      return isSetWeixinpay();
    case SHARE_SINA:
      return isSetShareSina();
    case SHARE_QQ:
      return isSetShareQq();
    case SHARE_QQZONE:
      return isSetShareQqzone();
    case SHARE_WX:
      return isSetShareWx();
    case SHARE_WX_PYQ:
      return isSetShareWxPyq();
    case SHOW_AD:
      return isSetShowAd();
    case SHOW_QQLOGIN:
      return isSetShowQQLogin();
    case SHOW_EXCHANGE:
      return isSetShowExchange();
    case CREATE_TIME:
      return isSetCreateTime();
    case APPLEPAY:
      return isSetApplepay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemConfigView)
      return this.equals((SystemConfigView)that);
    return false;
  }

  public boolean equals(SystemConfigView that) {
    if (that == null)
      return false;

    boolean this_present_configId = true;
    boolean that_present_configId = true;
    if (this_present_configId || that_present_configId) {
      if (!(this_present_configId && that_present_configId))
        return false;
      if (this.configId != that.configId)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_bitrate = true;
    boolean that_present_bitrate = true;
    if (this_present_bitrate || that_present_bitrate) {
      if (!(this_present_bitrate && that_present_bitrate))
        return false;
      if (this.bitrate != that.bitrate)
        return false;
    }

    boolean this_present_frame = true;
    boolean that_present_frame = true;
    if (this_present_frame || that_present_frame) {
      if (!(this_present_frame && that_present_frame))
        return false;
      if (this.frame != that.frame)
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_alipay = true;
    boolean that_present_alipay = true;
    if (this_present_alipay || that_present_alipay) {
      if (!(this_present_alipay && that_present_alipay))
        return false;
      if (this.alipay != that.alipay)
        return false;
    }

    boolean this_present_weixinpay = true;
    boolean that_present_weixinpay = true;
    if (this_present_weixinpay || that_present_weixinpay) {
      if (!(this_present_weixinpay && that_present_weixinpay))
        return false;
      if (this.weixinpay != that.weixinpay)
        return false;
    }

    boolean this_present_shareSina = true && this.isSetShareSina();
    boolean that_present_shareSina = true && that.isSetShareSina();
    if (this_present_shareSina || that_present_shareSina) {
      if (!(this_present_shareSina && that_present_shareSina))
        return false;
      if (!this.shareSina.equals(that.shareSina))
        return false;
    }

    boolean this_present_shareQq = true && this.isSetShareQq();
    boolean that_present_shareQq = true && that.isSetShareQq();
    if (this_present_shareQq || that_present_shareQq) {
      if (!(this_present_shareQq && that_present_shareQq))
        return false;
      if (!this.shareQq.equals(that.shareQq))
        return false;
    }

    boolean this_present_shareQqzone = true && this.isSetShareQqzone();
    boolean that_present_shareQqzone = true && that.isSetShareQqzone();
    if (this_present_shareQqzone || that_present_shareQqzone) {
      if (!(this_present_shareQqzone && that_present_shareQqzone))
        return false;
      if (!this.shareQqzone.equals(that.shareQqzone))
        return false;
    }

    boolean this_present_shareWx = true && this.isSetShareWx();
    boolean that_present_shareWx = true && that.isSetShareWx();
    if (this_present_shareWx || that_present_shareWx) {
      if (!(this_present_shareWx && that_present_shareWx))
        return false;
      if (!this.shareWx.equals(that.shareWx))
        return false;
    }

    boolean this_present_shareWxPyq = true && this.isSetShareWxPyq();
    boolean that_present_shareWxPyq = true && that.isSetShareWxPyq();
    if (this_present_shareWxPyq || that_present_shareWxPyq) {
      if (!(this_present_shareWxPyq && that_present_shareWxPyq))
        return false;
      if (!this.shareWxPyq.equals(that.shareWxPyq))
        return false;
    }

    boolean this_present_showAd = true;
    boolean that_present_showAd = true;
    if (this_present_showAd || that_present_showAd) {
      if (!(this_present_showAd && that_present_showAd))
        return false;
      if (this.showAd != that.showAd)
        return false;
    }

    boolean this_present_showQQLogin = true;
    boolean that_present_showQQLogin = true;
    if (this_present_showQQLogin || that_present_showQQLogin) {
      if (!(this_present_showQQLogin && that_present_showQQLogin))
        return false;
      if (this.showQQLogin != that.showQQLogin)
        return false;
    }

    boolean this_present_showExchange = true;
    boolean that_present_showExchange = true;
    if (this_present_showExchange || that_present_showExchange) {
      if (!(this_present_showExchange && that_present_showExchange))
        return false;
      if (this.showExchange != that.showExchange)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_applepay = true;
    boolean that_present_applepay = true;
    if (this_present_applepay || that_present_applepay) {
      if (!(this_present_applepay && that_present_applepay))
        return false;
      if (this.applepay != that.applepay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SystemConfigView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SystemConfigView typedOther = (SystemConfigView)other;

    lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(typedOther.isSetConfigId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, typedOther.configId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBitrate()).compareTo(typedOther.isSetBitrate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBitrate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitrate, typedOther.bitrate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrame()).compareTo(typedOther.isSetFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frame, typedOther.frame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipay()).compareTo(typedOther.isSetAlipay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipay, typedOther.alipay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeixinpay()).compareTo(typedOther.isSetWeixinpay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeixinpay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weixinpay, typedOther.weixinpay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareSina()).compareTo(typedOther.isSetShareSina());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareSina()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareSina, typedOther.shareSina);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareQq()).compareTo(typedOther.isSetShareQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareQq, typedOther.shareQq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareQqzone()).compareTo(typedOther.isSetShareQqzone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareQqzone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareQqzone, typedOther.shareQqzone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareWx()).compareTo(typedOther.isSetShareWx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareWx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareWx, typedOther.shareWx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareWxPyq()).compareTo(typedOther.isSetShareWxPyq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareWxPyq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareWxPyq, typedOther.shareWxPyq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowAd()).compareTo(typedOther.isSetShowAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showAd, typedOther.showAd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowQQLogin()).compareTo(typedOther.isSetShowQQLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowQQLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showQQLogin, typedOther.showQQLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowExchange()).compareTo(typedOther.isSetShowExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showExchange, typedOther.showExchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplepay()).compareTo(typedOther.isSetApplepay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplepay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applepay, typedOther.applepay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemConfigView(");
    boolean first = true;

    sb.append("configId:");
    sb.append(this.configId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bitrate:");
    sb.append(this.bitrate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frame:");
    sb.append(this.frame);
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alipay:");
    sb.append(this.alipay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weixinpay:");
    sb.append(this.weixinpay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareSina:");
    if (this.shareSina == null) {
      sb.append("null");
    } else {
      sb.append(this.shareSina);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareQq:");
    if (this.shareQq == null) {
      sb.append("null");
    } else {
      sb.append(this.shareQq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareQqzone:");
    if (this.shareQqzone == null) {
      sb.append("null");
    } else {
      sb.append(this.shareQqzone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareWx:");
    if (this.shareWx == null) {
      sb.append("null");
    } else {
      sb.append(this.shareWx);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareWxPyq:");
    if (this.shareWxPyq == null) {
      sb.append("null");
    } else {
      sb.append(this.shareWxPyq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("showAd:");
    sb.append(this.showAd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showQQLogin:");
    sb.append(this.showQQLogin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showExchange:");
    sb.append(this.showExchange);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applepay:");
    sb.append(this.applepay);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemConfigViewStandardSchemeFactory implements SchemeFactory {
    public SystemConfigViewStandardScheme getScheme() {
      return new SystemConfigViewStandardScheme();
    }
  }

  private static class SystemConfigViewStandardScheme extends StandardScheme<SystemConfigView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemConfigView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.configId = iprot.readI32();
              struct.setConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BITRATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bitrate = iprot.readI32();
              struct.setBitrateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frame = iprot.readI32();
              struct.setFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALIPAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alipay = iprot.readI32();
              struct.setAlipayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WEIXINPAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weixinpay = iprot.readI32();
              struct.setWeixinpayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHARE_SINA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareSina = iprot.readString();
              struct.setShareSinaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHARE_QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareQq = iprot.readString();
              struct.setShareQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHARE_QQZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareQqzone = iprot.readString();
              struct.setShareQqzoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHARE_WX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareWx = iprot.readString();
              struct.setShareWxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHARE_WX_PYQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareWxPyq = iprot.readString();
              struct.setShareWxPyqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHOW_AD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showAd = iprot.readI32();
              struct.setShowAdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SHOW_QQLOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showQQLogin = iprot.readI32();
              struct.setShowQQLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SHOW_EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showExchange = iprot.readI32();
              struct.setShowExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // APPLEPAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applepay = iprot.readI32();
              struct.setApplepayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemConfigView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
      oprot.writeI32(struct.configId);
      oprot.writeFieldEnd();
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BITRATE_FIELD_DESC);
      oprot.writeI32(struct.bitrate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRAME_FIELD_DESC);
      oprot.writeI32(struct.frame);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALIPAY_FIELD_DESC);
      oprot.writeI32(struct.alipay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEIXINPAY_FIELD_DESC);
      oprot.writeI32(struct.weixinpay);
      oprot.writeFieldEnd();
      if (struct.shareSina != null) {
        oprot.writeFieldBegin(SHARE_SINA_FIELD_DESC);
        oprot.writeString(struct.shareSina);
        oprot.writeFieldEnd();
      }
      if (struct.shareQq != null) {
        oprot.writeFieldBegin(SHARE_QQ_FIELD_DESC);
        oprot.writeString(struct.shareQq);
        oprot.writeFieldEnd();
      }
      if (struct.shareQqzone != null) {
        oprot.writeFieldBegin(SHARE_QQZONE_FIELD_DESC);
        oprot.writeString(struct.shareQqzone);
        oprot.writeFieldEnd();
      }
      if (struct.shareWx != null) {
        oprot.writeFieldBegin(SHARE_WX_FIELD_DESC);
        oprot.writeString(struct.shareWx);
        oprot.writeFieldEnd();
      }
      if (struct.shareWxPyq != null) {
        oprot.writeFieldBegin(SHARE_WX_PYQ_FIELD_DESC);
        oprot.writeString(struct.shareWxPyq);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOW_AD_FIELD_DESC);
      oprot.writeI32(struct.showAd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_QQLOGIN_FIELD_DESC);
      oprot.writeI32(struct.showQQLogin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_EXCHANGE_FIELD_DESC);
      oprot.writeI32(struct.showExchange);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLEPAY_FIELD_DESC);
      oprot.writeI32(struct.applepay);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SystemConfigViewTupleSchemeFactory implements SchemeFactory {
    public SystemConfigViewTupleScheme getScheme() {
      return new SystemConfigViewTupleScheme();
    }
  }

  private static class SystemConfigViewTupleScheme extends TupleScheme<SystemConfigView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SystemConfigView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConfigId()) {
        optionals.set(0);
      }
      if (struct.isSetVersion()) {
        optionals.set(1);
      }
      if (struct.isSetBitrate()) {
        optionals.set(2);
      }
      if (struct.isSetFrame()) {
        optionals.set(3);
      }
      if (struct.isSetWidth()) {
        optionals.set(4);
      }
      if (struct.isSetHeight()) {
        optionals.set(5);
      }
      if (struct.isSetAlipay()) {
        optionals.set(6);
      }
      if (struct.isSetWeixinpay()) {
        optionals.set(7);
      }
      if (struct.isSetShareSina()) {
        optionals.set(8);
      }
      if (struct.isSetShareQq()) {
        optionals.set(9);
      }
      if (struct.isSetShareQqzone()) {
        optionals.set(10);
      }
      if (struct.isSetShareWx()) {
        optionals.set(11);
      }
      if (struct.isSetShareWxPyq()) {
        optionals.set(12);
      }
      if (struct.isSetShowAd()) {
        optionals.set(13);
      }
      if (struct.isSetShowQQLogin()) {
        optionals.set(14);
      }
      if (struct.isSetShowExchange()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetApplepay()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetConfigId()) {
        oprot.writeI32(struct.configId);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetBitrate()) {
        oprot.writeI32(struct.bitrate);
      }
      if (struct.isSetFrame()) {
        oprot.writeI32(struct.frame);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetAlipay()) {
        oprot.writeI32(struct.alipay);
      }
      if (struct.isSetWeixinpay()) {
        oprot.writeI32(struct.weixinpay);
      }
      if (struct.isSetShareSina()) {
        oprot.writeString(struct.shareSina);
      }
      if (struct.isSetShareQq()) {
        oprot.writeString(struct.shareQq);
      }
      if (struct.isSetShareQqzone()) {
        oprot.writeString(struct.shareQqzone);
      }
      if (struct.isSetShareWx()) {
        oprot.writeString(struct.shareWx);
      }
      if (struct.isSetShareWxPyq()) {
        oprot.writeString(struct.shareWxPyq);
      }
      if (struct.isSetShowAd()) {
        oprot.writeI32(struct.showAd);
      }
      if (struct.isSetShowQQLogin()) {
        oprot.writeI32(struct.showQQLogin);
      }
      if (struct.isSetShowExchange()) {
        oprot.writeI32(struct.showExchange);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetApplepay()) {
        oprot.writeI32(struct.applepay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SystemConfigView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.configId = iprot.readI32();
        struct.setConfigIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bitrate = iprot.readI32();
        struct.setBitrateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.frame = iprot.readI32();
        struct.setFrameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(6)) {
        struct.alipay = iprot.readI32();
        struct.setAlipayIsSet(true);
      }
      if (incoming.get(7)) {
        struct.weixinpay = iprot.readI32();
        struct.setWeixinpayIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shareSina = iprot.readString();
        struct.setShareSinaIsSet(true);
      }
      if (incoming.get(9)) {
        struct.shareQq = iprot.readString();
        struct.setShareQqIsSet(true);
      }
      if (incoming.get(10)) {
        struct.shareQqzone = iprot.readString();
        struct.setShareQqzoneIsSet(true);
      }
      if (incoming.get(11)) {
        struct.shareWx = iprot.readString();
        struct.setShareWxIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shareWxPyq = iprot.readString();
        struct.setShareWxPyqIsSet(true);
      }
      if (incoming.get(13)) {
        struct.showAd = iprot.readI32();
        struct.setShowAdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.showQQLogin = iprot.readI32();
        struct.setShowQQLoginIsSet(true);
      }
      if (incoming.get(15)) {
        struct.showExchange = iprot.readI32();
        struct.setShowExchangeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.applepay = iprot.readI32();
        struct.setApplepayIsSet(true);
      }
    }
  }

}

