/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActivityShareRewardView implements org.apache.thrift.TBase<ActivityShareRewardView, ActivityShareRewardView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityShareRewardView");

  private static final org.apache.thrift.protocol.TField SHARE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareDate", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REWARD1_FIELD_DESC = new org.apache.thrift.protocol.TField("reward1", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REWARD2_FIELD_DESC = new org.apache.thrift.protocol.TField("reward2", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REWARD3_FIELD_DESC = new org.apache.thrift.protocol.TField("reward3", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityShareRewardViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityShareRewardViewTupleSchemeFactory());
  }

  public int shareDate; // required
  public int reward1; // required
  public int reward2; // required
  public int reward3; // required
  public int createTime; // required
  public int updateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SHARE_DATE((short)2, "shareDate"),
    REWARD1((short)3, "reward1"),
    REWARD2((short)4, "reward2"),
    REWARD3((short)5, "reward3"),
    CREATE_TIME((short)6, "createTime"),
    UPDATE_TIME((short)1, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // SHARE_DATE
          return SHARE_DATE;
        case 3: // REWARD1
          return REWARD1;
        case 4: // REWARD2
          return REWARD2;
        case 5: // REWARD3
          return REWARD3;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 1: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHAREDATE_ISSET_ID = 0;
  private static final int __REWARD1_ISSET_ID = 1;
  private static final int __REWARD2_ISSET_ID = 2;
  private static final int __REWARD3_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private static final int __UPDATETIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHARE_DATE, new org.apache.thrift.meta_data.FieldMetaData("shareDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REWARD1, new org.apache.thrift.meta_data.FieldMetaData("reward1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REWARD2, new org.apache.thrift.meta_data.FieldMetaData("reward2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REWARD3, new org.apache.thrift.meta_data.FieldMetaData("reward3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityShareRewardView.class, metaDataMap);
  }

  public ActivityShareRewardView() {
  }

  public ActivityShareRewardView(
    int shareDate,
    int reward1,
    int reward2,
    int reward3,
    int createTime,
    int updateTime)
  {
    this();
    this.shareDate = shareDate;
    setShareDateIsSet(true);
    this.reward1 = reward1;
    setReward1IsSet(true);
    this.reward2 = reward2;
    setReward2IsSet(true);
    this.reward3 = reward3;
    setReward3IsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityShareRewardView(ActivityShareRewardView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.shareDate = other.shareDate;
    this.reward1 = other.reward1;
    this.reward2 = other.reward2;
    this.reward3 = other.reward3;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
  }

  public ActivityShareRewardView deepCopy() {
    return new ActivityShareRewardView(this);
  }

  @Override
  public void clear() {
    setShareDateIsSet(false);
    this.shareDate = 0;
    setReward1IsSet(false);
    this.reward1 = 0;
    setReward2IsSet(false);
    this.reward2 = 0;
    setReward3IsSet(false);
    this.reward3 = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
  }

  public int getShareDate() {
    return this.shareDate;
  }

  public ActivityShareRewardView setShareDate(int shareDate) {
    this.shareDate = shareDate;
    setShareDateIsSet(true);
    return this;
  }

  public void unsetShareDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHAREDATE_ISSET_ID);
  }

  /** Returns true if field shareDate is set (has been assigned a value) and false otherwise */
  public boolean isSetShareDate() {
    return EncodingUtils.testBit(__isset_bitfield, __SHAREDATE_ISSET_ID);
  }

  public void setShareDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHAREDATE_ISSET_ID, value);
  }

  public int getReward1() {
    return this.reward1;
  }

  public ActivityShareRewardView setReward1(int reward1) {
    this.reward1 = reward1;
    setReward1IsSet(true);
    return this;
  }

  public void unsetReward1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REWARD1_ISSET_ID);
  }

  /** Returns true if field reward1 is set (has been assigned a value) and false otherwise */
  public boolean isSetReward1() {
    return EncodingUtils.testBit(__isset_bitfield, __REWARD1_ISSET_ID);
  }

  public void setReward1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REWARD1_ISSET_ID, value);
  }

  public int getReward2() {
    return this.reward2;
  }

  public ActivityShareRewardView setReward2(int reward2) {
    this.reward2 = reward2;
    setReward2IsSet(true);
    return this;
  }

  public void unsetReward2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REWARD2_ISSET_ID);
  }

  /** Returns true if field reward2 is set (has been assigned a value) and false otherwise */
  public boolean isSetReward2() {
    return EncodingUtils.testBit(__isset_bitfield, __REWARD2_ISSET_ID);
  }

  public void setReward2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REWARD2_ISSET_ID, value);
  }

  public int getReward3() {
    return this.reward3;
  }

  public ActivityShareRewardView setReward3(int reward3) {
    this.reward3 = reward3;
    setReward3IsSet(true);
    return this;
  }

  public void unsetReward3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REWARD3_ISSET_ID);
  }

  /** Returns true if field reward3 is set (has been assigned a value) and false otherwise */
  public boolean isSetReward3() {
    return EncodingUtils.testBit(__isset_bitfield, __REWARD3_ISSET_ID);
  }

  public void setReward3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REWARD3_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public ActivityShareRewardView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public ActivityShareRewardView setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SHARE_DATE:
      if (value == null) {
        unsetShareDate();
      } else {
        setShareDate((Integer)value);
      }
      break;

    case REWARD1:
      if (value == null) {
        unsetReward1();
      } else {
        setReward1((Integer)value);
      }
      break;

    case REWARD2:
      if (value == null) {
        unsetReward2();
      } else {
        setReward2((Integer)value);
      }
      break;

    case REWARD3:
      if (value == null) {
        unsetReward3();
      } else {
        setReward3((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SHARE_DATE:
      return Integer.valueOf(getShareDate());

    case REWARD1:
      return Integer.valueOf(getReward1());

    case REWARD2:
      return Integer.valueOf(getReward2());

    case REWARD3:
      return Integer.valueOf(getReward3());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SHARE_DATE:
      return isSetShareDate();
    case REWARD1:
      return isSetReward1();
    case REWARD2:
      return isSetReward2();
    case REWARD3:
      return isSetReward3();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityShareRewardView)
      return this.equals((ActivityShareRewardView)that);
    return false;
  }

  public boolean equals(ActivityShareRewardView that) {
    if (that == null)
      return false;

    boolean this_present_shareDate = true;
    boolean that_present_shareDate = true;
    if (this_present_shareDate || that_present_shareDate) {
      if (!(this_present_shareDate && that_present_shareDate))
        return false;
      if (this.shareDate != that.shareDate)
        return false;
    }

    boolean this_present_reward1 = true;
    boolean that_present_reward1 = true;
    if (this_present_reward1 || that_present_reward1) {
      if (!(this_present_reward1 && that_present_reward1))
        return false;
      if (this.reward1 != that.reward1)
        return false;
    }

    boolean this_present_reward2 = true;
    boolean that_present_reward2 = true;
    if (this_present_reward2 || that_present_reward2) {
      if (!(this_present_reward2 && that_present_reward2))
        return false;
      if (this.reward2 != that.reward2)
        return false;
    }

    boolean this_present_reward3 = true;
    boolean that_present_reward3 = true;
    if (this_present_reward3 || that_present_reward3) {
      if (!(this_present_reward3 && that_present_reward3))
        return false;
      if (this.reward3 != that.reward3)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityShareRewardView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityShareRewardView typedOther = (ActivityShareRewardView)other;

    lastComparison = Boolean.valueOf(isSetShareDate()).compareTo(typedOther.isSetShareDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareDate, typedOther.shareDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReward1()).compareTo(typedOther.isSetReward1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReward1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward1, typedOther.reward1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReward2()).compareTo(typedOther.isSetReward2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReward2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward2, typedOther.reward2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReward3()).compareTo(typedOther.isSetReward3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReward3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reward3, typedOther.reward3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityShareRewardView(");
    boolean first = true;

    sb.append("shareDate:");
    sb.append(this.shareDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reward1:");
    sb.append(this.reward1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reward2:");
    sb.append(this.reward2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reward3:");
    sb.append(this.reward3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityShareRewardViewStandardSchemeFactory implements SchemeFactory {
    public ActivityShareRewardViewStandardScheme getScheme() {
      return new ActivityShareRewardViewStandardScheme();
    }
  }

  private static class ActivityShareRewardViewStandardScheme extends StandardScheme<ActivityShareRewardView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityShareRewardView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // SHARE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareDate = iprot.readI32();
              struct.setShareDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REWARD1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reward1 = iprot.readI32();
              struct.setReward1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REWARD2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reward2 = iprot.readI32();
              struct.setReward2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REWARD3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reward3 = iprot.readI32();
              struct.setReward3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityShareRewardView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHARE_DATE_FIELD_DESC);
      oprot.writeI32(struct.shareDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REWARD1_FIELD_DESC);
      oprot.writeI32(struct.reward1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REWARD2_FIELD_DESC);
      oprot.writeI32(struct.reward2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REWARD3_FIELD_DESC);
      oprot.writeI32(struct.reward3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityShareRewardViewTupleSchemeFactory implements SchemeFactory {
    public ActivityShareRewardViewTupleScheme getScheme() {
      return new ActivityShareRewardViewTupleScheme();
    }
  }

  private static class ActivityShareRewardViewTupleScheme extends TupleScheme<ActivityShareRewardView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityShareRewardView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetShareDate()) {
        optionals.set(0);
      }
      if (struct.isSetReward1()) {
        optionals.set(1);
      }
      if (struct.isSetReward2()) {
        optionals.set(2);
      }
      if (struct.isSetReward3()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetShareDate()) {
        oprot.writeI32(struct.shareDate);
      }
      if (struct.isSetReward1()) {
        oprot.writeI32(struct.reward1);
      }
      if (struct.isSetReward2()) {
        oprot.writeI32(struct.reward2);
      }
      if (struct.isSetReward3()) {
        oprot.writeI32(struct.reward3);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityShareRewardView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.shareDate = iprot.readI32();
        struct.setShareDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reward1 = iprot.readI32();
        struct.setReward1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.reward2 = iprot.readI32();
        struct.setReward2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.reward3 = iprot.readI32();
        struct.setReward3IsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

}

