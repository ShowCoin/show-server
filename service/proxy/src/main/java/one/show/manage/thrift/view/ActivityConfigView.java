/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActivityConfigView implements org.apache.thrift.TBase<ActivityConfigView, ActivityConfigView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityConfigView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPEN_ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("openActivity", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ACTIVATING_FIELD_DESC = new org.apache.thrift.protocol.TField("isActivating", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACTIVITY_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("activityConfig", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ICON_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("iconIndex", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIndex", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OPEN_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("openStartTime", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OPEN_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("openEndTime", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LIMIT_GREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("limitGread", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityConfigViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityConfigViewTupleSchemeFactory());
  }

  public int id; // required
  public int openActivity; // required
  public String name; // required
  public String description; // required
  public int isActivating; // required
  public String activityConfig; // required
  public int iconIndex; // required
  public int orderIndex; // required
  public int openStartTime; // required
  public int openEndTime; // required
  public String startTime; // required
  public String endTime; // required
  public int limitGread; // required
  public int createTime; // required
  public int updateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    OPEN_ACTIVITY((short)2, "openActivity"),
    NAME((short)3, "name"),
    DESCRIPTION((short)4, "description"),
    IS_ACTIVATING((short)5, "isActivating"),
    ACTIVITY_CONFIG((short)6, "activityConfig"),
    ICON_INDEX((short)7, "iconIndex"),
    ORDER_INDEX((short)8, "orderIndex"),
    OPEN_START_TIME((short)9, "openStartTime"),
    OPEN_END_TIME((short)10, "openEndTime"),
    START_TIME((short)11, "startTime"),
    END_TIME((short)12, "endTime"),
    LIMIT_GREAD((short)13, "limitGread"),
    CREATE_TIME((short)14, "createTime"),
    UPDATE_TIME((short)15, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // OPEN_ACTIVITY
          return OPEN_ACTIVITY;
        case 3: // NAME
          return NAME;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // IS_ACTIVATING
          return IS_ACTIVATING;
        case 6: // ACTIVITY_CONFIG
          return ACTIVITY_CONFIG;
        case 7: // ICON_INDEX
          return ICON_INDEX;
        case 8: // ORDER_INDEX
          return ORDER_INDEX;
        case 9: // OPEN_START_TIME
          return OPEN_START_TIME;
        case 10: // OPEN_END_TIME
          return OPEN_END_TIME;
        case 11: // START_TIME
          return START_TIME;
        case 12: // END_TIME
          return END_TIME;
        case 13: // LIMIT_GREAD
          return LIMIT_GREAD;
        case 14: // CREATE_TIME
          return CREATE_TIME;
        case 15: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __OPENACTIVITY_ISSET_ID = 1;
  private static final int __ISACTIVATING_ISSET_ID = 2;
  private static final int __ICONINDEX_ISSET_ID = 3;
  private static final int __ORDERINDEX_ISSET_ID = 4;
  private static final int __OPENSTARTTIME_ISSET_ID = 5;
  private static final int __OPENENDTIME_ISSET_ID = 6;
  private static final int __LIMITGREAD_ISSET_ID = 7;
  private static final int __CREATETIME_ISSET_ID = 8;
  private static final int __UPDATETIME_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("openActivity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ACTIVATING, new org.apache.thrift.meta_data.FieldMetaData("isActivating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVITY_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("activityConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_INDEX, new org.apache.thrift.meta_data.FieldMetaData("iconIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_INDEX, new org.apache.thrift.meta_data.FieldMetaData("orderIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("openStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("openEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_GREAD, new org.apache.thrift.meta_data.FieldMetaData("limitGread", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityConfigView.class, metaDataMap);
  }

  public ActivityConfigView() {
  }

  public ActivityConfigView(
    int id,
    int openActivity,
    String name,
    String description,
    int isActivating,
    String activityConfig,
    int iconIndex,
    int orderIndex,
    int openStartTime,
    int openEndTime,
    String startTime,
    String endTime,
    int limitGread,
    int createTime,
    int updateTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.openActivity = openActivity;
    setOpenActivityIsSet(true);
    this.name = name;
    this.description = description;
    this.isActivating = isActivating;
    setIsActivatingIsSet(true);
    this.activityConfig = activityConfig;
    this.iconIndex = iconIndex;
    setIconIndexIsSet(true);
    this.orderIndex = orderIndex;
    setOrderIndexIsSet(true);
    this.openStartTime = openStartTime;
    setOpenStartTimeIsSet(true);
    this.openEndTime = openEndTime;
    setOpenEndTimeIsSet(true);
    this.startTime = startTime;
    this.endTime = endTime;
    this.limitGread = limitGread;
    setLimitGreadIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityConfigView(ActivityConfigView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.openActivity = other.openActivity;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.isActivating = other.isActivating;
    if (other.isSetActivityConfig()) {
      this.activityConfig = other.activityConfig;
    }
    this.iconIndex = other.iconIndex;
    this.orderIndex = other.orderIndex;
    this.openStartTime = other.openStartTime;
    this.openEndTime = other.openEndTime;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.limitGread = other.limitGread;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
  }

  public ActivityConfigView deepCopy() {
    return new ActivityConfigView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setOpenActivityIsSet(false);
    this.openActivity = 0;
    this.name = null;
    this.description = null;
    setIsActivatingIsSet(false);
    this.isActivating = 0;
    this.activityConfig = null;
    setIconIndexIsSet(false);
    this.iconIndex = 0;
    setOrderIndexIsSet(false);
    this.orderIndex = 0;
    setOpenStartTimeIsSet(false);
    this.openStartTime = 0;
    setOpenEndTimeIsSet(false);
    this.openEndTime = 0;
    this.startTime = null;
    this.endTime = null;
    setLimitGreadIsSet(false);
    this.limitGread = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
  }

  public int getId() {
    return this.id;
  }

  public ActivityConfigView setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getOpenActivity() {
    return this.openActivity;
  }

  public ActivityConfigView setOpenActivity(int openActivity) {
    this.openActivity = openActivity;
    setOpenActivityIsSet(true);
    return this;
  }

  public void unsetOpenActivity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENACTIVITY_ISSET_ID);
  }

  /** Returns true if field openActivity is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenActivity() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENACTIVITY_ISSET_ID);
  }

  public void setOpenActivityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENACTIVITY_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ActivityConfigView setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ActivityConfigView setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getIsActivating() {
    return this.isActivating;
  }

  public ActivityConfigView setIsActivating(int isActivating) {
    this.isActivating = isActivating;
    setIsActivatingIsSet(true);
    return this;
  }

  public void unsetIsActivating() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISACTIVATING_ISSET_ID);
  }

  /** Returns true if field isActivating is set (has been assigned a value) and false otherwise */
  public boolean isSetIsActivating() {
    return EncodingUtils.testBit(__isset_bitfield, __ISACTIVATING_ISSET_ID);
  }

  public void setIsActivatingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISACTIVATING_ISSET_ID, value);
  }

  public String getActivityConfig() {
    return this.activityConfig;
  }

  public ActivityConfigView setActivityConfig(String activityConfig) {
    this.activityConfig = activityConfig;
    return this;
  }

  public void unsetActivityConfig() {
    this.activityConfig = null;
  }

  /** Returns true if field activityConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityConfig() {
    return this.activityConfig != null;
  }

  public void setActivityConfigIsSet(boolean value) {
    if (!value) {
      this.activityConfig = null;
    }
  }

  public int getIconIndex() {
    return this.iconIndex;
  }

  public ActivityConfigView setIconIndex(int iconIndex) {
    this.iconIndex = iconIndex;
    setIconIndexIsSet(true);
    return this;
  }

  public void unsetIconIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ICONINDEX_ISSET_ID);
  }

  /** Returns true if field iconIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetIconIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __ICONINDEX_ISSET_ID);
  }

  public void setIconIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ICONINDEX_ISSET_ID, value);
  }

  public int getOrderIndex() {
    return this.orderIndex;
  }

  public ActivityConfigView setOrderIndex(int orderIndex) {
    this.orderIndex = orderIndex;
    setOrderIndexIsSet(true);
    return this;
  }

  public void unsetOrderIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERINDEX_ISSET_ID);
  }

  /** Returns true if field orderIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERINDEX_ISSET_ID);
  }

  public void setOrderIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERINDEX_ISSET_ID, value);
  }

  public int getOpenStartTime() {
    return this.openStartTime;
  }

  public ActivityConfigView setOpenStartTime(int openStartTime) {
    this.openStartTime = openStartTime;
    setOpenStartTimeIsSet(true);
    return this;
  }

  public void unsetOpenStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENSTARTTIME_ISSET_ID);
  }

  /** Returns true if field openStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENSTARTTIME_ISSET_ID);
  }

  public void setOpenStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENSTARTTIME_ISSET_ID, value);
  }

  public int getOpenEndTime() {
    return this.openEndTime;
  }

  public ActivityConfigView setOpenEndTime(int openEndTime) {
    this.openEndTime = openEndTime;
    setOpenEndTimeIsSet(true);
    return this;
  }

  public void unsetOpenEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENENDTIME_ISSET_ID);
  }

  /** Returns true if field openEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENENDTIME_ISSET_ID);
  }

  public void setOpenEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENENDTIME_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public ActivityConfigView setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public ActivityConfigView setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getLimitGread() {
    return this.limitGread;
  }

  public ActivityConfigView setLimitGread(int limitGread) {
    this.limitGread = limitGread;
    setLimitGreadIsSet(true);
    return this;
  }

  public void unsetLimitGread() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITGREAD_ISSET_ID);
  }

  /** Returns true if field limitGread is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitGread() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITGREAD_ISSET_ID);
  }

  public void setLimitGreadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITGREAD_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public ActivityConfigView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public ActivityConfigView setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case OPEN_ACTIVITY:
      if (value == null) {
        unsetOpenActivity();
      } else {
        setOpenActivity((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IS_ACTIVATING:
      if (value == null) {
        unsetIsActivating();
      } else {
        setIsActivating((Integer)value);
      }
      break;

    case ACTIVITY_CONFIG:
      if (value == null) {
        unsetActivityConfig();
      } else {
        setActivityConfig((String)value);
      }
      break;

    case ICON_INDEX:
      if (value == null) {
        unsetIconIndex();
      } else {
        setIconIndex((Integer)value);
      }
      break;

    case ORDER_INDEX:
      if (value == null) {
        unsetOrderIndex();
      } else {
        setOrderIndex((Integer)value);
      }
      break;

    case OPEN_START_TIME:
      if (value == null) {
        unsetOpenStartTime();
      } else {
        setOpenStartTime((Integer)value);
      }
      break;

    case OPEN_END_TIME:
      if (value == null) {
        unsetOpenEndTime();
      } else {
        setOpenEndTime((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case LIMIT_GREAD:
      if (value == null) {
        unsetLimitGread();
      } else {
        setLimitGread((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case OPEN_ACTIVITY:
      return Integer.valueOf(getOpenActivity());

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case IS_ACTIVATING:
      return Integer.valueOf(getIsActivating());

    case ACTIVITY_CONFIG:
      return getActivityConfig();

    case ICON_INDEX:
      return Integer.valueOf(getIconIndex());

    case ORDER_INDEX:
      return Integer.valueOf(getOrderIndex());

    case OPEN_START_TIME:
      return Integer.valueOf(getOpenStartTime());

    case OPEN_END_TIME:
      return Integer.valueOf(getOpenEndTime());

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case LIMIT_GREAD:
      return Integer.valueOf(getLimitGread());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case OPEN_ACTIVITY:
      return isSetOpenActivity();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case IS_ACTIVATING:
      return isSetIsActivating();
    case ACTIVITY_CONFIG:
      return isSetActivityConfig();
    case ICON_INDEX:
      return isSetIconIndex();
    case ORDER_INDEX:
      return isSetOrderIndex();
    case OPEN_START_TIME:
      return isSetOpenStartTime();
    case OPEN_END_TIME:
      return isSetOpenEndTime();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case LIMIT_GREAD:
      return isSetLimitGread();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityConfigView)
      return this.equals((ActivityConfigView)that);
    return false;
  }

  public boolean equals(ActivityConfigView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_openActivity = true;
    boolean that_present_openActivity = true;
    if (this_present_openActivity || that_present_openActivity) {
      if (!(this_present_openActivity && that_present_openActivity))
        return false;
      if (this.openActivity != that.openActivity)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_isActivating = true;
    boolean that_present_isActivating = true;
    if (this_present_isActivating || that_present_isActivating) {
      if (!(this_present_isActivating && that_present_isActivating))
        return false;
      if (this.isActivating != that.isActivating)
        return false;
    }

    boolean this_present_activityConfig = true && this.isSetActivityConfig();
    boolean that_present_activityConfig = true && that.isSetActivityConfig();
    if (this_present_activityConfig || that_present_activityConfig) {
      if (!(this_present_activityConfig && that_present_activityConfig))
        return false;
      if (!this.activityConfig.equals(that.activityConfig))
        return false;
    }

    boolean this_present_iconIndex = true;
    boolean that_present_iconIndex = true;
    if (this_present_iconIndex || that_present_iconIndex) {
      if (!(this_present_iconIndex && that_present_iconIndex))
        return false;
      if (this.iconIndex != that.iconIndex)
        return false;
    }

    boolean this_present_orderIndex = true;
    boolean that_present_orderIndex = true;
    if (this_present_orderIndex || that_present_orderIndex) {
      if (!(this_present_orderIndex && that_present_orderIndex))
        return false;
      if (this.orderIndex != that.orderIndex)
        return false;
    }

    boolean this_present_openStartTime = true;
    boolean that_present_openStartTime = true;
    if (this_present_openStartTime || that_present_openStartTime) {
      if (!(this_present_openStartTime && that_present_openStartTime))
        return false;
      if (this.openStartTime != that.openStartTime)
        return false;
    }

    boolean this_present_openEndTime = true;
    boolean that_present_openEndTime = true;
    if (this_present_openEndTime || that_present_openEndTime) {
      if (!(this_present_openEndTime && that_present_openEndTime))
        return false;
      if (this.openEndTime != that.openEndTime)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_limitGread = true;
    boolean that_present_limitGread = true;
    if (this_present_limitGread || that_present_limitGread) {
      if (!(this_present_limitGread && that_present_limitGread))
        return false;
      if (this.limitGread != that.limitGread)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityConfigView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityConfigView typedOther = (ActivityConfigView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenActivity()).compareTo(typedOther.isSetOpenActivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenActivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openActivity, typedOther.openActivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsActivating()).compareTo(typedOther.isSetIsActivating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsActivating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActivating, typedOther.isActivating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityConfig()).compareTo(typedOther.isSetActivityConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityConfig, typedOther.activityConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIconIndex()).compareTo(typedOther.isSetIconIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconIndex, typedOther.iconIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderIndex()).compareTo(typedOther.isSetOrderIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIndex, typedOther.orderIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenStartTime()).compareTo(typedOther.isSetOpenStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openStartTime, typedOther.openStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenEndTime()).compareTo(typedOther.isSetOpenEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openEndTime, typedOther.openEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitGread()).compareTo(typedOther.isSetLimitGread());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitGread()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitGread, typedOther.limitGread);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityConfigView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openActivity:");
    sb.append(this.openActivity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isActivating:");
    sb.append(this.isActivating);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityConfig:");
    if (this.activityConfig == null) {
      sb.append("null");
    } else {
      sb.append(this.activityConfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconIndex:");
    sb.append(this.iconIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderIndex:");
    sb.append(this.orderIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openStartTime:");
    sb.append(this.openStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openEndTime:");
    sb.append(this.openEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitGread:");
    sb.append(this.limitGread);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityConfigViewStandardSchemeFactory implements SchemeFactory {
    public ActivityConfigViewStandardScheme getScheme() {
      return new ActivityConfigViewStandardScheme();
    }
  }

  private static class ActivityConfigViewStandardScheme extends StandardScheme<ActivityConfigView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityConfigView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPEN_ACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openActivity = iprot.readI32();
              struct.setOpenActivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ACTIVATING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isActivating = iprot.readI32();
              struct.setIsActivatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTIVITY_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activityConfig = iprot.readString();
              struct.setActivityConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ICON_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iconIndex = iprot.readI32();
              struct.setIconIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderIndex = iprot.readI32();
              struct.setOrderIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPEN_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openStartTime = iprot.readI32();
              struct.setOpenStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPEN_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openEndTime = iprot.readI32();
              struct.setOpenEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LIMIT_GREAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitGread = iprot.readI32();
              struct.setLimitGreadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityConfigView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_ACTIVITY_FIELD_DESC);
      oprot.writeI32(struct.openActivity);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ACTIVATING_FIELD_DESC);
      oprot.writeI32(struct.isActivating);
      oprot.writeFieldEnd();
      if (struct.activityConfig != null) {
        oprot.writeFieldBegin(ACTIVITY_CONFIG_FIELD_DESC);
        oprot.writeString(struct.activityConfig);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ICON_INDEX_FIELD_DESC);
      oprot.writeI32(struct.iconIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_INDEX_FIELD_DESC);
      oprot.writeI32(struct.orderIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_START_TIME_FIELD_DESC);
      oprot.writeI32(struct.openStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_END_TIME_FIELD_DESC);
      oprot.writeI32(struct.openEndTime);
      oprot.writeFieldEnd();
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_GREAD_FIELD_DESC);
      oprot.writeI32(struct.limitGread);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityConfigViewTupleSchemeFactory implements SchemeFactory {
    public ActivityConfigViewTupleScheme getScheme() {
      return new ActivityConfigViewTupleScheme();
    }
  }

  private static class ActivityConfigViewTupleScheme extends TupleScheme<ActivityConfigView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityConfigView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOpenActivity()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetIsActivating()) {
        optionals.set(4);
      }
      if (struct.isSetActivityConfig()) {
        optionals.set(5);
      }
      if (struct.isSetIconIndex()) {
        optionals.set(6);
      }
      if (struct.isSetOrderIndex()) {
        optionals.set(7);
      }
      if (struct.isSetOpenStartTime()) {
        optionals.set(8);
      }
      if (struct.isSetOpenEndTime()) {
        optionals.set(9);
      }
      if (struct.isSetStartTime()) {
        optionals.set(10);
      }
      if (struct.isSetEndTime()) {
        optionals.set(11);
      }
      if (struct.isSetLimitGread()) {
        optionals.set(12);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(13);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetOpenActivity()) {
        oprot.writeI32(struct.openActivity);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetIsActivating()) {
        oprot.writeI32(struct.isActivating);
      }
      if (struct.isSetActivityConfig()) {
        oprot.writeString(struct.activityConfig);
      }
      if (struct.isSetIconIndex()) {
        oprot.writeI32(struct.iconIndex);
      }
      if (struct.isSetOrderIndex()) {
        oprot.writeI32(struct.orderIndex);
      }
      if (struct.isSetOpenStartTime()) {
        oprot.writeI32(struct.openStartTime);
      }
      if (struct.isSetOpenEndTime()) {
        oprot.writeI32(struct.openEndTime);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetLimitGread()) {
        oprot.writeI32(struct.limitGread);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityConfigView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.openActivity = iprot.readI32();
        struct.setOpenActivityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isActivating = iprot.readI32();
        struct.setIsActivatingIsSet(true);
      }
      if (incoming.get(5)) {
        struct.activityConfig = iprot.readString();
        struct.setActivityConfigIsSet(true);
      }
      if (incoming.get(6)) {
        struct.iconIndex = iprot.readI32();
        struct.setIconIndexIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderIndex = iprot.readI32();
        struct.setOrderIndexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.openStartTime = iprot.readI32();
        struct.setOpenStartTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.openEndTime = iprot.readI32();
        struct.setOpenEndTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.limitGread = iprot.readI32();
        struct.setLimitGreadIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

}

