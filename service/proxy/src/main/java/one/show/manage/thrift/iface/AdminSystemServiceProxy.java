/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdminSystemServiceProxy {

  public interface Iface {

    public List<one.show.manage.thrift.view.AdminFuncView> findFuncList(int status) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.AdminFuncView findFuncById(String funcId) throws org.apache.thrift.TException;

    public String saveFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView) throws org.apache.thrift.TException;

    public void updateFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView) throws org.apache.thrift.TException;

    public void deleteFunc(String funcId) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.AdminUserView findUser(String userName) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.AdminUserRoleView> findUserRole(String userName) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.AdminRoleView findRoleById(int roleId) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.AdminRoleFuncView> findFuncListByRoleId(int roleId) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.AdminRoleListView findRoleList(int status, int start, int count) throws org.apache.thrift.TException;

    public void saveUser(one.show.manage.thrift.view.AdminUserView adminUserView) throws org.apache.thrift.TException;

    public void updateUser(one.show.manage.thrift.view.AdminUserView adminUserView) throws org.apache.thrift.TException;

    public void deleteUser(String userName) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.AdminUserListView findUserList(int status, int start, int count) throws org.apache.thrift.TException;

    public void updatePwd(String userName, String password) throws org.apache.thrift.TException;

    public void saveRole(one.show.manage.thrift.view.AdminRoleView adminRoleView) throws org.apache.thrift.TException;

    public void updateRole(one.show.manage.thrift.view.AdminRoleView adminRoleView) throws org.apache.thrift.TException;

    public void deleteRole(int roleId) throws org.apache.thrift.TException;

    public void saveOperateLog(one.show.manage.thrift.view.OperateLogView operateLogView) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findFuncList(int status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFuncList_call> resultHandler) throws org.apache.thrift.TException;

    public void findFuncById(String funcId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFuncById_call> resultHandler) throws org.apache.thrift.TException;

    public void saveFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveFunc_call> resultHandler) throws org.apache.thrift.TException;

    public void updateFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateFunc_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteFunc(String funcId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteFunc_call> resultHandler) throws org.apache.thrift.TException;

    public void findUser(String userName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findUser_call> resultHandler) throws org.apache.thrift.TException;

    public void findUserRole(String userName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findUserRole_call> resultHandler) throws org.apache.thrift.TException;

    public void findRoleById(int roleId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findRoleById_call> resultHandler) throws org.apache.thrift.TException;

    public void findFuncListByRoleId(int roleId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFuncListByRoleId_call> resultHandler) throws org.apache.thrift.TException;

    public void findRoleList(int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findRoleList_call> resultHandler) throws org.apache.thrift.TException;

    public void saveUser(one.show.manage.thrift.view.AdminUserView adminUserView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveUser_call> resultHandler) throws org.apache.thrift.TException;

    public void updateUser(one.show.manage.thrift.view.AdminUserView adminUserView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateUser_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteUser(String userName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteUser_call> resultHandler) throws org.apache.thrift.TException;

    public void findUserList(int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findUserList_call> resultHandler) throws org.apache.thrift.TException;

    public void updatePwd(String userName, String password, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updatePwd_call> resultHandler) throws org.apache.thrift.TException;

    public void saveRole(one.show.manage.thrift.view.AdminRoleView adminRoleView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveRole_call> resultHandler) throws org.apache.thrift.TException;

    public void updateRole(one.show.manage.thrift.view.AdminRoleView adminRoleView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateRole_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteRole(int roleId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteRole_call> resultHandler) throws org.apache.thrift.TException;

    public void saveOperateLog(one.show.manage.thrift.view.OperateLogView operateLogView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveOperateLog_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<one.show.manage.thrift.view.AdminFuncView> findFuncList(int status) throws org.apache.thrift.TException
    {
      send_findFuncList(status);
      return recv_findFuncList();
    }

    public void send_findFuncList(int status) throws org.apache.thrift.TException
    {
      findFuncList_args args = new findFuncList_args();
      args.setStatus(status);
      sendBase("findFuncList", args);
    }

    public List<one.show.manage.thrift.view.AdminFuncView> recv_findFuncList() throws org.apache.thrift.TException
    {
      findFuncList_result result = new findFuncList_result();
      receiveBase(result, "findFuncList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFuncList failed: unknown result");
    }

    public one.show.manage.thrift.view.AdminFuncView findFuncById(String funcId) throws org.apache.thrift.TException
    {
      send_findFuncById(funcId);
      return recv_findFuncById();
    }

    public void send_findFuncById(String funcId) throws org.apache.thrift.TException
    {
      findFuncById_args args = new findFuncById_args();
      args.setFuncId(funcId);
      sendBase("findFuncById", args);
    }

    public one.show.manage.thrift.view.AdminFuncView recv_findFuncById() throws org.apache.thrift.TException
    {
      findFuncById_result result = new findFuncById_result();
      receiveBase(result, "findFuncById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFuncById failed: unknown result");
    }

    public String saveFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView) throws org.apache.thrift.TException
    {
      send_saveFunc(adminFuncView);
      return recv_saveFunc();
    }

    public void send_saveFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView) throws org.apache.thrift.TException
    {
      saveFunc_args args = new saveFunc_args();
      args.setAdminFuncView(adminFuncView);
      sendBase("saveFunc", args);
    }

    public String recv_saveFunc() throws org.apache.thrift.TException
    {
      saveFunc_result result = new saveFunc_result();
      receiveBase(result, "saveFunc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveFunc failed: unknown result");
    }

    public void updateFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView) throws org.apache.thrift.TException
    {
      send_updateFunc(adminFuncView);
      recv_updateFunc();
    }

    public void send_updateFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView) throws org.apache.thrift.TException
    {
      updateFunc_args args = new updateFunc_args();
      args.setAdminFuncView(adminFuncView);
      sendBase("updateFunc", args);
    }

    public void recv_updateFunc() throws org.apache.thrift.TException
    {
      updateFunc_result result = new updateFunc_result();
      receiveBase(result, "updateFunc");
      return;
    }

    public void deleteFunc(String funcId) throws org.apache.thrift.TException
    {
      send_deleteFunc(funcId);
      recv_deleteFunc();
    }

    public void send_deleteFunc(String funcId) throws org.apache.thrift.TException
    {
      deleteFunc_args args = new deleteFunc_args();
      args.setFuncId(funcId);
      sendBase("deleteFunc", args);
    }

    public void recv_deleteFunc() throws org.apache.thrift.TException
    {
      deleteFunc_result result = new deleteFunc_result();
      receiveBase(result, "deleteFunc");
      return;
    }

    public one.show.manage.thrift.view.AdminUserView findUser(String userName) throws org.apache.thrift.TException
    {
      send_findUser(userName);
      return recv_findUser();
    }

    public void send_findUser(String userName) throws org.apache.thrift.TException
    {
      findUser_args args = new findUser_args();
      args.setUserName(userName);
      sendBase("findUser", args);
    }

    public one.show.manage.thrift.view.AdminUserView recv_findUser() throws org.apache.thrift.TException
    {
      findUser_result result = new findUser_result();
      receiveBase(result, "findUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUser failed: unknown result");
    }

    public List<one.show.manage.thrift.view.AdminUserRoleView> findUserRole(String userName) throws org.apache.thrift.TException
    {
      send_findUserRole(userName);
      return recv_findUserRole();
    }

    public void send_findUserRole(String userName) throws org.apache.thrift.TException
    {
      findUserRole_args args = new findUserRole_args();
      args.setUserName(userName);
      sendBase("findUserRole", args);
    }

    public List<one.show.manage.thrift.view.AdminUserRoleView> recv_findUserRole() throws org.apache.thrift.TException
    {
      findUserRole_result result = new findUserRole_result();
      receiveBase(result, "findUserRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserRole failed: unknown result");
    }

    public one.show.manage.thrift.view.AdminRoleView findRoleById(int roleId) throws org.apache.thrift.TException
    {
      send_findRoleById(roleId);
      return recv_findRoleById();
    }

    public void send_findRoleById(int roleId) throws org.apache.thrift.TException
    {
      findRoleById_args args = new findRoleById_args();
      args.setRoleId(roleId);
      sendBase("findRoleById", args);
    }

    public one.show.manage.thrift.view.AdminRoleView recv_findRoleById() throws org.apache.thrift.TException
    {
      findRoleById_result result = new findRoleById_result();
      receiveBase(result, "findRoleById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRoleById failed: unknown result");
    }

    public List<one.show.manage.thrift.view.AdminRoleFuncView> findFuncListByRoleId(int roleId) throws org.apache.thrift.TException
    {
      send_findFuncListByRoleId(roleId);
      return recv_findFuncListByRoleId();
    }

    public void send_findFuncListByRoleId(int roleId) throws org.apache.thrift.TException
    {
      findFuncListByRoleId_args args = new findFuncListByRoleId_args();
      args.setRoleId(roleId);
      sendBase("findFuncListByRoleId", args);
    }

    public List<one.show.manage.thrift.view.AdminRoleFuncView> recv_findFuncListByRoleId() throws org.apache.thrift.TException
    {
      findFuncListByRoleId_result result = new findFuncListByRoleId_result();
      receiveBase(result, "findFuncListByRoleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFuncListByRoleId failed: unknown result");
    }

    public one.show.manage.thrift.view.AdminRoleListView findRoleList(int status, int start, int count) throws org.apache.thrift.TException
    {
      send_findRoleList(status, start, count);
      return recv_findRoleList();
    }

    public void send_findRoleList(int status, int start, int count) throws org.apache.thrift.TException
    {
      findRoleList_args args = new findRoleList_args();
      args.setStatus(status);
      args.setStart(start);
      args.setCount(count);
      sendBase("findRoleList", args);
    }

    public one.show.manage.thrift.view.AdminRoleListView recv_findRoleList() throws org.apache.thrift.TException
    {
      findRoleList_result result = new findRoleList_result();
      receiveBase(result, "findRoleList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRoleList failed: unknown result");
    }

    public void saveUser(one.show.manage.thrift.view.AdminUserView adminUserView) throws org.apache.thrift.TException
    {
      send_saveUser(adminUserView);
      recv_saveUser();
    }

    public void send_saveUser(one.show.manage.thrift.view.AdminUserView adminUserView) throws org.apache.thrift.TException
    {
      saveUser_args args = new saveUser_args();
      args.setAdminUserView(adminUserView);
      sendBase("saveUser", args);
    }

    public void recv_saveUser() throws org.apache.thrift.TException
    {
      saveUser_result result = new saveUser_result();
      receiveBase(result, "saveUser");
      return;
    }

    public void updateUser(one.show.manage.thrift.view.AdminUserView adminUserView) throws org.apache.thrift.TException
    {
      send_updateUser(adminUserView);
      recv_updateUser();
    }

    public void send_updateUser(one.show.manage.thrift.view.AdminUserView adminUserView) throws org.apache.thrift.TException
    {
      updateUser_args args = new updateUser_args();
      args.setAdminUserView(adminUserView);
      sendBase("updateUser", args);
    }

    public void recv_updateUser() throws org.apache.thrift.TException
    {
      updateUser_result result = new updateUser_result();
      receiveBase(result, "updateUser");
      return;
    }

    public void deleteUser(String userName) throws org.apache.thrift.TException
    {
      send_deleteUser(userName);
      recv_deleteUser();
    }

    public void send_deleteUser(String userName) throws org.apache.thrift.TException
    {
      deleteUser_args args = new deleteUser_args();
      args.setUserName(userName);
      sendBase("deleteUser", args);
    }

    public void recv_deleteUser() throws org.apache.thrift.TException
    {
      deleteUser_result result = new deleteUser_result();
      receiveBase(result, "deleteUser");
      return;
    }

    public one.show.manage.thrift.view.AdminUserListView findUserList(int status, int start, int count) throws org.apache.thrift.TException
    {
      send_findUserList(status, start, count);
      return recv_findUserList();
    }

    public void send_findUserList(int status, int start, int count) throws org.apache.thrift.TException
    {
      findUserList_args args = new findUserList_args();
      args.setStatus(status);
      args.setStart(start);
      args.setCount(count);
      sendBase("findUserList", args);
    }

    public one.show.manage.thrift.view.AdminUserListView recv_findUserList() throws org.apache.thrift.TException
    {
      findUserList_result result = new findUserList_result();
      receiveBase(result, "findUserList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserList failed: unknown result");
    }

    public void updatePwd(String userName, String password) throws org.apache.thrift.TException
    {
      send_updatePwd(userName, password);
      recv_updatePwd();
    }

    public void send_updatePwd(String userName, String password) throws org.apache.thrift.TException
    {
      updatePwd_args args = new updatePwd_args();
      args.setUserName(userName);
      args.setPassword(password);
      sendBase("updatePwd", args);
    }

    public void recv_updatePwd() throws org.apache.thrift.TException
    {
      updatePwd_result result = new updatePwd_result();
      receiveBase(result, "updatePwd");
      return;
    }

    public void saveRole(one.show.manage.thrift.view.AdminRoleView adminRoleView) throws org.apache.thrift.TException
    {
      send_saveRole(adminRoleView);
      recv_saveRole();
    }

    public void send_saveRole(one.show.manage.thrift.view.AdminRoleView adminRoleView) throws org.apache.thrift.TException
    {
      saveRole_args args = new saveRole_args();
      args.setAdminRoleView(adminRoleView);
      sendBase("saveRole", args);
    }

    public void recv_saveRole() throws org.apache.thrift.TException
    {
      saveRole_result result = new saveRole_result();
      receiveBase(result, "saveRole");
      return;
    }

    public void updateRole(one.show.manage.thrift.view.AdminRoleView adminRoleView) throws org.apache.thrift.TException
    {
      send_updateRole(adminRoleView);
      recv_updateRole();
    }

    public void send_updateRole(one.show.manage.thrift.view.AdminRoleView adminRoleView) throws org.apache.thrift.TException
    {
      updateRole_args args = new updateRole_args();
      args.setAdminRoleView(adminRoleView);
      sendBase("updateRole", args);
    }

    public void recv_updateRole() throws org.apache.thrift.TException
    {
      updateRole_result result = new updateRole_result();
      receiveBase(result, "updateRole");
      return;
    }

    public void deleteRole(int roleId) throws org.apache.thrift.TException
    {
      send_deleteRole(roleId);
      recv_deleteRole();
    }

    public void send_deleteRole(int roleId) throws org.apache.thrift.TException
    {
      deleteRole_args args = new deleteRole_args();
      args.setRoleId(roleId);
      sendBase("deleteRole", args);
    }

    public void recv_deleteRole() throws org.apache.thrift.TException
    {
      deleteRole_result result = new deleteRole_result();
      receiveBase(result, "deleteRole");
      return;
    }

    public void saveOperateLog(one.show.manage.thrift.view.OperateLogView operateLogView) throws org.apache.thrift.TException
    {
      send_saveOperateLog(operateLogView);
      recv_saveOperateLog();
    }

    public void send_saveOperateLog(one.show.manage.thrift.view.OperateLogView operateLogView) throws org.apache.thrift.TException
    {
      saveOperateLog_args args = new saveOperateLog_args();
      args.setOperateLogView(operateLogView);
      sendBase("saveOperateLog", args);
    }

    public void recv_saveOperateLog() throws org.apache.thrift.TException
    {
      saveOperateLog_result result = new saveOperateLog_result();
      receiveBase(result, "saveOperateLog");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findFuncList(int status, org.apache.thrift.async.AsyncMethodCallback<findFuncList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFuncList_call method_call = new findFuncList_call(status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFuncList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int status;
      public findFuncList_call(int status, org.apache.thrift.async.AsyncMethodCallback<findFuncList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFuncList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFuncList_args args = new findFuncList_args();
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.AdminFuncView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFuncList();
      }
    }

    public void findFuncById(String funcId, org.apache.thrift.async.AsyncMethodCallback<findFuncById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFuncById_call method_call = new findFuncById_call(funcId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFuncById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String funcId;
      public findFuncById_call(String funcId, org.apache.thrift.async.AsyncMethodCallback<findFuncById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.funcId = funcId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFuncById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFuncById_args args = new findFuncById_args();
        args.setFuncId(funcId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.AdminFuncView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFuncById();
      }
    }

    public void saveFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView, org.apache.thrift.async.AsyncMethodCallback<saveFunc_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFunc_call method_call = new saveFunc_call(adminFuncView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveFunc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.AdminFuncView adminFuncView;
      public saveFunc_call(one.show.manage.thrift.view.AdminFuncView adminFuncView, org.apache.thrift.async.AsyncMethodCallback<saveFunc_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adminFuncView = adminFuncView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFunc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFunc_args args = new saveFunc_args();
        args.setAdminFuncView(adminFuncView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveFunc();
      }
    }

    public void updateFunc(one.show.manage.thrift.view.AdminFuncView adminFuncView, org.apache.thrift.async.AsyncMethodCallback<updateFunc_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFunc_call method_call = new updateFunc_call(adminFuncView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFunc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.AdminFuncView adminFuncView;
      public updateFunc_call(one.show.manage.thrift.view.AdminFuncView adminFuncView, org.apache.thrift.async.AsyncMethodCallback<updateFunc_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adminFuncView = adminFuncView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFunc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFunc_args args = new updateFunc_args();
        args.setAdminFuncView(adminFuncView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateFunc();
      }
    }

    public void deleteFunc(String funcId, org.apache.thrift.async.AsyncMethodCallback<deleteFunc_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFunc_call method_call = new deleteFunc_call(funcId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFunc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String funcId;
      public deleteFunc_call(String funcId, org.apache.thrift.async.AsyncMethodCallback<deleteFunc_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.funcId = funcId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFunc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFunc_args args = new deleteFunc_args();
        args.setFuncId(funcId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteFunc();
      }
    }

    public void findUser(String userName, org.apache.thrift.async.AsyncMethodCallback<findUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUser_call method_call = new findUser_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public findUser_call(String userName, org.apache.thrift.async.AsyncMethodCallback<findUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUser_args args = new findUser_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.AdminUserView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUser();
      }
    }

    public void findUserRole(String userName, org.apache.thrift.async.AsyncMethodCallback<findUserRole_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserRole_call method_call = new findUserRole_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public findUserRole_call(String userName, org.apache.thrift.async.AsyncMethodCallback<findUserRole_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserRole_args args = new findUserRole_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.AdminUserRoleView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserRole();
      }
    }

    public void findRoleById(int roleId, org.apache.thrift.async.AsyncMethodCallback<findRoleById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRoleById_call method_call = new findRoleById_call(roleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRoleById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int roleId;
      public findRoleById_call(int roleId, org.apache.thrift.async.AsyncMethodCallback<findRoleById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleId = roleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRoleById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRoleById_args args = new findRoleById_args();
        args.setRoleId(roleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.AdminRoleView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRoleById();
      }
    }

    public void findFuncListByRoleId(int roleId, org.apache.thrift.async.AsyncMethodCallback<findFuncListByRoleId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFuncListByRoleId_call method_call = new findFuncListByRoleId_call(roleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFuncListByRoleId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int roleId;
      public findFuncListByRoleId_call(int roleId, org.apache.thrift.async.AsyncMethodCallback<findFuncListByRoleId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleId = roleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFuncListByRoleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFuncListByRoleId_args args = new findFuncListByRoleId_args();
        args.setRoleId(roleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.AdminRoleFuncView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFuncListByRoleId();
      }
    }

    public void findRoleList(int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findRoleList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRoleList_call method_call = new findRoleList_call(status, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRoleList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int status;
      private int start;
      private int count;
      public findRoleList_call(int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findRoleList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRoleList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRoleList_args args = new findRoleList_args();
        args.setStatus(status);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.AdminRoleListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRoleList();
      }
    }

    public void saveUser(one.show.manage.thrift.view.AdminUserView adminUserView, org.apache.thrift.async.AsyncMethodCallback<saveUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveUser_call method_call = new saveUser_call(adminUserView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.AdminUserView adminUserView;
      public saveUser_call(one.show.manage.thrift.view.AdminUserView adminUserView, org.apache.thrift.async.AsyncMethodCallback<saveUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adminUserView = adminUserView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveUser_args args = new saveUser_args();
        args.setAdminUserView(adminUserView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveUser();
      }
    }

    public void updateUser(one.show.manage.thrift.view.AdminUserView adminUserView, org.apache.thrift.async.AsyncMethodCallback<updateUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUser_call method_call = new updateUser_call(adminUserView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.AdminUserView adminUserView;
      public updateUser_call(one.show.manage.thrift.view.AdminUserView adminUserView, org.apache.thrift.async.AsyncMethodCallback<updateUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adminUserView = adminUserView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUser_args args = new updateUser_args();
        args.setAdminUserView(adminUserView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateUser();
      }
    }

    public void deleteUser(String userName, org.apache.thrift.async.AsyncMethodCallback<deleteUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUser_call method_call = new deleteUser_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public deleteUser_call(String userName, org.apache.thrift.async.AsyncMethodCallback<deleteUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUser_args args = new deleteUser_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteUser();
      }
    }

    public void findUserList(int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findUserList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserList_call method_call = new findUserList_call(status, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int status;
      private int start;
      private int count;
      public findUserList_call(int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findUserList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserList_args args = new findUserList_args();
        args.setStatus(status);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.AdminUserListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserList();
      }
    }

    public void updatePwd(String userName, String password, org.apache.thrift.async.AsyncMethodCallback<updatePwd_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePwd_call method_call = new updatePwd_call(userName, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String password;
      public updatePwd_call(String userName, String password, org.apache.thrift.async.AsyncMethodCallback<updatePwd_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePwd_args args = new updatePwd_args();
        args.setUserName(userName);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updatePwd();
      }
    }

    public void saveRole(one.show.manage.thrift.view.AdminRoleView adminRoleView, org.apache.thrift.async.AsyncMethodCallback<saveRole_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveRole_call method_call = new saveRole_call(adminRoleView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.AdminRoleView adminRoleView;
      public saveRole_call(one.show.manage.thrift.view.AdminRoleView adminRoleView, org.apache.thrift.async.AsyncMethodCallback<saveRole_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adminRoleView = adminRoleView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveRole_args args = new saveRole_args();
        args.setAdminRoleView(adminRoleView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveRole();
      }
    }

    public void updateRole(one.show.manage.thrift.view.AdminRoleView adminRoleView, org.apache.thrift.async.AsyncMethodCallback<updateRole_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRole_call method_call = new updateRole_call(adminRoleView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.AdminRoleView adminRoleView;
      public updateRole_call(one.show.manage.thrift.view.AdminRoleView adminRoleView, org.apache.thrift.async.AsyncMethodCallback<updateRole_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adminRoleView = adminRoleView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRole_args args = new updateRole_args();
        args.setAdminRoleView(adminRoleView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateRole();
      }
    }

    public void deleteRole(int roleId, org.apache.thrift.async.AsyncMethodCallback<deleteRole_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRole_call method_call = new deleteRole_call(roleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int roleId;
      public deleteRole_call(int roleId, org.apache.thrift.async.AsyncMethodCallback<deleteRole_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleId = roleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRole_args args = new deleteRole_args();
        args.setRoleId(roleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteRole();
      }
    }

    public void saveOperateLog(one.show.manage.thrift.view.OperateLogView operateLogView, org.apache.thrift.async.AsyncMethodCallback<saveOperateLog_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOperateLog_call method_call = new saveOperateLog_call(operateLogView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOperateLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.OperateLogView operateLogView;
      public saveOperateLog_call(one.show.manage.thrift.view.OperateLogView operateLogView, org.apache.thrift.async.AsyncMethodCallback<saveOperateLog_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.operateLogView = operateLogView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOperateLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOperateLog_args args = new saveOperateLog_args();
        args.setOperateLogView(operateLogView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveOperateLog();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findFuncList", new findFuncList());
      processMap.put("findFuncById", new findFuncById());
      processMap.put("saveFunc", new saveFunc());
      processMap.put("updateFunc", new updateFunc());
      processMap.put("deleteFunc", new deleteFunc());
      processMap.put("findUser", new findUser());
      processMap.put("findUserRole", new findUserRole());
      processMap.put("findRoleById", new findRoleById());
      processMap.put("findFuncListByRoleId", new findFuncListByRoleId());
      processMap.put("findRoleList", new findRoleList());
      processMap.put("saveUser", new saveUser());
      processMap.put("updateUser", new updateUser());
      processMap.put("deleteUser", new deleteUser());
      processMap.put("findUserList", new findUserList());
      processMap.put("updatePwd", new updatePwd());
      processMap.put("saveRole", new saveRole());
      processMap.put("updateRole", new updateRole());
      processMap.put("deleteRole", new deleteRole());
      processMap.put("saveOperateLog", new saveOperateLog());
      return processMap;
    }

    public static class findFuncList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFuncList_args> {
      public findFuncList() {
        super("findFuncList");
      }

      public findFuncList_args getEmptyArgsInstance() {
        return new findFuncList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFuncList_result getResult(I iface, findFuncList_args args) throws org.apache.thrift.TException {
        findFuncList_result result = new findFuncList_result();
        result.success = iface.findFuncList(args.status);
        return result;
      }
    }

    public static class findFuncById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFuncById_args> {
      public findFuncById() {
        super("findFuncById");
      }

      public findFuncById_args getEmptyArgsInstance() {
        return new findFuncById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFuncById_result getResult(I iface, findFuncById_args args) throws org.apache.thrift.TException {
        findFuncById_result result = new findFuncById_result();
        result.success = iface.findFuncById(args.funcId);
        return result;
      }
    }

    public static class saveFunc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveFunc_args> {
      public saveFunc() {
        super("saveFunc");
      }

      public saveFunc_args getEmptyArgsInstance() {
        return new saveFunc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveFunc_result getResult(I iface, saveFunc_args args) throws org.apache.thrift.TException {
        saveFunc_result result = new saveFunc_result();
        result.success = iface.saveFunc(args.adminFuncView);
        return result;
      }
    }

    public static class updateFunc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFunc_args> {
      public updateFunc() {
        super("updateFunc");
      }

      public updateFunc_args getEmptyArgsInstance() {
        return new updateFunc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFunc_result getResult(I iface, updateFunc_args args) throws org.apache.thrift.TException {
        updateFunc_result result = new updateFunc_result();
        iface.updateFunc(args.adminFuncView);
        return result;
      }
    }

    public static class deleteFunc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFunc_args> {
      public deleteFunc() {
        super("deleteFunc");
      }

      public deleteFunc_args getEmptyArgsInstance() {
        return new deleteFunc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFunc_result getResult(I iface, deleteFunc_args args) throws org.apache.thrift.TException {
        deleteFunc_result result = new deleteFunc_result();
        iface.deleteFunc(args.funcId);
        return result;
      }
    }

    public static class findUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUser_args> {
      public findUser() {
        super("findUser");
      }

      public findUser_args getEmptyArgsInstance() {
        return new findUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUser_result getResult(I iface, findUser_args args) throws org.apache.thrift.TException {
        findUser_result result = new findUser_result();
        result.success = iface.findUser(args.userName);
        return result;
      }
    }

    public static class findUserRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserRole_args> {
      public findUserRole() {
        super("findUserRole");
      }

      public findUserRole_args getEmptyArgsInstance() {
        return new findUserRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserRole_result getResult(I iface, findUserRole_args args) throws org.apache.thrift.TException {
        findUserRole_result result = new findUserRole_result();
        result.success = iface.findUserRole(args.userName);
        return result;
      }
    }

    public static class findRoleById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRoleById_args> {
      public findRoleById() {
        super("findRoleById");
      }

      public findRoleById_args getEmptyArgsInstance() {
        return new findRoleById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findRoleById_result getResult(I iface, findRoleById_args args) throws org.apache.thrift.TException {
        findRoleById_result result = new findRoleById_result();
        result.success = iface.findRoleById(args.roleId);
        return result;
      }
    }

    public static class findFuncListByRoleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFuncListByRoleId_args> {
      public findFuncListByRoleId() {
        super("findFuncListByRoleId");
      }

      public findFuncListByRoleId_args getEmptyArgsInstance() {
        return new findFuncListByRoleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFuncListByRoleId_result getResult(I iface, findFuncListByRoleId_args args) throws org.apache.thrift.TException {
        findFuncListByRoleId_result result = new findFuncListByRoleId_result();
        result.success = iface.findFuncListByRoleId(args.roleId);
        return result;
      }
    }

    public static class findRoleList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRoleList_args> {
      public findRoleList() {
        super("findRoleList");
      }

      public findRoleList_args getEmptyArgsInstance() {
        return new findRoleList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findRoleList_result getResult(I iface, findRoleList_args args) throws org.apache.thrift.TException {
        findRoleList_result result = new findRoleList_result();
        result.success = iface.findRoleList(args.status, args.start, args.count);
        return result;
      }
    }

    public static class saveUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveUser_args> {
      public saveUser() {
        super("saveUser");
      }

      public saveUser_args getEmptyArgsInstance() {
        return new saveUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveUser_result getResult(I iface, saveUser_args args) throws org.apache.thrift.TException {
        saveUser_result result = new saveUser_result();
        iface.saveUser(args.adminUserView);
        return result;
      }
    }

    public static class updateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUser_args> {
      public updateUser() {
        super("updateUser");
      }

      public updateUser_args getEmptyArgsInstance() {
        return new updateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUser_result getResult(I iface, updateUser_args args) throws org.apache.thrift.TException {
        updateUser_result result = new updateUser_result();
        iface.updateUser(args.adminUserView);
        return result;
      }
    }

    public static class deleteUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUser_args> {
      public deleteUser() {
        super("deleteUser");
      }

      public deleteUser_args getEmptyArgsInstance() {
        return new deleteUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUser_result getResult(I iface, deleteUser_args args) throws org.apache.thrift.TException {
        deleteUser_result result = new deleteUser_result();
        iface.deleteUser(args.userName);
        return result;
      }
    }

    public static class findUserList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserList_args> {
      public findUserList() {
        super("findUserList");
      }

      public findUserList_args getEmptyArgsInstance() {
        return new findUserList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserList_result getResult(I iface, findUserList_args args) throws org.apache.thrift.TException {
        findUserList_result result = new findUserList_result();
        result.success = iface.findUserList(args.status, args.start, args.count);
        return result;
      }
    }

    public static class updatePwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePwd_args> {
      public updatePwd() {
        super("updatePwd");
      }

      public updatePwd_args getEmptyArgsInstance() {
        return new updatePwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePwd_result getResult(I iface, updatePwd_args args) throws org.apache.thrift.TException {
        updatePwd_result result = new updatePwd_result();
        iface.updatePwd(args.userName, args.password);
        return result;
      }
    }

    public static class saveRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveRole_args> {
      public saveRole() {
        super("saveRole");
      }

      public saveRole_args getEmptyArgsInstance() {
        return new saveRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveRole_result getResult(I iface, saveRole_args args) throws org.apache.thrift.TException {
        saveRole_result result = new saveRole_result();
        iface.saveRole(args.adminRoleView);
        return result;
      }
    }

    public static class updateRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRole_args> {
      public updateRole() {
        super("updateRole");
      }

      public updateRole_args getEmptyArgsInstance() {
        return new updateRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRole_result getResult(I iface, updateRole_args args) throws org.apache.thrift.TException {
        updateRole_result result = new updateRole_result();
        iface.updateRole(args.adminRoleView);
        return result;
      }
    }

    public static class deleteRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRole_args> {
      public deleteRole() {
        super("deleteRole");
      }

      public deleteRole_args getEmptyArgsInstance() {
        return new deleteRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRole_result getResult(I iface, deleteRole_args args) throws org.apache.thrift.TException {
        deleteRole_result result = new deleteRole_result();
        iface.deleteRole(args.roleId);
        return result;
      }
    }

    public static class saveOperateLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOperateLog_args> {
      public saveOperateLog() {
        super("saveOperateLog");
      }

      public saveOperateLog_args getEmptyArgsInstance() {
        return new saveOperateLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOperateLog_result getResult(I iface, saveOperateLog_args args) throws org.apache.thrift.TException {
        saveOperateLog_result result = new saveOperateLog_result();
        iface.saveOperateLog(args.operateLogView);
        return result;
      }
    }

  }

  public static class findFuncList_args implements org.apache.thrift.TBase<findFuncList_args, findFuncList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFuncList_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFuncList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFuncList_argsTupleSchemeFactory());
    }

    public int status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFuncList_args.class, metaDataMap);
    }

    public findFuncList_args() {
    }

    public findFuncList_args(
      int status)
    {
      this();
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFuncList_args(findFuncList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.status = other.status;
    }

    public findFuncList_args deepCopy() {
      return new findFuncList_args(this);
    }

    @Override
    public void clear() {
      setStatusIsSet(false);
      this.status = 0;
    }

    public int getStatus() {
      return this.status;
    }

    public findFuncList_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return Integer.valueOf(getStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFuncList_args)
        return this.equals((findFuncList_args)that);
      return false;
    }

    public boolean equals(findFuncList_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFuncList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFuncList_args typedOther = (findFuncList_args)other;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFuncList_args(");
      boolean first = true;

      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFuncList_argsStandardSchemeFactory implements SchemeFactory {
      public findFuncList_argsStandardScheme getScheme() {
        return new findFuncList_argsStandardScheme();
      }
    }

    private static class findFuncList_argsStandardScheme extends StandardScheme<findFuncList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFuncList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFuncList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFuncList_argsTupleSchemeFactory implements SchemeFactory {
      public findFuncList_argsTupleScheme getScheme() {
        return new findFuncList_argsTupleScheme();
      }
    }

    private static class findFuncList_argsTupleScheme extends TupleScheme<findFuncList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFuncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFuncList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class findFuncList_result implements org.apache.thrift.TBase<findFuncList_result, findFuncList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFuncList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFuncList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFuncList_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.AdminFuncView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminFuncView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFuncList_result.class, metaDataMap);
    }

    public findFuncList_result() {
    }

    public findFuncList_result(
      List<one.show.manage.thrift.view.AdminFuncView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFuncList_result(findFuncList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.AdminFuncView> __this__success = new ArrayList<one.show.manage.thrift.view.AdminFuncView>();
        for (one.show.manage.thrift.view.AdminFuncView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.AdminFuncView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findFuncList_result deepCopy() {
      return new findFuncList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.AdminFuncView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.AdminFuncView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.AdminFuncView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.AdminFuncView> getSuccess() {
      return this.success;
    }

    public findFuncList_result setSuccess(List<one.show.manage.thrift.view.AdminFuncView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.AdminFuncView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFuncList_result)
        return this.equals((findFuncList_result)that);
      return false;
    }

    public boolean equals(findFuncList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFuncList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFuncList_result typedOther = (findFuncList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFuncList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFuncList_resultStandardSchemeFactory implements SchemeFactory {
      public findFuncList_resultStandardScheme getScheme() {
        return new findFuncList_resultStandardScheme();
      }
    }

    private static class findFuncList_resultStandardScheme extends StandardScheme<findFuncList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFuncList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.AdminFuncView>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    one.show.manage.thrift.view.AdminFuncView _elem2; // required
                    _elem2 = new one.show.manage.thrift.view.AdminFuncView();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFuncList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.AdminFuncView _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFuncList_resultTupleSchemeFactory implements SchemeFactory {
      public findFuncList_resultTupleScheme getScheme() {
        return new findFuncList_resultTupleScheme();
      }
    }

    private static class findFuncList_resultTupleScheme extends TupleScheme<findFuncList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFuncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.AdminFuncView _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFuncList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.AdminFuncView>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              one.show.manage.thrift.view.AdminFuncView _elem7; // required
              _elem7 = new one.show.manage.thrift.view.AdminFuncView();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findFuncById_args implements org.apache.thrift.TBase<findFuncById_args, findFuncById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFuncById_args");

    private static final org.apache.thrift.protocol.TField FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("funcId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFuncById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFuncById_argsTupleSchemeFactory());
    }

    public String funcId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUNC_ID((short)1, "funcId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUNC_ID
            return FUNC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("funcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFuncById_args.class, metaDataMap);
    }

    public findFuncById_args() {
    }

    public findFuncById_args(
      String funcId)
    {
      this();
      this.funcId = funcId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFuncById_args(findFuncById_args other) {
      if (other.isSetFuncId()) {
        this.funcId = other.funcId;
      }
    }

    public findFuncById_args deepCopy() {
      return new findFuncById_args(this);
    }

    @Override
    public void clear() {
      this.funcId = null;
    }

    public String getFuncId() {
      return this.funcId;
    }

    public findFuncById_args setFuncId(String funcId) {
      this.funcId = funcId;
      return this;
    }

    public void unsetFuncId() {
      this.funcId = null;
    }

    /** Returns true if field funcId is set (has been assigned a value) and false otherwise */
    public boolean isSetFuncId() {
      return this.funcId != null;
    }

    public void setFuncIdIsSet(boolean value) {
      if (!value) {
        this.funcId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUNC_ID:
        if (value == null) {
          unsetFuncId();
        } else {
          setFuncId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUNC_ID:
        return getFuncId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUNC_ID:
        return isSetFuncId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFuncById_args)
        return this.equals((findFuncById_args)that);
      return false;
    }

    public boolean equals(findFuncById_args that) {
      if (that == null)
        return false;

      boolean this_present_funcId = true && this.isSetFuncId();
      boolean that_present_funcId = true && that.isSetFuncId();
      if (this_present_funcId || that_present_funcId) {
        if (!(this_present_funcId && that_present_funcId))
          return false;
        if (!this.funcId.equals(that.funcId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFuncById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFuncById_args typedOther = (findFuncById_args)other;

      lastComparison = Boolean.valueOf(isSetFuncId()).compareTo(typedOther.isSetFuncId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFuncId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcId, typedOther.funcId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFuncById_args(");
      boolean first = true;

      sb.append("funcId:");
      if (this.funcId == null) {
        sb.append("null");
      } else {
        sb.append(this.funcId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFuncById_argsStandardSchemeFactory implements SchemeFactory {
      public findFuncById_argsStandardScheme getScheme() {
        return new findFuncById_argsStandardScheme();
      }
    }

    private static class findFuncById_argsStandardScheme extends StandardScheme<findFuncById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFuncById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUNC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.funcId = iprot.readString();
                struct.setFuncIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFuncById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.funcId != null) {
          oprot.writeFieldBegin(FUNC_ID_FIELD_DESC);
          oprot.writeString(struct.funcId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFuncById_argsTupleSchemeFactory implements SchemeFactory {
      public findFuncById_argsTupleScheme getScheme() {
        return new findFuncById_argsTupleScheme();
      }
    }

    private static class findFuncById_argsTupleScheme extends TupleScheme<findFuncById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFuncById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFuncId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFuncId()) {
          oprot.writeString(struct.funcId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFuncById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.funcId = iprot.readString();
          struct.setFuncIdIsSet(true);
        }
      }
    }

  }

  public static class findFuncById_result implements org.apache.thrift.TBase<findFuncById_result, findFuncById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFuncById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFuncById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFuncById_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminFuncView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminFuncView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFuncById_result.class, metaDataMap);
    }

    public findFuncById_result() {
    }

    public findFuncById_result(
      one.show.manage.thrift.view.AdminFuncView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFuncById_result(findFuncById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.AdminFuncView(other.success);
      }
    }

    public findFuncById_result deepCopy() {
      return new findFuncById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.AdminFuncView getSuccess() {
      return this.success;
    }

    public findFuncById_result setSuccess(one.show.manage.thrift.view.AdminFuncView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.AdminFuncView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFuncById_result)
        return this.equals((findFuncById_result)that);
      return false;
    }

    public boolean equals(findFuncById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFuncById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFuncById_result typedOther = (findFuncById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFuncById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFuncById_resultStandardSchemeFactory implements SchemeFactory {
      public findFuncById_resultStandardScheme getScheme() {
        return new findFuncById_resultStandardScheme();
      }
    }

    private static class findFuncById_resultStandardScheme extends StandardScheme<findFuncById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFuncById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.AdminFuncView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFuncById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFuncById_resultTupleSchemeFactory implements SchemeFactory {
      public findFuncById_resultTupleScheme getScheme() {
        return new findFuncById_resultTupleScheme();
      }
    }

    private static class findFuncById_resultTupleScheme extends TupleScheme<findFuncById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFuncById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFuncById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.AdminFuncView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveFunc_args implements org.apache.thrift.TBase<saveFunc_args, saveFunc_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFunc_args");

    private static final org.apache.thrift.protocol.TField ADMIN_FUNC_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("adminFuncView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFunc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFunc_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminFuncView adminFuncView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADMIN_FUNC_VIEW((short)1, "adminFuncView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADMIN_FUNC_VIEW
            return ADMIN_FUNC_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADMIN_FUNC_VIEW, new org.apache.thrift.meta_data.FieldMetaData("adminFuncView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminFuncView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFunc_args.class, metaDataMap);
    }

    public saveFunc_args() {
    }

    public saveFunc_args(
      one.show.manage.thrift.view.AdminFuncView adminFuncView)
    {
      this();
      this.adminFuncView = adminFuncView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFunc_args(saveFunc_args other) {
      if (other.isSetAdminFuncView()) {
        this.adminFuncView = new one.show.manage.thrift.view.AdminFuncView(other.adminFuncView);
      }
    }

    public saveFunc_args deepCopy() {
      return new saveFunc_args(this);
    }

    @Override
    public void clear() {
      this.adminFuncView = null;
    }

    public one.show.manage.thrift.view.AdminFuncView getAdminFuncView() {
      return this.adminFuncView;
    }

    public saveFunc_args setAdminFuncView(one.show.manage.thrift.view.AdminFuncView adminFuncView) {
      this.adminFuncView = adminFuncView;
      return this;
    }

    public void unsetAdminFuncView() {
      this.adminFuncView = null;
    }

    /** Returns true if field adminFuncView is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminFuncView() {
      return this.adminFuncView != null;
    }

    public void setAdminFuncViewIsSet(boolean value) {
      if (!value) {
        this.adminFuncView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADMIN_FUNC_VIEW:
        if (value == null) {
          unsetAdminFuncView();
        } else {
          setAdminFuncView((one.show.manage.thrift.view.AdminFuncView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADMIN_FUNC_VIEW:
        return getAdminFuncView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADMIN_FUNC_VIEW:
        return isSetAdminFuncView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFunc_args)
        return this.equals((saveFunc_args)that);
      return false;
    }

    public boolean equals(saveFunc_args that) {
      if (that == null)
        return false;

      boolean this_present_adminFuncView = true && this.isSetAdminFuncView();
      boolean that_present_adminFuncView = true && that.isSetAdminFuncView();
      if (this_present_adminFuncView || that_present_adminFuncView) {
        if (!(this_present_adminFuncView && that_present_adminFuncView))
          return false;
        if (!this.adminFuncView.equals(that.adminFuncView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFunc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFunc_args typedOther = (saveFunc_args)other;

      lastComparison = Boolean.valueOf(isSetAdminFuncView()).compareTo(typedOther.isSetAdminFuncView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminFuncView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminFuncView, typedOther.adminFuncView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFunc_args(");
      boolean first = true;

      sb.append("adminFuncView:");
      if (this.adminFuncView == null) {
        sb.append("null");
      } else {
        sb.append(this.adminFuncView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (adminFuncView != null) {
        adminFuncView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFunc_argsStandardSchemeFactory implements SchemeFactory {
      public saveFunc_argsStandardScheme getScheme() {
        return new saveFunc_argsStandardScheme();
      }
    }

    private static class saveFunc_argsStandardScheme extends StandardScheme<saveFunc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFunc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADMIN_FUNC_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adminFuncView = new one.show.manage.thrift.view.AdminFuncView();
                struct.adminFuncView.read(iprot);
                struct.setAdminFuncViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFunc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adminFuncView != null) {
          oprot.writeFieldBegin(ADMIN_FUNC_VIEW_FIELD_DESC);
          struct.adminFuncView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFunc_argsTupleSchemeFactory implements SchemeFactory {
      public saveFunc_argsTupleScheme getScheme() {
        return new saveFunc_argsTupleScheme();
      }
    }

    private static class saveFunc_argsTupleScheme extends TupleScheme<saveFunc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFunc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdminFuncView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdminFuncView()) {
          struct.adminFuncView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFunc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adminFuncView = new one.show.manage.thrift.view.AdminFuncView();
          struct.adminFuncView.read(iprot);
          struct.setAdminFuncViewIsSet(true);
        }
      }
    }

  }

  public static class saveFunc_result implements org.apache.thrift.TBase<saveFunc_result, saveFunc_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFunc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFunc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFunc_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFunc_result.class, metaDataMap);
    }

    public saveFunc_result() {
    }

    public saveFunc_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFunc_result(saveFunc_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public saveFunc_result deepCopy() {
      return new saveFunc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public saveFunc_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFunc_result)
        return this.equals((saveFunc_result)that);
      return false;
    }

    public boolean equals(saveFunc_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFunc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFunc_result typedOther = (saveFunc_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFunc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFunc_resultStandardSchemeFactory implements SchemeFactory {
      public saveFunc_resultStandardScheme getScheme() {
        return new saveFunc_resultStandardScheme();
      }
    }

    private static class saveFunc_resultStandardScheme extends StandardScheme<saveFunc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFunc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFunc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFunc_resultTupleSchemeFactory implements SchemeFactory {
      public saveFunc_resultTupleScheme getScheme() {
        return new saveFunc_resultTupleScheme();
      }
    }

    private static class saveFunc_resultTupleScheme extends TupleScheme<saveFunc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFunc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFunc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFunc_args implements org.apache.thrift.TBase<updateFunc_args, updateFunc_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFunc_args");

    private static final org.apache.thrift.protocol.TField ADMIN_FUNC_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("adminFuncView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFunc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFunc_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminFuncView adminFuncView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADMIN_FUNC_VIEW((short)1, "adminFuncView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADMIN_FUNC_VIEW
            return ADMIN_FUNC_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADMIN_FUNC_VIEW, new org.apache.thrift.meta_data.FieldMetaData("adminFuncView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminFuncView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFunc_args.class, metaDataMap);
    }

    public updateFunc_args() {
    }

    public updateFunc_args(
      one.show.manage.thrift.view.AdminFuncView adminFuncView)
    {
      this();
      this.adminFuncView = adminFuncView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFunc_args(updateFunc_args other) {
      if (other.isSetAdminFuncView()) {
        this.adminFuncView = new one.show.manage.thrift.view.AdminFuncView(other.adminFuncView);
      }
    }

    public updateFunc_args deepCopy() {
      return new updateFunc_args(this);
    }

    @Override
    public void clear() {
      this.adminFuncView = null;
    }

    public one.show.manage.thrift.view.AdminFuncView getAdminFuncView() {
      return this.adminFuncView;
    }

    public updateFunc_args setAdminFuncView(one.show.manage.thrift.view.AdminFuncView adminFuncView) {
      this.adminFuncView = adminFuncView;
      return this;
    }

    public void unsetAdminFuncView() {
      this.adminFuncView = null;
    }

    /** Returns true if field adminFuncView is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminFuncView() {
      return this.adminFuncView != null;
    }

    public void setAdminFuncViewIsSet(boolean value) {
      if (!value) {
        this.adminFuncView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADMIN_FUNC_VIEW:
        if (value == null) {
          unsetAdminFuncView();
        } else {
          setAdminFuncView((one.show.manage.thrift.view.AdminFuncView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADMIN_FUNC_VIEW:
        return getAdminFuncView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADMIN_FUNC_VIEW:
        return isSetAdminFuncView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFunc_args)
        return this.equals((updateFunc_args)that);
      return false;
    }

    public boolean equals(updateFunc_args that) {
      if (that == null)
        return false;

      boolean this_present_adminFuncView = true && this.isSetAdminFuncView();
      boolean that_present_adminFuncView = true && that.isSetAdminFuncView();
      if (this_present_adminFuncView || that_present_adminFuncView) {
        if (!(this_present_adminFuncView && that_present_adminFuncView))
          return false;
        if (!this.adminFuncView.equals(that.adminFuncView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFunc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFunc_args typedOther = (updateFunc_args)other;

      lastComparison = Boolean.valueOf(isSetAdminFuncView()).compareTo(typedOther.isSetAdminFuncView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminFuncView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminFuncView, typedOther.adminFuncView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFunc_args(");
      boolean first = true;

      sb.append("adminFuncView:");
      if (this.adminFuncView == null) {
        sb.append("null");
      } else {
        sb.append(this.adminFuncView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (adminFuncView != null) {
        adminFuncView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFunc_argsStandardSchemeFactory implements SchemeFactory {
      public updateFunc_argsStandardScheme getScheme() {
        return new updateFunc_argsStandardScheme();
      }
    }

    private static class updateFunc_argsStandardScheme extends StandardScheme<updateFunc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFunc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADMIN_FUNC_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adminFuncView = new one.show.manage.thrift.view.AdminFuncView();
                struct.adminFuncView.read(iprot);
                struct.setAdminFuncViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFunc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adminFuncView != null) {
          oprot.writeFieldBegin(ADMIN_FUNC_VIEW_FIELD_DESC);
          struct.adminFuncView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFunc_argsTupleSchemeFactory implements SchemeFactory {
      public updateFunc_argsTupleScheme getScheme() {
        return new updateFunc_argsTupleScheme();
      }
    }

    private static class updateFunc_argsTupleScheme extends TupleScheme<updateFunc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFunc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdminFuncView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdminFuncView()) {
          struct.adminFuncView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFunc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adminFuncView = new one.show.manage.thrift.view.AdminFuncView();
          struct.adminFuncView.read(iprot);
          struct.setAdminFuncViewIsSet(true);
        }
      }
    }

  }

  public static class updateFunc_result implements org.apache.thrift.TBase<updateFunc_result, updateFunc_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFunc_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFunc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFunc_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFunc_result.class, metaDataMap);
    }

    public updateFunc_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFunc_result(updateFunc_result other) {
    }

    public updateFunc_result deepCopy() {
      return new updateFunc_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFunc_result)
        return this.equals((updateFunc_result)that);
      return false;
    }

    public boolean equals(updateFunc_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFunc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFunc_result typedOther = (updateFunc_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFunc_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFunc_resultStandardSchemeFactory implements SchemeFactory {
      public updateFunc_resultStandardScheme getScheme() {
        return new updateFunc_resultStandardScheme();
      }
    }

    private static class updateFunc_resultStandardScheme extends StandardScheme<updateFunc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFunc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFunc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFunc_resultTupleSchemeFactory implements SchemeFactory {
      public updateFunc_resultTupleScheme getScheme() {
        return new updateFunc_resultTupleScheme();
      }
    }

    private static class updateFunc_resultTupleScheme extends TupleScheme<updateFunc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFunc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFunc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteFunc_args implements org.apache.thrift.TBase<deleteFunc_args, deleteFunc_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFunc_args");

    private static final org.apache.thrift.protocol.TField FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("funcId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFunc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFunc_argsTupleSchemeFactory());
    }

    public String funcId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUNC_ID((short)1, "funcId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUNC_ID
            return FUNC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("funcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFunc_args.class, metaDataMap);
    }

    public deleteFunc_args() {
    }

    public deleteFunc_args(
      String funcId)
    {
      this();
      this.funcId = funcId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFunc_args(deleteFunc_args other) {
      if (other.isSetFuncId()) {
        this.funcId = other.funcId;
      }
    }

    public deleteFunc_args deepCopy() {
      return new deleteFunc_args(this);
    }

    @Override
    public void clear() {
      this.funcId = null;
    }

    public String getFuncId() {
      return this.funcId;
    }

    public deleteFunc_args setFuncId(String funcId) {
      this.funcId = funcId;
      return this;
    }

    public void unsetFuncId() {
      this.funcId = null;
    }

    /** Returns true if field funcId is set (has been assigned a value) and false otherwise */
    public boolean isSetFuncId() {
      return this.funcId != null;
    }

    public void setFuncIdIsSet(boolean value) {
      if (!value) {
        this.funcId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUNC_ID:
        if (value == null) {
          unsetFuncId();
        } else {
          setFuncId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUNC_ID:
        return getFuncId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUNC_ID:
        return isSetFuncId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFunc_args)
        return this.equals((deleteFunc_args)that);
      return false;
    }

    public boolean equals(deleteFunc_args that) {
      if (that == null)
        return false;

      boolean this_present_funcId = true && this.isSetFuncId();
      boolean that_present_funcId = true && that.isSetFuncId();
      if (this_present_funcId || that_present_funcId) {
        if (!(this_present_funcId && that_present_funcId))
          return false;
        if (!this.funcId.equals(that.funcId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteFunc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteFunc_args typedOther = (deleteFunc_args)other;

      lastComparison = Boolean.valueOf(isSetFuncId()).compareTo(typedOther.isSetFuncId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFuncId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcId, typedOther.funcId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFunc_args(");
      boolean first = true;

      sb.append("funcId:");
      if (this.funcId == null) {
        sb.append("null");
      } else {
        sb.append(this.funcId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFunc_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFunc_argsStandardScheme getScheme() {
        return new deleteFunc_argsStandardScheme();
      }
    }

    private static class deleteFunc_argsStandardScheme extends StandardScheme<deleteFunc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFunc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUNC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.funcId = iprot.readString();
                struct.setFuncIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFunc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.funcId != null) {
          oprot.writeFieldBegin(FUNC_ID_FIELD_DESC);
          oprot.writeString(struct.funcId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFunc_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFunc_argsTupleScheme getScheme() {
        return new deleteFunc_argsTupleScheme();
      }
    }

    private static class deleteFunc_argsTupleScheme extends TupleScheme<deleteFunc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFunc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFuncId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFuncId()) {
          oprot.writeString(struct.funcId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFunc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.funcId = iprot.readString();
          struct.setFuncIdIsSet(true);
        }
      }
    }

  }

  public static class deleteFunc_result implements org.apache.thrift.TBase<deleteFunc_result, deleteFunc_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFunc_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFunc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFunc_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFunc_result.class, metaDataMap);
    }

    public deleteFunc_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFunc_result(deleteFunc_result other) {
    }

    public deleteFunc_result deepCopy() {
      return new deleteFunc_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFunc_result)
        return this.equals((deleteFunc_result)that);
      return false;
    }

    public boolean equals(deleteFunc_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteFunc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteFunc_result typedOther = (deleteFunc_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFunc_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFunc_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFunc_resultStandardScheme getScheme() {
        return new deleteFunc_resultStandardScheme();
      }
    }

    private static class deleteFunc_resultStandardScheme extends StandardScheme<deleteFunc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFunc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFunc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFunc_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFunc_resultTupleScheme getScheme() {
        return new deleteFunc_resultTupleScheme();
      }
    }

    private static class deleteFunc_resultTupleScheme extends TupleScheme<deleteFunc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFunc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFunc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findUser_args implements org.apache.thrift.TBase<findUser_args, findUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUser_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUser_args.class, metaDataMap);
    }

    public findUser_args() {
    }

    public findUser_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUser_args(findUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public findUser_args deepCopy() {
      return new findUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public findUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUser_args)
        return this.equals((findUser_args)that);
      return false;
    }

    public boolean equals(findUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUser_args typedOther = (findUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUser_argsStandardSchemeFactory implements SchemeFactory {
      public findUser_argsStandardScheme getScheme() {
        return new findUser_argsStandardScheme();
      }
    }

    private static class findUser_argsStandardScheme extends StandardScheme<findUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUser_argsTupleSchemeFactory implements SchemeFactory {
      public findUser_argsTupleScheme getScheme() {
        return new findUser_argsTupleScheme();
      }
    }

    private static class findUser_argsTupleScheme extends TupleScheme<findUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class findUser_result implements org.apache.thrift.TBase<findUser_result, findUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUser_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminUserView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminUserView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUser_result.class, metaDataMap);
    }

    public findUser_result() {
    }

    public findUser_result(
      one.show.manage.thrift.view.AdminUserView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUser_result(findUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.AdminUserView(other.success);
      }
    }

    public findUser_result deepCopy() {
      return new findUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.AdminUserView getSuccess() {
      return this.success;
    }

    public findUser_result setSuccess(one.show.manage.thrift.view.AdminUserView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.AdminUserView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUser_result)
        return this.equals((findUser_result)that);
      return false;
    }

    public boolean equals(findUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUser_result typedOther = (findUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUser_resultStandardSchemeFactory implements SchemeFactory {
      public findUser_resultStandardScheme getScheme() {
        return new findUser_resultStandardScheme();
      }
    }

    private static class findUser_resultStandardScheme extends StandardScheme<findUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.AdminUserView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUser_resultTupleSchemeFactory implements SchemeFactory {
      public findUser_resultTupleScheme getScheme() {
        return new findUser_resultTupleScheme();
      }
    }

    private static class findUser_resultTupleScheme extends TupleScheme<findUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.AdminUserView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findUserRole_args implements org.apache.thrift.TBase<findUserRole_args, findUserRole_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserRole_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserRole_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserRole_args.class, metaDataMap);
    }

    public findUserRole_args() {
    }

    public findUserRole_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserRole_args(findUserRole_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public findUserRole_args deepCopy() {
      return new findUserRole_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public findUserRole_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserRole_args)
        return this.equals((findUserRole_args)that);
      return false;
    }

    public boolean equals(findUserRole_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserRole_args typedOther = (findUserRole_args)other;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserRole_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserRole_argsStandardSchemeFactory implements SchemeFactory {
      public findUserRole_argsStandardScheme getScheme() {
        return new findUserRole_argsStandardScheme();
      }
    }

    private static class findUserRole_argsStandardScheme extends StandardScheme<findUserRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserRole_argsTupleSchemeFactory implements SchemeFactory {
      public findUserRole_argsTupleScheme getScheme() {
        return new findUserRole_argsTupleScheme();
      }
    }

    private static class findUserRole_argsTupleScheme extends TupleScheme<findUserRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class findUserRole_result implements org.apache.thrift.TBase<findUserRole_result, findUserRole_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserRole_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.AdminUserRoleView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminUserRoleView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserRole_result.class, metaDataMap);
    }

    public findUserRole_result() {
    }

    public findUserRole_result(
      List<one.show.manage.thrift.view.AdminUserRoleView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserRole_result(findUserRole_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.AdminUserRoleView> __this__success = new ArrayList<one.show.manage.thrift.view.AdminUserRoleView>();
        for (one.show.manage.thrift.view.AdminUserRoleView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.AdminUserRoleView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findUserRole_result deepCopy() {
      return new findUserRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.AdminUserRoleView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.AdminUserRoleView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.AdminUserRoleView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.AdminUserRoleView> getSuccess() {
      return this.success;
    }

    public findUserRole_result setSuccess(List<one.show.manage.thrift.view.AdminUserRoleView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.AdminUserRoleView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserRole_result)
        return this.equals((findUserRole_result)that);
      return false;
    }

    public boolean equals(findUserRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserRole_result typedOther = (findUserRole_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserRole_resultStandardSchemeFactory implements SchemeFactory {
      public findUserRole_resultStandardScheme getScheme() {
        return new findUserRole_resultStandardScheme();
      }
    }

    private static class findUserRole_resultStandardScheme extends StandardScheme<findUserRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.AdminUserRoleView>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    one.show.manage.thrift.view.AdminUserRoleView _elem10; // required
                    _elem10 = new one.show.manage.thrift.view.AdminUserRoleView();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.AdminUserRoleView _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserRole_resultTupleSchemeFactory implements SchemeFactory {
      public findUserRole_resultTupleScheme getScheme() {
        return new findUserRole_resultTupleScheme();
      }
    }

    private static class findUserRole_resultTupleScheme extends TupleScheme<findUserRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.AdminUserRoleView _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.AdminUserRoleView>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              one.show.manage.thrift.view.AdminUserRoleView _elem15; // required
              _elem15 = new one.show.manage.thrift.view.AdminUserRoleView();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findRoleById_args implements org.apache.thrift.TBase<findRoleById_args, findRoleById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleById_args");

    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRoleById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRoleById_argsTupleSchemeFactory());
    }

    public int roleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_ID((short)1, "roleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_ID
            return ROLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleById_args.class, metaDataMap);
    }

    public findRoleById_args() {
    }

    public findRoleById_args(
      int roleId)
    {
      this();
      this.roleId = roleId;
      setRoleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleById_args(findRoleById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleId = other.roleId;
    }

    public findRoleById_args deepCopy() {
      return new findRoleById_args(this);
    }

    @Override
    public void clear() {
      setRoleIdIsSet(false);
      this.roleId = 0;
    }

    public int getRoleId() {
      return this.roleId;
    }

    public findRoleById_args setRoleId(int roleId) {
      this.roleId = roleId;
      setRoleIdIsSet(true);
      return this;
    }

    public void unsetRoleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_ID:
        return Integer.valueOf(getRoleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLE_ID:
        return isSetRoleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleById_args)
        return this.equals((findRoleById_args)that);
      return false;
    }

    public boolean equals(findRoleById_args that) {
      if (that == null)
        return false;

      boolean this_present_roleId = true;
      boolean that_present_roleId = true;
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (this.roleId != that.roleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRoleById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRoleById_args typedOther = (findRoleById_args)other;

      lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(typedOther.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, typedOther.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRoleById_args(");
      boolean first = true;

      sb.append("roleId:");
      sb.append(this.roleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleById_argsStandardSchemeFactory implements SchemeFactory {
      public findRoleById_argsStandardScheme getScheme() {
        return new findRoleById_argsStandardScheme();
      }
    }

    private static class findRoleById_argsStandardScheme extends StandardScheme<findRoleById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roleId = iprot.readI32();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeI32(struct.roleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleById_argsTupleSchemeFactory implements SchemeFactory {
      public findRoleById_argsTupleScheme getScheme() {
        return new findRoleById_argsTupleScheme();
      }
    }

    private static class findRoleById_argsTupleScheme extends TupleScheme<findRoleById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleId()) {
          oprot.writeI32(struct.roleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleId = iprot.readI32();
          struct.setRoleIdIsSet(true);
        }
      }
    }

  }

  public static class findRoleById_result implements org.apache.thrift.TBase<findRoleById_result, findRoleById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRoleById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRoleById_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminRoleView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminRoleView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleById_result.class, metaDataMap);
    }

    public findRoleById_result() {
    }

    public findRoleById_result(
      one.show.manage.thrift.view.AdminRoleView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleById_result(findRoleById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.AdminRoleView(other.success);
      }
    }

    public findRoleById_result deepCopy() {
      return new findRoleById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.AdminRoleView getSuccess() {
      return this.success;
    }

    public findRoleById_result setSuccess(one.show.manage.thrift.view.AdminRoleView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.AdminRoleView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleById_result)
        return this.equals((findRoleById_result)that);
      return false;
    }

    public boolean equals(findRoleById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRoleById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRoleById_result typedOther = (findRoleById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRoleById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleById_resultStandardSchemeFactory implements SchemeFactory {
      public findRoleById_resultStandardScheme getScheme() {
        return new findRoleById_resultStandardScheme();
      }
    }

    private static class findRoleById_resultStandardScheme extends StandardScheme<findRoleById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.AdminRoleView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleById_resultTupleSchemeFactory implements SchemeFactory {
      public findRoleById_resultTupleScheme getScheme() {
        return new findRoleById_resultTupleScheme();
      }
    }

    private static class findRoleById_resultTupleScheme extends TupleScheme<findRoleById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.AdminRoleView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findFuncListByRoleId_args implements org.apache.thrift.TBase<findFuncListByRoleId_args, findFuncListByRoleId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFuncListByRoleId_args");

    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFuncListByRoleId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFuncListByRoleId_argsTupleSchemeFactory());
    }

    public int roleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_ID((short)1, "roleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_ID
            return ROLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFuncListByRoleId_args.class, metaDataMap);
    }

    public findFuncListByRoleId_args() {
    }

    public findFuncListByRoleId_args(
      int roleId)
    {
      this();
      this.roleId = roleId;
      setRoleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFuncListByRoleId_args(findFuncListByRoleId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleId = other.roleId;
    }

    public findFuncListByRoleId_args deepCopy() {
      return new findFuncListByRoleId_args(this);
    }

    @Override
    public void clear() {
      setRoleIdIsSet(false);
      this.roleId = 0;
    }

    public int getRoleId() {
      return this.roleId;
    }

    public findFuncListByRoleId_args setRoleId(int roleId) {
      this.roleId = roleId;
      setRoleIdIsSet(true);
      return this;
    }

    public void unsetRoleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_ID:
        return Integer.valueOf(getRoleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLE_ID:
        return isSetRoleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFuncListByRoleId_args)
        return this.equals((findFuncListByRoleId_args)that);
      return false;
    }

    public boolean equals(findFuncListByRoleId_args that) {
      if (that == null)
        return false;

      boolean this_present_roleId = true;
      boolean that_present_roleId = true;
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (this.roleId != that.roleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFuncListByRoleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFuncListByRoleId_args typedOther = (findFuncListByRoleId_args)other;

      lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(typedOther.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, typedOther.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFuncListByRoleId_args(");
      boolean first = true;

      sb.append("roleId:");
      sb.append(this.roleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFuncListByRoleId_argsStandardSchemeFactory implements SchemeFactory {
      public findFuncListByRoleId_argsStandardScheme getScheme() {
        return new findFuncListByRoleId_argsStandardScheme();
      }
    }

    private static class findFuncListByRoleId_argsStandardScheme extends StandardScheme<findFuncListByRoleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFuncListByRoleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roleId = iprot.readI32();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFuncListByRoleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeI32(struct.roleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFuncListByRoleId_argsTupleSchemeFactory implements SchemeFactory {
      public findFuncListByRoleId_argsTupleScheme getScheme() {
        return new findFuncListByRoleId_argsTupleScheme();
      }
    }

    private static class findFuncListByRoleId_argsTupleScheme extends TupleScheme<findFuncListByRoleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFuncListByRoleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleId()) {
          oprot.writeI32(struct.roleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFuncListByRoleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleId = iprot.readI32();
          struct.setRoleIdIsSet(true);
        }
      }
    }

  }

  public static class findFuncListByRoleId_result implements org.apache.thrift.TBase<findFuncListByRoleId_result, findFuncListByRoleId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFuncListByRoleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFuncListByRoleId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFuncListByRoleId_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.AdminRoleFuncView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminRoleFuncView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFuncListByRoleId_result.class, metaDataMap);
    }

    public findFuncListByRoleId_result() {
    }

    public findFuncListByRoleId_result(
      List<one.show.manage.thrift.view.AdminRoleFuncView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFuncListByRoleId_result(findFuncListByRoleId_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.AdminRoleFuncView> __this__success = new ArrayList<one.show.manage.thrift.view.AdminRoleFuncView>();
        for (one.show.manage.thrift.view.AdminRoleFuncView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.AdminRoleFuncView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findFuncListByRoleId_result deepCopy() {
      return new findFuncListByRoleId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.AdminRoleFuncView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.AdminRoleFuncView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.AdminRoleFuncView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.AdminRoleFuncView> getSuccess() {
      return this.success;
    }

    public findFuncListByRoleId_result setSuccess(List<one.show.manage.thrift.view.AdminRoleFuncView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.AdminRoleFuncView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFuncListByRoleId_result)
        return this.equals((findFuncListByRoleId_result)that);
      return false;
    }

    public boolean equals(findFuncListByRoleId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFuncListByRoleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFuncListByRoleId_result typedOther = (findFuncListByRoleId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFuncListByRoleId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFuncListByRoleId_resultStandardSchemeFactory implements SchemeFactory {
      public findFuncListByRoleId_resultStandardScheme getScheme() {
        return new findFuncListByRoleId_resultStandardScheme();
      }
    }

    private static class findFuncListByRoleId_resultStandardScheme extends StandardScheme<findFuncListByRoleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFuncListByRoleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.AdminRoleFuncView>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    one.show.manage.thrift.view.AdminRoleFuncView _elem18; // required
                    _elem18 = new one.show.manage.thrift.view.AdminRoleFuncView();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFuncListByRoleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.AdminRoleFuncView _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFuncListByRoleId_resultTupleSchemeFactory implements SchemeFactory {
      public findFuncListByRoleId_resultTupleScheme getScheme() {
        return new findFuncListByRoleId_resultTupleScheme();
      }
    }

    private static class findFuncListByRoleId_resultTupleScheme extends TupleScheme<findFuncListByRoleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFuncListByRoleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.AdminRoleFuncView _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFuncListByRoleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.AdminRoleFuncView>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              one.show.manage.thrift.view.AdminRoleFuncView _elem23; // required
              _elem23 = new one.show.manage.thrift.view.AdminRoleFuncView();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findRoleList_args implements org.apache.thrift.TBase<findRoleList_args, findRoleList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleList_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRoleList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRoleList_argsTupleSchemeFactory());
    }

    public int status; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleList_args.class, metaDataMap);
    }

    public findRoleList_args() {
    }

    public findRoleList_args(
      int status,
      int start,
      int count)
    {
      this();
      this.status = status;
      setStatusIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleList_args(findRoleList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.status = other.status;
      this.start = other.start;
      this.count = other.count;
    }

    public findRoleList_args deepCopy() {
      return new findRoleList_args(this);
    }

    @Override
    public void clear() {
      setStatusIsSet(false);
      this.status = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getStatus() {
      return this.status;
    }

    public findRoleList_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findRoleList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findRoleList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return Integer.valueOf(getStatus());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleList_args)
        return this.equals((findRoleList_args)that);
      return false;
    }

    public boolean equals(findRoleList_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRoleList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRoleList_args typedOther = (findRoleList_args)other;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRoleList_args(");
      boolean first = true;

      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleList_argsStandardSchemeFactory implements SchemeFactory {
      public findRoleList_argsStandardScheme getScheme() {
        return new findRoleList_argsStandardScheme();
      }
    }

    private static class findRoleList_argsStandardScheme extends StandardScheme<findRoleList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleList_argsTupleSchemeFactory implements SchemeFactory {
      public findRoleList_argsTupleScheme getScheme() {
        return new findRoleList_argsTupleScheme();
      }
    }

    private static class findRoleList_argsTupleScheme extends TupleScheme<findRoleList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findRoleList_result implements org.apache.thrift.TBase<findRoleList_result, findRoleList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRoleList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRoleList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRoleList_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminRoleListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminRoleListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRoleList_result.class, metaDataMap);
    }

    public findRoleList_result() {
    }

    public findRoleList_result(
      one.show.manage.thrift.view.AdminRoleListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRoleList_result(findRoleList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.AdminRoleListView(other.success);
      }
    }

    public findRoleList_result deepCopy() {
      return new findRoleList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.AdminRoleListView getSuccess() {
      return this.success;
    }

    public findRoleList_result setSuccess(one.show.manage.thrift.view.AdminRoleListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.AdminRoleListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRoleList_result)
        return this.equals((findRoleList_result)that);
      return false;
    }

    public boolean equals(findRoleList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRoleList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRoleList_result typedOther = (findRoleList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRoleList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRoleList_resultStandardSchemeFactory implements SchemeFactory {
      public findRoleList_resultStandardScheme getScheme() {
        return new findRoleList_resultStandardScheme();
      }
    }

    private static class findRoleList_resultStandardScheme extends StandardScheme<findRoleList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRoleList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.AdminRoleListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRoleList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRoleList_resultTupleSchemeFactory implements SchemeFactory {
      public findRoleList_resultTupleScheme getScheme() {
        return new findRoleList_resultTupleScheme();
      }
    }

    private static class findRoleList_resultTupleScheme extends TupleScheme<findRoleList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRoleList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRoleList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.AdminRoleListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveUser_args implements org.apache.thrift.TBase<saveUser_args, saveUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUser_args");

    private static final org.apache.thrift.protocol.TField ADMIN_USER_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("adminUserView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUser_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminUserView adminUserView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADMIN_USER_VIEW((short)1, "adminUserView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADMIN_USER_VIEW
            return ADMIN_USER_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADMIN_USER_VIEW, new org.apache.thrift.meta_data.FieldMetaData("adminUserView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminUserView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUser_args.class, metaDataMap);
    }

    public saveUser_args() {
    }

    public saveUser_args(
      one.show.manage.thrift.view.AdminUserView adminUserView)
    {
      this();
      this.adminUserView = adminUserView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUser_args(saveUser_args other) {
      if (other.isSetAdminUserView()) {
        this.adminUserView = new one.show.manage.thrift.view.AdminUserView(other.adminUserView);
      }
    }

    public saveUser_args deepCopy() {
      return new saveUser_args(this);
    }

    @Override
    public void clear() {
      this.adminUserView = null;
    }

    public one.show.manage.thrift.view.AdminUserView getAdminUserView() {
      return this.adminUserView;
    }

    public saveUser_args setAdminUserView(one.show.manage.thrift.view.AdminUserView adminUserView) {
      this.adminUserView = adminUserView;
      return this;
    }

    public void unsetAdminUserView() {
      this.adminUserView = null;
    }

    /** Returns true if field adminUserView is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminUserView() {
      return this.adminUserView != null;
    }

    public void setAdminUserViewIsSet(boolean value) {
      if (!value) {
        this.adminUserView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADMIN_USER_VIEW:
        if (value == null) {
          unsetAdminUserView();
        } else {
          setAdminUserView((one.show.manage.thrift.view.AdminUserView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADMIN_USER_VIEW:
        return getAdminUserView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADMIN_USER_VIEW:
        return isSetAdminUserView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUser_args)
        return this.equals((saveUser_args)that);
      return false;
    }

    public boolean equals(saveUser_args that) {
      if (that == null)
        return false;

      boolean this_present_adminUserView = true && this.isSetAdminUserView();
      boolean that_present_adminUserView = true && that.isSetAdminUserView();
      if (this_present_adminUserView || that_present_adminUserView) {
        if (!(this_present_adminUserView && that_present_adminUserView))
          return false;
        if (!this.adminUserView.equals(that.adminUserView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveUser_args typedOther = (saveUser_args)other;

      lastComparison = Boolean.valueOf(isSetAdminUserView()).compareTo(typedOther.isSetAdminUserView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminUserView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminUserView, typedOther.adminUserView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUser_args(");
      boolean first = true;

      sb.append("adminUserView:");
      if (this.adminUserView == null) {
        sb.append("null");
      } else {
        sb.append(this.adminUserView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (adminUserView != null) {
        adminUserView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUser_argsStandardSchemeFactory implements SchemeFactory {
      public saveUser_argsStandardScheme getScheme() {
        return new saveUser_argsStandardScheme();
      }
    }

    private static class saveUser_argsStandardScheme extends StandardScheme<saveUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADMIN_USER_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adminUserView = new one.show.manage.thrift.view.AdminUserView();
                struct.adminUserView.read(iprot);
                struct.setAdminUserViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adminUserView != null) {
          oprot.writeFieldBegin(ADMIN_USER_VIEW_FIELD_DESC);
          struct.adminUserView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUser_argsTupleSchemeFactory implements SchemeFactory {
      public saveUser_argsTupleScheme getScheme() {
        return new saveUser_argsTupleScheme();
      }
    }

    private static class saveUser_argsTupleScheme extends TupleScheme<saveUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdminUserView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdminUserView()) {
          struct.adminUserView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adminUserView = new one.show.manage.thrift.view.AdminUserView();
          struct.adminUserView.read(iprot);
          struct.setAdminUserViewIsSet(true);
        }
      }
    }

  }

  public static class saveUser_result implements org.apache.thrift.TBase<saveUser_result, saveUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUser_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUser_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUser_result.class, metaDataMap);
    }

    public saveUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUser_result(saveUser_result other) {
    }

    public saveUser_result deepCopy() {
      return new saveUser_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUser_result)
        return this.equals((saveUser_result)that);
      return false;
    }

    public boolean equals(saveUser_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveUser_result typedOther = (saveUser_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUser_resultStandardSchemeFactory implements SchemeFactory {
      public saveUser_resultStandardScheme getScheme() {
        return new saveUser_resultStandardScheme();
      }
    }

    private static class saveUser_resultStandardScheme extends StandardScheme<saveUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUser_resultTupleSchemeFactory implements SchemeFactory {
      public saveUser_resultTupleScheme getScheme() {
        return new saveUser_resultTupleScheme();
      }
    }

    private static class saveUser_resultTupleScheme extends TupleScheme<saveUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateUser_args implements org.apache.thrift.TBase<updateUser_args, updateUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUser_args");

    private static final org.apache.thrift.protocol.TField ADMIN_USER_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("adminUserView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUser_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminUserView adminUserView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADMIN_USER_VIEW((short)1, "adminUserView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADMIN_USER_VIEW
            return ADMIN_USER_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADMIN_USER_VIEW, new org.apache.thrift.meta_data.FieldMetaData("adminUserView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminUserView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUser_args.class, metaDataMap);
    }

    public updateUser_args() {
    }

    public updateUser_args(
      one.show.manage.thrift.view.AdminUserView adminUserView)
    {
      this();
      this.adminUserView = adminUserView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUser_args(updateUser_args other) {
      if (other.isSetAdminUserView()) {
        this.adminUserView = new one.show.manage.thrift.view.AdminUserView(other.adminUserView);
      }
    }

    public updateUser_args deepCopy() {
      return new updateUser_args(this);
    }

    @Override
    public void clear() {
      this.adminUserView = null;
    }

    public one.show.manage.thrift.view.AdminUserView getAdminUserView() {
      return this.adminUserView;
    }

    public updateUser_args setAdminUserView(one.show.manage.thrift.view.AdminUserView adminUserView) {
      this.adminUserView = adminUserView;
      return this;
    }

    public void unsetAdminUserView() {
      this.adminUserView = null;
    }

    /** Returns true if field adminUserView is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminUserView() {
      return this.adminUserView != null;
    }

    public void setAdminUserViewIsSet(boolean value) {
      if (!value) {
        this.adminUserView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADMIN_USER_VIEW:
        if (value == null) {
          unsetAdminUserView();
        } else {
          setAdminUserView((one.show.manage.thrift.view.AdminUserView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADMIN_USER_VIEW:
        return getAdminUserView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADMIN_USER_VIEW:
        return isSetAdminUserView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUser_args)
        return this.equals((updateUser_args)that);
      return false;
    }

    public boolean equals(updateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_adminUserView = true && this.isSetAdminUserView();
      boolean that_present_adminUserView = true && that.isSetAdminUserView();
      if (this_present_adminUserView || that_present_adminUserView) {
        if (!(this_present_adminUserView && that_present_adminUserView))
          return false;
        if (!this.adminUserView.equals(that.adminUserView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUser_args typedOther = (updateUser_args)other;

      lastComparison = Boolean.valueOf(isSetAdminUserView()).compareTo(typedOther.isSetAdminUserView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminUserView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminUserView, typedOther.adminUserView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUser_args(");
      boolean first = true;

      sb.append("adminUserView:");
      if (this.adminUserView == null) {
        sb.append("null");
      } else {
        sb.append(this.adminUserView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (adminUserView != null) {
        adminUserView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUser_argsStandardSchemeFactory implements SchemeFactory {
      public updateUser_argsStandardScheme getScheme() {
        return new updateUser_argsStandardScheme();
      }
    }

    private static class updateUser_argsStandardScheme extends StandardScheme<updateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADMIN_USER_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adminUserView = new one.show.manage.thrift.view.AdminUserView();
                struct.adminUserView.read(iprot);
                struct.setAdminUserViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adminUserView != null) {
          oprot.writeFieldBegin(ADMIN_USER_VIEW_FIELD_DESC);
          struct.adminUserView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUser_argsTupleSchemeFactory implements SchemeFactory {
      public updateUser_argsTupleScheme getScheme() {
        return new updateUser_argsTupleScheme();
      }
    }

    private static class updateUser_argsTupleScheme extends TupleScheme<updateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdminUserView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdminUserView()) {
          struct.adminUserView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adminUserView = new one.show.manage.thrift.view.AdminUserView();
          struct.adminUserView.read(iprot);
          struct.setAdminUserViewIsSet(true);
        }
      }
    }

  }

  public static class updateUser_result implements org.apache.thrift.TBase<updateUser_result, updateUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUser_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUser_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUser_result.class, metaDataMap);
    }

    public updateUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUser_result(updateUser_result other) {
    }

    public updateUser_result deepCopy() {
      return new updateUser_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUser_result)
        return this.equals((updateUser_result)that);
      return false;
    }

    public boolean equals(updateUser_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUser_result typedOther = (updateUser_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUser_resultStandardSchemeFactory implements SchemeFactory {
      public updateUser_resultStandardScheme getScheme() {
        return new updateUser_resultStandardScheme();
      }
    }

    private static class updateUser_resultStandardScheme extends StandardScheme<updateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUser_resultTupleSchemeFactory implements SchemeFactory {
      public updateUser_resultTupleScheme getScheme() {
        return new updateUser_resultTupleScheme();
      }
    }

    private static class updateUser_resultTupleScheme extends TupleScheme<updateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteUser_args implements org.apache.thrift.TBase<deleteUser_args, deleteUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUser_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_args.class, metaDataMap);
    }

    public deleteUser_args() {
    }

    public deleteUser_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUser_args(deleteUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public deleteUser_args deepCopy() {
      return new deleteUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public deleteUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUser_args)
        return this.equals((deleteUser_args)that);
      return false;
    }

    public boolean equals(deleteUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteUser_args typedOther = (deleteUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUser_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUser_argsStandardScheme getScheme() {
        return new deleteUser_argsStandardScheme();
      }
    }

    private static class deleteUser_argsStandardScheme extends StandardScheme<deleteUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUser_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUser_argsTupleScheme getScheme() {
        return new deleteUser_argsTupleScheme();
      }
    }

    private static class deleteUser_argsTupleScheme extends TupleScheme<deleteUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class deleteUser_result implements org.apache.thrift.TBase<deleteUser_result, deleteUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUser_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUser_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUser_result.class, metaDataMap);
    }

    public deleteUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUser_result(deleteUser_result other) {
    }

    public deleteUser_result deepCopy() {
      return new deleteUser_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUser_result)
        return this.equals((deleteUser_result)that);
      return false;
    }

    public boolean equals(deleteUser_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteUser_result typedOther = (deleteUser_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUser_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUser_resultStandardScheme getScheme() {
        return new deleteUser_resultStandardScheme();
      }
    }

    private static class deleteUser_resultStandardScheme extends StandardScheme<deleteUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUser_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUser_resultTupleScheme getScheme() {
        return new deleteUser_resultTupleScheme();
      }
    }

    private static class deleteUser_resultTupleScheme extends TupleScheme<deleteUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findUserList_args implements org.apache.thrift.TBase<findUserList_args, findUserList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserList_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserList_argsTupleSchemeFactory());
    }

    public int status; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserList_args.class, metaDataMap);
    }

    public findUserList_args() {
    }

    public findUserList_args(
      int status,
      int start,
      int count)
    {
      this();
      this.status = status;
      setStatusIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserList_args(findUserList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.status = other.status;
      this.start = other.start;
      this.count = other.count;
    }

    public findUserList_args deepCopy() {
      return new findUserList_args(this);
    }

    @Override
    public void clear() {
      setStatusIsSet(false);
      this.status = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getStatus() {
      return this.status;
    }

    public findUserList_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findUserList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findUserList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return Integer.valueOf(getStatus());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserList_args)
        return this.equals((findUserList_args)that);
      return false;
    }

    public boolean equals(findUserList_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserList_args typedOther = (findUserList_args)other;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserList_args(");
      boolean first = true;

      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserList_argsStandardSchemeFactory implements SchemeFactory {
      public findUserList_argsStandardScheme getScheme() {
        return new findUserList_argsStandardScheme();
      }
    }

    private static class findUserList_argsStandardScheme extends StandardScheme<findUserList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserList_argsTupleSchemeFactory implements SchemeFactory {
      public findUserList_argsTupleScheme getScheme() {
        return new findUserList_argsTupleScheme();
      }
    }

    private static class findUserList_argsTupleScheme extends TupleScheme<findUserList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findUserList_result implements org.apache.thrift.TBase<findUserList_result, findUserList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserList_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminUserListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminUserListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserList_result.class, metaDataMap);
    }

    public findUserList_result() {
    }

    public findUserList_result(
      one.show.manage.thrift.view.AdminUserListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserList_result(findUserList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.AdminUserListView(other.success);
      }
    }

    public findUserList_result deepCopy() {
      return new findUserList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.AdminUserListView getSuccess() {
      return this.success;
    }

    public findUserList_result setSuccess(one.show.manage.thrift.view.AdminUserListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.AdminUserListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserList_result)
        return this.equals((findUserList_result)that);
      return false;
    }

    public boolean equals(findUserList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserList_result typedOther = (findUserList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserList_resultStandardSchemeFactory implements SchemeFactory {
      public findUserList_resultStandardScheme getScheme() {
        return new findUserList_resultStandardScheme();
      }
    }

    private static class findUserList_resultStandardScheme extends StandardScheme<findUserList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.AdminUserListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserList_resultTupleSchemeFactory implements SchemeFactory {
      public findUserList_resultTupleScheme getScheme() {
        return new findUserList_resultTupleScheme();
      }
    }

    private static class findUserList_resultTupleScheme extends TupleScheme<findUserList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.AdminUserListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePwd_args implements org.apache.thrift.TBase<updatePwd_args, updatePwd_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePwd_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePwd_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePwd_args.class, metaDataMap);
    }

    public updatePwd_args() {
    }

    public updatePwd_args(
      String userName,
      String password)
    {
      this();
      this.userName = userName;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePwd_args(updatePwd_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public updatePwd_args deepCopy() {
      return new updatePwd_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.password = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public updatePwd_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public updatePwd_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePwd_args)
        return this.equals((updatePwd_args)that);
      return false;
    }

    public boolean equals(updatePwd_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePwd_args typedOther = (updatePwd_args)other;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePwd_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePwd_argsStandardSchemeFactory implements SchemeFactory {
      public updatePwd_argsStandardScheme getScheme() {
        return new updatePwd_argsStandardScheme();
      }
    }

    private static class updatePwd_argsStandardScheme extends StandardScheme<updatePwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePwd_argsTupleSchemeFactory implements SchemeFactory {
      public updatePwd_argsTupleScheme getScheme() {
        return new updatePwd_argsTupleScheme();
      }
    }

    private static class updatePwd_argsTupleScheme extends TupleScheme<updatePwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserName()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class updatePwd_result implements org.apache.thrift.TBase<updatePwd_result, updatePwd_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePwd_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePwd_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePwd_result.class, metaDataMap);
    }

    public updatePwd_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePwd_result(updatePwd_result other) {
    }

    public updatePwd_result deepCopy() {
      return new updatePwd_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePwd_result)
        return this.equals((updatePwd_result)that);
      return false;
    }

    public boolean equals(updatePwd_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePwd_result typedOther = (updatePwd_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePwd_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePwd_resultStandardSchemeFactory implements SchemeFactory {
      public updatePwd_resultStandardScheme getScheme() {
        return new updatePwd_resultStandardScheme();
      }
    }

    private static class updatePwd_resultStandardScheme extends StandardScheme<updatePwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePwd_resultTupleSchemeFactory implements SchemeFactory {
      public updatePwd_resultTupleScheme getScheme() {
        return new updatePwd_resultTupleScheme();
      }
    }

    private static class updatePwd_resultTupleScheme extends TupleScheme<updatePwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveRole_args implements org.apache.thrift.TBase<saveRole_args, saveRole_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRole_args");

    private static final org.apache.thrift.protocol.TField ADMIN_ROLE_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("adminRoleView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRole_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminRoleView adminRoleView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADMIN_ROLE_VIEW((short)1, "adminRoleView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADMIN_ROLE_VIEW
            return ADMIN_ROLE_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADMIN_ROLE_VIEW, new org.apache.thrift.meta_data.FieldMetaData("adminRoleView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminRoleView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRole_args.class, metaDataMap);
    }

    public saveRole_args() {
    }

    public saveRole_args(
      one.show.manage.thrift.view.AdminRoleView adminRoleView)
    {
      this();
      this.adminRoleView = adminRoleView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRole_args(saveRole_args other) {
      if (other.isSetAdminRoleView()) {
        this.adminRoleView = new one.show.manage.thrift.view.AdminRoleView(other.adminRoleView);
      }
    }

    public saveRole_args deepCopy() {
      return new saveRole_args(this);
    }

    @Override
    public void clear() {
      this.adminRoleView = null;
    }

    public one.show.manage.thrift.view.AdminRoleView getAdminRoleView() {
      return this.adminRoleView;
    }

    public saveRole_args setAdminRoleView(one.show.manage.thrift.view.AdminRoleView adminRoleView) {
      this.adminRoleView = adminRoleView;
      return this;
    }

    public void unsetAdminRoleView() {
      this.adminRoleView = null;
    }

    /** Returns true if field adminRoleView is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminRoleView() {
      return this.adminRoleView != null;
    }

    public void setAdminRoleViewIsSet(boolean value) {
      if (!value) {
        this.adminRoleView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADMIN_ROLE_VIEW:
        if (value == null) {
          unsetAdminRoleView();
        } else {
          setAdminRoleView((one.show.manage.thrift.view.AdminRoleView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADMIN_ROLE_VIEW:
        return getAdminRoleView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADMIN_ROLE_VIEW:
        return isSetAdminRoleView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRole_args)
        return this.equals((saveRole_args)that);
      return false;
    }

    public boolean equals(saveRole_args that) {
      if (that == null)
        return false;

      boolean this_present_adminRoleView = true && this.isSetAdminRoleView();
      boolean that_present_adminRoleView = true && that.isSetAdminRoleView();
      if (this_present_adminRoleView || that_present_adminRoleView) {
        if (!(this_present_adminRoleView && that_present_adminRoleView))
          return false;
        if (!this.adminRoleView.equals(that.adminRoleView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveRole_args typedOther = (saveRole_args)other;

      lastComparison = Boolean.valueOf(isSetAdminRoleView()).compareTo(typedOther.isSetAdminRoleView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminRoleView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminRoleView, typedOther.adminRoleView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRole_args(");
      boolean first = true;

      sb.append("adminRoleView:");
      if (this.adminRoleView == null) {
        sb.append("null");
      } else {
        sb.append(this.adminRoleView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (adminRoleView != null) {
        adminRoleView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRole_argsStandardSchemeFactory implements SchemeFactory {
      public saveRole_argsStandardScheme getScheme() {
        return new saveRole_argsStandardScheme();
      }
    }

    private static class saveRole_argsStandardScheme extends StandardScheme<saveRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADMIN_ROLE_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adminRoleView = new one.show.manage.thrift.view.AdminRoleView();
                struct.adminRoleView.read(iprot);
                struct.setAdminRoleViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adminRoleView != null) {
          oprot.writeFieldBegin(ADMIN_ROLE_VIEW_FIELD_DESC);
          struct.adminRoleView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRole_argsTupleSchemeFactory implements SchemeFactory {
      public saveRole_argsTupleScheme getScheme() {
        return new saveRole_argsTupleScheme();
      }
    }

    private static class saveRole_argsTupleScheme extends TupleScheme<saveRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdminRoleView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdminRoleView()) {
          struct.adminRoleView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adminRoleView = new one.show.manage.thrift.view.AdminRoleView();
          struct.adminRoleView.read(iprot);
          struct.setAdminRoleViewIsSet(true);
        }
      }
    }

  }

  public static class saveRole_result implements org.apache.thrift.TBase<saveRole_result, saveRole_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRole_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRole_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRole_result.class, metaDataMap);
    }

    public saveRole_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRole_result(saveRole_result other) {
    }

    public saveRole_result deepCopy() {
      return new saveRole_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRole_result)
        return this.equals((saveRole_result)that);
      return false;
    }

    public boolean equals(saveRole_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveRole_result typedOther = (saveRole_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRole_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRole_resultStandardSchemeFactory implements SchemeFactory {
      public saveRole_resultStandardScheme getScheme() {
        return new saveRole_resultStandardScheme();
      }
    }

    private static class saveRole_resultStandardScheme extends StandardScheme<saveRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRole_resultTupleSchemeFactory implements SchemeFactory {
      public saveRole_resultTupleScheme getScheme() {
        return new saveRole_resultTupleScheme();
      }
    }

    private static class saveRole_resultTupleScheme extends TupleScheme<saveRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateRole_args implements org.apache.thrift.TBase<updateRole_args, updateRole_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRole_args");

    private static final org.apache.thrift.protocol.TField ADMIN_ROLE_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("adminRoleView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRole_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminRoleView adminRoleView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADMIN_ROLE_VIEW((short)1, "adminRoleView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADMIN_ROLE_VIEW
            return ADMIN_ROLE_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADMIN_ROLE_VIEW, new org.apache.thrift.meta_data.FieldMetaData("adminRoleView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminRoleView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRole_args.class, metaDataMap);
    }

    public updateRole_args() {
    }

    public updateRole_args(
      one.show.manage.thrift.view.AdminRoleView adminRoleView)
    {
      this();
      this.adminRoleView = adminRoleView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRole_args(updateRole_args other) {
      if (other.isSetAdminRoleView()) {
        this.adminRoleView = new one.show.manage.thrift.view.AdminRoleView(other.adminRoleView);
      }
    }

    public updateRole_args deepCopy() {
      return new updateRole_args(this);
    }

    @Override
    public void clear() {
      this.adminRoleView = null;
    }

    public one.show.manage.thrift.view.AdminRoleView getAdminRoleView() {
      return this.adminRoleView;
    }

    public updateRole_args setAdminRoleView(one.show.manage.thrift.view.AdminRoleView adminRoleView) {
      this.adminRoleView = adminRoleView;
      return this;
    }

    public void unsetAdminRoleView() {
      this.adminRoleView = null;
    }

    /** Returns true if field adminRoleView is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminRoleView() {
      return this.adminRoleView != null;
    }

    public void setAdminRoleViewIsSet(boolean value) {
      if (!value) {
        this.adminRoleView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADMIN_ROLE_VIEW:
        if (value == null) {
          unsetAdminRoleView();
        } else {
          setAdminRoleView((one.show.manage.thrift.view.AdminRoleView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADMIN_ROLE_VIEW:
        return getAdminRoleView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADMIN_ROLE_VIEW:
        return isSetAdminRoleView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRole_args)
        return this.equals((updateRole_args)that);
      return false;
    }

    public boolean equals(updateRole_args that) {
      if (that == null)
        return false;

      boolean this_present_adminRoleView = true && this.isSetAdminRoleView();
      boolean that_present_adminRoleView = true && that.isSetAdminRoleView();
      if (this_present_adminRoleView || that_present_adminRoleView) {
        if (!(this_present_adminRoleView && that_present_adminRoleView))
          return false;
        if (!this.adminRoleView.equals(that.adminRoleView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRole_args typedOther = (updateRole_args)other;

      lastComparison = Boolean.valueOf(isSetAdminRoleView()).compareTo(typedOther.isSetAdminRoleView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminRoleView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminRoleView, typedOther.adminRoleView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRole_args(");
      boolean first = true;

      sb.append("adminRoleView:");
      if (this.adminRoleView == null) {
        sb.append("null");
      } else {
        sb.append(this.adminRoleView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (adminRoleView != null) {
        adminRoleView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRole_argsStandardSchemeFactory implements SchemeFactory {
      public updateRole_argsStandardScheme getScheme() {
        return new updateRole_argsStandardScheme();
      }
    }

    private static class updateRole_argsStandardScheme extends StandardScheme<updateRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADMIN_ROLE_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adminRoleView = new one.show.manage.thrift.view.AdminRoleView();
                struct.adminRoleView.read(iprot);
                struct.setAdminRoleViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adminRoleView != null) {
          oprot.writeFieldBegin(ADMIN_ROLE_VIEW_FIELD_DESC);
          struct.adminRoleView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRole_argsTupleSchemeFactory implements SchemeFactory {
      public updateRole_argsTupleScheme getScheme() {
        return new updateRole_argsTupleScheme();
      }
    }

    private static class updateRole_argsTupleScheme extends TupleScheme<updateRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdminRoleView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdminRoleView()) {
          struct.adminRoleView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adminRoleView = new one.show.manage.thrift.view.AdminRoleView();
          struct.adminRoleView.read(iprot);
          struct.setAdminRoleViewIsSet(true);
        }
      }
    }

  }

  public static class updateRole_result implements org.apache.thrift.TBase<updateRole_result, updateRole_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRole_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRole_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRole_result.class, metaDataMap);
    }

    public updateRole_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRole_result(updateRole_result other) {
    }

    public updateRole_result deepCopy() {
      return new updateRole_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRole_result)
        return this.equals((updateRole_result)that);
      return false;
    }

    public boolean equals(updateRole_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRole_result typedOther = (updateRole_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRole_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRole_resultStandardSchemeFactory implements SchemeFactory {
      public updateRole_resultStandardScheme getScheme() {
        return new updateRole_resultStandardScheme();
      }
    }

    private static class updateRole_resultStandardScheme extends StandardScheme<updateRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRole_resultTupleSchemeFactory implements SchemeFactory {
      public updateRole_resultTupleScheme getScheme() {
        return new updateRole_resultTupleScheme();
      }
    }

    private static class updateRole_resultTupleScheme extends TupleScheme<updateRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteRole_args implements org.apache.thrift.TBase<deleteRole_args, deleteRole_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRole_args");

    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRole_argsTupleSchemeFactory());
    }

    public int roleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_ID((short)1, "roleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_ID
            return ROLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRole_args.class, metaDataMap);
    }

    public deleteRole_args() {
    }

    public deleteRole_args(
      int roleId)
    {
      this();
      this.roleId = roleId;
      setRoleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRole_args(deleteRole_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleId = other.roleId;
    }

    public deleteRole_args deepCopy() {
      return new deleteRole_args(this);
    }

    @Override
    public void clear() {
      setRoleIdIsSet(false);
      this.roleId = 0;
    }

    public int getRoleId() {
      return this.roleId;
    }

    public deleteRole_args setRoleId(int roleId) {
      this.roleId = roleId;
      setRoleIdIsSet(true);
      return this;
    }

    public void unsetRoleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_ID:
        return Integer.valueOf(getRoleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLE_ID:
        return isSetRoleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRole_args)
        return this.equals((deleteRole_args)that);
      return false;
    }

    public boolean equals(deleteRole_args that) {
      if (that == null)
        return false;

      boolean this_present_roleId = true;
      boolean that_present_roleId = true;
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (this.roleId != that.roleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteRole_args typedOther = (deleteRole_args)other;

      lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(typedOther.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, typedOther.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRole_args(");
      boolean first = true;

      sb.append("roleId:");
      sb.append(this.roleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRole_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRole_argsStandardScheme getScheme() {
        return new deleteRole_argsStandardScheme();
      }
    }

    private static class deleteRole_argsStandardScheme extends StandardScheme<deleteRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roleId = iprot.readI32();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeI32(struct.roleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRole_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRole_argsTupleScheme getScheme() {
        return new deleteRole_argsTupleScheme();
      }
    }

    private static class deleteRole_argsTupleScheme extends TupleScheme<deleteRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleId()) {
          oprot.writeI32(struct.roleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleId = iprot.readI32();
          struct.setRoleIdIsSet(true);
        }
      }
    }

  }

  public static class deleteRole_result implements org.apache.thrift.TBase<deleteRole_result, deleteRole_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRole_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRole_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRole_result.class, metaDataMap);
    }

    public deleteRole_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRole_result(deleteRole_result other) {
    }

    public deleteRole_result deepCopy() {
      return new deleteRole_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRole_result)
        return this.equals((deleteRole_result)that);
      return false;
    }

    public boolean equals(deleteRole_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteRole_result typedOther = (deleteRole_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRole_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRole_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRole_resultStandardScheme getScheme() {
        return new deleteRole_resultStandardScheme();
      }
    }

    private static class deleteRole_resultStandardScheme extends StandardScheme<deleteRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRole_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRole_resultTupleScheme getScheme() {
        return new deleteRole_resultTupleScheme();
      }
    }

    private static class deleteRole_resultTupleScheme extends TupleScheme<deleteRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveOperateLog_args implements org.apache.thrift.TBase<saveOperateLog_args, saveOperateLog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOperateLog_args");

    private static final org.apache.thrift.protocol.TField OPERATE_LOG_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("operateLogView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOperateLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOperateLog_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.OperateLogView operateLogView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPERATE_LOG_VIEW((short)1, "operateLogView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPERATE_LOG_VIEW
            return OPERATE_LOG_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPERATE_LOG_VIEW, new org.apache.thrift.meta_data.FieldMetaData("operateLogView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.OperateLogView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOperateLog_args.class, metaDataMap);
    }

    public saveOperateLog_args() {
    }

    public saveOperateLog_args(
      one.show.manage.thrift.view.OperateLogView operateLogView)
    {
      this();
      this.operateLogView = operateLogView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOperateLog_args(saveOperateLog_args other) {
      if (other.isSetOperateLogView()) {
        this.operateLogView = new one.show.manage.thrift.view.OperateLogView(other.operateLogView);
      }
    }

    public saveOperateLog_args deepCopy() {
      return new saveOperateLog_args(this);
    }

    @Override
    public void clear() {
      this.operateLogView = null;
    }

    public one.show.manage.thrift.view.OperateLogView getOperateLogView() {
      return this.operateLogView;
    }

    public saveOperateLog_args setOperateLogView(one.show.manage.thrift.view.OperateLogView operateLogView) {
      this.operateLogView = operateLogView;
      return this;
    }

    public void unsetOperateLogView() {
      this.operateLogView = null;
    }

    /** Returns true if field operateLogView is set (has been assigned a value) and false otherwise */
    public boolean isSetOperateLogView() {
      return this.operateLogView != null;
    }

    public void setOperateLogViewIsSet(boolean value) {
      if (!value) {
        this.operateLogView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPERATE_LOG_VIEW:
        if (value == null) {
          unsetOperateLogView();
        } else {
          setOperateLogView((one.show.manage.thrift.view.OperateLogView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPERATE_LOG_VIEW:
        return getOperateLogView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPERATE_LOG_VIEW:
        return isSetOperateLogView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOperateLog_args)
        return this.equals((saveOperateLog_args)that);
      return false;
    }

    public boolean equals(saveOperateLog_args that) {
      if (that == null)
        return false;

      boolean this_present_operateLogView = true && this.isSetOperateLogView();
      boolean that_present_operateLogView = true && that.isSetOperateLogView();
      if (this_present_operateLogView || that_present_operateLogView) {
        if (!(this_present_operateLogView && that_present_operateLogView))
          return false;
        if (!this.operateLogView.equals(that.operateLogView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveOperateLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveOperateLog_args typedOther = (saveOperateLog_args)other;

      lastComparison = Boolean.valueOf(isSetOperateLogView()).compareTo(typedOther.isSetOperateLogView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperateLogView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateLogView, typedOther.operateLogView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOperateLog_args(");
      boolean first = true;

      sb.append("operateLogView:");
      if (this.operateLogView == null) {
        sb.append("null");
      } else {
        sb.append(this.operateLogView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (operateLogView != null) {
        operateLogView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOperateLog_argsStandardSchemeFactory implements SchemeFactory {
      public saveOperateLog_argsStandardScheme getScheme() {
        return new saveOperateLog_argsStandardScheme();
      }
    }

    private static class saveOperateLog_argsStandardScheme extends StandardScheme<saveOperateLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOperateLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPERATE_LOG_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.operateLogView = new one.show.manage.thrift.view.OperateLogView();
                struct.operateLogView.read(iprot);
                struct.setOperateLogViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOperateLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.operateLogView != null) {
          oprot.writeFieldBegin(OPERATE_LOG_VIEW_FIELD_DESC);
          struct.operateLogView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOperateLog_argsTupleSchemeFactory implements SchemeFactory {
      public saveOperateLog_argsTupleScheme getScheme() {
        return new saveOperateLog_argsTupleScheme();
      }
    }

    private static class saveOperateLog_argsTupleScheme extends TupleScheme<saveOperateLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOperateLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOperateLogView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOperateLogView()) {
          struct.operateLogView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOperateLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.operateLogView = new one.show.manage.thrift.view.OperateLogView();
          struct.operateLogView.read(iprot);
          struct.setOperateLogViewIsSet(true);
        }
      }
    }

  }

  public static class saveOperateLog_result implements org.apache.thrift.TBase<saveOperateLog_result, saveOperateLog_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOperateLog_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOperateLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOperateLog_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOperateLog_result.class, metaDataMap);
    }

    public saveOperateLog_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOperateLog_result(saveOperateLog_result other) {
    }

    public saveOperateLog_result deepCopy() {
      return new saveOperateLog_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOperateLog_result)
        return this.equals((saveOperateLog_result)that);
      return false;
    }

    public boolean equals(saveOperateLog_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveOperateLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveOperateLog_result typedOther = (saveOperateLog_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOperateLog_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOperateLog_resultStandardSchemeFactory implements SchemeFactory {
      public saveOperateLog_resultStandardScheme getScheme() {
        return new saveOperateLog_resultStandardScheme();
      }
    }

    private static class saveOperateLog_resultStandardScheme extends StandardScheme<saveOperateLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOperateLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOperateLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOperateLog_resultTupleSchemeFactory implements SchemeFactory {
      public saveOperateLog_resultTupleScheme getScheme() {
        return new saveOperateLog_resultTupleScheme();
      }
    }

    private static class saveOperateLog_resultTupleScheme extends TupleScheme<saveOperateLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOperateLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOperateLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
