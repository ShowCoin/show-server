/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdminFuncView implements org.apache.thrift.TBase<AdminFuncView, AdminFuncView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdminFuncView");

  private static final org.apache.thrift.protocol.TField FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("funcId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FUNC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("funcName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FUNC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("funcType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FATHER_FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fatherFuncId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("hasChild", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdminFuncViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdminFuncViewTupleSchemeFactory());
  }

  public String funcId; // required
  public String funcName; // required
  public String url; // required
  public int funcType; // required
  public String fatherFuncId; // required
  public int status; // required
  public boolean hasChild; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FUNC_ID((short)1, "funcId"),
    FUNC_NAME((short)2, "funcName"),
    URL((short)3, "url"),
    FUNC_TYPE((short)4, "funcType"),
    FATHER_FUNC_ID((short)5, "fatherFuncId"),
    STATUS((short)6, "status"),
    HAS_CHILD((short)7, "hasChild");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FUNC_ID
          return FUNC_ID;
        case 2: // FUNC_NAME
          return FUNC_NAME;
        case 3: // URL
          return URL;
        case 4: // FUNC_TYPE
          return FUNC_TYPE;
        case 5: // FATHER_FUNC_ID
          return FATHER_FUNC_ID;
        case 6: // STATUS
          return STATUS;
        case 7: // HAS_CHILD
          return HAS_CHILD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FUNCTYPE_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __HASCHILD_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("funcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNC_NAME, new org.apache.thrift.meta_data.FieldMetaData("funcName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("funcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FATHER_FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("fatherFuncId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_CHILD, new org.apache.thrift.meta_data.FieldMetaData("hasChild", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdminFuncView.class, metaDataMap);
  }

  public AdminFuncView() {
  }

  public AdminFuncView(
    String funcId,
    String funcName,
    String url,
    int funcType,
    String fatherFuncId,
    int status,
    boolean hasChild)
  {
    this();
    this.funcId = funcId;
    this.funcName = funcName;
    this.url = url;
    this.funcType = funcType;
    setFuncTypeIsSet(true);
    this.fatherFuncId = fatherFuncId;
    this.status = status;
    setStatusIsSet(true);
    this.hasChild = hasChild;
    setHasChildIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdminFuncView(AdminFuncView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFuncId()) {
      this.funcId = other.funcId;
    }
    if (other.isSetFuncName()) {
      this.funcName = other.funcName;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.funcType = other.funcType;
    if (other.isSetFatherFuncId()) {
      this.fatherFuncId = other.fatherFuncId;
    }
    this.status = other.status;
    this.hasChild = other.hasChild;
  }

  public AdminFuncView deepCopy() {
    return new AdminFuncView(this);
  }

  @Override
  public void clear() {
    this.funcId = null;
    this.funcName = null;
    this.url = null;
    setFuncTypeIsSet(false);
    this.funcType = 0;
    this.fatherFuncId = null;
    setStatusIsSet(false);
    this.status = 0;
    setHasChildIsSet(false);
    this.hasChild = false;
  }

  public String getFuncId() {
    return this.funcId;
  }

  public AdminFuncView setFuncId(String funcId) {
    this.funcId = funcId;
    return this;
  }

  public void unsetFuncId() {
    this.funcId = null;
  }

  /** Returns true if field funcId is set (has been assigned a value) and false otherwise */
  public boolean isSetFuncId() {
    return this.funcId != null;
  }

  public void setFuncIdIsSet(boolean value) {
    if (!value) {
      this.funcId = null;
    }
  }

  public String getFuncName() {
    return this.funcName;
  }

  public AdminFuncView setFuncName(String funcName) {
    this.funcName = funcName;
    return this;
  }

  public void unsetFuncName() {
    this.funcName = null;
  }

  /** Returns true if field funcName is set (has been assigned a value) and false otherwise */
  public boolean isSetFuncName() {
    return this.funcName != null;
  }

  public void setFuncNameIsSet(boolean value) {
    if (!value) {
      this.funcName = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public AdminFuncView setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getFuncType() {
    return this.funcType;
  }

  public AdminFuncView setFuncType(int funcType) {
    this.funcType = funcType;
    setFuncTypeIsSet(true);
    return this;
  }

  public void unsetFuncType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNCTYPE_ISSET_ID);
  }

  /** Returns true if field funcType is set (has been assigned a value) and false otherwise */
  public boolean isSetFuncType() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNCTYPE_ISSET_ID);
  }

  public void setFuncTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNCTYPE_ISSET_ID, value);
  }

  public String getFatherFuncId() {
    return this.fatherFuncId;
  }

  public AdminFuncView setFatherFuncId(String fatherFuncId) {
    this.fatherFuncId = fatherFuncId;
    return this;
  }

  public void unsetFatherFuncId() {
    this.fatherFuncId = null;
  }

  /** Returns true if field fatherFuncId is set (has been assigned a value) and false otherwise */
  public boolean isSetFatherFuncId() {
    return this.fatherFuncId != null;
  }

  public void setFatherFuncIdIsSet(boolean value) {
    if (!value) {
      this.fatherFuncId = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public AdminFuncView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public boolean isHasChild() {
    return this.hasChild;
  }

  public AdminFuncView setHasChild(boolean hasChild) {
    this.hasChild = hasChild;
    setHasChildIsSet(true);
    return this;
  }

  public void unsetHasChild() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASCHILD_ISSET_ID);
  }

  /** Returns true if field hasChild is set (has been assigned a value) and false otherwise */
  public boolean isSetHasChild() {
    return EncodingUtils.testBit(__isset_bitfield, __HASCHILD_ISSET_ID);
  }

  public void setHasChildIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASCHILD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FUNC_ID:
      if (value == null) {
        unsetFuncId();
      } else {
        setFuncId((String)value);
      }
      break;

    case FUNC_NAME:
      if (value == null) {
        unsetFuncName();
      } else {
        setFuncName((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case FUNC_TYPE:
      if (value == null) {
        unsetFuncType();
      } else {
        setFuncType((Integer)value);
      }
      break;

    case FATHER_FUNC_ID:
      if (value == null) {
        unsetFatherFuncId();
      } else {
        setFatherFuncId((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case HAS_CHILD:
      if (value == null) {
        unsetHasChild();
      } else {
        setHasChild((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FUNC_ID:
      return getFuncId();

    case FUNC_NAME:
      return getFuncName();

    case URL:
      return getUrl();

    case FUNC_TYPE:
      return Integer.valueOf(getFuncType());

    case FATHER_FUNC_ID:
      return getFatherFuncId();

    case STATUS:
      return Integer.valueOf(getStatus());

    case HAS_CHILD:
      return Boolean.valueOf(isHasChild());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FUNC_ID:
      return isSetFuncId();
    case FUNC_NAME:
      return isSetFuncName();
    case URL:
      return isSetUrl();
    case FUNC_TYPE:
      return isSetFuncType();
    case FATHER_FUNC_ID:
      return isSetFatherFuncId();
    case STATUS:
      return isSetStatus();
    case HAS_CHILD:
      return isSetHasChild();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdminFuncView)
      return this.equals((AdminFuncView)that);
    return false;
  }

  public boolean equals(AdminFuncView that) {
    if (that == null)
      return false;

    boolean this_present_funcId = true && this.isSetFuncId();
    boolean that_present_funcId = true && that.isSetFuncId();
    if (this_present_funcId || that_present_funcId) {
      if (!(this_present_funcId && that_present_funcId))
        return false;
      if (!this.funcId.equals(that.funcId))
        return false;
    }

    boolean this_present_funcName = true && this.isSetFuncName();
    boolean that_present_funcName = true && that.isSetFuncName();
    if (this_present_funcName || that_present_funcName) {
      if (!(this_present_funcName && that_present_funcName))
        return false;
      if (!this.funcName.equals(that.funcName))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_funcType = true;
    boolean that_present_funcType = true;
    if (this_present_funcType || that_present_funcType) {
      if (!(this_present_funcType && that_present_funcType))
        return false;
      if (this.funcType != that.funcType)
        return false;
    }

    boolean this_present_fatherFuncId = true && this.isSetFatherFuncId();
    boolean that_present_fatherFuncId = true && that.isSetFatherFuncId();
    if (this_present_fatherFuncId || that_present_fatherFuncId) {
      if (!(this_present_fatherFuncId && that_present_fatherFuncId))
        return false;
      if (!this.fatherFuncId.equals(that.fatherFuncId))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_hasChild = true;
    boolean that_present_hasChild = true;
    if (this_present_hasChild || that_present_hasChild) {
      if (!(this_present_hasChild && that_present_hasChild))
        return false;
      if (this.hasChild != that.hasChild)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AdminFuncView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AdminFuncView typedOther = (AdminFuncView)other;

    lastComparison = Boolean.valueOf(isSetFuncId()).compareTo(typedOther.isSetFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcId, typedOther.funcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuncName()).compareTo(typedOther.isSetFuncName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuncName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcName, typedOther.funcName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuncType()).compareTo(typedOther.isSetFuncType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuncType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcType, typedOther.funcType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFatherFuncId()).compareTo(typedOther.isSetFatherFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFatherFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fatherFuncId, typedOther.fatherFuncId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasChild()).compareTo(typedOther.isSetHasChild());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasChild()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasChild, typedOther.hasChild);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdminFuncView(");
    boolean first = true;

    sb.append("funcId:");
    if (this.funcId == null) {
      sb.append("null");
    } else {
      sb.append(this.funcId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("funcName:");
    if (this.funcName == null) {
      sb.append("null");
    } else {
      sb.append(this.funcName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("funcType:");
    sb.append(this.funcType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fatherFuncId:");
    if (this.fatherFuncId == null) {
      sb.append("null");
    } else {
      sb.append(this.fatherFuncId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasChild:");
    sb.append(this.hasChild);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdminFuncViewStandardSchemeFactory implements SchemeFactory {
    public AdminFuncViewStandardScheme getScheme() {
      return new AdminFuncViewStandardScheme();
    }
  }

  private static class AdminFuncViewStandardScheme extends StandardScheme<AdminFuncView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdminFuncView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.funcId = iprot.readString();
              struct.setFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FUNC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.funcName = iprot.readString();
              struct.setFuncNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FUNC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.funcType = iprot.readI32();
              struct.setFuncTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FATHER_FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fatherFuncId = iprot.readString();
              struct.setFatherFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_CHILD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasChild = iprot.readBool();
              struct.setHasChildIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdminFuncView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.funcId != null) {
        oprot.writeFieldBegin(FUNC_ID_FIELD_DESC);
        oprot.writeString(struct.funcId);
        oprot.writeFieldEnd();
      }
      if (struct.funcName != null) {
        oprot.writeFieldBegin(FUNC_NAME_FIELD_DESC);
        oprot.writeString(struct.funcName);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUNC_TYPE_FIELD_DESC);
      oprot.writeI32(struct.funcType);
      oprot.writeFieldEnd();
      if (struct.fatherFuncId != null) {
        oprot.writeFieldBegin(FATHER_FUNC_ID_FIELD_DESC);
        oprot.writeString(struct.fatherFuncId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_CHILD_FIELD_DESC);
      oprot.writeBool(struct.hasChild);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdminFuncViewTupleSchemeFactory implements SchemeFactory {
    public AdminFuncViewTupleScheme getScheme() {
      return new AdminFuncViewTupleScheme();
    }
  }

  private static class AdminFuncViewTupleScheme extends TupleScheme<AdminFuncView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdminFuncView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFuncId()) {
        optionals.set(0);
      }
      if (struct.isSetFuncName()) {
        optionals.set(1);
      }
      if (struct.isSetUrl()) {
        optionals.set(2);
      }
      if (struct.isSetFuncType()) {
        optionals.set(3);
      }
      if (struct.isSetFatherFuncId()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetHasChild()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFuncId()) {
        oprot.writeString(struct.funcId);
      }
      if (struct.isSetFuncName()) {
        oprot.writeString(struct.funcName);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetFuncType()) {
        oprot.writeI32(struct.funcType);
      }
      if (struct.isSetFatherFuncId()) {
        oprot.writeString(struct.fatherFuncId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetHasChild()) {
        oprot.writeBool(struct.hasChild);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdminFuncView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.funcId = iprot.readString();
        struct.setFuncIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.funcName = iprot.readString();
        struct.setFuncNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.funcType = iprot.readI32();
        struct.setFuncTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fatherFuncId = iprot.readString();
        struct.setFatherFuncIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hasChild = iprot.readBool();
        struct.setHasChildIsSet(true);
      }
    }
  }

}

