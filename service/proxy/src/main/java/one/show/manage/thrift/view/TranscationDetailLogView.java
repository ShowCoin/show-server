/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TranscationDetailLogView implements org.apache.thrift.TBase<TranscationDetailLogView, TranscationDetailLogView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TranscationDetailLogView");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("detail", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GIFTNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("giftnum", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField GIFTID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftid", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TranscationDetailLogViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TranscationDetailLogViewTupleSchemeFactory());
  }

  public String uid; // required
  public String vid; // required
  public String tid; // required
  public int time; // required
  public int amount; // required
  public String detail; // required
  public int giftnum; // required
  public String giftid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    VID((short)2, "vid"),
    TID((short)3, "tid"),
    TIME((short)4, "time"),
    AMOUNT((short)5, "amount"),
    DETAIL((short)6, "detail"),
    GIFTNUM((short)7, "giftnum"),
    GIFTID((short)8, "giftid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // VID
          return VID;
        case 3: // TID
          return TID;
        case 4: // TIME
          return TIME;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // DETAIL
          return DETAIL;
        case 7: // GIFTNUM
          return GIFTNUM;
        case 8: // GIFTID
          return GIFTID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __AMOUNT_ISSET_ID = 1;
  private static final int __GIFTNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIFTNUM, new org.apache.thrift.meta_data.FieldMetaData("giftnum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIFTID, new org.apache.thrift.meta_data.FieldMetaData("giftid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TranscationDetailLogView.class, metaDataMap);
  }

  public TranscationDetailLogView() {
  }

  public TranscationDetailLogView(
    String uid,
    String vid,
    String tid,
    int time,
    int amount,
    String detail,
    int giftnum,
    String giftid)
  {
    this();
    this.uid = uid;
    this.vid = vid;
    this.tid = tid;
    this.time = time;
    setTimeIsSet(true);
    this.amount = amount;
    setAmountIsSet(true);
    this.detail = detail;
    this.giftnum = giftnum;
    setGiftnumIsSet(true);
    this.giftid = giftid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TranscationDetailLogView(TranscationDetailLogView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetVid()) {
      this.vid = other.vid;
    }
    if (other.isSetTid()) {
      this.tid = other.tid;
    }
    this.time = other.time;
    this.amount = other.amount;
    if (other.isSetDetail()) {
      this.detail = other.detail;
    }
    this.giftnum = other.giftnum;
    if (other.isSetGiftid()) {
      this.giftid = other.giftid;
    }
  }

  public TranscationDetailLogView deepCopy() {
    return new TranscationDetailLogView(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.vid = null;
    this.tid = null;
    setTimeIsSet(false);
    this.time = 0;
    setAmountIsSet(false);
    this.amount = 0;
    this.detail = null;
    setGiftnumIsSet(false);
    this.giftnum = 0;
    this.giftid = null;
  }

  public String getUid() {
    return this.uid;
  }

  public TranscationDetailLogView setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getVid() {
    return this.vid;
  }

  public TranscationDetailLogView setVid(String vid) {
    this.vid = vid;
    return this;
  }

  public void unsetVid() {
    this.vid = null;
  }

  /** Returns true if field vid is set (has been assigned a value) and false otherwise */
  public boolean isSetVid() {
    return this.vid != null;
  }

  public void setVidIsSet(boolean value) {
    if (!value) {
      this.vid = null;
    }
  }

  public String getTid() {
    return this.tid;
  }

  public TranscationDetailLogView setTid(String tid) {
    this.tid = tid;
    return this;
  }

  public void unsetTid() {
    this.tid = null;
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return this.tid != null;
  }

  public void setTidIsSet(boolean value) {
    if (!value) {
      this.tid = null;
    }
  }

  public int getTime() {
    return this.time;
  }

  public TranscationDetailLogView setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public int getAmount() {
    return this.amount;
  }

  public TranscationDetailLogView setAmount(int amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public String getDetail() {
    return this.detail;
  }

  public TranscationDetailLogView setDetail(String detail) {
    this.detail = detail;
    return this;
  }

  public void unsetDetail() {
    this.detail = null;
  }

  /** Returns true if field detail is set (has been assigned a value) and false otherwise */
  public boolean isSetDetail() {
    return this.detail != null;
  }

  public void setDetailIsSet(boolean value) {
    if (!value) {
      this.detail = null;
    }
  }

  public int getGiftnum() {
    return this.giftnum;
  }

  public TranscationDetailLogView setGiftnum(int giftnum) {
    this.giftnum = giftnum;
    setGiftnumIsSet(true);
    return this;
  }

  public void unsetGiftnum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTNUM_ISSET_ID);
  }

  /** Returns true if field giftnum is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftnum() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTNUM_ISSET_ID);
  }

  public void setGiftnumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTNUM_ISSET_ID, value);
  }

  public String getGiftid() {
    return this.giftid;
  }

  public TranscationDetailLogView setGiftid(String giftid) {
    this.giftid = giftid;
    return this;
  }

  public void unsetGiftid() {
    this.giftid = null;
  }

  /** Returns true if field giftid is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftid() {
    return this.giftid != null;
  }

  public void setGiftidIsSet(boolean value) {
    if (!value) {
      this.giftid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((String)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Integer)value);
      }
      break;

    case DETAIL:
      if (value == null) {
        unsetDetail();
      } else {
        setDetail((String)value);
      }
      break;

    case GIFTNUM:
      if (value == null) {
        unsetGiftnum();
      } else {
        setGiftnum((Integer)value);
      }
      break;

    case GIFTID:
      if (value == null) {
        unsetGiftid();
      } else {
        setGiftid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case VID:
      return getVid();

    case TID:
      return getTid();

    case TIME:
      return Integer.valueOf(getTime());

    case AMOUNT:
      return Integer.valueOf(getAmount());

    case DETAIL:
      return getDetail();

    case GIFTNUM:
      return Integer.valueOf(getGiftnum());

    case GIFTID:
      return getGiftid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case VID:
      return isSetVid();
    case TID:
      return isSetTid();
    case TIME:
      return isSetTime();
    case AMOUNT:
      return isSetAmount();
    case DETAIL:
      return isSetDetail();
    case GIFTNUM:
      return isSetGiftnum();
    case GIFTID:
      return isSetGiftid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TranscationDetailLogView)
      return this.equals((TranscationDetailLogView)that);
    return false;
  }

  public boolean equals(TranscationDetailLogView that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_vid = true && this.isSetVid();
    boolean that_present_vid = true && that.isSetVid();
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (!this.vid.equals(that.vid))
        return false;
    }

    boolean this_present_tid = true && this.isSetTid();
    boolean that_present_tid = true && that.isSetTid();
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (!this.tid.equals(that.tid))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_detail = true && this.isSetDetail();
    boolean that_present_detail = true && that.isSetDetail();
    if (this_present_detail || that_present_detail) {
      if (!(this_present_detail && that_present_detail))
        return false;
      if (!this.detail.equals(that.detail))
        return false;
    }

    boolean this_present_giftnum = true;
    boolean that_present_giftnum = true;
    if (this_present_giftnum || that_present_giftnum) {
      if (!(this_present_giftnum && that_present_giftnum))
        return false;
      if (this.giftnum != that.giftnum)
        return false;
    }

    boolean this_present_giftid = true && this.isSetGiftid();
    boolean that_present_giftid = true && that.isSetGiftid();
    if (this_present_giftid || that_present_giftid) {
      if (!(this_present_giftid && that_present_giftid))
        return false;
      if (!this.giftid.equals(that.giftid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TranscationDetailLogView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TranscationDetailLogView typedOther = (TranscationDetailLogView)other;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetail()).compareTo(typedOther.isSetDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detail, typedOther.detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftnum()).compareTo(typedOther.isSetGiftnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftnum, typedOther.giftnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftid()).compareTo(typedOther.isSetGiftid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftid, typedOther.giftid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TranscationDetailLogView(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vid:");
    if (this.vid == null) {
      sb.append("null");
    } else {
      sb.append(this.vid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tid:");
    if (this.tid == null) {
      sb.append("null");
    } else {
      sb.append(this.tid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detail:");
    if (this.detail == null) {
      sb.append("null");
    } else {
      sb.append(this.detail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftnum:");
    sb.append(this.giftnum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftid:");
    if (this.giftid == null) {
      sb.append("null");
    } else {
      sb.append(this.giftid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TranscationDetailLogViewStandardSchemeFactory implements SchemeFactory {
    public TranscationDetailLogViewStandardScheme getScheme() {
      return new TranscationDetailLogViewStandardScheme();
    }
  }

  private static class TranscationDetailLogViewStandardScheme extends StandardScheme<TranscationDetailLogView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TranscationDetailLogView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vid = iprot.readString();
              struct.setVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tid = iprot.readString();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.amount = iprot.readI32();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detail = iprot.readString();
              struct.setDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GIFTNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giftnum = iprot.readI32();
              struct.setGiftnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GIFTID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giftid = iprot.readString();
              struct.setGiftidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TranscationDetailLogView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.vid != null) {
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeString(struct.vid);
        oprot.writeFieldEnd();
      }
      if (struct.tid != null) {
        oprot.writeFieldBegin(TID_FIELD_DESC);
        oprot.writeString(struct.tid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.amount);
      oprot.writeFieldEnd();
      if (struct.detail != null) {
        oprot.writeFieldBegin(DETAIL_FIELD_DESC);
        oprot.writeString(struct.detail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIFTNUM_FIELD_DESC);
      oprot.writeI32(struct.giftnum);
      oprot.writeFieldEnd();
      if (struct.giftid != null) {
        oprot.writeFieldBegin(GIFTID_FIELD_DESC);
        oprot.writeString(struct.giftid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TranscationDetailLogViewTupleSchemeFactory implements SchemeFactory {
    public TranscationDetailLogViewTupleScheme getScheme() {
      return new TranscationDetailLogViewTupleScheme();
    }
  }

  private static class TranscationDetailLogViewTupleScheme extends TupleScheme<TranscationDetailLogView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TranscationDetailLogView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetVid()) {
        optionals.set(1);
      }
      if (struct.isSetTid()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      if (struct.isSetAmount()) {
        optionals.set(4);
      }
      if (struct.isSetDetail()) {
        optionals.set(5);
      }
      if (struct.isSetGiftnum()) {
        optionals.set(6);
      }
      if (struct.isSetGiftid()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetVid()) {
        oprot.writeString(struct.vid);
      }
      if (struct.isSetTid()) {
        oprot.writeString(struct.tid);
      }
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
      if (struct.isSetAmount()) {
        oprot.writeI32(struct.amount);
      }
      if (struct.isSetDetail()) {
        oprot.writeString(struct.detail);
      }
      if (struct.isSetGiftnum()) {
        oprot.writeI32(struct.giftnum);
      }
      if (struct.isSetGiftid()) {
        oprot.writeString(struct.giftid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TranscationDetailLogView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vid = iprot.readString();
        struct.setVidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tid = iprot.readString();
        struct.setTidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.amount = iprot.readI32();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.detail = iprot.readString();
        struct.setDetailIsSet(true);
      }
      if (incoming.get(6)) {
        struct.giftnum = iprot.readI32();
        struct.setGiftnumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.giftid = iprot.readString();
        struct.setGiftidIsSet(true);
      }
    }
  }

}

