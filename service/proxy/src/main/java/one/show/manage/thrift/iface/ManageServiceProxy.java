/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ManageServiceProxy {

  public interface Iface {

    public one.show.manage.thrift.view.VersionControlView findVersionControlByAgentType(int agentType) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.LinkView> findPlazaLinks() throws org.apache.thrift.TException;

    public void saveReport(one.show.manage.thrift.view.ReportView reportView) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.HeaderPortraitView> findHeaderPortraitList(int pageSize, int pageCount) throws org.apache.thrift.TException;

    public void deleteHeaderPortrait(long id) throws org.apache.thrift.TException;

    public void deleteHeaderPortraitList(List<Long> ids) throws org.apache.thrift.TException;

    public void saveHeaderPortraitList(one.show.manage.thrift.view.HeaderPortraitView headerPortraitView) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.AdminHeaderPortraitListView findAdminHeaderPortraitListView(int pageSize, int pageCount) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.GiftListView findGiftList(int giftType, int status, int start, int count) throws org.apache.thrift.TException;

    public void saveGift(one.show.manage.thrift.view.GiftView giftView) throws org.apache.thrift.TException;

    public void deleteGift(int giftId) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.GiftTypeView> findGiftTypeList(int status) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.GiftView findGiftById(int giftId) throws org.apache.thrift.TException;

    public void updateGift(int giftId, Map<String,String> updateContent) throws org.apache.thrift.TException;

    public void saveSendExchange(one.show.manage.thrift.view.SendExchangeView sendExchangeView) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.SendExchangeView> findSendExchangeByUid(long uid, int sendType, int start, int count) throws org.apache.thrift.TException;

    public int findSendExchangeCountByUid(long uid, int sendType) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.SystemConfigView getSystemConfig(String configId) throws org.apache.thrift.TException;

    public void updateSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.AdvertisementView> findAdvertisementView() throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.SystemConfigView> getSystemConfigList(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException;

    public void addSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView) throws org.apache.thrift.TException;

    public void deleteSystemConfig(String configId) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.SystemConfigView getSystemConfigByVersion(String version) throws org.apache.thrift.TException;

    public void saveRegister(one.show.manage.thrift.view.RegisterView registerView) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.RegisterView getRegisterByUid(String uid) throws org.apache.thrift.TException;

    public void updateRegisterByUid(String uid, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.RegisterListView getRegisterList(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException;

    public void updateRegister(one.show.manage.thrift.view.RegisterView registerView) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.MasterLevelView> findMasterLevelList() throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.FanLevelView> findFanLevelList() throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.NoticeView findNoticeById(int id) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.NoticeView> findEffecNoticeList() throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.NoticeListView findNoticeList(int start, int count) throws org.apache.thrift.TException;

    public void updateNoticeById(int id, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public void deleteNoticeById(int id) throws org.apache.thrift.TException;

    public void addNotice(one.show.manage.thrift.view.NoticeView noticeView) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.UserCDNListView findUserCDNList(int start, int count) throws org.apache.thrift.TException;

    public void updateUserCDNById(one.show.manage.thrift.view.UserCDNView userCDNView) throws org.apache.thrift.TException;

    public void deleteUserCDN(long uid) throws org.apache.thrift.TException;

    public void saveUserCDN(one.show.manage.thrift.view.UserCDNView userCDNView) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.UserCDNView findUserCDNById(long uid) throws org.apache.thrift.TException;

    public List<one.show.manage.thrift.view.RobotSendGiftRatioView> findRobotSendGiftRatioList() throws org.apache.thrift.TException;

    public void saveRobotSendGiftRatio(one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findVersionControlByAgentType(int agentType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findVersionControlByAgentType_call> resultHandler) throws org.apache.thrift.TException;

    public void findPlazaLinks(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPlazaLinks_call> resultHandler) throws org.apache.thrift.TException;

    public void saveReport(one.show.manage.thrift.view.ReportView reportView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveReport_call> resultHandler) throws org.apache.thrift.TException;

    public void findHeaderPortraitList(int pageSize, int pageCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findHeaderPortraitList_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteHeaderPortrait(long id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteHeaderPortrait_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteHeaderPortraitList(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteHeaderPortraitList_call> resultHandler) throws org.apache.thrift.TException;

    public void saveHeaderPortraitList(one.show.manage.thrift.view.HeaderPortraitView headerPortraitView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveHeaderPortraitList_call> resultHandler) throws org.apache.thrift.TException;

    public void findAdminHeaderPortraitListView(int pageSize, int pageCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAdminHeaderPortraitListView_call> resultHandler) throws org.apache.thrift.TException;

    public void findGiftList(int giftType, int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findGiftList_call> resultHandler) throws org.apache.thrift.TException;

    public void saveGift(one.show.manage.thrift.view.GiftView giftView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveGift_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteGift(int giftId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteGift_call> resultHandler) throws org.apache.thrift.TException;

    public void findGiftTypeList(int status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findGiftTypeList_call> resultHandler) throws org.apache.thrift.TException;

    public void findGiftById(int giftId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findGiftById_call> resultHandler) throws org.apache.thrift.TException;

    public void updateGift(int giftId, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateGift_call> resultHandler) throws org.apache.thrift.TException;

    public void saveSendExchange(one.show.manage.thrift.view.SendExchangeView sendExchangeView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveSendExchange_call> resultHandler) throws org.apache.thrift.TException;

    public void findSendExchangeByUid(long uid, int sendType, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findSendExchangeByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void findSendExchangeCountByUid(long uid, int sendType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findSendExchangeCountByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void getSystemConfig(String configId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSystemConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void updateSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateSystemConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void findAdvertisementView(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAdvertisementView_call> resultHandler) throws org.apache.thrift.TException;

    public void getSystemConfigList(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSystemConfigList_call> resultHandler) throws org.apache.thrift.TException;

    public void addSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addSystemConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteSystemConfig(String configId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteSystemConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void getSystemConfigByVersion(String version, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSystemConfigByVersion_call> resultHandler) throws org.apache.thrift.TException;

    public void saveRegister(one.show.manage.thrift.view.RegisterView registerView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveRegister_call> resultHandler) throws org.apache.thrift.TException;

    public void getRegisterByUid(String uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRegisterByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void updateRegisterByUid(String uid, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateRegisterByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void getRegisterList(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRegisterList_call> resultHandler) throws org.apache.thrift.TException;

    public void updateRegister(one.show.manage.thrift.view.RegisterView registerView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateRegister_call> resultHandler) throws org.apache.thrift.TException;

    public void findMasterLevelList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findMasterLevelList_call> resultHandler) throws org.apache.thrift.TException;

    public void findFanLevelList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFanLevelList_call> resultHandler) throws org.apache.thrift.TException;

    public void findNoticeById(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findNoticeById_call> resultHandler) throws org.apache.thrift.TException;

    public void findEffecNoticeList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findEffecNoticeList_call> resultHandler) throws org.apache.thrift.TException;

    public void findNoticeList(int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findNoticeList_call> resultHandler) throws org.apache.thrift.TException;

    public void updateNoticeById(int id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateNoticeById_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteNoticeById(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteNoticeById_call> resultHandler) throws org.apache.thrift.TException;

    public void addNotice(one.show.manage.thrift.view.NoticeView noticeView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addNotice_call> resultHandler) throws org.apache.thrift.TException;

    public void findUserCDNList(int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findUserCDNList_call> resultHandler) throws org.apache.thrift.TException;

    public void updateUserCDNById(one.show.manage.thrift.view.UserCDNView userCDNView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateUserCDNById_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteUserCDN(long uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteUserCDN_call> resultHandler) throws org.apache.thrift.TException;

    public void saveUserCDN(one.show.manage.thrift.view.UserCDNView userCDNView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveUserCDN_call> resultHandler) throws org.apache.thrift.TException;

    public void findUserCDNById(long uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findUserCDNById_call> resultHandler) throws org.apache.thrift.TException;

    public void findRobotSendGiftRatioList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findRobotSendGiftRatioList_call> resultHandler) throws org.apache.thrift.TException;

    public void saveRobotSendGiftRatio(one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveRobotSendGiftRatio_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public one.show.manage.thrift.view.VersionControlView findVersionControlByAgentType(int agentType) throws org.apache.thrift.TException
    {
      send_findVersionControlByAgentType(agentType);
      return recv_findVersionControlByAgentType();
    }

    public void send_findVersionControlByAgentType(int agentType) throws org.apache.thrift.TException
    {
      findVersionControlByAgentType_args args = new findVersionControlByAgentType_args();
      args.setAgentType(agentType);
      sendBase("findVersionControlByAgentType", args);
    }

    public one.show.manage.thrift.view.VersionControlView recv_findVersionControlByAgentType() throws org.apache.thrift.TException
    {
      findVersionControlByAgentType_result result = new findVersionControlByAgentType_result();
      receiveBase(result, "findVersionControlByAgentType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findVersionControlByAgentType failed: unknown result");
    }

    public List<one.show.manage.thrift.view.LinkView> findPlazaLinks() throws org.apache.thrift.TException
    {
      send_findPlazaLinks();
      return recv_findPlazaLinks();
    }

    public void send_findPlazaLinks() throws org.apache.thrift.TException
    {
      findPlazaLinks_args args = new findPlazaLinks_args();
      sendBase("findPlazaLinks", args);
    }

    public List<one.show.manage.thrift.view.LinkView> recv_findPlazaLinks() throws org.apache.thrift.TException
    {
      findPlazaLinks_result result = new findPlazaLinks_result();
      receiveBase(result, "findPlazaLinks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPlazaLinks failed: unknown result");
    }

    public void saveReport(one.show.manage.thrift.view.ReportView reportView) throws org.apache.thrift.TException
    {
      send_saveReport(reportView);
      recv_saveReport();
    }

    public void send_saveReport(one.show.manage.thrift.view.ReportView reportView) throws org.apache.thrift.TException
    {
      saveReport_args args = new saveReport_args();
      args.setReportView(reportView);
      sendBase("saveReport", args);
    }

    public void recv_saveReport() throws org.apache.thrift.TException
    {
      saveReport_result result = new saveReport_result();
      receiveBase(result, "saveReport");
      return;
    }

    public List<one.show.manage.thrift.view.HeaderPortraitView> findHeaderPortraitList(int pageSize, int pageCount) throws org.apache.thrift.TException
    {
      send_findHeaderPortraitList(pageSize, pageCount);
      return recv_findHeaderPortraitList();
    }

    public void send_findHeaderPortraitList(int pageSize, int pageCount) throws org.apache.thrift.TException
    {
      findHeaderPortraitList_args args = new findHeaderPortraitList_args();
      args.setPageSize(pageSize);
      args.setPageCount(pageCount);
      sendBase("findHeaderPortraitList", args);
    }

    public List<one.show.manage.thrift.view.HeaderPortraitView> recv_findHeaderPortraitList() throws org.apache.thrift.TException
    {
      findHeaderPortraitList_result result = new findHeaderPortraitList_result();
      receiveBase(result, "findHeaderPortraitList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findHeaderPortraitList failed: unknown result");
    }

    public void deleteHeaderPortrait(long id) throws org.apache.thrift.TException
    {
      send_deleteHeaderPortrait(id);
      recv_deleteHeaderPortrait();
    }

    public void send_deleteHeaderPortrait(long id) throws org.apache.thrift.TException
    {
      deleteHeaderPortrait_args args = new deleteHeaderPortrait_args();
      args.setId(id);
      sendBase("deleteHeaderPortrait", args);
    }

    public void recv_deleteHeaderPortrait() throws org.apache.thrift.TException
    {
      deleteHeaderPortrait_result result = new deleteHeaderPortrait_result();
      receiveBase(result, "deleteHeaderPortrait");
      return;
    }

    public void deleteHeaderPortraitList(List<Long> ids) throws org.apache.thrift.TException
    {
      send_deleteHeaderPortraitList(ids);
      recv_deleteHeaderPortraitList();
    }

    public void send_deleteHeaderPortraitList(List<Long> ids) throws org.apache.thrift.TException
    {
      deleteHeaderPortraitList_args args = new deleteHeaderPortraitList_args();
      args.setIds(ids);
      sendBase("deleteHeaderPortraitList", args);
    }

    public void recv_deleteHeaderPortraitList() throws org.apache.thrift.TException
    {
      deleteHeaderPortraitList_result result = new deleteHeaderPortraitList_result();
      receiveBase(result, "deleteHeaderPortraitList");
      return;
    }

    public void saveHeaderPortraitList(one.show.manage.thrift.view.HeaderPortraitView headerPortraitView) throws org.apache.thrift.TException
    {
      send_saveHeaderPortraitList(headerPortraitView);
      recv_saveHeaderPortraitList();
    }

    public void send_saveHeaderPortraitList(one.show.manage.thrift.view.HeaderPortraitView headerPortraitView) throws org.apache.thrift.TException
    {
      saveHeaderPortraitList_args args = new saveHeaderPortraitList_args();
      args.setHeaderPortraitView(headerPortraitView);
      sendBase("saveHeaderPortraitList", args);
    }

    public void recv_saveHeaderPortraitList() throws org.apache.thrift.TException
    {
      saveHeaderPortraitList_result result = new saveHeaderPortraitList_result();
      receiveBase(result, "saveHeaderPortraitList");
      return;
    }

    public one.show.manage.thrift.view.AdminHeaderPortraitListView findAdminHeaderPortraitListView(int pageSize, int pageCount) throws org.apache.thrift.TException
    {
      send_findAdminHeaderPortraitListView(pageSize, pageCount);
      return recv_findAdminHeaderPortraitListView();
    }

    public void send_findAdminHeaderPortraitListView(int pageSize, int pageCount) throws org.apache.thrift.TException
    {
      findAdminHeaderPortraitListView_args args = new findAdminHeaderPortraitListView_args();
      args.setPageSize(pageSize);
      args.setPageCount(pageCount);
      sendBase("findAdminHeaderPortraitListView", args);
    }

    public one.show.manage.thrift.view.AdminHeaderPortraitListView recv_findAdminHeaderPortraitListView() throws org.apache.thrift.TException
    {
      findAdminHeaderPortraitListView_result result = new findAdminHeaderPortraitListView_result();
      receiveBase(result, "findAdminHeaderPortraitListView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAdminHeaderPortraitListView failed: unknown result");
    }

    public one.show.manage.thrift.view.GiftListView findGiftList(int giftType, int status, int start, int count) throws org.apache.thrift.TException
    {
      send_findGiftList(giftType, status, start, count);
      return recv_findGiftList();
    }

    public void send_findGiftList(int giftType, int status, int start, int count) throws org.apache.thrift.TException
    {
      findGiftList_args args = new findGiftList_args();
      args.setGiftType(giftType);
      args.setStatus(status);
      args.setStart(start);
      args.setCount(count);
      sendBase("findGiftList", args);
    }

    public one.show.manage.thrift.view.GiftListView recv_findGiftList() throws org.apache.thrift.TException
    {
      findGiftList_result result = new findGiftList_result();
      receiveBase(result, "findGiftList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGiftList failed: unknown result");
    }

    public void saveGift(one.show.manage.thrift.view.GiftView giftView) throws org.apache.thrift.TException
    {
      send_saveGift(giftView);
      recv_saveGift();
    }

    public void send_saveGift(one.show.manage.thrift.view.GiftView giftView) throws org.apache.thrift.TException
    {
      saveGift_args args = new saveGift_args();
      args.setGiftView(giftView);
      sendBase("saveGift", args);
    }

    public void recv_saveGift() throws org.apache.thrift.TException
    {
      saveGift_result result = new saveGift_result();
      receiveBase(result, "saveGift");
      return;
    }

    public void deleteGift(int giftId) throws org.apache.thrift.TException
    {
      send_deleteGift(giftId);
      recv_deleteGift();
    }

    public void send_deleteGift(int giftId) throws org.apache.thrift.TException
    {
      deleteGift_args args = new deleteGift_args();
      args.setGiftId(giftId);
      sendBase("deleteGift", args);
    }

    public void recv_deleteGift() throws org.apache.thrift.TException
    {
      deleteGift_result result = new deleteGift_result();
      receiveBase(result, "deleteGift");
      return;
    }

    public List<one.show.manage.thrift.view.GiftTypeView> findGiftTypeList(int status) throws org.apache.thrift.TException
    {
      send_findGiftTypeList(status);
      return recv_findGiftTypeList();
    }

    public void send_findGiftTypeList(int status) throws org.apache.thrift.TException
    {
      findGiftTypeList_args args = new findGiftTypeList_args();
      args.setStatus(status);
      sendBase("findGiftTypeList", args);
    }

    public List<one.show.manage.thrift.view.GiftTypeView> recv_findGiftTypeList() throws org.apache.thrift.TException
    {
      findGiftTypeList_result result = new findGiftTypeList_result();
      receiveBase(result, "findGiftTypeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGiftTypeList failed: unknown result");
    }

    public one.show.manage.thrift.view.GiftView findGiftById(int giftId) throws org.apache.thrift.TException
    {
      send_findGiftById(giftId);
      return recv_findGiftById();
    }

    public void send_findGiftById(int giftId) throws org.apache.thrift.TException
    {
      findGiftById_args args = new findGiftById_args();
      args.setGiftId(giftId);
      sendBase("findGiftById", args);
    }

    public one.show.manage.thrift.view.GiftView recv_findGiftById() throws org.apache.thrift.TException
    {
      findGiftById_result result = new findGiftById_result();
      receiveBase(result, "findGiftById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGiftById failed: unknown result");
    }

    public void updateGift(int giftId, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      send_updateGift(giftId, updateContent);
      recv_updateGift();
    }

    public void send_updateGift(int giftId, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      updateGift_args args = new updateGift_args();
      args.setGiftId(giftId);
      args.setUpdateContent(updateContent);
      sendBase("updateGift", args);
    }

    public void recv_updateGift() throws org.apache.thrift.TException
    {
      updateGift_result result = new updateGift_result();
      receiveBase(result, "updateGift");
      return;
    }

    public void saveSendExchange(one.show.manage.thrift.view.SendExchangeView sendExchangeView) throws org.apache.thrift.TException
    {
      send_saveSendExchange(sendExchangeView);
      recv_saveSendExchange();
    }

    public void send_saveSendExchange(one.show.manage.thrift.view.SendExchangeView sendExchangeView) throws org.apache.thrift.TException
    {
      saveSendExchange_args args = new saveSendExchange_args();
      args.setSendExchangeView(sendExchangeView);
      sendBase("saveSendExchange", args);
    }

    public void recv_saveSendExchange() throws org.apache.thrift.TException
    {
      saveSendExchange_result result = new saveSendExchange_result();
      receiveBase(result, "saveSendExchange");
      return;
    }

    public List<one.show.manage.thrift.view.SendExchangeView> findSendExchangeByUid(long uid, int sendType, int start, int count) throws org.apache.thrift.TException
    {
      send_findSendExchangeByUid(uid, sendType, start, count);
      return recv_findSendExchangeByUid();
    }

    public void send_findSendExchangeByUid(long uid, int sendType, int start, int count) throws org.apache.thrift.TException
    {
      findSendExchangeByUid_args args = new findSendExchangeByUid_args();
      args.setUid(uid);
      args.setSendType(sendType);
      args.setStart(start);
      args.setCount(count);
      sendBase("findSendExchangeByUid", args);
    }

    public List<one.show.manage.thrift.view.SendExchangeView> recv_findSendExchangeByUid() throws org.apache.thrift.TException
    {
      findSendExchangeByUid_result result = new findSendExchangeByUid_result();
      receiveBase(result, "findSendExchangeByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSendExchangeByUid failed: unknown result");
    }

    public int findSendExchangeCountByUid(long uid, int sendType) throws org.apache.thrift.TException
    {
      send_findSendExchangeCountByUid(uid, sendType);
      return recv_findSendExchangeCountByUid();
    }

    public void send_findSendExchangeCountByUid(long uid, int sendType) throws org.apache.thrift.TException
    {
      findSendExchangeCountByUid_args args = new findSendExchangeCountByUid_args();
      args.setUid(uid);
      args.setSendType(sendType);
      sendBase("findSendExchangeCountByUid", args);
    }

    public int recv_findSendExchangeCountByUid() throws org.apache.thrift.TException
    {
      findSendExchangeCountByUid_result result = new findSendExchangeCountByUid_result();
      receiveBase(result, "findSendExchangeCountByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSendExchangeCountByUid failed: unknown result");
    }

    public one.show.manage.thrift.view.SystemConfigView getSystemConfig(String configId) throws org.apache.thrift.TException
    {
      send_getSystemConfig(configId);
      return recv_getSystemConfig();
    }

    public void send_getSystemConfig(String configId) throws org.apache.thrift.TException
    {
      getSystemConfig_args args = new getSystemConfig_args();
      args.setConfigId(configId);
      sendBase("getSystemConfig", args);
    }

    public one.show.manage.thrift.view.SystemConfigView recv_getSystemConfig() throws org.apache.thrift.TException
    {
      getSystemConfig_result result = new getSystemConfig_result();
      receiveBase(result, "getSystemConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSystemConfig failed: unknown result");
    }

    public void updateSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView) throws org.apache.thrift.TException
    {
      send_updateSystemConfig(systemConfigView);
      recv_updateSystemConfig();
    }

    public void send_updateSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView) throws org.apache.thrift.TException
    {
      updateSystemConfig_args args = new updateSystemConfig_args();
      args.setSystemConfigView(systemConfigView);
      sendBase("updateSystemConfig", args);
    }

    public void recv_updateSystemConfig() throws org.apache.thrift.TException
    {
      updateSystemConfig_result result = new updateSystemConfig_result();
      receiveBase(result, "updateSystemConfig");
      return;
    }

    public List<one.show.manage.thrift.view.AdvertisementView> findAdvertisementView() throws org.apache.thrift.TException
    {
      send_findAdvertisementView();
      return recv_findAdvertisementView();
    }

    public void send_findAdvertisementView() throws org.apache.thrift.TException
    {
      findAdvertisementView_args args = new findAdvertisementView_args();
      sendBase("findAdvertisementView", args);
    }

    public List<one.show.manage.thrift.view.AdvertisementView> recv_findAdvertisementView() throws org.apache.thrift.TException
    {
      findAdvertisementView_result result = new findAdvertisementView_result();
      receiveBase(result, "findAdvertisementView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAdvertisementView failed: unknown result");
    }

    public List<one.show.manage.thrift.view.SystemConfigView> getSystemConfigList(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException
    {
      send_getSystemConfigList(paramMap, start, count);
      return recv_getSystemConfigList();
    }

    public void send_getSystemConfigList(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException
    {
      getSystemConfigList_args args = new getSystemConfigList_args();
      args.setParamMap(paramMap);
      args.setStart(start);
      args.setCount(count);
      sendBase("getSystemConfigList", args);
    }

    public List<one.show.manage.thrift.view.SystemConfigView> recv_getSystemConfigList() throws org.apache.thrift.TException
    {
      getSystemConfigList_result result = new getSystemConfigList_result();
      receiveBase(result, "getSystemConfigList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSystemConfigList failed: unknown result");
    }

    public void addSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView) throws org.apache.thrift.TException
    {
      send_addSystemConfig(systemConfigView);
      recv_addSystemConfig();
    }

    public void send_addSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView) throws org.apache.thrift.TException
    {
      addSystemConfig_args args = new addSystemConfig_args();
      args.setSystemConfigView(systemConfigView);
      sendBase("addSystemConfig", args);
    }

    public void recv_addSystemConfig() throws org.apache.thrift.TException
    {
      addSystemConfig_result result = new addSystemConfig_result();
      receiveBase(result, "addSystemConfig");
      return;
    }

    public void deleteSystemConfig(String configId) throws org.apache.thrift.TException
    {
      send_deleteSystemConfig(configId);
      recv_deleteSystemConfig();
    }

    public void send_deleteSystemConfig(String configId) throws org.apache.thrift.TException
    {
      deleteSystemConfig_args args = new deleteSystemConfig_args();
      args.setConfigId(configId);
      sendBase("deleteSystemConfig", args);
    }

    public void recv_deleteSystemConfig() throws org.apache.thrift.TException
    {
      deleteSystemConfig_result result = new deleteSystemConfig_result();
      receiveBase(result, "deleteSystemConfig");
      return;
    }

    public one.show.manage.thrift.view.SystemConfigView getSystemConfigByVersion(String version) throws org.apache.thrift.TException
    {
      send_getSystemConfigByVersion(version);
      return recv_getSystemConfigByVersion();
    }

    public void send_getSystemConfigByVersion(String version) throws org.apache.thrift.TException
    {
      getSystemConfigByVersion_args args = new getSystemConfigByVersion_args();
      args.setVersion(version);
      sendBase("getSystemConfigByVersion", args);
    }

    public one.show.manage.thrift.view.SystemConfigView recv_getSystemConfigByVersion() throws org.apache.thrift.TException
    {
      getSystemConfigByVersion_result result = new getSystemConfigByVersion_result();
      receiveBase(result, "getSystemConfigByVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSystemConfigByVersion failed: unknown result");
    }

    public void saveRegister(one.show.manage.thrift.view.RegisterView registerView) throws org.apache.thrift.TException
    {
      send_saveRegister(registerView);
      recv_saveRegister();
    }

    public void send_saveRegister(one.show.manage.thrift.view.RegisterView registerView) throws org.apache.thrift.TException
    {
      saveRegister_args args = new saveRegister_args();
      args.setRegisterView(registerView);
      sendBase("saveRegister", args);
    }

    public void recv_saveRegister() throws org.apache.thrift.TException
    {
      saveRegister_result result = new saveRegister_result();
      receiveBase(result, "saveRegister");
      return;
    }

    public one.show.manage.thrift.view.RegisterView getRegisterByUid(String uid) throws org.apache.thrift.TException
    {
      send_getRegisterByUid(uid);
      return recv_getRegisterByUid();
    }

    public void send_getRegisterByUid(String uid) throws org.apache.thrift.TException
    {
      getRegisterByUid_args args = new getRegisterByUid_args();
      args.setUid(uid);
      sendBase("getRegisterByUid", args);
    }

    public one.show.manage.thrift.view.RegisterView recv_getRegisterByUid() throws org.apache.thrift.TException
    {
      getRegisterByUid_result result = new getRegisterByUid_result();
      receiveBase(result, "getRegisterByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegisterByUid failed: unknown result");
    }

    public void updateRegisterByUid(String uid, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_updateRegisterByUid(uid, paramMap);
      recv_updateRegisterByUid();
    }

    public void send_updateRegisterByUid(String uid, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      updateRegisterByUid_args args = new updateRegisterByUid_args();
      args.setUid(uid);
      args.setParamMap(paramMap);
      sendBase("updateRegisterByUid", args);
    }

    public void recv_updateRegisterByUid() throws org.apache.thrift.TException
    {
      updateRegisterByUid_result result = new updateRegisterByUid_result();
      receiveBase(result, "updateRegisterByUid");
      return;
    }

    public one.show.manage.thrift.view.RegisterListView getRegisterList(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException
    {
      send_getRegisterList(paramMap, start, count);
      return recv_getRegisterList();
    }

    public void send_getRegisterList(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException
    {
      getRegisterList_args args = new getRegisterList_args();
      args.setParamMap(paramMap);
      args.setStart(start);
      args.setCount(count);
      sendBase("getRegisterList", args);
    }

    public one.show.manage.thrift.view.RegisterListView recv_getRegisterList() throws org.apache.thrift.TException
    {
      getRegisterList_result result = new getRegisterList_result();
      receiveBase(result, "getRegisterList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegisterList failed: unknown result");
    }

    public void updateRegister(one.show.manage.thrift.view.RegisterView registerView) throws org.apache.thrift.TException
    {
      send_updateRegister(registerView);
      recv_updateRegister();
    }

    public void send_updateRegister(one.show.manage.thrift.view.RegisterView registerView) throws org.apache.thrift.TException
    {
      updateRegister_args args = new updateRegister_args();
      args.setRegisterView(registerView);
      sendBase("updateRegister", args);
    }

    public void recv_updateRegister() throws org.apache.thrift.TException
    {
      updateRegister_result result = new updateRegister_result();
      receiveBase(result, "updateRegister");
      return;
    }

    public List<one.show.manage.thrift.view.MasterLevelView> findMasterLevelList() throws org.apache.thrift.TException
    {
      send_findMasterLevelList();
      return recv_findMasterLevelList();
    }

    public void send_findMasterLevelList() throws org.apache.thrift.TException
    {
      findMasterLevelList_args args = new findMasterLevelList_args();
      sendBase("findMasterLevelList", args);
    }

    public List<one.show.manage.thrift.view.MasterLevelView> recv_findMasterLevelList() throws org.apache.thrift.TException
    {
      findMasterLevelList_result result = new findMasterLevelList_result();
      receiveBase(result, "findMasterLevelList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMasterLevelList failed: unknown result");
    }

    public List<one.show.manage.thrift.view.FanLevelView> findFanLevelList() throws org.apache.thrift.TException
    {
      send_findFanLevelList();
      return recv_findFanLevelList();
    }

    public void send_findFanLevelList() throws org.apache.thrift.TException
    {
      findFanLevelList_args args = new findFanLevelList_args();
      sendBase("findFanLevelList", args);
    }

    public List<one.show.manage.thrift.view.FanLevelView> recv_findFanLevelList() throws org.apache.thrift.TException
    {
      findFanLevelList_result result = new findFanLevelList_result();
      receiveBase(result, "findFanLevelList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFanLevelList failed: unknown result");
    }

    public one.show.manage.thrift.view.NoticeView findNoticeById(int id) throws org.apache.thrift.TException
    {
      send_findNoticeById(id);
      return recv_findNoticeById();
    }

    public void send_findNoticeById(int id) throws org.apache.thrift.TException
    {
      findNoticeById_args args = new findNoticeById_args();
      args.setId(id);
      sendBase("findNoticeById", args);
    }

    public one.show.manage.thrift.view.NoticeView recv_findNoticeById() throws org.apache.thrift.TException
    {
      findNoticeById_result result = new findNoticeById_result();
      receiveBase(result, "findNoticeById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findNoticeById failed: unknown result");
    }

    public List<one.show.manage.thrift.view.NoticeView> findEffecNoticeList() throws org.apache.thrift.TException
    {
      send_findEffecNoticeList();
      return recv_findEffecNoticeList();
    }

    public void send_findEffecNoticeList() throws org.apache.thrift.TException
    {
      findEffecNoticeList_args args = new findEffecNoticeList_args();
      sendBase("findEffecNoticeList", args);
    }

    public List<one.show.manage.thrift.view.NoticeView> recv_findEffecNoticeList() throws org.apache.thrift.TException
    {
      findEffecNoticeList_result result = new findEffecNoticeList_result();
      receiveBase(result, "findEffecNoticeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findEffecNoticeList failed: unknown result");
    }

    public one.show.manage.thrift.view.NoticeListView findNoticeList(int start, int count) throws org.apache.thrift.TException
    {
      send_findNoticeList(start, count);
      return recv_findNoticeList();
    }

    public void send_findNoticeList(int start, int count) throws org.apache.thrift.TException
    {
      findNoticeList_args args = new findNoticeList_args();
      args.setStart(start);
      args.setCount(count);
      sendBase("findNoticeList", args);
    }

    public one.show.manage.thrift.view.NoticeListView recv_findNoticeList() throws org.apache.thrift.TException
    {
      findNoticeList_result result = new findNoticeList_result();
      receiveBase(result, "findNoticeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findNoticeList failed: unknown result");
    }

    public void updateNoticeById(int id, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_updateNoticeById(id, paramMap);
      recv_updateNoticeById();
    }

    public void send_updateNoticeById(int id, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      updateNoticeById_args args = new updateNoticeById_args();
      args.setId(id);
      args.setParamMap(paramMap);
      sendBase("updateNoticeById", args);
    }

    public void recv_updateNoticeById() throws org.apache.thrift.TException
    {
      updateNoticeById_result result = new updateNoticeById_result();
      receiveBase(result, "updateNoticeById");
      return;
    }

    public void deleteNoticeById(int id) throws org.apache.thrift.TException
    {
      send_deleteNoticeById(id);
      recv_deleteNoticeById();
    }

    public void send_deleteNoticeById(int id) throws org.apache.thrift.TException
    {
      deleteNoticeById_args args = new deleteNoticeById_args();
      args.setId(id);
      sendBase("deleteNoticeById", args);
    }

    public void recv_deleteNoticeById() throws org.apache.thrift.TException
    {
      deleteNoticeById_result result = new deleteNoticeById_result();
      receiveBase(result, "deleteNoticeById");
      return;
    }

    public void addNotice(one.show.manage.thrift.view.NoticeView noticeView) throws org.apache.thrift.TException
    {
      send_addNotice(noticeView);
      recv_addNotice();
    }

    public void send_addNotice(one.show.manage.thrift.view.NoticeView noticeView) throws org.apache.thrift.TException
    {
      addNotice_args args = new addNotice_args();
      args.setNoticeView(noticeView);
      sendBase("addNotice", args);
    }

    public void recv_addNotice() throws org.apache.thrift.TException
    {
      addNotice_result result = new addNotice_result();
      receiveBase(result, "addNotice");
      return;
    }

    public one.show.manage.thrift.view.UserCDNListView findUserCDNList(int start, int count) throws org.apache.thrift.TException
    {
      send_findUserCDNList(start, count);
      return recv_findUserCDNList();
    }

    public void send_findUserCDNList(int start, int count) throws org.apache.thrift.TException
    {
      findUserCDNList_args args = new findUserCDNList_args();
      args.setStart(start);
      args.setCount(count);
      sendBase("findUserCDNList", args);
    }

    public one.show.manage.thrift.view.UserCDNListView recv_findUserCDNList() throws org.apache.thrift.TException
    {
      findUserCDNList_result result = new findUserCDNList_result();
      receiveBase(result, "findUserCDNList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserCDNList failed: unknown result");
    }

    public void updateUserCDNById(one.show.manage.thrift.view.UserCDNView userCDNView) throws org.apache.thrift.TException
    {
      send_updateUserCDNById(userCDNView);
      recv_updateUserCDNById();
    }

    public void send_updateUserCDNById(one.show.manage.thrift.view.UserCDNView userCDNView) throws org.apache.thrift.TException
    {
      updateUserCDNById_args args = new updateUserCDNById_args();
      args.setUserCDNView(userCDNView);
      sendBase("updateUserCDNById", args);
    }

    public void recv_updateUserCDNById() throws org.apache.thrift.TException
    {
      updateUserCDNById_result result = new updateUserCDNById_result();
      receiveBase(result, "updateUserCDNById");
      return;
    }

    public void deleteUserCDN(long uid) throws org.apache.thrift.TException
    {
      send_deleteUserCDN(uid);
      recv_deleteUserCDN();
    }

    public void send_deleteUserCDN(long uid) throws org.apache.thrift.TException
    {
      deleteUserCDN_args args = new deleteUserCDN_args();
      args.setUid(uid);
      sendBase("deleteUserCDN", args);
    }

    public void recv_deleteUserCDN() throws org.apache.thrift.TException
    {
      deleteUserCDN_result result = new deleteUserCDN_result();
      receiveBase(result, "deleteUserCDN");
      return;
    }

    public void saveUserCDN(one.show.manage.thrift.view.UserCDNView userCDNView) throws org.apache.thrift.TException
    {
      send_saveUserCDN(userCDNView);
      recv_saveUserCDN();
    }

    public void send_saveUserCDN(one.show.manage.thrift.view.UserCDNView userCDNView) throws org.apache.thrift.TException
    {
      saveUserCDN_args args = new saveUserCDN_args();
      args.setUserCDNView(userCDNView);
      sendBase("saveUserCDN", args);
    }

    public void recv_saveUserCDN() throws org.apache.thrift.TException
    {
      saveUserCDN_result result = new saveUserCDN_result();
      receiveBase(result, "saveUserCDN");
      return;
    }

    public one.show.manage.thrift.view.UserCDNView findUserCDNById(long uid) throws org.apache.thrift.TException
    {
      send_findUserCDNById(uid);
      return recv_findUserCDNById();
    }

    public void send_findUserCDNById(long uid) throws org.apache.thrift.TException
    {
      findUserCDNById_args args = new findUserCDNById_args();
      args.setUid(uid);
      sendBase("findUserCDNById", args);
    }

    public one.show.manage.thrift.view.UserCDNView recv_findUserCDNById() throws org.apache.thrift.TException
    {
      findUserCDNById_result result = new findUserCDNById_result();
      receiveBase(result, "findUserCDNById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserCDNById failed: unknown result");
    }

    public List<one.show.manage.thrift.view.RobotSendGiftRatioView> findRobotSendGiftRatioList() throws org.apache.thrift.TException
    {
      send_findRobotSendGiftRatioList();
      return recv_findRobotSendGiftRatioList();
    }

    public void send_findRobotSendGiftRatioList() throws org.apache.thrift.TException
    {
      findRobotSendGiftRatioList_args args = new findRobotSendGiftRatioList_args();
      sendBase("findRobotSendGiftRatioList", args);
    }

    public List<one.show.manage.thrift.view.RobotSendGiftRatioView> recv_findRobotSendGiftRatioList() throws org.apache.thrift.TException
    {
      findRobotSendGiftRatioList_result result = new findRobotSendGiftRatioList_result();
      receiveBase(result, "findRobotSendGiftRatioList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRobotSendGiftRatioList failed: unknown result");
    }

    public void saveRobotSendGiftRatio(one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView) throws org.apache.thrift.TException
    {
      send_saveRobotSendGiftRatio(robotSendGiftRatioView);
      recv_saveRobotSendGiftRatio();
    }

    public void send_saveRobotSendGiftRatio(one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView) throws org.apache.thrift.TException
    {
      saveRobotSendGiftRatio_args args = new saveRobotSendGiftRatio_args();
      args.setRobotSendGiftRatioView(robotSendGiftRatioView);
      sendBase("saveRobotSendGiftRatio", args);
    }

    public void recv_saveRobotSendGiftRatio() throws org.apache.thrift.TException
    {
      saveRobotSendGiftRatio_result result = new saveRobotSendGiftRatio_result();
      receiveBase(result, "saveRobotSendGiftRatio");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findVersionControlByAgentType(int agentType, org.apache.thrift.async.AsyncMethodCallback<findVersionControlByAgentType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findVersionControlByAgentType_call method_call = new findVersionControlByAgentType_call(agentType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findVersionControlByAgentType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int agentType;
      public findVersionControlByAgentType_call(int agentType, org.apache.thrift.async.AsyncMethodCallback<findVersionControlByAgentType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agentType = agentType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findVersionControlByAgentType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findVersionControlByAgentType_args args = new findVersionControlByAgentType_args();
        args.setAgentType(agentType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.VersionControlView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findVersionControlByAgentType();
      }
    }

    public void findPlazaLinks(org.apache.thrift.async.AsyncMethodCallback<findPlazaLinks_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPlazaLinks_call method_call = new findPlazaLinks_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPlazaLinks_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findPlazaLinks_call(org.apache.thrift.async.AsyncMethodCallback<findPlazaLinks_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPlazaLinks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPlazaLinks_args args = new findPlazaLinks_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.LinkView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPlazaLinks();
      }
    }

    public void saveReport(one.show.manage.thrift.view.ReportView reportView, org.apache.thrift.async.AsyncMethodCallback<saveReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveReport_call method_call = new saveReport_call(reportView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.ReportView reportView;
      public saveReport_call(one.show.manage.thrift.view.ReportView reportView, org.apache.thrift.async.AsyncMethodCallback<saveReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportView = reportView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveReport_args args = new saveReport_args();
        args.setReportView(reportView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveReport();
      }
    }

    public void findHeaderPortraitList(int pageSize, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findHeaderPortraitList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findHeaderPortraitList_call method_call = new findHeaderPortraitList_call(pageSize, pageCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findHeaderPortraitList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageSize;
      private int pageCount;
      public findHeaderPortraitList_call(int pageSize, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findHeaderPortraitList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageSize = pageSize;
        this.pageCount = pageCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findHeaderPortraitList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findHeaderPortraitList_args args = new findHeaderPortraitList_args();
        args.setPageSize(pageSize);
        args.setPageCount(pageCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.HeaderPortraitView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findHeaderPortraitList();
      }
    }

    public void deleteHeaderPortrait(long id, org.apache.thrift.async.AsyncMethodCallback<deleteHeaderPortrait_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHeaderPortrait_call method_call = new deleteHeaderPortrait_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHeaderPortrait_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public deleteHeaderPortrait_call(long id, org.apache.thrift.async.AsyncMethodCallback<deleteHeaderPortrait_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHeaderPortrait", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHeaderPortrait_args args = new deleteHeaderPortrait_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteHeaderPortrait();
      }
    }

    public void deleteHeaderPortraitList(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback<deleteHeaderPortraitList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHeaderPortraitList_call method_call = new deleteHeaderPortraitList_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHeaderPortraitList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public deleteHeaderPortraitList_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback<deleteHeaderPortraitList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHeaderPortraitList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHeaderPortraitList_args args = new deleteHeaderPortraitList_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteHeaderPortraitList();
      }
    }

    public void saveHeaderPortraitList(one.show.manage.thrift.view.HeaderPortraitView headerPortraitView, org.apache.thrift.async.AsyncMethodCallback<saveHeaderPortraitList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveHeaderPortraitList_call method_call = new saveHeaderPortraitList_call(headerPortraitView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveHeaderPortraitList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.HeaderPortraitView headerPortraitView;
      public saveHeaderPortraitList_call(one.show.manage.thrift.view.HeaderPortraitView headerPortraitView, org.apache.thrift.async.AsyncMethodCallback<saveHeaderPortraitList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.headerPortraitView = headerPortraitView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveHeaderPortraitList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveHeaderPortraitList_args args = new saveHeaderPortraitList_args();
        args.setHeaderPortraitView(headerPortraitView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveHeaderPortraitList();
      }
    }

    public void findAdminHeaderPortraitListView(int pageSize, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findAdminHeaderPortraitListView_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAdminHeaderPortraitListView_call method_call = new findAdminHeaderPortraitListView_call(pageSize, pageCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAdminHeaderPortraitListView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageSize;
      private int pageCount;
      public findAdminHeaderPortraitListView_call(int pageSize, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findAdminHeaderPortraitListView_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageSize = pageSize;
        this.pageCount = pageCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAdminHeaderPortraitListView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAdminHeaderPortraitListView_args args = new findAdminHeaderPortraitListView_args();
        args.setPageSize(pageSize);
        args.setPageCount(pageCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.AdminHeaderPortraitListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAdminHeaderPortraitListView();
      }
    }

    public void findGiftList(int giftType, int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findGiftList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGiftList_call method_call = new findGiftList_call(giftType, status, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGiftList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int giftType;
      private int status;
      private int start;
      private int count;
      public findGiftList_call(int giftType, int status, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findGiftList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.giftType = giftType;
        this.status = status;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGiftList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGiftList_args args = new findGiftList_args();
        args.setGiftType(giftType);
        args.setStatus(status);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.GiftListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGiftList();
      }
    }

    public void saveGift(one.show.manage.thrift.view.GiftView giftView, org.apache.thrift.async.AsyncMethodCallback<saveGift_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveGift_call method_call = new saveGift_call(giftView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveGift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.GiftView giftView;
      public saveGift_call(one.show.manage.thrift.view.GiftView giftView, org.apache.thrift.async.AsyncMethodCallback<saveGift_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.giftView = giftView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveGift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveGift_args args = new saveGift_args();
        args.setGiftView(giftView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveGift();
      }
    }

    public void deleteGift(int giftId, org.apache.thrift.async.AsyncMethodCallback<deleteGift_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteGift_call method_call = new deleteGift_call(giftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteGift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int giftId;
      public deleteGift_call(int giftId, org.apache.thrift.async.AsyncMethodCallback<deleteGift_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.giftId = giftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteGift_args args = new deleteGift_args();
        args.setGiftId(giftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteGift();
      }
    }

    public void findGiftTypeList(int status, org.apache.thrift.async.AsyncMethodCallback<findGiftTypeList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGiftTypeList_call method_call = new findGiftTypeList_call(status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGiftTypeList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int status;
      public findGiftTypeList_call(int status, org.apache.thrift.async.AsyncMethodCallback<findGiftTypeList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGiftTypeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGiftTypeList_args args = new findGiftTypeList_args();
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.GiftTypeView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGiftTypeList();
      }
    }

    public void findGiftById(int giftId, org.apache.thrift.async.AsyncMethodCallback<findGiftById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGiftById_call method_call = new findGiftById_call(giftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGiftById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int giftId;
      public findGiftById_call(int giftId, org.apache.thrift.async.AsyncMethodCallback<findGiftById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.giftId = giftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGiftById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGiftById_args args = new findGiftById_args();
        args.setGiftId(giftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.GiftView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGiftById();
      }
    }

    public void updateGift(int giftId, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateGift_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGift_call method_call = new updateGift_call(giftId, updateContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int giftId;
      private Map<String,String> updateContent;
      public updateGift_call(int giftId, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateGift_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.giftId = giftId;
        this.updateContent = updateContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGift_args args = new updateGift_args();
        args.setGiftId(giftId);
        args.setUpdateContent(updateContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateGift();
      }
    }

    public void saveSendExchange(one.show.manage.thrift.view.SendExchangeView sendExchangeView, org.apache.thrift.async.AsyncMethodCallback<saveSendExchange_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveSendExchange_call method_call = new saveSendExchange_call(sendExchangeView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveSendExchange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.SendExchangeView sendExchangeView;
      public saveSendExchange_call(one.show.manage.thrift.view.SendExchangeView sendExchangeView, org.apache.thrift.async.AsyncMethodCallback<saveSendExchange_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sendExchangeView = sendExchangeView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveSendExchange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveSendExchange_args args = new saveSendExchange_args();
        args.setSendExchangeView(sendExchangeView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveSendExchange();
      }
    }

    public void findSendExchangeByUid(long uid, int sendType, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findSendExchangeByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSendExchangeByUid_call method_call = new findSendExchangeByUid_call(uid, sendType, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSendExchangeByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int sendType;
      private int start;
      private int count;
      public findSendExchangeByUid_call(long uid, int sendType, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findSendExchangeByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.sendType = sendType;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSendExchangeByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSendExchangeByUid_args args = new findSendExchangeByUid_args();
        args.setUid(uid);
        args.setSendType(sendType);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.SendExchangeView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSendExchangeByUid();
      }
    }

    public void findSendExchangeCountByUid(long uid, int sendType, org.apache.thrift.async.AsyncMethodCallback<findSendExchangeCountByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSendExchangeCountByUid_call method_call = new findSendExchangeCountByUid_call(uid, sendType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSendExchangeCountByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int sendType;
      public findSendExchangeCountByUid_call(long uid, int sendType, org.apache.thrift.async.AsyncMethodCallback<findSendExchangeCountByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.sendType = sendType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSendExchangeCountByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSendExchangeCountByUid_args args = new findSendExchangeCountByUid_args();
        args.setUid(uid);
        args.setSendType(sendType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSendExchangeCountByUid();
      }
    }

    public void getSystemConfig(String configId, org.apache.thrift.async.AsyncMethodCallback<getSystemConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSystemConfig_call method_call = new getSystemConfig_call(configId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSystemConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configId;
      public getSystemConfig_call(String configId, org.apache.thrift.async.AsyncMethodCallback<getSystemConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configId = configId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSystemConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSystemConfig_args args = new getSystemConfig_args();
        args.setConfigId(configId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.SystemConfigView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSystemConfig();
      }
    }

    public void updateSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView, org.apache.thrift.async.AsyncMethodCallback<updateSystemConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSystemConfig_call method_call = new updateSystemConfig_call(systemConfigView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSystemConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.SystemConfigView systemConfigView;
      public updateSystemConfig_call(one.show.manage.thrift.view.SystemConfigView systemConfigView, org.apache.thrift.async.AsyncMethodCallback<updateSystemConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.systemConfigView = systemConfigView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSystemConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSystemConfig_args args = new updateSystemConfig_args();
        args.setSystemConfigView(systemConfigView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSystemConfig();
      }
    }

    public void findAdvertisementView(org.apache.thrift.async.AsyncMethodCallback<findAdvertisementView_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAdvertisementView_call method_call = new findAdvertisementView_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAdvertisementView_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAdvertisementView_call(org.apache.thrift.async.AsyncMethodCallback<findAdvertisementView_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAdvertisementView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAdvertisementView_args args = new findAdvertisementView_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.AdvertisementView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAdvertisementView();
      }
    }

    public void getSystemConfigList(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<getSystemConfigList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSystemConfigList_call method_call = new getSystemConfigList_call(paramMap, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSystemConfigList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      private int start;
      private int count;
      public getSystemConfigList_call(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<getSystemConfigList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSystemConfigList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSystemConfigList_args args = new getSystemConfigList_args();
        args.setParamMap(paramMap);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.SystemConfigView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSystemConfigList();
      }
    }

    public void addSystemConfig(one.show.manage.thrift.view.SystemConfigView systemConfigView, org.apache.thrift.async.AsyncMethodCallback<addSystemConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSystemConfig_call method_call = new addSystemConfig_call(systemConfigView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSystemConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.SystemConfigView systemConfigView;
      public addSystemConfig_call(one.show.manage.thrift.view.SystemConfigView systemConfigView, org.apache.thrift.async.AsyncMethodCallback<addSystemConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.systemConfigView = systemConfigView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSystemConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSystemConfig_args args = new addSystemConfig_args();
        args.setSystemConfigView(systemConfigView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addSystemConfig();
      }
    }

    public void deleteSystemConfig(String configId, org.apache.thrift.async.AsyncMethodCallback<deleteSystemConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSystemConfig_call method_call = new deleteSystemConfig_call(configId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSystemConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configId;
      public deleteSystemConfig_call(String configId, org.apache.thrift.async.AsyncMethodCallback<deleteSystemConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configId = configId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSystemConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSystemConfig_args args = new deleteSystemConfig_args();
        args.setConfigId(configId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteSystemConfig();
      }
    }

    public void getSystemConfigByVersion(String version, org.apache.thrift.async.AsyncMethodCallback<getSystemConfigByVersion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSystemConfigByVersion_call method_call = new getSystemConfigByVersion_call(version, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSystemConfigByVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String version;
      public getSystemConfigByVersion_call(String version, org.apache.thrift.async.AsyncMethodCallback<getSystemConfigByVersion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.version = version;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSystemConfigByVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSystemConfigByVersion_args args = new getSystemConfigByVersion_args();
        args.setVersion(version);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.SystemConfigView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSystemConfigByVersion();
      }
    }

    public void saveRegister(one.show.manage.thrift.view.RegisterView registerView, org.apache.thrift.async.AsyncMethodCallback<saveRegister_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveRegister_call method_call = new saveRegister_call(registerView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.RegisterView registerView;
      public saveRegister_call(one.show.manage.thrift.view.RegisterView registerView, org.apache.thrift.async.AsyncMethodCallback<saveRegister_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registerView = registerView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveRegister_args args = new saveRegister_args();
        args.setRegisterView(registerView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveRegister();
      }
    }

    public void getRegisterByUid(String uid, org.apache.thrift.async.AsyncMethodCallback<getRegisterByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegisterByUid_call method_call = new getRegisterByUid_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegisterByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uid;
      public getRegisterByUid_call(String uid, org.apache.thrift.async.AsyncMethodCallback<getRegisterByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegisterByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegisterByUid_args args = new getRegisterByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.RegisterView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegisterByUid();
      }
    }

    public void updateRegisterByUid(String uid, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateRegisterByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRegisterByUid_call method_call = new updateRegisterByUid_call(uid, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRegisterByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uid;
      private Map<String,String> paramMap;
      public updateRegisterByUid_call(String uid, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateRegisterByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRegisterByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRegisterByUid_args args = new updateRegisterByUid_args();
        args.setUid(uid);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateRegisterByUid();
      }
    }

    public void getRegisterList(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<getRegisterList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegisterList_call method_call = new getRegisterList_call(paramMap, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegisterList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      private int start;
      private int count;
      public getRegisterList_call(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<getRegisterList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegisterList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegisterList_args args = new getRegisterList_args();
        args.setParamMap(paramMap);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.RegisterListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegisterList();
      }
    }

    public void updateRegister(one.show.manage.thrift.view.RegisterView registerView, org.apache.thrift.async.AsyncMethodCallback<updateRegister_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRegister_call method_call = new updateRegister_call(registerView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.RegisterView registerView;
      public updateRegister_call(one.show.manage.thrift.view.RegisterView registerView, org.apache.thrift.async.AsyncMethodCallback<updateRegister_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registerView = registerView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRegister_args args = new updateRegister_args();
        args.setRegisterView(registerView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateRegister();
      }
    }

    public void findMasterLevelList(org.apache.thrift.async.AsyncMethodCallback<findMasterLevelList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMasterLevelList_call method_call = new findMasterLevelList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMasterLevelList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findMasterLevelList_call(org.apache.thrift.async.AsyncMethodCallback<findMasterLevelList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMasterLevelList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMasterLevelList_args args = new findMasterLevelList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.MasterLevelView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMasterLevelList();
      }
    }

    public void findFanLevelList(org.apache.thrift.async.AsyncMethodCallback<findFanLevelList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFanLevelList_call method_call = new findFanLevelList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFanLevelList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findFanLevelList_call(org.apache.thrift.async.AsyncMethodCallback<findFanLevelList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFanLevelList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFanLevelList_args args = new findFanLevelList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.FanLevelView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFanLevelList();
      }
    }

    public void findNoticeById(int id, org.apache.thrift.async.AsyncMethodCallback<findNoticeById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findNoticeById_call method_call = new findNoticeById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findNoticeById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public findNoticeById_call(int id, org.apache.thrift.async.AsyncMethodCallback<findNoticeById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findNoticeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findNoticeById_args args = new findNoticeById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.NoticeView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findNoticeById();
      }
    }

    public void findEffecNoticeList(org.apache.thrift.async.AsyncMethodCallback<findEffecNoticeList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findEffecNoticeList_call method_call = new findEffecNoticeList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findEffecNoticeList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findEffecNoticeList_call(org.apache.thrift.async.AsyncMethodCallback<findEffecNoticeList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findEffecNoticeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findEffecNoticeList_args args = new findEffecNoticeList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.NoticeView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findEffecNoticeList();
      }
    }

    public void findNoticeList(int start, int count, org.apache.thrift.async.AsyncMethodCallback<findNoticeList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findNoticeList_call method_call = new findNoticeList_call(start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findNoticeList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int start;
      private int count;
      public findNoticeList_call(int start, int count, org.apache.thrift.async.AsyncMethodCallback<findNoticeList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findNoticeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findNoticeList_args args = new findNoticeList_args();
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.NoticeListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findNoticeList();
      }
    }

    public void updateNoticeById(int id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateNoticeById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNoticeById_call method_call = new updateNoticeById_call(id, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNoticeById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private Map<String,String> paramMap;
      public updateNoticeById_call(int id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateNoticeById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNoticeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNoticeById_args args = new updateNoticeById_args();
        args.setId(id);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateNoticeById();
      }
    }

    public void deleteNoticeById(int id, org.apache.thrift.async.AsyncMethodCallback<deleteNoticeById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteNoticeById_call method_call = new deleteNoticeById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteNoticeById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public deleteNoticeById_call(int id, org.apache.thrift.async.AsyncMethodCallback<deleteNoticeById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteNoticeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteNoticeById_args args = new deleteNoticeById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteNoticeById();
      }
    }

    public void addNotice(one.show.manage.thrift.view.NoticeView noticeView, org.apache.thrift.async.AsyncMethodCallback<addNotice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNotice_call method_call = new addNotice_call(noticeView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.NoticeView noticeView;
      public addNotice_call(one.show.manage.thrift.view.NoticeView noticeView, org.apache.thrift.async.AsyncMethodCallback<addNotice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.noticeView = noticeView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNotice_args args = new addNotice_args();
        args.setNoticeView(noticeView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addNotice();
      }
    }

    public void findUserCDNList(int start, int count, org.apache.thrift.async.AsyncMethodCallback<findUserCDNList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserCDNList_call method_call = new findUserCDNList_call(start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserCDNList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int start;
      private int count;
      public findUserCDNList_call(int start, int count, org.apache.thrift.async.AsyncMethodCallback<findUserCDNList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserCDNList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserCDNList_args args = new findUserCDNList_args();
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.UserCDNListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserCDNList();
      }
    }

    public void updateUserCDNById(one.show.manage.thrift.view.UserCDNView userCDNView, org.apache.thrift.async.AsyncMethodCallback<updateUserCDNById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserCDNById_call method_call = new updateUserCDNById_call(userCDNView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserCDNById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.UserCDNView userCDNView;
      public updateUserCDNById_call(one.show.manage.thrift.view.UserCDNView userCDNView, org.apache.thrift.async.AsyncMethodCallback<updateUserCDNById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userCDNView = userCDNView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserCDNById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserCDNById_args args = new updateUserCDNById_args();
        args.setUserCDNView(userCDNView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateUserCDNById();
      }
    }

    public void deleteUserCDN(long uid, org.apache.thrift.async.AsyncMethodCallback<deleteUserCDN_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUserCDN_call method_call = new deleteUserCDN_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUserCDN_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public deleteUserCDN_call(long uid, org.apache.thrift.async.AsyncMethodCallback<deleteUserCDN_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUserCDN", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUserCDN_args args = new deleteUserCDN_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteUserCDN();
      }
    }

    public void saveUserCDN(one.show.manage.thrift.view.UserCDNView userCDNView, org.apache.thrift.async.AsyncMethodCallback<saveUserCDN_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveUserCDN_call method_call = new saveUserCDN_call(userCDNView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveUserCDN_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.UserCDNView userCDNView;
      public saveUserCDN_call(one.show.manage.thrift.view.UserCDNView userCDNView, org.apache.thrift.async.AsyncMethodCallback<saveUserCDN_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userCDNView = userCDNView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveUserCDN", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveUserCDN_args args = new saveUserCDN_args();
        args.setUserCDNView(userCDNView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveUserCDN();
      }
    }

    public void findUserCDNById(long uid, org.apache.thrift.async.AsyncMethodCallback<findUserCDNById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserCDNById_call method_call = new findUserCDNById_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserCDNById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public findUserCDNById_call(long uid, org.apache.thrift.async.AsyncMethodCallback<findUserCDNById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserCDNById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserCDNById_args args = new findUserCDNById_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.UserCDNView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserCDNById();
      }
    }

    public void findRobotSendGiftRatioList(org.apache.thrift.async.AsyncMethodCallback<findRobotSendGiftRatioList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRobotSendGiftRatioList_call method_call = new findRobotSendGiftRatioList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRobotSendGiftRatioList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findRobotSendGiftRatioList_call(org.apache.thrift.async.AsyncMethodCallback<findRobotSendGiftRatioList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRobotSendGiftRatioList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRobotSendGiftRatioList_args args = new findRobotSendGiftRatioList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.RobotSendGiftRatioView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRobotSendGiftRatioList();
      }
    }

    public void saveRobotSendGiftRatio(one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView, org.apache.thrift.async.AsyncMethodCallback<saveRobotSendGiftRatio_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveRobotSendGiftRatio_call method_call = new saveRobotSendGiftRatio_call(robotSendGiftRatioView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveRobotSendGiftRatio_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView;
      public saveRobotSendGiftRatio_call(one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView, org.apache.thrift.async.AsyncMethodCallback<saveRobotSendGiftRatio_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.robotSendGiftRatioView = robotSendGiftRatioView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveRobotSendGiftRatio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveRobotSendGiftRatio_args args = new saveRobotSendGiftRatio_args();
        args.setRobotSendGiftRatioView(robotSendGiftRatioView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveRobotSendGiftRatio();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findVersionControlByAgentType", new findVersionControlByAgentType());
      processMap.put("findPlazaLinks", new findPlazaLinks());
      processMap.put("saveReport", new saveReport());
      processMap.put("findHeaderPortraitList", new findHeaderPortraitList());
      processMap.put("deleteHeaderPortrait", new deleteHeaderPortrait());
      processMap.put("deleteHeaderPortraitList", new deleteHeaderPortraitList());
      processMap.put("saveHeaderPortraitList", new saveHeaderPortraitList());
      processMap.put("findAdminHeaderPortraitListView", new findAdminHeaderPortraitListView());
      processMap.put("findGiftList", new findGiftList());
      processMap.put("saveGift", new saveGift());
      processMap.put("deleteGift", new deleteGift());
      processMap.put("findGiftTypeList", new findGiftTypeList());
      processMap.put("findGiftById", new findGiftById());
      processMap.put("updateGift", new updateGift());
      processMap.put("saveSendExchange", new saveSendExchange());
      processMap.put("findSendExchangeByUid", new findSendExchangeByUid());
      processMap.put("findSendExchangeCountByUid", new findSendExchangeCountByUid());
      processMap.put("getSystemConfig", new getSystemConfig());
      processMap.put("updateSystemConfig", new updateSystemConfig());
      processMap.put("findAdvertisementView", new findAdvertisementView());
      processMap.put("getSystemConfigList", new getSystemConfigList());
      processMap.put("addSystemConfig", new addSystemConfig());
      processMap.put("deleteSystemConfig", new deleteSystemConfig());
      processMap.put("getSystemConfigByVersion", new getSystemConfigByVersion());
      processMap.put("saveRegister", new saveRegister());
      processMap.put("getRegisterByUid", new getRegisterByUid());
      processMap.put("updateRegisterByUid", new updateRegisterByUid());
      processMap.put("getRegisterList", new getRegisterList());
      processMap.put("updateRegister", new updateRegister());
      processMap.put("findMasterLevelList", new findMasterLevelList());
      processMap.put("findFanLevelList", new findFanLevelList());
      processMap.put("findNoticeById", new findNoticeById());
      processMap.put("findEffecNoticeList", new findEffecNoticeList());
      processMap.put("findNoticeList", new findNoticeList());
      processMap.put("updateNoticeById", new updateNoticeById());
      processMap.put("deleteNoticeById", new deleteNoticeById());
      processMap.put("addNotice", new addNotice());
      processMap.put("findUserCDNList", new findUserCDNList());
      processMap.put("updateUserCDNById", new updateUserCDNById());
      processMap.put("deleteUserCDN", new deleteUserCDN());
      processMap.put("saveUserCDN", new saveUserCDN());
      processMap.put("findUserCDNById", new findUserCDNById());
      processMap.put("findRobotSendGiftRatioList", new findRobotSendGiftRatioList());
      processMap.put("saveRobotSendGiftRatio", new saveRobotSendGiftRatio());
      return processMap;
    }

    public static class findVersionControlByAgentType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findVersionControlByAgentType_args> {
      public findVersionControlByAgentType() {
        super("findVersionControlByAgentType");
      }

      public findVersionControlByAgentType_args getEmptyArgsInstance() {
        return new findVersionControlByAgentType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findVersionControlByAgentType_result getResult(I iface, findVersionControlByAgentType_args args) throws org.apache.thrift.TException {
        findVersionControlByAgentType_result result = new findVersionControlByAgentType_result();
        result.success = iface.findVersionControlByAgentType(args.agentType);
        return result;
      }
    }

    public static class findPlazaLinks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPlazaLinks_args> {
      public findPlazaLinks() {
        super("findPlazaLinks");
      }

      public findPlazaLinks_args getEmptyArgsInstance() {
        return new findPlazaLinks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPlazaLinks_result getResult(I iface, findPlazaLinks_args args) throws org.apache.thrift.TException {
        findPlazaLinks_result result = new findPlazaLinks_result();
        result.success = iface.findPlazaLinks();
        return result;
      }
    }

    public static class saveReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveReport_args> {
      public saveReport() {
        super("saveReport");
      }

      public saveReport_args getEmptyArgsInstance() {
        return new saveReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveReport_result getResult(I iface, saveReport_args args) throws org.apache.thrift.TException {
        saveReport_result result = new saveReport_result();
        iface.saveReport(args.reportView);
        return result;
      }
    }

    public static class findHeaderPortraitList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findHeaderPortraitList_args> {
      public findHeaderPortraitList() {
        super("findHeaderPortraitList");
      }

      public findHeaderPortraitList_args getEmptyArgsInstance() {
        return new findHeaderPortraitList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findHeaderPortraitList_result getResult(I iface, findHeaderPortraitList_args args) throws org.apache.thrift.TException {
        findHeaderPortraitList_result result = new findHeaderPortraitList_result();
        result.success = iface.findHeaderPortraitList(args.pageSize, args.pageCount);
        return result;
      }
    }

    public static class deleteHeaderPortrait<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHeaderPortrait_args> {
      public deleteHeaderPortrait() {
        super("deleteHeaderPortrait");
      }

      public deleteHeaderPortrait_args getEmptyArgsInstance() {
        return new deleteHeaderPortrait_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHeaderPortrait_result getResult(I iface, deleteHeaderPortrait_args args) throws org.apache.thrift.TException {
        deleteHeaderPortrait_result result = new deleteHeaderPortrait_result();
        iface.deleteHeaderPortrait(args.id);
        return result;
      }
    }

    public static class deleteHeaderPortraitList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHeaderPortraitList_args> {
      public deleteHeaderPortraitList() {
        super("deleteHeaderPortraitList");
      }

      public deleteHeaderPortraitList_args getEmptyArgsInstance() {
        return new deleteHeaderPortraitList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHeaderPortraitList_result getResult(I iface, deleteHeaderPortraitList_args args) throws org.apache.thrift.TException {
        deleteHeaderPortraitList_result result = new deleteHeaderPortraitList_result();
        iface.deleteHeaderPortraitList(args.ids);
        return result;
      }
    }

    public static class saveHeaderPortraitList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveHeaderPortraitList_args> {
      public saveHeaderPortraitList() {
        super("saveHeaderPortraitList");
      }

      public saveHeaderPortraitList_args getEmptyArgsInstance() {
        return new saveHeaderPortraitList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveHeaderPortraitList_result getResult(I iface, saveHeaderPortraitList_args args) throws org.apache.thrift.TException {
        saveHeaderPortraitList_result result = new saveHeaderPortraitList_result();
        iface.saveHeaderPortraitList(args.headerPortraitView);
        return result;
      }
    }

    public static class findAdminHeaderPortraitListView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAdminHeaderPortraitListView_args> {
      public findAdminHeaderPortraitListView() {
        super("findAdminHeaderPortraitListView");
      }

      public findAdminHeaderPortraitListView_args getEmptyArgsInstance() {
        return new findAdminHeaderPortraitListView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAdminHeaderPortraitListView_result getResult(I iface, findAdminHeaderPortraitListView_args args) throws org.apache.thrift.TException {
        findAdminHeaderPortraitListView_result result = new findAdminHeaderPortraitListView_result();
        result.success = iface.findAdminHeaderPortraitListView(args.pageSize, args.pageCount);
        return result;
      }
    }

    public static class findGiftList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGiftList_args> {
      public findGiftList() {
        super("findGiftList");
      }

      public findGiftList_args getEmptyArgsInstance() {
        return new findGiftList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findGiftList_result getResult(I iface, findGiftList_args args) throws org.apache.thrift.TException {
        findGiftList_result result = new findGiftList_result();
        result.success = iface.findGiftList(args.giftType, args.status, args.start, args.count);
        return result;
      }
    }

    public static class saveGift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveGift_args> {
      public saveGift() {
        super("saveGift");
      }

      public saveGift_args getEmptyArgsInstance() {
        return new saveGift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveGift_result getResult(I iface, saveGift_args args) throws org.apache.thrift.TException {
        saveGift_result result = new saveGift_result();
        iface.saveGift(args.giftView);
        return result;
      }
    }

    public static class deleteGift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteGift_args> {
      public deleteGift() {
        super("deleteGift");
      }

      public deleteGift_args getEmptyArgsInstance() {
        return new deleteGift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteGift_result getResult(I iface, deleteGift_args args) throws org.apache.thrift.TException {
        deleteGift_result result = new deleteGift_result();
        iface.deleteGift(args.giftId);
        return result;
      }
    }

    public static class findGiftTypeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGiftTypeList_args> {
      public findGiftTypeList() {
        super("findGiftTypeList");
      }

      public findGiftTypeList_args getEmptyArgsInstance() {
        return new findGiftTypeList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findGiftTypeList_result getResult(I iface, findGiftTypeList_args args) throws org.apache.thrift.TException {
        findGiftTypeList_result result = new findGiftTypeList_result();
        result.success = iface.findGiftTypeList(args.status);
        return result;
      }
    }

    public static class findGiftById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGiftById_args> {
      public findGiftById() {
        super("findGiftById");
      }

      public findGiftById_args getEmptyArgsInstance() {
        return new findGiftById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findGiftById_result getResult(I iface, findGiftById_args args) throws org.apache.thrift.TException {
        findGiftById_result result = new findGiftById_result();
        result.success = iface.findGiftById(args.giftId);
        return result;
      }
    }

    public static class updateGift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGift_args> {
      public updateGift() {
        super("updateGift");
      }

      public updateGift_args getEmptyArgsInstance() {
        return new updateGift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateGift_result getResult(I iface, updateGift_args args) throws org.apache.thrift.TException {
        updateGift_result result = new updateGift_result();
        iface.updateGift(args.giftId, args.updateContent);
        return result;
      }
    }

    public static class saveSendExchange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveSendExchange_args> {
      public saveSendExchange() {
        super("saveSendExchange");
      }

      public saveSendExchange_args getEmptyArgsInstance() {
        return new saveSendExchange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveSendExchange_result getResult(I iface, saveSendExchange_args args) throws org.apache.thrift.TException {
        saveSendExchange_result result = new saveSendExchange_result();
        iface.saveSendExchange(args.sendExchangeView);
        return result;
      }
    }

    public static class findSendExchangeByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSendExchangeByUid_args> {
      public findSendExchangeByUid() {
        super("findSendExchangeByUid");
      }

      public findSendExchangeByUid_args getEmptyArgsInstance() {
        return new findSendExchangeByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findSendExchangeByUid_result getResult(I iface, findSendExchangeByUid_args args) throws org.apache.thrift.TException {
        findSendExchangeByUid_result result = new findSendExchangeByUid_result();
        result.success = iface.findSendExchangeByUid(args.uid, args.sendType, args.start, args.count);
        return result;
      }
    }

    public static class findSendExchangeCountByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSendExchangeCountByUid_args> {
      public findSendExchangeCountByUid() {
        super("findSendExchangeCountByUid");
      }

      public findSendExchangeCountByUid_args getEmptyArgsInstance() {
        return new findSendExchangeCountByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findSendExchangeCountByUid_result getResult(I iface, findSendExchangeCountByUid_args args) throws org.apache.thrift.TException {
        findSendExchangeCountByUid_result result = new findSendExchangeCountByUid_result();
        result.success = iface.findSendExchangeCountByUid(args.uid, args.sendType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getSystemConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSystemConfig_args> {
      public getSystemConfig() {
        super("getSystemConfig");
      }

      public getSystemConfig_args getEmptyArgsInstance() {
        return new getSystemConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSystemConfig_result getResult(I iface, getSystemConfig_args args) throws org.apache.thrift.TException {
        getSystemConfig_result result = new getSystemConfig_result();
        result.success = iface.getSystemConfig(args.configId);
        return result;
      }
    }

    public static class updateSystemConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSystemConfig_args> {
      public updateSystemConfig() {
        super("updateSystemConfig");
      }

      public updateSystemConfig_args getEmptyArgsInstance() {
        return new updateSystemConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSystemConfig_result getResult(I iface, updateSystemConfig_args args) throws org.apache.thrift.TException {
        updateSystemConfig_result result = new updateSystemConfig_result();
        iface.updateSystemConfig(args.systemConfigView);
        return result;
      }
    }

    public static class findAdvertisementView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAdvertisementView_args> {
      public findAdvertisementView() {
        super("findAdvertisementView");
      }

      public findAdvertisementView_args getEmptyArgsInstance() {
        return new findAdvertisementView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAdvertisementView_result getResult(I iface, findAdvertisementView_args args) throws org.apache.thrift.TException {
        findAdvertisementView_result result = new findAdvertisementView_result();
        result.success = iface.findAdvertisementView();
        return result;
      }
    }

    public static class getSystemConfigList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSystemConfigList_args> {
      public getSystemConfigList() {
        super("getSystemConfigList");
      }

      public getSystemConfigList_args getEmptyArgsInstance() {
        return new getSystemConfigList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSystemConfigList_result getResult(I iface, getSystemConfigList_args args) throws org.apache.thrift.TException {
        getSystemConfigList_result result = new getSystemConfigList_result();
        result.success = iface.getSystemConfigList(args.paramMap, args.start, args.count);
        return result;
      }
    }

    public static class addSystemConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSystemConfig_args> {
      public addSystemConfig() {
        super("addSystemConfig");
      }

      public addSystemConfig_args getEmptyArgsInstance() {
        return new addSystemConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSystemConfig_result getResult(I iface, addSystemConfig_args args) throws org.apache.thrift.TException {
        addSystemConfig_result result = new addSystemConfig_result();
        iface.addSystemConfig(args.systemConfigView);
        return result;
      }
    }

    public static class deleteSystemConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSystemConfig_args> {
      public deleteSystemConfig() {
        super("deleteSystemConfig");
      }

      public deleteSystemConfig_args getEmptyArgsInstance() {
        return new deleteSystemConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSystemConfig_result getResult(I iface, deleteSystemConfig_args args) throws org.apache.thrift.TException {
        deleteSystemConfig_result result = new deleteSystemConfig_result();
        iface.deleteSystemConfig(args.configId);
        return result;
      }
    }

    public static class getSystemConfigByVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSystemConfigByVersion_args> {
      public getSystemConfigByVersion() {
        super("getSystemConfigByVersion");
      }

      public getSystemConfigByVersion_args getEmptyArgsInstance() {
        return new getSystemConfigByVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSystemConfigByVersion_result getResult(I iface, getSystemConfigByVersion_args args) throws org.apache.thrift.TException {
        getSystemConfigByVersion_result result = new getSystemConfigByVersion_result();
        result.success = iface.getSystemConfigByVersion(args.version);
        return result;
      }
    }

    public static class saveRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveRegister_args> {
      public saveRegister() {
        super("saveRegister");
      }

      public saveRegister_args getEmptyArgsInstance() {
        return new saveRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveRegister_result getResult(I iface, saveRegister_args args) throws org.apache.thrift.TException {
        saveRegister_result result = new saveRegister_result();
        iface.saveRegister(args.registerView);
        return result;
      }
    }

    public static class getRegisterByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegisterByUid_args> {
      public getRegisterByUid() {
        super("getRegisterByUid");
      }

      public getRegisterByUid_args getEmptyArgsInstance() {
        return new getRegisterByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegisterByUid_result getResult(I iface, getRegisterByUid_args args) throws org.apache.thrift.TException {
        getRegisterByUid_result result = new getRegisterByUid_result();
        result.success = iface.getRegisterByUid(args.uid);
        return result;
      }
    }

    public static class updateRegisterByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRegisterByUid_args> {
      public updateRegisterByUid() {
        super("updateRegisterByUid");
      }

      public updateRegisterByUid_args getEmptyArgsInstance() {
        return new updateRegisterByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRegisterByUid_result getResult(I iface, updateRegisterByUid_args args) throws org.apache.thrift.TException {
        updateRegisterByUid_result result = new updateRegisterByUid_result();
        iface.updateRegisterByUid(args.uid, args.paramMap);
        return result;
      }
    }

    public static class getRegisterList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegisterList_args> {
      public getRegisterList() {
        super("getRegisterList");
      }

      public getRegisterList_args getEmptyArgsInstance() {
        return new getRegisterList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegisterList_result getResult(I iface, getRegisterList_args args) throws org.apache.thrift.TException {
        getRegisterList_result result = new getRegisterList_result();
        result.success = iface.getRegisterList(args.paramMap, args.start, args.count);
        return result;
      }
    }

    public static class updateRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRegister_args> {
      public updateRegister() {
        super("updateRegister");
      }

      public updateRegister_args getEmptyArgsInstance() {
        return new updateRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRegister_result getResult(I iface, updateRegister_args args) throws org.apache.thrift.TException {
        updateRegister_result result = new updateRegister_result();
        iface.updateRegister(args.registerView);
        return result;
      }
    }

    public static class findMasterLevelList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMasterLevelList_args> {
      public findMasterLevelList() {
        super("findMasterLevelList");
      }

      public findMasterLevelList_args getEmptyArgsInstance() {
        return new findMasterLevelList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMasterLevelList_result getResult(I iface, findMasterLevelList_args args) throws org.apache.thrift.TException {
        findMasterLevelList_result result = new findMasterLevelList_result();
        result.success = iface.findMasterLevelList();
        return result;
      }
    }

    public static class findFanLevelList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFanLevelList_args> {
      public findFanLevelList() {
        super("findFanLevelList");
      }

      public findFanLevelList_args getEmptyArgsInstance() {
        return new findFanLevelList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFanLevelList_result getResult(I iface, findFanLevelList_args args) throws org.apache.thrift.TException {
        findFanLevelList_result result = new findFanLevelList_result();
        result.success = iface.findFanLevelList();
        return result;
      }
    }

    public static class findNoticeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findNoticeById_args> {
      public findNoticeById() {
        super("findNoticeById");
      }

      public findNoticeById_args getEmptyArgsInstance() {
        return new findNoticeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findNoticeById_result getResult(I iface, findNoticeById_args args) throws org.apache.thrift.TException {
        findNoticeById_result result = new findNoticeById_result();
        result.success = iface.findNoticeById(args.id);
        return result;
      }
    }

    public static class findEffecNoticeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findEffecNoticeList_args> {
      public findEffecNoticeList() {
        super("findEffecNoticeList");
      }

      public findEffecNoticeList_args getEmptyArgsInstance() {
        return new findEffecNoticeList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findEffecNoticeList_result getResult(I iface, findEffecNoticeList_args args) throws org.apache.thrift.TException {
        findEffecNoticeList_result result = new findEffecNoticeList_result();
        result.success = iface.findEffecNoticeList();
        return result;
      }
    }

    public static class findNoticeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findNoticeList_args> {
      public findNoticeList() {
        super("findNoticeList");
      }

      public findNoticeList_args getEmptyArgsInstance() {
        return new findNoticeList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findNoticeList_result getResult(I iface, findNoticeList_args args) throws org.apache.thrift.TException {
        findNoticeList_result result = new findNoticeList_result();
        result.success = iface.findNoticeList(args.start, args.count);
        return result;
      }
    }

    public static class updateNoticeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNoticeById_args> {
      public updateNoticeById() {
        super("updateNoticeById");
      }

      public updateNoticeById_args getEmptyArgsInstance() {
        return new updateNoticeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateNoticeById_result getResult(I iface, updateNoticeById_args args) throws org.apache.thrift.TException {
        updateNoticeById_result result = new updateNoticeById_result();
        iface.updateNoticeById(args.id, args.paramMap);
        return result;
      }
    }

    public static class deleteNoticeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteNoticeById_args> {
      public deleteNoticeById() {
        super("deleteNoticeById");
      }

      public deleteNoticeById_args getEmptyArgsInstance() {
        return new deleteNoticeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteNoticeById_result getResult(I iface, deleteNoticeById_args args) throws org.apache.thrift.TException {
        deleteNoticeById_result result = new deleteNoticeById_result();
        iface.deleteNoticeById(args.id);
        return result;
      }
    }

    public static class addNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNotice_args> {
      public addNotice() {
        super("addNotice");
      }

      public addNotice_args getEmptyArgsInstance() {
        return new addNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addNotice_result getResult(I iface, addNotice_args args) throws org.apache.thrift.TException {
        addNotice_result result = new addNotice_result();
        iface.addNotice(args.noticeView);
        return result;
      }
    }

    public static class findUserCDNList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserCDNList_args> {
      public findUserCDNList() {
        super("findUserCDNList");
      }

      public findUserCDNList_args getEmptyArgsInstance() {
        return new findUserCDNList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserCDNList_result getResult(I iface, findUserCDNList_args args) throws org.apache.thrift.TException {
        findUserCDNList_result result = new findUserCDNList_result();
        result.success = iface.findUserCDNList(args.start, args.count);
        return result;
      }
    }

    public static class updateUserCDNById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserCDNById_args> {
      public updateUserCDNById() {
        super("updateUserCDNById");
      }

      public updateUserCDNById_args getEmptyArgsInstance() {
        return new updateUserCDNById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserCDNById_result getResult(I iface, updateUserCDNById_args args) throws org.apache.thrift.TException {
        updateUserCDNById_result result = new updateUserCDNById_result();
        iface.updateUserCDNById(args.userCDNView);
        return result;
      }
    }

    public static class deleteUserCDN<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUserCDN_args> {
      public deleteUserCDN() {
        super("deleteUserCDN");
      }

      public deleteUserCDN_args getEmptyArgsInstance() {
        return new deleteUserCDN_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUserCDN_result getResult(I iface, deleteUserCDN_args args) throws org.apache.thrift.TException {
        deleteUserCDN_result result = new deleteUserCDN_result();
        iface.deleteUserCDN(args.uid);
        return result;
      }
    }

    public static class saveUserCDN<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveUserCDN_args> {
      public saveUserCDN() {
        super("saveUserCDN");
      }

      public saveUserCDN_args getEmptyArgsInstance() {
        return new saveUserCDN_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveUserCDN_result getResult(I iface, saveUserCDN_args args) throws org.apache.thrift.TException {
        saveUserCDN_result result = new saveUserCDN_result();
        iface.saveUserCDN(args.userCDNView);
        return result;
      }
    }

    public static class findUserCDNById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserCDNById_args> {
      public findUserCDNById() {
        super("findUserCDNById");
      }

      public findUserCDNById_args getEmptyArgsInstance() {
        return new findUserCDNById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserCDNById_result getResult(I iface, findUserCDNById_args args) throws org.apache.thrift.TException {
        findUserCDNById_result result = new findUserCDNById_result();
        result.success = iface.findUserCDNById(args.uid);
        return result;
      }
    }

    public static class findRobotSendGiftRatioList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRobotSendGiftRatioList_args> {
      public findRobotSendGiftRatioList() {
        super("findRobotSendGiftRatioList");
      }

      public findRobotSendGiftRatioList_args getEmptyArgsInstance() {
        return new findRobotSendGiftRatioList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findRobotSendGiftRatioList_result getResult(I iface, findRobotSendGiftRatioList_args args) throws org.apache.thrift.TException {
        findRobotSendGiftRatioList_result result = new findRobotSendGiftRatioList_result();
        result.success = iface.findRobotSendGiftRatioList();
        return result;
      }
    }

    public static class saveRobotSendGiftRatio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveRobotSendGiftRatio_args> {
      public saveRobotSendGiftRatio() {
        super("saveRobotSendGiftRatio");
      }

      public saveRobotSendGiftRatio_args getEmptyArgsInstance() {
        return new saveRobotSendGiftRatio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveRobotSendGiftRatio_result getResult(I iface, saveRobotSendGiftRatio_args args) throws org.apache.thrift.TException {
        saveRobotSendGiftRatio_result result = new saveRobotSendGiftRatio_result();
        iface.saveRobotSendGiftRatio(args.robotSendGiftRatioView);
        return result;
      }
    }

  }

  public static class findVersionControlByAgentType_args implements org.apache.thrift.TBase<findVersionControlByAgentType_args, findVersionControlByAgentType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVersionControlByAgentType_args");

    private static final org.apache.thrift.protocol.TField AGENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("agentType", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVersionControlByAgentType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVersionControlByAgentType_argsTupleSchemeFactory());
    }

    public int agentType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENT_TYPE((short)1, "agentType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT_TYPE
            return AGENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AGENTTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("agentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVersionControlByAgentType_args.class, metaDataMap);
    }

    public findVersionControlByAgentType_args() {
    }

    public findVersionControlByAgentType_args(
      int agentType)
    {
      this();
      this.agentType = agentType;
      setAgentTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVersionControlByAgentType_args(findVersionControlByAgentType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.agentType = other.agentType;
    }

    public findVersionControlByAgentType_args deepCopy() {
      return new findVersionControlByAgentType_args(this);
    }

    @Override
    public void clear() {
      setAgentTypeIsSet(false);
      this.agentType = 0;
    }

    public int getAgentType() {
      return this.agentType;
    }

    public findVersionControlByAgentType_args setAgentType(int agentType) {
      this.agentType = agentType;
      setAgentTypeIsSet(true);
      return this;
    }

    public void unsetAgentType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGENTTYPE_ISSET_ID);
    }

    /** Returns true if field agentType is set (has been assigned a value) and false otherwise */
    public boolean isSetAgentType() {
      return EncodingUtils.testBit(__isset_bitfield, __AGENTTYPE_ISSET_ID);
    }

    public void setAgentTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGENTTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT_TYPE:
        if (value == null) {
          unsetAgentType();
        } else {
          setAgentType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT_TYPE:
        return Integer.valueOf(getAgentType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT_TYPE:
        return isSetAgentType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVersionControlByAgentType_args)
        return this.equals((findVersionControlByAgentType_args)that);
      return false;
    }

    public boolean equals(findVersionControlByAgentType_args that) {
      if (that == null)
        return false;

      boolean this_present_agentType = true;
      boolean that_present_agentType = true;
      if (this_present_agentType || that_present_agentType) {
        if (!(this_present_agentType && that_present_agentType))
          return false;
        if (this.agentType != that.agentType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findVersionControlByAgentType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findVersionControlByAgentType_args typedOther = (findVersionControlByAgentType_args)other;

      lastComparison = Boolean.valueOf(isSetAgentType()).compareTo(typedOther.isSetAgentType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgentType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentType, typedOther.agentType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVersionControlByAgentType_args(");
      boolean first = true;

      sb.append("agentType:");
      sb.append(this.agentType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVersionControlByAgentType_argsStandardSchemeFactory implements SchemeFactory {
      public findVersionControlByAgentType_argsStandardScheme getScheme() {
        return new findVersionControlByAgentType_argsStandardScheme();
      }
    }

    private static class findVersionControlByAgentType_argsStandardScheme extends StandardScheme<findVersionControlByAgentType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVersionControlByAgentType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AGENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.agentType = iprot.readI32();
                struct.setAgentTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVersionControlByAgentType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AGENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.agentType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVersionControlByAgentType_argsTupleSchemeFactory implements SchemeFactory {
      public findVersionControlByAgentType_argsTupleScheme getScheme() {
        return new findVersionControlByAgentType_argsTupleScheme();
      }
    }

    private static class findVersionControlByAgentType_argsTupleScheme extends TupleScheme<findVersionControlByAgentType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVersionControlByAgentType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAgentType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAgentType()) {
          oprot.writeI32(struct.agentType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVersionControlByAgentType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.agentType = iprot.readI32();
          struct.setAgentTypeIsSet(true);
        }
      }
    }

  }

  public static class findVersionControlByAgentType_result implements org.apache.thrift.TBase<findVersionControlByAgentType_result, findVersionControlByAgentType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findVersionControlByAgentType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findVersionControlByAgentType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findVersionControlByAgentType_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.VersionControlView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.VersionControlView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findVersionControlByAgentType_result.class, metaDataMap);
    }

    public findVersionControlByAgentType_result() {
    }

    public findVersionControlByAgentType_result(
      one.show.manage.thrift.view.VersionControlView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findVersionControlByAgentType_result(findVersionControlByAgentType_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.VersionControlView(other.success);
      }
    }

    public findVersionControlByAgentType_result deepCopy() {
      return new findVersionControlByAgentType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.VersionControlView getSuccess() {
      return this.success;
    }

    public findVersionControlByAgentType_result setSuccess(one.show.manage.thrift.view.VersionControlView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.VersionControlView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findVersionControlByAgentType_result)
        return this.equals((findVersionControlByAgentType_result)that);
      return false;
    }

    public boolean equals(findVersionControlByAgentType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findVersionControlByAgentType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findVersionControlByAgentType_result typedOther = (findVersionControlByAgentType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findVersionControlByAgentType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findVersionControlByAgentType_resultStandardSchemeFactory implements SchemeFactory {
      public findVersionControlByAgentType_resultStandardScheme getScheme() {
        return new findVersionControlByAgentType_resultStandardScheme();
      }
    }

    private static class findVersionControlByAgentType_resultStandardScheme extends StandardScheme<findVersionControlByAgentType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findVersionControlByAgentType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.VersionControlView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findVersionControlByAgentType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findVersionControlByAgentType_resultTupleSchemeFactory implements SchemeFactory {
      public findVersionControlByAgentType_resultTupleScheme getScheme() {
        return new findVersionControlByAgentType_resultTupleScheme();
      }
    }

    private static class findVersionControlByAgentType_resultTupleScheme extends TupleScheme<findVersionControlByAgentType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findVersionControlByAgentType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findVersionControlByAgentType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.VersionControlView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPlazaLinks_args implements org.apache.thrift.TBase<findPlazaLinks_args, findPlazaLinks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPlazaLinks_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPlazaLinks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPlazaLinks_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPlazaLinks_args.class, metaDataMap);
    }

    public findPlazaLinks_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPlazaLinks_args(findPlazaLinks_args other) {
    }

    public findPlazaLinks_args deepCopy() {
      return new findPlazaLinks_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPlazaLinks_args)
        return this.equals((findPlazaLinks_args)that);
      return false;
    }

    public boolean equals(findPlazaLinks_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPlazaLinks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPlazaLinks_args typedOther = (findPlazaLinks_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPlazaLinks_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPlazaLinks_argsStandardSchemeFactory implements SchemeFactory {
      public findPlazaLinks_argsStandardScheme getScheme() {
        return new findPlazaLinks_argsStandardScheme();
      }
    }

    private static class findPlazaLinks_argsStandardScheme extends StandardScheme<findPlazaLinks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPlazaLinks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPlazaLinks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPlazaLinks_argsTupleSchemeFactory implements SchemeFactory {
      public findPlazaLinks_argsTupleScheme getScheme() {
        return new findPlazaLinks_argsTupleScheme();
      }
    }

    private static class findPlazaLinks_argsTupleScheme extends TupleScheme<findPlazaLinks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPlazaLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPlazaLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findPlazaLinks_result implements org.apache.thrift.TBase<findPlazaLinks_result, findPlazaLinks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPlazaLinks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPlazaLinks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPlazaLinks_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.LinkView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.LinkView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPlazaLinks_result.class, metaDataMap);
    }

    public findPlazaLinks_result() {
    }

    public findPlazaLinks_result(
      List<one.show.manage.thrift.view.LinkView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPlazaLinks_result(findPlazaLinks_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.LinkView> __this__success = new ArrayList<one.show.manage.thrift.view.LinkView>();
        for (one.show.manage.thrift.view.LinkView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.LinkView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findPlazaLinks_result deepCopy() {
      return new findPlazaLinks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.LinkView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.LinkView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.LinkView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.LinkView> getSuccess() {
      return this.success;
    }

    public findPlazaLinks_result setSuccess(List<one.show.manage.thrift.view.LinkView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.LinkView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPlazaLinks_result)
        return this.equals((findPlazaLinks_result)that);
      return false;
    }

    public boolean equals(findPlazaLinks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPlazaLinks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPlazaLinks_result typedOther = (findPlazaLinks_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPlazaLinks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPlazaLinks_resultStandardSchemeFactory implements SchemeFactory {
      public findPlazaLinks_resultStandardScheme getScheme() {
        return new findPlazaLinks_resultStandardScheme();
      }
    }

    private static class findPlazaLinks_resultStandardScheme extends StandardScheme<findPlazaLinks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPlazaLinks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.LinkView>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    one.show.manage.thrift.view.LinkView _elem2; // required
                    _elem2 = new one.show.manage.thrift.view.LinkView();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPlazaLinks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.LinkView _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPlazaLinks_resultTupleSchemeFactory implements SchemeFactory {
      public findPlazaLinks_resultTupleScheme getScheme() {
        return new findPlazaLinks_resultTupleScheme();
      }
    }

    private static class findPlazaLinks_resultTupleScheme extends TupleScheme<findPlazaLinks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPlazaLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.LinkView _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPlazaLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.LinkView>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              one.show.manage.thrift.view.LinkView _elem7; // required
              _elem7 = new one.show.manage.thrift.view.LinkView();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveReport_args implements org.apache.thrift.TBase<saveReport_args, saveReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveReport_args");

    private static final org.apache.thrift.protocol.TField REPORT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("reportView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveReport_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.ReportView reportView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_VIEW((short)1, "reportView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_VIEW
            return REPORT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("reportView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.ReportView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveReport_args.class, metaDataMap);
    }

    public saveReport_args() {
    }

    public saveReport_args(
      one.show.manage.thrift.view.ReportView reportView)
    {
      this();
      this.reportView = reportView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveReport_args(saveReport_args other) {
      if (other.isSetReportView()) {
        this.reportView = new one.show.manage.thrift.view.ReportView(other.reportView);
      }
    }

    public saveReport_args deepCopy() {
      return new saveReport_args(this);
    }

    @Override
    public void clear() {
      this.reportView = null;
    }

    public one.show.manage.thrift.view.ReportView getReportView() {
      return this.reportView;
    }

    public saveReport_args setReportView(one.show.manage.thrift.view.ReportView reportView) {
      this.reportView = reportView;
      return this;
    }

    public void unsetReportView() {
      this.reportView = null;
    }

    /** Returns true if field reportView is set (has been assigned a value) and false otherwise */
    public boolean isSetReportView() {
      return this.reportView != null;
    }

    public void setReportViewIsSet(boolean value) {
      if (!value) {
        this.reportView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_VIEW:
        if (value == null) {
          unsetReportView();
        } else {
          setReportView((one.show.manage.thrift.view.ReportView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_VIEW:
        return getReportView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_VIEW:
        return isSetReportView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveReport_args)
        return this.equals((saveReport_args)that);
      return false;
    }

    public boolean equals(saveReport_args that) {
      if (that == null)
        return false;

      boolean this_present_reportView = true && this.isSetReportView();
      boolean that_present_reportView = true && that.isSetReportView();
      if (this_present_reportView || that_present_reportView) {
        if (!(this_present_reportView && that_present_reportView))
          return false;
        if (!this.reportView.equals(that.reportView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveReport_args typedOther = (saveReport_args)other;

      lastComparison = Boolean.valueOf(isSetReportView()).compareTo(typedOther.isSetReportView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportView, typedOther.reportView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveReport_args(");
      boolean first = true;

      sb.append("reportView:");
      if (this.reportView == null) {
        sb.append("null");
      } else {
        sb.append(this.reportView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reportView != null) {
        reportView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveReport_argsStandardSchemeFactory implements SchemeFactory {
      public saveReport_argsStandardScheme getScheme() {
        return new saveReport_argsStandardScheme();
      }
    }

    private static class saveReport_argsStandardScheme extends StandardScheme<saveReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reportView = new one.show.manage.thrift.view.ReportView();
                struct.reportView.read(iprot);
                struct.setReportViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reportView != null) {
          oprot.writeFieldBegin(REPORT_VIEW_FIELD_DESC);
          struct.reportView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveReport_argsTupleSchemeFactory implements SchemeFactory {
      public saveReport_argsTupleScheme getScheme() {
        return new saveReport_argsTupleScheme();
      }
    }

    private static class saveReport_argsTupleScheme extends TupleScheme<saveReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportView()) {
          struct.reportView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportView = new one.show.manage.thrift.view.ReportView();
          struct.reportView.read(iprot);
          struct.setReportViewIsSet(true);
        }
      }
    }

  }

  public static class saveReport_result implements org.apache.thrift.TBase<saveReport_result, saveReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveReport_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveReport_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveReport_result.class, metaDataMap);
    }

    public saveReport_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveReport_result(saveReport_result other) {
    }

    public saveReport_result deepCopy() {
      return new saveReport_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveReport_result)
        return this.equals((saveReport_result)that);
      return false;
    }

    public boolean equals(saveReport_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveReport_result typedOther = (saveReport_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveReport_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveReport_resultStandardSchemeFactory implements SchemeFactory {
      public saveReport_resultStandardScheme getScheme() {
        return new saveReport_resultStandardScheme();
      }
    }

    private static class saveReport_resultStandardScheme extends StandardScheme<saveReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveReport_resultTupleSchemeFactory implements SchemeFactory {
      public saveReport_resultTupleScheme getScheme() {
        return new saveReport_resultTupleScheme();
      }
    }

    private static class saveReport_resultTupleScheme extends TupleScheme<saveReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findHeaderPortraitList_args implements org.apache.thrift.TBase<findHeaderPortraitList_args, findHeaderPortraitList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHeaderPortraitList_args");

    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findHeaderPortraitList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findHeaderPortraitList_argsTupleSchemeFactory());
    }

    public int pageSize; // required
    public int pageCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_SIZE((short)1, "pageSize"),
      PAGE_COUNT((short)2, "pageCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_SIZE
            return PAGE_SIZE;
          case 2: // PAGE_COUNT
            return PAGE_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGESIZE_ISSET_ID = 0;
    private static final int __PAGECOUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHeaderPortraitList_args.class, metaDataMap);
    }

    public findHeaderPortraitList_args() {
    }

    public findHeaderPortraitList_args(
      int pageSize,
      int pageCount)
    {
      this();
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.pageCount = pageCount;
      setPageCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHeaderPortraitList_args(findHeaderPortraitList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageSize = other.pageSize;
      this.pageCount = other.pageCount;
    }

    public findHeaderPortraitList_args deepCopy() {
      return new findHeaderPortraitList_args(this);
    }

    @Override
    public void clear() {
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setPageCountIsSet(false);
      this.pageCount = 0;
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findHeaderPortraitList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public int getPageCount() {
      return this.pageCount;
    }

    public findHeaderPortraitList_args setPageCount(int pageCount) {
      this.pageCount = pageCount;
      setPageCountIsSet(true);
      return this;
    }

    public void unsetPageCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
    public boolean isSetPageCount() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    public void setPageCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case PAGE_COUNT:
        if (value == null) {
          unsetPageCount();
        } else {
          setPageCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case PAGE_COUNT:
        return Integer.valueOf(getPageCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_SIZE:
        return isSetPageSize();
      case PAGE_COUNT:
        return isSetPageCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHeaderPortraitList_args)
        return this.equals((findHeaderPortraitList_args)that);
      return false;
    }

    public boolean equals(findHeaderPortraitList_args that) {
      if (that == null)
        return false;

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_pageCount = true;
      boolean that_present_pageCount = true;
      if (this_present_pageCount || that_present_pageCount) {
        if (!(this_present_pageCount && that_present_pageCount))
          return false;
        if (this.pageCount != that.pageCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHeaderPortraitList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHeaderPortraitList_args typedOther = (findHeaderPortraitList_args)other;

      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(typedOther.isSetPageCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, typedOther.pageCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHeaderPortraitList_args(");
      boolean first = true;

      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageCount:");
      sb.append(this.pageCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findHeaderPortraitList_argsStandardSchemeFactory implements SchemeFactory {
      public findHeaderPortraitList_argsStandardScheme getScheme() {
        return new findHeaderPortraitList_argsStandardScheme();
      }
    }

    private static class findHeaderPortraitList_argsStandardScheme extends StandardScheme<findHeaderPortraitList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageCount = iprot.readI32();
                struct.setPageCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.pageCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findHeaderPortraitList_argsTupleSchemeFactory implements SchemeFactory {
      public findHeaderPortraitList_argsTupleScheme getScheme() {
        return new findHeaderPortraitList_argsTupleScheme();
      }
    }

    private static class findHeaderPortraitList_argsTupleScheme extends TupleScheme<findHeaderPortraitList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageSize()) {
          optionals.set(0);
        }
        if (struct.isSetPageCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetPageCount()) {
          oprot.writeI32(struct.pageCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageCount = iprot.readI32();
          struct.setPageCountIsSet(true);
        }
      }
    }

  }

  public static class findHeaderPortraitList_result implements org.apache.thrift.TBase<findHeaderPortraitList_result, findHeaderPortraitList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHeaderPortraitList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findHeaderPortraitList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findHeaderPortraitList_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.HeaderPortraitView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.HeaderPortraitView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHeaderPortraitList_result.class, metaDataMap);
    }

    public findHeaderPortraitList_result() {
    }

    public findHeaderPortraitList_result(
      List<one.show.manage.thrift.view.HeaderPortraitView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHeaderPortraitList_result(findHeaderPortraitList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.HeaderPortraitView> __this__success = new ArrayList<one.show.manage.thrift.view.HeaderPortraitView>();
        for (one.show.manage.thrift.view.HeaderPortraitView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.HeaderPortraitView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findHeaderPortraitList_result deepCopy() {
      return new findHeaderPortraitList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.HeaderPortraitView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.HeaderPortraitView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.HeaderPortraitView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.HeaderPortraitView> getSuccess() {
      return this.success;
    }

    public findHeaderPortraitList_result setSuccess(List<one.show.manage.thrift.view.HeaderPortraitView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.HeaderPortraitView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHeaderPortraitList_result)
        return this.equals((findHeaderPortraitList_result)that);
      return false;
    }

    public boolean equals(findHeaderPortraitList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHeaderPortraitList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHeaderPortraitList_result typedOther = (findHeaderPortraitList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHeaderPortraitList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findHeaderPortraitList_resultStandardSchemeFactory implements SchemeFactory {
      public findHeaderPortraitList_resultStandardScheme getScheme() {
        return new findHeaderPortraitList_resultStandardScheme();
      }
    }

    private static class findHeaderPortraitList_resultStandardScheme extends StandardScheme<findHeaderPortraitList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.HeaderPortraitView>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    one.show.manage.thrift.view.HeaderPortraitView _elem10; // required
                    _elem10 = new one.show.manage.thrift.view.HeaderPortraitView();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.HeaderPortraitView _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findHeaderPortraitList_resultTupleSchemeFactory implements SchemeFactory {
      public findHeaderPortraitList_resultTupleScheme getScheme() {
        return new findHeaderPortraitList_resultTupleScheme();
      }
    }

    private static class findHeaderPortraitList_resultTupleScheme extends TupleScheme<findHeaderPortraitList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.HeaderPortraitView _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.HeaderPortraitView>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              one.show.manage.thrift.view.HeaderPortraitView _elem15; // required
              _elem15 = new one.show.manage.thrift.view.HeaderPortraitView();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteHeaderPortrait_args implements org.apache.thrift.TBase<deleteHeaderPortrait_args, deleteHeaderPortrait_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHeaderPortrait_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHeaderPortrait_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHeaderPortrait_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHeaderPortrait_args.class, metaDataMap);
    }

    public deleteHeaderPortrait_args() {
    }

    public deleteHeaderPortrait_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHeaderPortrait_args(deleteHeaderPortrait_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteHeaderPortrait_args deepCopy() {
      return new deleteHeaderPortrait_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public deleteHeaderPortrait_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHeaderPortrait_args)
        return this.equals((deleteHeaderPortrait_args)that);
      return false;
    }

    public boolean equals(deleteHeaderPortrait_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteHeaderPortrait_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteHeaderPortrait_args typedOther = (deleteHeaderPortrait_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHeaderPortrait_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHeaderPortrait_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHeaderPortrait_argsStandardScheme getScheme() {
        return new deleteHeaderPortrait_argsStandardScheme();
      }
    }

    private static class deleteHeaderPortrait_argsStandardScheme extends StandardScheme<deleteHeaderPortrait_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHeaderPortrait_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHeaderPortrait_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHeaderPortrait_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHeaderPortrait_argsTupleScheme getScheme() {
        return new deleteHeaderPortrait_argsTupleScheme();
      }
    }

    private static class deleteHeaderPortrait_argsTupleScheme extends TupleScheme<deleteHeaderPortrait_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHeaderPortrait_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHeaderPortrait_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteHeaderPortrait_result implements org.apache.thrift.TBase<deleteHeaderPortrait_result, deleteHeaderPortrait_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHeaderPortrait_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHeaderPortrait_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHeaderPortrait_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHeaderPortrait_result.class, metaDataMap);
    }

    public deleteHeaderPortrait_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHeaderPortrait_result(deleteHeaderPortrait_result other) {
    }

    public deleteHeaderPortrait_result deepCopy() {
      return new deleteHeaderPortrait_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHeaderPortrait_result)
        return this.equals((deleteHeaderPortrait_result)that);
      return false;
    }

    public boolean equals(deleteHeaderPortrait_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteHeaderPortrait_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteHeaderPortrait_result typedOther = (deleteHeaderPortrait_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHeaderPortrait_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHeaderPortrait_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHeaderPortrait_resultStandardScheme getScheme() {
        return new deleteHeaderPortrait_resultStandardScheme();
      }
    }

    private static class deleteHeaderPortrait_resultStandardScheme extends StandardScheme<deleteHeaderPortrait_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHeaderPortrait_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHeaderPortrait_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHeaderPortrait_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHeaderPortrait_resultTupleScheme getScheme() {
        return new deleteHeaderPortrait_resultTupleScheme();
      }
    }

    private static class deleteHeaderPortrait_resultTupleScheme extends TupleScheme<deleteHeaderPortrait_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHeaderPortrait_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHeaderPortrait_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteHeaderPortraitList_args implements org.apache.thrift.TBase<deleteHeaderPortraitList_args, deleteHeaderPortraitList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHeaderPortraitList_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHeaderPortraitList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHeaderPortraitList_argsTupleSchemeFactory());
    }

    public List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHeaderPortraitList_args.class, metaDataMap);
    }

    public deleteHeaderPortraitList_args() {
    }

    public deleteHeaderPortraitList_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHeaderPortraitList_args(deleteHeaderPortraitList_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>();
        for (Long other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public deleteHeaderPortraitList_args deepCopy() {
      return new deleteHeaderPortraitList_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public deleteHeaderPortraitList_args setIds(List<Long> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHeaderPortraitList_args)
        return this.equals((deleteHeaderPortraitList_args)that);
      return false;
    }

    public boolean equals(deleteHeaderPortraitList_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteHeaderPortraitList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteHeaderPortraitList_args typedOther = (deleteHeaderPortraitList_args)other;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHeaderPortraitList_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHeaderPortraitList_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHeaderPortraitList_argsStandardScheme getScheme() {
        return new deleteHeaderPortraitList_argsStandardScheme();
      }
    }

    private static class deleteHeaderPortraitList_argsStandardScheme extends StandardScheme<deleteHeaderPortraitList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    long _elem18; // required
                    _elem18 = iprot.readI64();
                    struct.ids.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter19 : struct.ids)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHeaderPortraitList_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHeaderPortraitList_argsTupleScheme getScheme() {
        return new deleteHeaderPortraitList_argsTupleScheme();
      }
    }

    private static class deleteHeaderPortraitList_argsTupleScheme extends TupleScheme<deleteHeaderPortraitList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter20 : struct.ids)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              long _elem23; // required
              _elem23 = iprot.readI64();
              struct.ids.add(_elem23);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class deleteHeaderPortraitList_result implements org.apache.thrift.TBase<deleteHeaderPortraitList_result, deleteHeaderPortraitList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHeaderPortraitList_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHeaderPortraitList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHeaderPortraitList_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHeaderPortraitList_result.class, metaDataMap);
    }

    public deleteHeaderPortraitList_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHeaderPortraitList_result(deleteHeaderPortraitList_result other) {
    }

    public deleteHeaderPortraitList_result deepCopy() {
      return new deleteHeaderPortraitList_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHeaderPortraitList_result)
        return this.equals((deleteHeaderPortraitList_result)that);
      return false;
    }

    public boolean equals(deleteHeaderPortraitList_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteHeaderPortraitList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteHeaderPortraitList_result typedOther = (deleteHeaderPortraitList_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHeaderPortraitList_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHeaderPortraitList_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHeaderPortraitList_resultStandardScheme getScheme() {
        return new deleteHeaderPortraitList_resultStandardScheme();
      }
    }

    private static class deleteHeaderPortraitList_resultStandardScheme extends StandardScheme<deleteHeaderPortraitList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHeaderPortraitList_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHeaderPortraitList_resultTupleScheme getScheme() {
        return new deleteHeaderPortraitList_resultTupleScheme();
      }
    }

    private static class deleteHeaderPortraitList_resultTupleScheme extends TupleScheme<deleteHeaderPortraitList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveHeaderPortraitList_args implements org.apache.thrift.TBase<saveHeaderPortraitList_args, saveHeaderPortraitList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveHeaderPortraitList_args");

    private static final org.apache.thrift.protocol.TField HEADER_PORTRAIT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("headerPortraitView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveHeaderPortraitList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveHeaderPortraitList_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.HeaderPortraitView headerPortraitView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER_PORTRAIT_VIEW((short)1, "headerPortraitView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER_PORTRAIT_VIEW
            return HEADER_PORTRAIT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER_PORTRAIT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("headerPortraitView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.HeaderPortraitView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveHeaderPortraitList_args.class, metaDataMap);
    }

    public saveHeaderPortraitList_args() {
    }

    public saveHeaderPortraitList_args(
      one.show.manage.thrift.view.HeaderPortraitView headerPortraitView)
    {
      this();
      this.headerPortraitView = headerPortraitView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveHeaderPortraitList_args(saveHeaderPortraitList_args other) {
      if (other.isSetHeaderPortraitView()) {
        this.headerPortraitView = new one.show.manage.thrift.view.HeaderPortraitView(other.headerPortraitView);
      }
    }

    public saveHeaderPortraitList_args deepCopy() {
      return new saveHeaderPortraitList_args(this);
    }

    @Override
    public void clear() {
      this.headerPortraitView = null;
    }

    public one.show.manage.thrift.view.HeaderPortraitView getHeaderPortraitView() {
      return this.headerPortraitView;
    }

    public saveHeaderPortraitList_args setHeaderPortraitView(one.show.manage.thrift.view.HeaderPortraitView headerPortraitView) {
      this.headerPortraitView = headerPortraitView;
      return this;
    }

    public void unsetHeaderPortraitView() {
      this.headerPortraitView = null;
    }

    /** Returns true if field headerPortraitView is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaderPortraitView() {
      return this.headerPortraitView != null;
    }

    public void setHeaderPortraitViewIsSet(boolean value) {
      if (!value) {
        this.headerPortraitView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEADER_PORTRAIT_VIEW:
        if (value == null) {
          unsetHeaderPortraitView();
        } else {
          setHeaderPortraitView((one.show.manage.thrift.view.HeaderPortraitView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER_PORTRAIT_VIEW:
        return getHeaderPortraitView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEADER_PORTRAIT_VIEW:
        return isSetHeaderPortraitView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveHeaderPortraitList_args)
        return this.equals((saveHeaderPortraitList_args)that);
      return false;
    }

    public boolean equals(saveHeaderPortraitList_args that) {
      if (that == null)
        return false;

      boolean this_present_headerPortraitView = true && this.isSetHeaderPortraitView();
      boolean that_present_headerPortraitView = true && that.isSetHeaderPortraitView();
      if (this_present_headerPortraitView || that_present_headerPortraitView) {
        if (!(this_present_headerPortraitView && that_present_headerPortraitView))
          return false;
        if (!this.headerPortraitView.equals(that.headerPortraitView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveHeaderPortraitList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveHeaderPortraitList_args typedOther = (saveHeaderPortraitList_args)other;

      lastComparison = Boolean.valueOf(isSetHeaderPortraitView()).compareTo(typedOther.isSetHeaderPortraitView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaderPortraitView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerPortraitView, typedOther.headerPortraitView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveHeaderPortraitList_args(");
      boolean first = true;

      sb.append("headerPortraitView:");
      if (this.headerPortraitView == null) {
        sb.append("null");
      } else {
        sb.append(this.headerPortraitView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (headerPortraitView != null) {
        headerPortraitView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveHeaderPortraitList_argsStandardSchemeFactory implements SchemeFactory {
      public saveHeaderPortraitList_argsStandardScheme getScheme() {
        return new saveHeaderPortraitList_argsStandardScheme();
      }
    }

    private static class saveHeaderPortraitList_argsStandardScheme extends StandardScheme<saveHeaderPortraitList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER_PORTRAIT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.headerPortraitView = new one.show.manage.thrift.view.HeaderPortraitView();
                struct.headerPortraitView.read(iprot);
                struct.setHeaderPortraitViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.headerPortraitView != null) {
          oprot.writeFieldBegin(HEADER_PORTRAIT_VIEW_FIELD_DESC);
          struct.headerPortraitView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveHeaderPortraitList_argsTupleSchemeFactory implements SchemeFactory {
      public saveHeaderPortraitList_argsTupleScheme getScheme() {
        return new saveHeaderPortraitList_argsTupleScheme();
      }
    }

    private static class saveHeaderPortraitList_argsTupleScheme extends TupleScheme<saveHeaderPortraitList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHeaderPortraitView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHeaderPortraitView()) {
          struct.headerPortraitView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveHeaderPortraitList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.headerPortraitView = new one.show.manage.thrift.view.HeaderPortraitView();
          struct.headerPortraitView.read(iprot);
          struct.setHeaderPortraitViewIsSet(true);
        }
      }
    }

  }

  public static class saveHeaderPortraitList_result implements org.apache.thrift.TBase<saveHeaderPortraitList_result, saveHeaderPortraitList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveHeaderPortraitList_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveHeaderPortraitList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveHeaderPortraitList_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveHeaderPortraitList_result.class, metaDataMap);
    }

    public saveHeaderPortraitList_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveHeaderPortraitList_result(saveHeaderPortraitList_result other) {
    }

    public saveHeaderPortraitList_result deepCopy() {
      return new saveHeaderPortraitList_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveHeaderPortraitList_result)
        return this.equals((saveHeaderPortraitList_result)that);
      return false;
    }

    public boolean equals(saveHeaderPortraitList_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveHeaderPortraitList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveHeaderPortraitList_result typedOther = (saveHeaderPortraitList_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveHeaderPortraitList_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveHeaderPortraitList_resultStandardSchemeFactory implements SchemeFactory {
      public saveHeaderPortraitList_resultStandardScheme getScheme() {
        return new saveHeaderPortraitList_resultStandardScheme();
      }
    }

    private static class saveHeaderPortraitList_resultStandardScheme extends StandardScheme<saveHeaderPortraitList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveHeaderPortraitList_resultTupleSchemeFactory implements SchemeFactory {
      public saveHeaderPortraitList_resultTupleScheme getScheme() {
        return new saveHeaderPortraitList_resultTupleScheme();
      }
    }

    private static class saveHeaderPortraitList_resultTupleScheme extends TupleScheme<saveHeaderPortraitList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveHeaderPortraitList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAdminHeaderPortraitListView_args implements org.apache.thrift.TBase<findAdminHeaderPortraitListView_args, findAdminHeaderPortraitListView_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAdminHeaderPortraitListView_args");

    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAdminHeaderPortraitListView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAdminHeaderPortraitListView_argsTupleSchemeFactory());
    }

    public int pageSize; // required
    public int pageCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_SIZE((short)1, "pageSize"),
      PAGE_COUNT((short)2, "pageCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_SIZE
            return PAGE_SIZE;
          case 2: // PAGE_COUNT
            return PAGE_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGESIZE_ISSET_ID = 0;
    private static final int __PAGECOUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAdminHeaderPortraitListView_args.class, metaDataMap);
    }

    public findAdminHeaderPortraitListView_args() {
    }

    public findAdminHeaderPortraitListView_args(
      int pageSize,
      int pageCount)
    {
      this();
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.pageCount = pageCount;
      setPageCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAdminHeaderPortraitListView_args(findAdminHeaderPortraitListView_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageSize = other.pageSize;
      this.pageCount = other.pageCount;
    }

    public findAdminHeaderPortraitListView_args deepCopy() {
      return new findAdminHeaderPortraitListView_args(this);
    }

    @Override
    public void clear() {
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setPageCountIsSet(false);
      this.pageCount = 0;
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findAdminHeaderPortraitListView_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public int getPageCount() {
      return this.pageCount;
    }

    public findAdminHeaderPortraitListView_args setPageCount(int pageCount) {
      this.pageCount = pageCount;
      setPageCountIsSet(true);
      return this;
    }

    public void unsetPageCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
    public boolean isSetPageCount() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    public void setPageCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case PAGE_COUNT:
        if (value == null) {
          unsetPageCount();
        } else {
          setPageCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case PAGE_COUNT:
        return Integer.valueOf(getPageCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_SIZE:
        return isSetPageSize();
      case PAGE_COUNT:
        return isSetPageCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAdminHeaderPortraitListView_args)
        return this.equals((findAdminHeaderPortraitListView_args)that);
      return false;
    }

    public boolean equals(findAdminHeaderPortraitListView_args that) {
      if (that == null)
        return false;

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_pageCount = true;
      boolean that_present_pageCount = true;
      if (this_present_pageCount || that_present_pageCount) {
        if (!(this_present_pageCount && that_present_pageCount))
          return false;
        if (this.pageCount != that.pageCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAdminHeaderPortraitListView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAdminHeaderPortraitListView_args typedOther = (findAdminHeaderPortraitListView_args)other;

      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(typedOther.isSetPageCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, typedOther.pageCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAdminHeaderPortraitListView_args(");
      boolean first = true;

      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageCount:");
      sb.append(this.pageCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAdminHeaderPortraitListView_argsStandardSchemeFactory implements SchemeFactory {
      public findAdminHeaderPortraitListView_argsStandardScheme getScheme() {
        return new findAdminHeaderPortraitListView_argsStandardScheme();
      }
    }

    private static class findAdminHeaderPortraitListView_argsStandardScheme extends StandardScheme<findAdminHeaderPortraitListView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAdminHeaderPortraitListView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageCount = iprot.readI32();
                struct.setPageCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAdminHeaderPortraitListView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.pageCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAdminHeaderPortraitListView_argsTupleSchemeFactory implements SchemeFactory {
      public findAdminHeaderPortraitListView_argsTupleScheme getScheme() {
        return new findAdminHeaderPortraitListView_argsTupleScheme();
      }
    }

    private static class findAdminHeaderPortraitListView_argsTupleScheme extends TupleScheme<findAdminHeaderPortraitListView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAdminHeaderPortraitListView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageSize()) {
          optionals.set(0);
        }
        if (struct.isSetPageCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetPageCount()) {
          oprot.writeI32(struct.pageCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAdminHeaderPortraitListView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageCount = iprot.readI32();
          struct.setPageCountIsSet(true);
        }
      }
    }

  }

  public static class findAdminHeaderPortraitListView_result implements org.apache.thrift.TBase<findAdminHeaderPortraitListView_result, findAdminHeaderPortraitListView_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAdminHeaderPortraitListView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAdminHeaderPortraitListView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAdminHeaderPortraitListView_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.AdminHeaderPortraitListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdminHeaderPortraitListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAdminHeaderPortraitListView_result.class, metaDataMap);
    }

    public findAdminHeaderPortraitListView_result() {
    }

    public findAdminHeaderPortraitListView_result(
      one.show.manage.thrift.view.AdminHeaderPortraitListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAdminHeaderPortraitListView_result(findAdminHeaderPortraitListView_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.AdminHeaderPortraitListView(other.success);
      }
    }

    public findAdminHeaderPortraitListView_result deepCopy() {
      return new findAdminHeaderPortraitListView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.AdminHeaderPortraitListView getSuccess() {
      return this.success;
    }

    public findAdminHeaderPortraitListView_result setSuccess(one.show.manage.thrift.view.AdminHeaderPortraitListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.AdminHeaderPortraitListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAdminHeaderPortraitListView_result)
        return this.equals((findAdminHeaderPortraitListView_result)that);
      return false;
    }

    public boolean equals(findAdminHeaderPortraitListView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAdminHeaderPortraitListView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAdminHeaderPortraitListView_result typedOther = (findAdminHeaderPortraitListView_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAdminHeaderPortraitListView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAdminHeaderPortraitListView_resultStandardSchemeFactory implements SchemeFactory {
      public findAdminHeaderPortraitListView_resultStandardScheme getScheme() {
        return new findAdminHeaderPortraitListView_resultStandardScheme();
      }
    }

    private static class findAdminHeaderPortraitListView_resultStandardScheme extends StandardScheme<findAdminHeaderPortraitListView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAdminHeaderPortraitListView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.AdminHeaderPortraitListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAdminHeaderPortraitListView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAdminHeaderPortraitListView_resultTupleSchemeFactory implements SchemeFactory {
      public findAdminHeaderPortraitListView_resultTupleScheme getScheme() {
        return new findAdminHeaderPortraitListView_resultTupleScheme();
      }
    }

    private static class findAdminHeaderPortraitListView_resultTupleScheme extends TupleScheme<findAdminHeaderPortraitListView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAdminHeaderPortraitListView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAdminHeaderPortraitListView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.AdminHeaderPortraitListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findGiftList_args implements org.apache.thrift.TBase<findGiftList_args, findGiftList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftList_args");

    private static final org.apache.thrift.protocol.TField GIFT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("giftType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftList_argsTupleSchemeFactory());
    }

    public int giftType; // required
    public int status; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIFT_TYPE((short)1, "giftType"),
      STATUS((short)2, "status"),
      START((short)3, "start"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIFT_TYPE
            return GIFT_TYPE;
          case 2: // STATUS
            return STATUS;
          case 3: // START
            return START;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GIFTTYPE_ISSET_ID = 0;
    private static final int __STATUS_ISSET_ID = 1;
    private static final int __START_ISSET_ID = 2;
    private static final int __COUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIFT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("giftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftList_args.class, metaDataMap);
    }

    public findGiftList_args() {
    }

    public findGiftList_args(
      int giftType,
      int status,
      int start,
      int count)
    {
      this();
      this.giftType = giftType;
      setGiftTypeIsSet(true);
      this.status = status;
      setStatusIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftList_args(findGiftList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.giftType = other.giftType;
      this.status = other.status;
      this.start = other.start;
      this.count = other.count;
    }

    public findGiftList_args deepCopy() {
      return new findGiftList_args(this);
    }

    @Override
    public void clear() {
      setGiftTypeIsSet(false);
      this.giftType = 0;
      setStatusIsSet(false);
      this.status = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getGiftType() {
      return this.giftType;
    }

    public findGiftList_args setGiftType(int giftType) {
      this.giftType = giftType;
      setGiftTypeIsSet(true);
      return this;
    }

    public void unsetGiftType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTTYPE_ISSET_ID);
    }

    /** Returns true if field giftType is set (has been assigned a value) and false otherwise */
    public boolean isSetGiftType() {
      return EncodingUtils.testBit(__isset_bitfield, __GIFTTYPE_ISSET_ID);
    }

    public void setGiftTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTTYPE_ISSET_ID, value);
    }

    public int getStatus() {
      return this.status;
    }

    public findGiftList_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findGiftList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findGiftList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GIFT_TYPE:
        if (value == null) {
          unsetGiftType();
        } else {
          setGiftType((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GIFT_TYPE:
        return Integer.valueOf(getGiftType());

      case STATUS:
        return Integer.valueOf(getStatus());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GIFT_TYPE:
        return isSetGiftType();
      case STATUS:
        return isSetStatus();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftList_args)
        return this.equals((findGiftList_args)that);
      return false;
    }

    public boolean equals(findGiftList_args that) {
      if (that == null)
        return false;

      boolean this_present_giftType = true;
      boolean that_present_giftType = true;
      if (this_present_giftType || that_present_giftType) {
        if (!(this_present_giftType && that_present_giftType))
          return false;
        if (this.giftType != that.giftType)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftList_args typedOther = (findGiftList_args)other;

      lastComparison = Boolean.valueOf(isSetGiftType()).compareTo(typedOther.isSetGiftType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiftType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftType, typedOther.giftType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftList_args(");
      boolean first = true;

      sb.append("giftType:");
      sb.append(this.giftType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftList_argsStandardSchemeFactory implements SchemeFactory {
      public findGiftList_argsStandardScheme getScheme() {
        return new findGiftList_argsStandardScheme();
      }
    }

    private static class findGiftList_argsStandardScheme extends StandardScheme<findGiftList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIFT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.giftType = iprot.readI32();
                struct.setGiftTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GIFT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.giftType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftList_argsTupleSchemeFactory implements SchemeFactory {
      public findGiftList_argsTupleScheme getScheme() {
        return new findGiftList_argsTupleScheme();
      }
    }

    private static class findGiftList_argsTupleScheme extends TupleScheme<findGiftList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGiftType()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetGiftType()) {
          oprot.writeI32(struct.giftType);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.giftType = iprot.readI32();
          struct.setGiftTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findGiftList_result implements org.apache.thrift.TBase<findGiftList_result, findGiftList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftList_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.GiftListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.GiftListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftList_result.class, metaDataMap);
    }

    public findGiftList_result() {
    }

    public findGiftList_result(
      one.show.manage.thrift.view.GiftListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftList_result(findGiftList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.GiftListView(other.success);
      }
    }

    public findGiftList_result deepCopy() {
      return new findGiftList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.GiftListView getSuccess() {
      return this.success;
    }

    public findGiftList_result setSuccess(one.show.manage.thrift.view.GiftListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.GiftListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftList_result)
        return this.equals((findGiftList_result)that);
      return false;
    }

    public boolean equals(findGiftList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftList_result typedOther = (findGiftList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftList_resultStandardSchemeFactory implements SchemeFactory {
      public findGiftList_resultStandardScheme getScheme() {
        return new findGiftList_resultStandardScheme();
      }
    }

    private static class findGiftList_resultStandardScheme extends StandardScheme<findGiftList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.GiftListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftList_resultTupleSchemeFactory implements SchemeFactory {
      public findGiftList_resultTupleScheme getScheme() {
        return new findGiftList_resultTupleScheme();
      }
    }

    private static class findGiftList_resultTupleScheme extends TupleScheme<findGiftList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.GiftListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveGift_args implements org.apache.thrift.TBase<saveGift_args, saveGift_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveGift_args");

    private static final org.apache.thrift.protocol.TField GIFT_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("giftView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveGift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveGift_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.GiftView giftView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIFT_VIEW((short)1, "giftView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIFT_VIEW
            return GIFT_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIFT_VIEW, new org.apache.thrift.meta_data.FieldMetaData("giftView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.GiftView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveGift_args.class, metaDataMap);
    }

    public saveGift_args() {
    }

    public saveGift_args(
      one.show.manage.thrift.view.GiftView giftView)
    {
      this();
      this.giftView = giftView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveGift_args(saveGift_args other) {
      if (other.isSetGiftView()) {
        this.giftView = new one.show.manage.thrift.view.GiftView(other.giftView);
      }
    }

    public saveGift_args deepCopy() {
      return new saveGift_args(this);
    }

    @Override
    public void clear() {
      this.giftView = null;
    }

    public one.show.manage.thrift.view.GiftView getGiftView() {
      return this.giftView;
    }

    public saveGift_args setGiftView(one.show.manage.thrift.view.GiftView giftView) {
      this.giftView = giftView;
      return this;
    }

    public void unsetGiftView() {
      this.giftView = null;
    }

    /** Returns true if field giftView is set (has been assigned a value) and false otherwise */
    public boolean isSetGiftView() {
      return this.giftView != null;
    }

    public void setGiftViewIsSet(boolean value) {
      if (!value) {
        this.giftView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GIFT_VIEW:
        if (value == null) {
          unsetGiftView();
        } else {
          setGiftView((one.show.manage.thrift.view.GiftView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GIFT_VIEW:
        return getGiftView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GIFT_VIEW:
        return isSetGiftView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveGift_args)
        return this.equals((saveGift_args)that);
      return false;
    }

    public boolean equals(saveGift_args that) {
      if (that == null)
        return false;

      boolean this_present_giftView = true && this.isSetGiftView();
      boolean that_present_giftView = true && that.isSetGiftView();
      if (this_present_giftView || that_present_giftView) {
        if (!(this_present_giftView && that_present_giftView))
          return false;
        if (!this.giftView.equals(that.giftView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveGift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveGift_args typedOther = (saveGift_args)other;

      lastComparison = Boolean.valueOf(isSetGiftView()).compareTo(typedOther.isSetGiftView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiftView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftView, typedOther.giftView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveGift_args(");
      boolean first = true;

      sb.append("giftView:");
      if (this.giftView == null) {
        sb.append("null");
      } else {
        sb.append(this.giftView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (giftView != null) {
        giftView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveGift_argsStandardSchemeFactory implements SchemeFactory {
      public saveGift_argsStandardScheme getScheme() {
        return new saveGift_argsStandardScheme();
      }
    }

    private static class saveGift_argsStandardScheme extends StandardScheme<saveGift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveGift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIFT_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.giftView = new one.show.manage.thrift.view.GiftView();
                struct.giftView.read(iprot);
                struct.setGiftViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveGift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.giftView != null) {
          oprot.writeFieldBegin(GIFT_VIEW_FIELD_DESC);
          struct.giftView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveGift_argsTupleSchemeFactory implements SchemeFactory {
      public saveGift_argsTupleScheme getScheme() {
        return new saveGift_argsTupleScheme();
      }
    }

    private static class saveGift_argsTupleScheme extends TupleScheme<saveGift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGiftView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGiftView()) {
          struct.giftView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.giftView = new one.show.manage.thrift.view.GiftView();
          struct.giftView.read(iprot);
          struct.setGiftViewIsSet(true);
        }
      }
    }

  }

  public static class saveGift_result implements org.apache.thrift.TBase<saveGift_result, saveGift_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveGift_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveGift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveGift_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveGift_result.class, metaDataMap);
    }

    public saveGift_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveGift_result(saveGift_result other) {
    }

    public saveGift_result deepCopy() {
      return new saveGift_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveGift_result)
        return this.equals((saveGift_result)that);
      return false;
    }

    public boolean equals(saveGift_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveGift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveGift_result typedOther = (saveGift_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveGift_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveGift_resultStandardSchemeFactory implements SchemeFactory {
      public saveGift_resultStandardScheme getScheme() {
        return new saveGift_resultStandardScheme();
      }
    }

    private static class saveGift_resultStandardScheme extends StandardScheme<saveGift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveGift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveGift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveGift_resultTupleSchemeFactory implements SchemeFactory {
      public saveGift_resultTupleScheme getScheme() {
        return new saveGift_resultTupleScheme();
      }
    }

    private static class saveGift_resultTupleScheme extends TupleScheme<saveGift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteGift_args implements org.apache.thrift.TBase<deleteGift_args, deleteGift_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGift_args");

    private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteGift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteGift_argsTupleSchemeFactory());
    }

    public int giftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIFT_ID((short)1, "giftId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIFT_ID
            return GIFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GIFTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGift_args.class, metaDataMap);
    }

    public deleteGift_args() {
    }

    public deleteGift_args(
      int giftId)
    {
      this();
      this.giftId = giftId;
      setGiftIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGift_args(deleteGift_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.giftId = other.giftId;
    }

    public deleteGift_args deepCopy() {
      return new deleteGift_args(this);
    }

    @Override
    public void clear() {
      setGiftIdIsSet(false);
      this.giftId = 0;
    }

    public int getGiftId() {
      return this.giftId;
    }

    public deleteGift_args setGiftId(int giftId) {
      this.giftId = giftId;
      setGiftIdIsSet(true);
      return this;
    }

    public void unsetGiftId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTID_ISSET_ID);
    }

    /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
    public boolean isSetGiftId() {
      return EncodingUtils.testBit(__isset_bitfield, __GIFTID_ISSET_ID);
    }

    public void setGiftIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GIFT_ID:
        if (value == null) {
          unsetGiftId();
        } else {
          setGiftId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GIFT_ID:
        return Integer.valueOf(getGiftId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GIFT_ID:
        return isSetGiftId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGift_args)
        return this.equals((deleteGift_args)that);
      return false;
    }

    public boolean equals(deleteGift_args that) {
      if (that == null)
        return false;

      boolean this_present_giftId = true;
      boolean that_present_giftId = true;
      if (this_present_giftId || that_present_giftId) {
        if (!(this_present_giftId && that_present_giftId))
          return false;
        if (this.giftId != that.giftId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteGift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteGift_args typedOther = (deleteGift_args)other;

      lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGift_args(");
      boolean first = true;

      sb.append("giftId:");
      sb.append(this.giftId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGift_argsStandardSchemeFactory implements SchemeFactory {
      public deleteGift_argsStandardScheme getScheme() {
        return new deleteGift_argsStandardScheme();
      }
    }

    private static class deleteGift_argsStandardScheme extends StandardScheme<deleteGift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.giftId = iprot.readI32();
                struct.setGiftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
        oprot.writeI32(struct.giftId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGift_argsTupleSchemeFactory implements SchemeFactory {
      public deleteGift_argsTupleScheme getScheme() {
        return new deleteGift_argsTupleScheme();
      }
    }

    private static class deleteGift_argsTupleScheme extends TupleScheme<deleteGift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGiftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGiftId()) {
          oprot.writeI32(struct.giftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.giftId = iprot.readI32();
          struct.setGiftIdIsSet(true);
        }
      }
    }

  }

  public static class deleteGift_result implements org.apache.thrift.TBase<deleteGift_result, deleteGift_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGift_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteGift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteGift_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGift_result.class, metaDataMap);
    }

    public deleteGift_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGift_result(deleteGift_result other) {
    }

    public deleteGift_result deepCopy() {
      return new deleteGift_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGift_result)
        return this.equals((deleteGift_result)that);
      return false;
    }

    public boolean equals(deleteGift_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteGift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteGift_result typedOther = (deleteGift_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGift_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGift_resultStandardSchemeFactory implements SchemeFactory {
      public deleteGift_resultStandardScheme getScheme() {
        return new deleteGift_resultStandardScheme();
      }
    }

    private static class deleteGift_resultStandardScheme extends StandardScheme<deleteGift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGift_resultTupleSchemeFactory implements SchemeFactory {
      public deleteGift_resultTupleScheme getScheme() {
        return new deleteGift_resultTupleScheme();
      }
    }

    private static class deleteGift_resultTupleScheme extends TupleScheme<deleteGift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findGiftTypeList_args implements org.apache.thrift.TBase<findGiftTypeList_args, findGiftTypeList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftTypeList_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftTypeList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftTypeList_argsTupleSchemeFactory());
    }

    public int status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftTypeList_args.class, metaDataMap);
    }

    public findGiftTypeList_args() {
    }

    public findGiftTypeList_args(
      int status)
    {
      this();
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftTypeList_args(findGiftTypeList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.status = other.status;
    }

    public findGiftTypeList_args deepCopy() {
      return new findGiftTypeList_args(this);
    }

    @Override
    public void clear() {
      setStatusIsSet(false);
      this.status = 0;
    }

    public int getStatus() {
      return this.status;
    }

    public findGiftTypeList_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return Integer.valueOf(getStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftTypeList_args)
        return this.equals((findGiftTypeList_args)that);
      return false;
    }

    public boolean equals(findGiftTypeList_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftTypeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftTypeList_args typedOther = (findGiftTypeList_args)other;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftTypeList_args(");
      boolean first = true;

      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftTypeList_argsStandardSchemeFactory implements SchemeFactory {
      public findGiftTypeList_argsStandardScheme getScheme() {
        return new findGiftTypeList_argsStandardScheme();
      }
    }

    private static class findGiftTypeList_argsStandardScheme extends StandardScheme<findGiftTypeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftTypeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftTypeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftTypeList_argsTupleSchemeFactory implements SchemeFactory {
      public findGiftTypeList_argsTupleScheme getScheme() {
        return new findGiftTypeList_argsTupleScheme();
      }
    }

    private static class findGiftTypeList_argsTupleScheme extends TupleScheme<findGiftTypeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftTypeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftTypeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class findGiftTypeList_result implements org.apache.thrift.TBase<findGiftTypeList_result, findGiftTypeList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftTypeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftTypeList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftTypeList_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.GiftTypeView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.GiftTypeView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftTypeList_result.class, metaDataMap);
    }

    public findGiftTypeList_result() {
    }

    public findGiftTypeList_result(
      List<one.show.manage.thrift.view.GiftTypeView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftTypeList_result(findGiftTypeList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.GiftTypeView> __this__success = new ArrayList<one.show.manage.thrift.view.GiftTypeView>();
        for (one.show.manage.thrift.view.GiftTypeView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.GiftTypeView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findGiftTypeList_result deepCopy() {
      return new findGiftTypeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.GiftTypeView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.GiftTypeView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.GiftTypeView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.GiftTypeView> getSuccess() {
      return this.success;
    }

    public findGiftTypeList_result setSuccess(List<one.show.manage.thrift.view.GiftTypeView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.GiftTypeView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftTypeList_result)
        return this.equals((findGiftTypeList_result)that);
      return false;
    }

    public boolean equals(findGiftTypeList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftTypeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftTypeList_result typedOther = (findGiftTypeList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftTypeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftTypeList_resultStandardSchemeFactory implements SchemeFactory {
      public findGiftTypeList_resultStandardScheme getScheme() {
        return new findGiftTypeList_resultStandardScheme();
      }
    }

    private static class findGiftTypeList_resultStandardScheme extends StandardScheme<findGiftTypeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftTypeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.GiftTypeView>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    one.show.manage.thrift.view.GiftTypeView _elem26; // required
                    _elem26 = new one.show.manage.thrift.view.GiftTypeView();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftTypeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.GiftTypeView _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftTypeList_resultTupleSchemeFactory implements SchemeFactory {
      public findGiftTypeList_resultTupleScheme getScheme() {
        return new findGiftTypeList_resultTupleScheme();
      }
    }

    private static class findGiftTypeList_resultTupleScheme extends TupleScheme<findGiftTypeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftTypeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.GiftTypeView _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftTypeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.GiftTypeView>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              one.show.manage.thrift.view.GiftTypeView _elem31; // required
              _elem31 = new one.show.manage.thrift.view.GiftTypeView();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findGiftById_args implements org.apache.thrift.TBase<findGiftById_args, findGiftById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftById_args");

    private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftById_argsTupleSchemeFactory());
    }

    public int giftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIFT_ID((short)1, "giftId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIFT_ID
            return GIFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GIFTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftById_args.class, metaDataMap);
    }

    public findGiftById_args() {
    }

    public findGiftById_args(
      int giftId)
    {
      this();
      this.giftId = giftId;
      setGiftIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftById_args(findGiftById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.giftId = other.giftId;
    }

    public findGiftById_args deepCopy() {
      return new findGiftById_args(this);
    }

    @Override
    public void clear() {
      setGiftIdIsSet(false);
      this.giftId = 0;
    }

    public int getGiftId() {
      return this.giftId;
    }

    public findGiftById_args setGiftId(int giftId) {
      this.giftId = giftId;
      setGiftIdIsSet(true);
      return this;
    }

    public void unsetGiftId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTID_ISSET_ID);
    }

    /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
    public boolean isSetGiftId() {
      return EncodingUtils.testBit(__isset_bitfield, __GIFTID_ISSET_ID);
    }

    public void setGiftIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GIFT_ID:
        if (value == null) {
          unsetGiftId();
        } else {
          setGiftId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GIFT_ID:
        return Integer.valueOf(getGiftId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GIFT_ID:
        return isSetGiftId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftById_args)
        return this.equals((findGiftById_args)that);
      return false;
    }

    public boolean equals(findGiftById_args that) {
      if (that == null)
        return false;

      boolean this_present_giftId = true;
      boolean that_present_giftId = true;
      if (this_present_giftId || that_present_giftId) {
        if (!(this_present_giftId && that_present_giftId))
          return false;
        if (this.giftId != that.giftId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftById_args typedOther = (findGiftById_args)other;

      lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftById_args(");
      boolean first = true;

      sb.append("giftId:");
      sb.append(this.giftId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftById_argsStandardSchemeFactory implements SchemeFactory {
      public findGiftById_argsStandardScheme getScheme() {
        return new findGiftById_argsStandardScheme();
      }
    }

    private static class findGiftById_argsStandardScheme extends StandardScheme<findGiftById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.giftId = iprot.readI32();
                struct.setGiftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
        oprot.writeI32(struct.giftId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftById_argsTupleSchemeFactory implements SchemeFactory {
      public findGiftById_argsTupleScheme getScheme() {
        return new findGiftById_argsTupleScheme();
      }
    }

    private static class findGiftById_argsTupleScheme extends TupleScheme<findGiftById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGiftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGiftId()) {
          oprot.writeI32(struct.giftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.giftId = iprot.readI32();
          struct.setGiftIdIsSet(true);
        }
      }
    }

  }

  public static class findGiftById_result implements org.apache.thrift.TBase<findGiftById_result, findGiftById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftById_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.GiftView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.GiftView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftById_result.class, metaDataMap);
    }

    public findGiftById_result() {
    }

    public findGiftById_result(
      one.show.manage.thrift.view.GiftView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftById_result(findGiftById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.GiftView(other.success);
      }
    }

    public findGiftById_result deepCopy() {
      return new findGiftById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.GiftView getSuccess() {
      return this.success;
    }

    public findGiftById_result setSuccess(one.show.manage.thrift.view.GiftView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.GiftView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftById_result)
        return this.equals((findGiftById_result)that);
      return false;
    }

    public boolean equals(findGiftById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftById_result typedOther = (findGiftById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftById_resultStandardSchemeFactory implements SchemeFactory {
      public findGiftById_resultStandardScheme getScheme() {
        return new findGiftById_resultStandardScheme();
      }
    }

    private static class findGiftById_resultStandardScheme extends StandardScheme<findGiftById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.GiftView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftById_resultTupleSchemeFactory implements SchemeFactory {
      public findGiftById_resultTupleScheme getScheme() {
        return new findGiftById_resultTupleScheme();
      }
    }

    private static class findGiftById_resultTupleScheme extends TupleScheme<findGiftById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.GiftView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateGift_args implements org.apache.thrift.TBase<updateGift_args, updateGift_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGift_args");

    private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateContent", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGift_argsTupleSchemeFactory());
    }

    public int giftId; // required
    public Map<String,String> updateContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIFT_ID((short)1, "giftId"),
      UPDATE_CONTENT((short)2, "updateContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIFT_ID
            return GIFT_ID;
          case 2: // UPDATE_CONTENT
            return UPDATE_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GIFTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UPDATE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("updateContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGift_args.class, metaDataMap);
    }

    public updateGift_args() {
    }

    public updateGift_args(
      int giftId,
      Map<String,String> updateContent)
    {
      this();
      this.giftId = giftId;
      setGiftIdIsSet(true);
      this.updateContent = updateContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGift_args(updateGift_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.giftId = other.giftId;
      if (other.isSetUpdateContent()) {
        Map<String,String> __this__updateContent = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.updateContent.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__updateContent_copy_key = other_element_key;

          String __this__updateContent_copy_value = other_element_value;

          __this__updateContent.put(__this__updateContent_copy_key, __this__updateContent_copy_value);
        }
        this.updateContent = __this__updateContent;
      }
    }

    public updateGift_args deepCopy() {
      return new updateGift_args(this);
    }

    @Override
    public void clear() {
      setGiftIdIsSet(false);
      this.giftId = 0;
      this.updateContent = null;
    }

    public int getGiftId() {
      return this.giftId;
    }

    public updateGift_args setGiftId(int giftId) {
      this.giftId = giftId;
      setGiftIdIsSet(true);
      return this;
    }

    public void unsetGiftId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTID_ISSET_ID);
    }

    /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
    public boolean isSetGiftId() {
      return EncodingUtils.testBit(__isset_bitfield, __GIFTID_ISSET_ID);
    }

    public void setGiftIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTID_ISSET_ID, value);
    }

    public int getUpdateContentSize() {
      return (this.updateContent == null) ? 0 : this.updateContent.size();
    }

    public void putToUpdateContent(String key, String val) {
      if (this.updateContent == null) {
        this.updateContent = new HashMap<String,String>();
      }
      this.updateContent.put(key, val);
    }

    public Map<String,String> getUpdateContent() {
      return this.updateContent;
    }

    public updateGift_args setUpdateContent(Map<String,String> updateContent) {
      this.updateContent = updateContent;
      return this;
    }

    public void unsetUpdateContent() {
      this.updateContent = null;
    }

    /** Returns true if field updateContent is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateContent() {
      return this.updateContent != null;
    }

    public void setUpdateContentIsSet(boolean value) {
      if (!value) {
        this.updateContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GIFT_ID:
        if (value == null) {
          unsetGiftId();
        } else {
          setGiftId((Integer)value);
        }
        break;

      case UPDATE_CONTENT:
        if (value == null) {
          unsetUpdateContent();
        } else {
          setUpdateContent((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GIFT_ID:
        return Integer.valueOf(getGiftId());

      case UPDATE_CONTENT:
        return getUpdateContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GIFT_ID:
        return isSetGiftId();
      case UPDATE_CONTENT:
        return isSetUpdateContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGift_args)
        return this.equals((updateGift_args)that);
      return false;
    }

    public boolean equals(updateGift_args that) {
      if (that == null)
        return false;

      boolean this_present_giftId = true;
      boolean that_present_giftId = true;
      if (this_present_giftId || that_present_giftId) {
        if (!(this_present_giftId && that_present_giftId))
          return false;
        if (this.giftId != that.giftId)
          return false;
      }

      boolean this_present_updateContent = true && this.isSetUpdateContent();
      boolean that_present_updateContent = true && that.isSetUpdateContent();
      if (this_present_updateContent || that_present_updateContent) {
        if (!(this_present_updateContent && that_present_updateContent))
          return false;
        if (!this.updateContent.equals(that.updateContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateGift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateGift_args typedOther = (updateGift_args)other;

      lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateContent()).compareTo(typedOther.isSetUpdateContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateContent, typedOther.updateContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGift_args(");
      boolean first = true;

      sb.append("giftId:");
      sb.append(this.giftId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateContent:");
      if (this.updateContent == null) {
        sb.append("null");
      } else {
        sb.append(this.updateContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGift_argsStandardSchemeFactory implements SchemeFactory {
      public updateGift_argsStandardScheme getScheme() {
        return new updateGift_argsStandardScheme();
      }
    }

    private static class updateGift_argsStandardScheme extends StandardScheme<updateGift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.giftId = iprot.readI32();
                struct.setGiftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATE_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                  struct.updateContent = new HashMap<String,String>(2*_map32.size);
                  for (int _i33 = 0; _i33 < _map32.size; ++_i33)
                  {
                    String _key34; // required
                    String _val35; // required
                    _key34 = iprot.readString();
                    _val35 = iprot.readString();
                    struct.updateContent.put(_key34, _val35);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpdateContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
        oprot.writeI32(struct.giftId);
        oprot.writeFieldEnd();
        if (struct.updateContent != null) {
          oprot.writeFieldBegin(UPDATE_CONTENT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.updateContent.size()));
            for (Map.Entry<String, String> _iter36 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              oprot.writeString(_iter36.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGift_argsTupleSchemeFactory implements SchemeFactory {
      public updateGift_argsTupleScheme getScheme() {
        return new updateGift_argsTupleScheme();
      }
    }

    private static class updateGift_argsTupleScheme extends TupleScheme<updateGift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGiftId()) {
          optionals.set(0);
        }
        if (struct.isSetUpdateContent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGiftId()) {
          oprot.writeI32(struct.giftId);
        }
        if (struct.isSetUpdateContent()) {
          {
            oprot.writeI32(struct.updateContent.size());
            for (Map.Entry<String, String> _iter37 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter37.getKey());
              oprot.writeString(_iter37.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.giftId = iprot.readI32();
          struct.setGiftIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.updateContent = new HashMap<String,String>(2*_map38.size);
            for (int _i39 = 0; _i39 < _map38.size; ++_i39)
            {
              String _key40; // required
              String _val41; // required
              _key40 = iprot.readString();
              _val41 = iprot.readString();
              struct.updateContent.put(_key40, _val41);
            }
          }
          struct.setUpdateContentIsSet(true);
        }
      }
    }

  }

  public static class updateGift_result implements org.apache.thrift.TBase<updateGift_result, updateGift_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGift_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGift_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGift_result.class, metaDataMap);
    }

    public updateGift_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGift_result(updateGift_result other) {
    }

    public updateGift_result deepCopy() {
      return new updateGift_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGift_result)
        return this.equals((updateGift_result)that);
      return false;
    }

    public boolean equals(updateGift_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateGift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateGift_result typedOther = (updateGift_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGift_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGift_resultStandardSchemeFactory implements SchemeFactory {
      public updateGift_resultStandardScheme getScheme() {
        return new updateGift_resultStandardScheme();
      }
    }

    private static class updateGift_resultStandardScheme extends StandardScheme<updateGift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGift_resultTupleSchemeFactory implements SchemeFactory {
      public updateGift_resultTupleScheme getScheme() {
        return new updateGift_resultTupleScheme();
      }
    }

    private static class updateGift_resultTupleScheme extends TupleScheme<updateGift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveSendExchange_args implements org.apache.thrift.TBase<saveSendExchange_args, saveSendExchange_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveSendExchange_args");

    private static final org.apache.thrift.protocol.TField SEND_EXCHANGE_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("sendExchangeView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveSendExchange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveSendExchange_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.SendExchangeView sendExchangeView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEND_EXCHANGE_VIEW((short)1, "sendExchangeView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEND_EXCHANGE_VIEW
            return SEND_EXCHANGE_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEND_EXCHANGE_VIEW, new org.apache.thrift.meta_data.FieldMetaData("sendExchangeView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.SendExchangeView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveSendExchange_args.class, metaDataMap);
    }

    public saveSendExchange_args() {
    }

    public saveSendExchange_args(
      one.show.manage.thrift.view.SendExchangeView sendExchangeView)
    {
      this();
      this.sendExchangeView = sendExchangeView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveSendExchange_args(saveSendExchange_args other) {
      if (other.isSetSendExchangeView()) {
        this.sendExchangeView = new one.show.manage.thrift.view.SendExchangeView(other.sendExchangeView);
      }
    }

    public saveSendExchange_args deepCopy() {
      return new saveSendExchange_args(this);
    }

    @Override
    public void clear() {
      this.sendExchangeView = null;
    }

    public one.show.manage.thrift.view.SendExchangeView getSendExchangeView() {
      return this.sendExchangeView;
    }

    public saveSendExchange_args setSendExchangeView(one.show.manage.thrift.view.SendExchangeView sendExchangeView) {
      this.sendExchangeView = sendExchangeView;
      return this;
    }

    public void unsetSendExchangeView() {
      this.sendExchangeView = null;
    }

    /** Returns true if field sendExchangeView is set (has been assigned a value) and false otherwise */
    public boolean isSetSendExchangeView() {
      return this.sendExchangeView != null;
    }

    public void setSendExchangeViewIsSet(boolean value) {
      if (!value) {
        this.sendExchangeView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEND_EXCHANGE_VIEW:
        if (value == null) {
          unsetSendExchangeView();
        } else {
          setSendExchangeView((one.show.manage.thrift.view.SendExchangeView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEND_EXCHANGE_VIEW:
        return getSendExchangeView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEND_EXCHANGE_VIEW:
        return isSetSendExchangeView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveSendExchange_args)
        return this.equals((saveSendExchange_args)that);
      return false;
    }

    public boolean equals(saveSendExchange_args that) {
      if (that == null)
        return false;

      boolean this_present_sendExchangeView = true && this.isSetSendExchangeView();
      boolean that_present_sendExchangeView = true && that.isSetSendExchangeView();
      if (this_present_sendExchangeView || that_present_sendExchangeView) {
        if (!(this_present_sendExchangeView && that_present_sendExchangeView))
          return false;
        if (!this.sendExchangeView.equals(that.sendExchangeView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveSendExchange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveSendExchange_args typedOther = (saveSendExchange_args)other;

      lastComparison = Boolean.valueOf(isSetSendExchangeView()).compareTo(typedOther.isSetSendExchangeView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSendExchangeView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendExchangeView, typedOther.sendExchangeView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveSendExchange_args(");
      boolean first = true;

      sb.append("sendExchangeView:");
      if (this.sendExchangeView == null) {
        sb.append("null");
      } else {
        sb.append(this.sendExchangeView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sendExchangeView != null) {
        sendExchangeView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveSendExchange_argsStandardSchemeFactory implements SchemeFactory {
      public saveSendExchange_argsStandardScheme getScheme() {
        return new saveSendExchange_argsStandardScheme();
      }
    }

    private static class saveSendExchange_argsStandardScheme extends StandardScheme<saveSendExchange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveSendExchange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEND_EXCHANGE_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sendExchangeView = new one.show.manage.thrift.view.SendExchangeView();
                struct.sendExchangeView.read(iprot);
                struct.setSendExchangeViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveSendExchange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sendExchangeView != null) {
          oprot.writeFieldBegin(SEND_EXCHANGE_VIEW_FIELD_DESC);
          struct.sendExchangeView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveSendExchange_argsTupleSchemeFactory implements SchemeFactory {
      public saveSendExchange_argsTupleScheme getScheme() {
        return new saveSendExchange_argsTupleScheme();
      }
    }

    private static class saveSendExchange_argsTupleScheme extends TupleScheme<saveSendExchange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveSendExchange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSendExchangeView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSendExchangeView()) {
          struct.sendExchangeView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveSendExchange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sendExchangeView = new one.show.manage.thrift.view.SendExchangeView();
          struct.sendExchangeView.read(iprot);
          struct.setSendExchangeViewIsSet(true);
        }
      }
    }

  }

  public static class saveSendExchange_result implements org.apache.thrift.TBase<saveSendExchange_result, saveSendExchange_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveSendExchange_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveSendExchange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveSendExchange_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveSendExchange_result.class, metaDataMap);
    }

    public saveSendExchange_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveSendExchange_result(saveSendExchange_result other) {
    }

    public saveSendExchange_result deepCopy() {
      return new saveSendExchange_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveSendExchange_result)
        return this.equals((saveSendExchange_result)that);
      return false;
    }

    public boolean equals(saveSendExchange_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveSendExchange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveSendExchange_result typedOther = (saveSendExchange_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveSendExchange_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveSendExchange_resultStandardSchemeFactory implements SchemeFactory {
      public saveSendExchange_resultStandardScheme getScheme() {
        return new saveSendExchange_resultStandardScheme();
      }
    }

    private static class saveSendExchange_resultStandardScheme extends StandardScheme<saveSendExchange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveSendExchange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveSendExchange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveSendExchange_resultTupleSchemeFactory implements SchemeFactory {
      public saveSendExchange_resultTupleScheme getScheme() {
        return new saveSendExchange_resultTupleScheme();
      }
    }

    private static class saveSendExchange_resultTupleScheme extends TupleScheme<saveSendExchange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveSendExchange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveSendExchange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findSendExchangeByUid_args implements org.apache.thrift.TBase<findSendExchangeByUid_args, findSendExchangeByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSendExchangeByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SEND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSendExchangeByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSendExchangeByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int sendType; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      SEND_TYPE((short)2, "sendType"),
      START((short)3, "start"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // SEND_TYPE
            return SEND_TYPE;
          case 3: // START
            return START;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __SENDTYPE_ISSET_ID = 1;
    private static final int __START_ISSET_ID = 2;
    private static final int __COUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SEND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sendType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSendExchangeByUid_args.class, metaDataMap);
    }

    public findSendExchangeByUid_args() {
    }

    public findSendExchangeByUid_args(
      long uid,
      int sendType,
      int start,
      int count)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.sendType = sendType;
      setSendTypeIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSendExchangeByUid_args(findSendExchangeByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.sendType = other.sendType;
      this.start = other.start;
      this.count = other.count;
    }

    public findSendExchangeByUid_args deepCopy() {
      return new findSendExchangeByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setSendTypeIsSet(false);
      this.sendType = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findSendExchangeByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getSendType() {
      return this.sendType;
    }

    public findSendExchangeByUid_args setSendType(int sendType) {
      this.sendType = sendType;
      setSendTypeIsSet(true);
      return this;
    }

    public void unsetSendType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTYPE_ISSET_ID);
    }

    /** Returns true if field sendType is set (has been assigned a value) and false otherwise */
    public boolean isSetSendType() {
      return EncodingUtils.testBit(__isset_bitfield, __SENDTYPE_ISSET_ID);
    }

    public void setSendTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTYPE_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findSendExchangeByUid_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findSendExchangeByUid_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case SEND_TYPE:
        if (value == null) {
          unsetSendType();
        } else {
          setSendType((Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case SEND_TYPE:
        return Integer.valueOf(getSendType());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case SEND_TYPE:
        return isSetSendType();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSendExchangeByUid_args)
        return this.equals((findSendExchangeByUid_args)that);
      return false;
    }

    public boolean equals(findSendExchangeByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_sendType = true;
      boolean that_present_sendType = true;
      if (this_present_sendType || that_present_sendType) {
        if (!(this_present_sendType && that_present_sendType))
          return false;
        if (this.sendType != that.sendType)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findSendExchangeByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findSendExchangeByUid_args typedOther = (findSendExchangeByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSendType()).compareTo(typedOther.isSetSendType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSendType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendType, typedOther.sendType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSendExchangeByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sendType:");
      sb.append(this.sendType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSendExchangeByUid_argsStandardSchemeFactory implements SchemeFactory {
      public findSendExchangeByUid_argsStandardScheme getScheme() {
        return new findSendExchangeByUid_argsStandardScheme();
      }
    }

    private static class findSendExchangeByUid_argsStandardScheme extends StandardScheme<findSendExchangeByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSendExchangeByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEND_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sendType = iprot.readI32();
                struct.setSendTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSendExchangeByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEND_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sendType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSendExchangeByUid_argsTupleSchemeFactory implements SchemeFactory {
      public findSendExchangeByUid_argsTupleScheme getScheme() {
        return new findSendExchangeByUid_argsTupleScheme();
      }
    }

    private static class findSendExchangeByUid_argsTupleScheme extends TupleScheme<findSendExchangeByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSendExchangeByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetSendType()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetSendType()) {
          oprot.writeI32(struct.sendType);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSendExchangeByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sendType = iprot.readI32();
          struct.setSendTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findSendExchangeByUid_result implements org.apache.thrift.TBase<findSendExchangeByUid_result, findSendExchangeByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSendExchangeByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSendExchangeByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSendExchangeByUid_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.SendExchangeView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.SendExchangeView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSendExchangeByUid_result.class, metaDataMap);
    }

    public findSendExchangeByUid_result() {
    }

    public findSendExchangeByUid_result(
      List<one.show.manage.thrift.view.SendExchangeView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSendExchangeByUid_result(findSendExchangeByUid_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.SendExchangeView> __this__success = new ArrayList<one.show.manage.thrift.view.SendExchangeView>();
        for (one.show.manage.thrift.view.SendExchangeView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.SendExchangeView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findSendExchangeByUid_result deepCopy() {
      return new findSendExchangeByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.SendExchangeView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.SendExchangeView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.SendExchangeView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.SendExchangeView> getSuccess() {
      return this.success;
    }

    public findSendExchangeByUid_result setSuccess(List<one.show.manage.thrift.view.SendExchangeView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.SendExchangeView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSendExchangeByUid_result)
        return this.equals((findSendExchangeByUid_result)that);
      return false;
    }

    public boolean equals(findSendExchangeByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findSendExchangeByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findSendExchangeByUid_result typedOther = (findSendExchangeByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSendExchangeByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSendExchangeByUid_resultStandardSchemeFactory implements SchemeFactory {
      public findSendExchangeByUid_resultStandardScheme getScheme() {
        return new findSendExchangeByUid_resultStandardScheme();
      }
    }

    private static class findSendExchangeByUid_resultStandardScheme extends StandardScheme<findSendExchangeByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSendExchangeByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.SendExchangeView>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    one.show.manage.thrift.view.SendExchangeView _elem44; // required
                    _elem44 = new one.show.manage.thrift.view.SendExchangeView();
                    _elem44.read(iprot);
                    struct.success.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSendExchangeByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.SendExchangeView _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSendExchangeByUid_resultTupleSchemeFactory implements SchemeFactory {
      public findSendExchangeByUid_resultTupleScheme getScheme() {
        return new findSendExchangeByUid_resultTupleScheme();
      }
    }

    private static class findSendExchangeByUid_resultTupleScheme extends TupleScheme<findSendExchangeByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSendExchangeByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.SendExchangeView _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSendExchangeByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.SendExchangeView>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              one.show.manage.thrift.view.SendExchangeView _elem49; // required
              _elem49 = new one.show.manage.thrift.view.SendExchangeView();
              _elem49.read(iprot);
              struct.success.add(_elem49);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findSendExchangeCountByUid_args implements org.apache.thrift.TBase<findSendExchangeCountByUid_args, findSendExchangeCountByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSendExchangeCountByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SEND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSendExchangeCountByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSendExchangeCountByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int sendType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      SEND_TYPE((short)2, "sendType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // SEND_TYPE
            return SEND_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __SENDTYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SEND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sendType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSendExchangeCountByUid_args.class, metaDataMap);
    }

    public findSendExchangeCountByUid_args() {
    }

    public findSendExchangeCountByUid_args(
      long uid,
      int sendType)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.sendType = sendType;
      setSendTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSendExchangeCountByUid_args(findSendExchangeCountByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.sendType = other.sendType;
    }

    public findSendExchangeCountByUid_args deepCopy() {
      return new findSendExchangeCountByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setSendTypeIsSet(false);
      this.sendType = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findSendExchangeCountByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getSendType() {
      return this.sendType;
    }

    public findSendExchangeCountByUid_args setSendType(int sendType) {
      this.sendType = sendType;
      setSendTypeIsSet(true);
      return this;
    }

    public void unsetSendType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTYPE_ISSET_ID);
    }

    /** Returns true if field sendType is set (has been assigned a value) and false otherwise */
    public boolean isSetSendType() {
      return EncodingUtils.testBit(__isset_bitfield, __SENDTYPE_ISSET_ID);
    }

    public void setSendTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case SEND_TYPE:
        if (value == null) {
          unsetSendType();
        } else {
          setSendType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case SEND_TYPE:
        return Integer.valueOf(getSendType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case SEND_TYPE:
        return isSetSendType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSendExchangeCountByUid_args)
        return this.equals((findSendExchangeCountByUid_args)that);
      return false;
    }

    public boolean equals(findSendExchangeCountByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_sendType = true;
      boolean that_present_sendType = true;
      if (this_present_sendType || that_present_sendType) {
        if (!(this_present_sendType && that_present_sendType))
          return false;
        if (this.sendType != that.sendType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findSendExchangeCountByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findSendExchangeCountByUid_args typedOther = (findSendExchangeCountByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSendType()).compareTo(typedOther.isSetSendType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSendType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendType, typedOther.sendType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSendExchangeCountByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sendType:");
      sb.append(this.sendType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSendExchangeCountByUid_argsStandardSchemeFactory implements SchemeFactory {
      public findSendExchangeCountByUid_argsStandardScheme getScheme() {
        return new findSendExchangeCountByUid_argsStandardScheme();
      }
    }

    private static class findSendExchangeCountByUid_argsStandardScheme extends StandardScheme<findSendExchangeCountByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSendExchangeCountByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEND_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sendType = iprot.readI32();
                struct.setSendTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSendExchangeCountByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SEND_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sendType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSendExchangeCountByUid_argsTupleSchemeFactory implements SchemeFactory {
      public findSendExchangeCountByUid_argsTupleScheme getScheme() {
        return new findSendExchangeCountByUid_argsTupleScheme();
      }
    }

    private static class findSendExchangeCountByUid_argsTupleScheme extends TupleScheme<findSendExchangeCountByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSendExchangeCountByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetSendType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetSendType()) {
          oprot.writeI32(struct.sendType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSendExchangeCountByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sendType = iprot.readI32();
          struct.setSendTypeIsSet(true);
        }
      }
    }

  }

  public static class findSendExchangeCountByUid_result implements org.apache.thrift.TBase<findSendExchangeCountByUid_result, findSendExchangeCountByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSendExchangeCountByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSendExchangeCountByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSendExchangeCountByUid_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSendExchangeCountByUid_result.class, metaDataMap);
    }

    public findSendExchangeCountByUid_result() {
    }

    public findSendExchangeCountByUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSendExchangeCountByUid_result(findSendExchangeCountByUid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public findSendExchangeCountByUid_result deepCopy() {
      return new findSendExchangeCountByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public findSendExchangeCountByUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSendExchangeCountByUid_result)
        return this.equals((findSendExchangeCountByUid_result)that);
      return false;
    }

    public boolean equals(findSendExchangeCountByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findSendExchangeCountByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findSendExchangeCountByUid_result typedOther = (findSendExchangeCountByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSendExchangeCountByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSendExchangeCountByUid_resultStandardSchemeFactory implements SchemeFactory {
      public findSendExchangeCountByUid_resultStandardScheme getScheme() {
        return new findSendExchangeCountByUid_resultStandardScheme();
      }
    }

    private static class findSendExchangeCountByUid_resultStandardScheme extends StandardScheme<findSendExchangeCountByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSendExchangeCountByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSendExchangeCountByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSendExchangeCountByUid_resultTupleSchemeFactory implements SchemeFactory {
      public findSendExchangeCountByUid_resultTupleScheme getScheme() {
        return new findSendExchangeCountByUid_resultTupleScheme();
      }
    }

    private static class findSendExchangeCountByUid_resultTupleScheme extends TupleScheme<findSendExchangeCountByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSendExchangeCountByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSendExchangeCountByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSystemConfig_args implements org.apache.thrift.TBase<getSystemConfig_args, getSystemConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSystemConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSystemConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSystemConfig_argsTupleSchemeFactory());
    }

    public String configId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_ID((short)1, "configId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_ID
            return CONFIG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSystemConfig_args.class, metaDataMap);
    }

    public getSystemConfig_args() {
    }

    public getSystemConfig_args(
      String configId)
    {
      this();
      this.configId = configId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemConfig_args(getSystemConfig_args other) {
      if (other.isSetConfigId()) {
        this.configId = other.configId;
      }
    }

    public getSystemConfig_args deepCopy() {
      return new getSystemConfig_args(this);
    }

    @Override
    public void clear() {
      this.configId = null;
    }

    public String getConfigId() {
      return this.configId;
    }

    public getSystemConfig_args setConfigId(String configId) {
      this.configId = configId;
      return this;
    }

    public void unsetConfigId() {
      this.configId = null;
    }

    /** Returns true if field configId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigId() {
      return this.configId != null;
    }

    public void setConfigIdIsSet(boolean value) {
      if (!value) {
        this.configId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_ID:
        if (value == null) {
          unsetConfigId();
        } else {
          setConfigId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_ID:
        return getConfigId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_ID:
        return isSetConfigId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemConfig_args)
        return this.equals((getSystemConfig_args)that);
      return false;
    }

    public boolean equals(getSystemConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configId = true && this.isSetConfigId();
      boolean that_present_configId = true && that.isSetConfigId();
      if (this_present_configId || that_present_configId) {
        if (!(this_present_configId && that_present_configId))
          return false;
        if (!this.configId.equals(that.configId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSystemConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSystemConfig_args typedOther = (getSystemConfig_args)other;

      lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(typedOther.isSetConfigId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, typedOther.configId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSystemConfig_args(");
      boolean first = true;

      sb.append("configId:");
      if (this.configId == null) {
        sb.append("null");
      } else {
        sb.append(this.configId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSystemConfig_argsStandardSchemeFactory implements SchemeFactory {
      public getSystemConfig_argsStandardScheme getScheme() {
        return new getSystemConfig_argsStandardScheme();
      }
    }

    private static class getSystemConfig_argsStandardScheme extends StandardScheme<getSystemConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSystemConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configId = iprot.readString();
                struct.setConfigIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSystemConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configId != null) {
          oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
          oprot.writeString(struct.configId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSystemConfig_argsTupleSchemeFactory implements SchemeFactory {
      public getSystemConfig_argsTupleScheme getScheme() {
        return new getSystemConfig_argsTupleScheme();
      }
    }

    private static class getSystemConfig_argsTupleScheme extends TupleScheme<getSystemConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSystemConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigId()) {
          oprot.writeString(struct.configId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSystemConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configId = iprot.readString();
          struct.setConfigIdIsSet(true);
        }
      }
    }

  }

  public static class getSystemConfig_result implements org.apache.thrift.TBase<getSystemConfig_result, getSystemConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSystemConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSystemConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSystemConfig_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.SystemConfigView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.SystemConfigView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSystemConfig_result.class, metaDataMap);
    }

    public getSystemConfig_result() {
    }

    public getSystemConfig_result(
      one.show.manage.thrift.view.SystemConfigView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemConfig_result(getSystemConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.SystemConfigView(other.success);
      }
    }

    public getSystemConfig_result deepCopy() {
      return new getSystemConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.SystemConfigView getSuccess() {
      return this.success;
    }

    public getSystemConfig_result setSuccess(one.show.manage.thrift.view.SystemConfigView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.SystemConfigView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemConfig_result)
        return this.equals((getSystemConfig_result)that);
      return false;
    }

    public boolean equals(getSystemConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSystemConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSystemConfig_result typedOther = (getSystemConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSystemConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSystemConfig_resultStandardSchemeFactory implements SchemeFactory {
      public getSystemConfig_resultStandardScheme getScheme() {
        return new getSystemConfig_resultStandardScheme();
      }
    }

    private static class getSystemConfig_resultStandardScheme extends StandardScheme<getSystemConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSystemConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.SystemConfigView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSystemConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSystemConfig_resultTupleSchemeFactory implements SchemeFactory {
      public getSystemConfig_resultTupleScheme getScheme() {
        return new getSystemConfig_resultTupleScheme();
      }
    }

    private static class getSystemConfig_resultTupleScheme extends TupleScheme<getSystemConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSystemConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSystemConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.SystemConfigView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSystemConfig_args implements org.apache.thrift.TBase<updateSystemConfig_args, updateSystemConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSystemConfig_args");

    private static final org.apache.thrift.protocol.TField SYSTEM_CONFIG_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("systemConfigView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSystemConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSystemConfig_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.SystemConfigView systemConfigView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYSTEM_CONFIG_VIEW((short)1, "systemConfigView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYSTEM_CONFIG_VIEW
            return SYSTEM_CONFIG_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYSTEM_CONFIG_VIEW, new org.apache.thrift.meta_data.FieldMetaData("systemConfigView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.SystemConfigView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSystemConfig_args.class, metaDataMap);
    }

    public updateSystemConfig_args() {
    }

    public updateSystemConfig_args(
      one.show.manage.thrift.view.SystemConfigView systemConfigView)
    {
      this();
      this.systemConfigView = systemConfigView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSystemConfig_args(updateSystemConfig_args other) {
      if (other.isSetSystemConfigView()) {
        this.systemConfigView = new one.show.manage.thrift.view.SystemConfigView(other.systemConfigView);
      }
    }

    public updateSystemConfig_args deepCopy() {
      return new updateSystemConfig_args(this);
    }

    @Override
    public void clear() {
      this.systemConfigView = null;
    }

    public one.show.manage.thrift.view.SystemConfigView getSystemConfigView() {
      return this.systemConfigView;
    }

    public updateSystemConfig_args setSystemConfigView(one.show.manage.thrift.view.SystemConfigView systemConfigView) {
      this.systemConfigView = systemConfigView;
      return this;
    }

    public void unsetSystemConfigView() {
      this.systemConfigView = null;
    }

    /** Returns true if field systemConfigView is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemConfigView() {
      return this.systemConfigView != null;
    }

    public void setSystemConfigViewIsSet(boolean value) {
      if (!value) {
        this.systemConfigView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYSTEM_CONFIG_VIEW:
        if (value == null) {
          unsetSystemConfigView();
        } else {
          setSystemConfigView((one.show.manage.thrift.view.SystemConfigView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYSTEM_CONFIG_VIEW:
        return getSystemConfigView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYSTEM_CONFIG_VIEW:
        return isSetSystemConfigView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSystemConfig_args)
        return this.equals((updateSystemConfig_args)that);
      return false;
    }

    public boolean equals(updateSystemConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_systemConfigView = true && this.isSetSystemConfigView();
      boolean that_present_systemConfigView = true && that.isSetSystemConfigView();
      if (this_present_systemConfigView || that_present_systemConfigView) {
        if (!(this_present_systemConfigView && that_present_systemConfigView))
          return false;
        if (!this.systemConfigView.equals(that.systemConfigView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSystemConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSystemConfig_args typedOther = (updateSystemConfig_args)other;

      lastComparison = Boolean.valueOf(isSetSystemConfigView()).compareTo(typedOther.isSetSystemConfigView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemConfigView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemConfigView, typedOther.systemConfigView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSystemConfig_args(");
      boolean first = true;

      sb.append("systemConfigView:");
      if (this.systemConfigView == null) {
        sb.append("null");
      } else {
        sb.append(this.systemConfigView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (systemConfigView != null) {
        systemConfigView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSystemConfig_argsStandardSchemeFactory implements SchemeFactory {
      public updateSystemConfig_argsStandardScheme getScheme() {
        return new updateSystemConfig_argsStandardScheme();
      }
    }

    private static class updateSystemConfig_argsStandardScheme extends StandardScheme<updateSystemConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSystemConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYSTEM_CONFIG_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemConfigView = new one.show.manage.thrift.view.SystemConfigView();
                struct.systemConfigView.read(iprot);
                struct.setSystemConfigViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSystemConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.systemConfigView != null) {
          oprot.writeFieldBegin(SYSTEM_CONFIG_VIEW_FIELD_DESC);
          struct.systemConfigView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSystemConfig_argsTupleSchemeFactory implements SchemeFactory {
      public updateSystemConfig_argsTupleScheme getScheme() {
        return new updateSystemConfig_argsTupleScheme();
      }
    }

    private static class updateSystemConfig_argsTupleScheme extends TupleScheme<updateSystemConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSystemConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSystemConfigView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSystemConfigView()) {
          struct.systemConfigView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSystemConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.systemConfigView = new one.show.manage.thrift.view.SystemConfigView();
          struct.systemConfigView.read(iprot);
          struct.setSystemConfigViewIsSet(true);
        }
      }
    }

  }

  public static class updateSystemConfig_result implements org.apache.thrift.TBase<updateSystemConfig_result, updateSystemConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSystemConfig_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSystemConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSystemConfig_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSystemConfig_result.class, metaDataMap);
    }

    public updateSystemConfig_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSystemConfig_result(updateSystemConfig_result other) {
    }

    public updateSystemConfig_result deepCopy() {
      return new updateSystemConfig_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSystemConfig_result)
        return this.equals((updateSystemConfig_result)that);
      return false;
    }

    public boolean equals(updateSystemConfig_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSystemConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSystemConfig_result typedOther = (updateSystemConfig_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSystemConfig_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSystemConfig_resultStandardSchemeFactory implements SchemeFactory {
      public updateSystemConfig_resultStandardScheme getScheme() {
        return new updateSystemConfig_resultStandardScheme();
      }
    }

    private static class updateSystemConfig_resultStandardScheme extends StandardScheme<updateSystemConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSystemConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSystemConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSystemConfig_resultTupleSchemeFactory implements SchemeFactory {
      public updateSystemConfig_resultTupleScheme getScheme() {
        return new updateSystemConfig_resultTupleScheme();
      }
    }

    private static class updateSystemConfig_resultTupleScheme extends TupleScheme<updateSystemConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSystemConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSystemConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAdvertisementView_args implements org.apache.thrift.TBase<findAdvertisementView_args, findAdvertisementView_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAdvertisementView_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAdvertisementView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAdvertisementView_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAdvertisementView_args.class, metaDataMap);
    }

    public findAdvertisementView_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAdvertisementView_args(findAdvertisementView_args other) {
    }

    public findAdvertisementView_args deepCopy() {
      return new findAdvertisementView_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAdvertisementView_args)
        return this.equals((findAdvertisementView_args)that);
      return false;
    }

    public boolean equals(findAdvertisementView_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAdvertisementView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAdvertisementView_args typedOther = (findAdvertisementView_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAdvertisementView_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAdvertisementView_argsStandardSchemeFactory implements SchemeFactory {
      public findAdvertisementView_argsStandardScheme getScheme() {
        return new findAdvertisementView_argsStandardScheme();
      }
    }

    private static class findAdvertisementView_argsStandardScheme extends StandardScheme<findAdvertisementView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAdvertisementView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAdvertisementView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAdvertisementView_argsTupleSchemeFactory implements SchemeFactory {
      public findAdvertisementView_argsTupleScheme getScheme() {
        return new findAdvertisementView_argsTupleScheme();
      }
    }

    private static class findAdvertisementView_argsTupleScheme extends TupleScheme<findAdvertisementView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAdvertisementView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAdvertisementView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAdvertisementView_result implements org.apache.thrift.TBase<findAdvertisementView_result, findAdvertisementView_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAdvertisementView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAdvertisementView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAdvertisementView_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.AdvertisementView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.AdvertisementView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAdvertisementView_result.class, metaDataMap);
    }

    public findAdvertisementView_result() {
    }

    public findAdvertisementView_result(
      List<one.show.manage.thrift.view.AdvertisementView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAdvertisementView_result(findAdvertisementView_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.AdvertisementView> __this__success = new ArrayList<one.show.manage.thrift.view.AdvertisementView>();
        for (one.show.manage.thrift.view.AdvertisementView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.AdvertisementView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAdvertisementView_result deepCopy() {
      return new findAdvertisementView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.AdvertisementView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.AdvertisementView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.AdvertisementView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.AdvertisementView> getSuccess() {
      return this.success;
    }

    public findAdvertisementView_result setSuccess(List<one.show.manage.thrift.view.AdvertisementView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.AdvertisementView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAdvertisementView_result)
        return this.equals((findAdvertisementView_result)that);
      return false;
    }

    public boolean equals(findAdvertisementView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAdvertisementView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAdvertisementView_result typedOther = (findAdvertisementView_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAdvertisementView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAdvertisementView_resultStandardSchemeFactory implements SchemeFactory {
      public findAdvertisementView_resultStandardScheme getScheme() {
        return new findAdvertisementView_resultStandardScheme();
      }
    }

    private static class findAdvertisementView_resultStandardScheme extends StandardScheme<findAdvertisementView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAdvertisementView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.AdvertisementView>(_list50.size);
                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                  {
                    one.show.manage.thrift.view.AdvertisementView _elem52; // required
                    _elem52 = new one.show.manage.thrift.view.AdvertisementView();
                    _elem52.read(iprot);
                    struct.success.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAdvertisementView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.AdvertisementView _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAdvertisementView_resultTupleSchemeFactory implements SchemeFactory {
      public findAdvertisementView_resultTupleScheme getScheme() {
        return new findAdvertisementView_resultTupleScheme();
      }
    }

    private static class findAdvertisementView_resultTupleScheme extends TupleScheme<findAdvertisementView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAdvertisementView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.AdvertisementView _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAdvertisementView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.AdvertisementView>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              one.show.manage.thrift.view.AdvertisementView _elem57; // required
              _elem57 = new one.show.manage.thrift.view.AdvertisementView();
              _elem57.read(iprot);
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSystemConfigList_args implements org.apache.thrift.TBase<getSystemConfigList_args, getSystemConfigList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSystemConfigList_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSystemConfigList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSystemConfigList_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSystemConfigList_args.class, metaDataMap);
    }

    public getSystemConfigList_args() {
    }

    public getSystemConfigList_args(
      Map<String,String> paramMap,
      int start,
      int count)
    {
      this();
      this.paramMap = paramMap;
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemConfigList_args(getSystemConfigList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
      this.start = other.start;
      this.count = other.count;
    }

    public getSystemConfigList_args deepCopy() {
      return new getSystemConfigList_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getSystemConfigList_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public getSystemConfigList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getSystemConfigList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemConfigList_args)
        return this.equals((getSystemConfigList_args)that);
      return false;
    }

    public boolean equals(getSystemConfigList_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSystemConfigList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSystemConfigList_args typedOther = (getSystemConfigList_args)other;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSystemConfigList_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSystemConfigList_argsStandardSchemeFactory implements SchemeFactory {
      public getSystemConfigList_argsStandardScheme getScheme() {
        return new getSystemConfigList_argsStandardScheme();
      }
    }

    private static class getSystemConfigList_argsStandardScheme extends StandardScheme<getSystemConfigList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSystemConfigList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map58.size);
                  for (int _i59 = 0; _i59 < _map58.size; ++_i59)
                  {
                    String _key60; // required
                    String _val61; // required
                    _key60 = iprot.readString();
                    _val61 = iprot.readString();
                    struct.paramMap.put(_key60, _val61);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSystemConfigList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter62 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter62.getKey());
              oprot.writeString(_iter62.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSystemConfigList_argsTupleSchemeFactory implements SchemeFactory {
      public getSystemConfigList_argsTupleScheme getScheme() {
        return new getSystemConfigList_argsTupleScheme();
      }
    }

    private static class getSystemConfigList_argsTupleScheme extends TupleScheme<getSystemConfigList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSystemConfigList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter63 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter63.getKey());
              oprot.writeString(_iter63.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSystemConfigList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map64.size);
            for (int _i65 = 0; _i65 < _map64.size; ++_i65)
            {
              String _key66; // required
              String _val67; // required
              _key66 = iprot.readString();
              _val67 = iprot.readString();
              struct.paramMap.put(_key66, _val67);
            }
          }
          struct.setParamMapIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class getSystemConfigList_result implements org.apache.thrift.TBase<getSystemConfigList_result, getSystemConfigList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSystemConfigList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSystemConfigList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSystemConfigList_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.SystemConfigView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.SystemConfigView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSystemConfigList_result.class, metaDataMap);
    }

    public getSystemConfigList_result() {
    }

    public getSystemConfigList_result(
      List<one.show.manage.thrift.view.SystemConfigView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemConfigList_result(getSystemConfigList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.SystemConfigView> __this__success = new ArrayList<one.show.manage.thrift.view.SystemConfigView>();
        for (one.show.manage.thrift.view.SystemConfigView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.SystemConfigView(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSystemConfigList_result deepCopy() {
      return new getSystemConfigList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.SystemConfigView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.SystemConfigView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.SystemConfigView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.SystemConfigView> getSuccess() {
      return this.success;
    }

    public getSystemConfigList_result setSuccess(List<one.show.manage.thrift.view.SystemConfigView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.SystemConfigView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemConfigList_result)
        return this.equals((getSystemConfigList_result)that);
      return false;
    }

    public boolean equals(getSystemConfigList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSystemConfigList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSystemConfigList_result typedOther = (getSystemConfigList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSystemConfigList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSystemConfigList_resultStandardSchemeFactory implements SchemeFactory {
      public getSystemConfigList_resultStandardScheme getScheme() {
        return new getSystemConfigList_resultStandardScheme();
      }
    }

    private static class getSystemConfigList_resultStandardScheme extends StandardScheme<getSystemConfigList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSystemConfigList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.SystemConfigView>(_list68.size);
                  for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                  {
                    one.show.manage.thrift.view.SystemConfigView _elem70; // required
                    _elem70 = new one.show.manage.thrift.view.SystemConfigView();
                    _elem70.read(iprot);
                    struct.success.add(_elem70);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSystemConfigList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.SystemConfigView _iter71 : struct.success)
            {
              _iter71.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSystemConfigList_resultTupleSchemeFactory implements SchemeFactory {
      public getSystemConfigList_resultTupleScheme getScheme() {
        return new getSystemConfigList_resultTupleScheme();
      }
    }

    private static class getSystemConfigList_resultTupleScheme extends TupleScheme<getSystemConfigList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSystemConfigList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.SystemConfigView _iter72 : struct.success)
            {
              _iter72.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSystemConfigList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.SystemConfigView>(_list73.size);
            for (int _i74 = 0; _i74 < _list73.size; ++_i74)
            {
              one.show.manage.thrift.view.SystemConfigView _elem75; // required
              _elem75 = new one.show.manage.thrift.view.SystemConfigView();
              _elem75.read(iprot);
              struct.success.add(_elem75);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addSystemConfig_args implements org.apache.thrift.TBase<addSystemConfig_args, addSystemConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSystemConfig_args");

    private static final org.apache.thrift.protocol.TField SYSTEM_CONFIG_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("systemConfigView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSystemConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSystemConfig_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.SystemConfigView systemConfigView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYSTEM_CONFIG_VIEW((short)1, "systemConfigView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYSTEM_CONFIG_VIEW
            return SYSTEM_CONFIG_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYSTEM_CONFIG_VIEW, new org.apache.thrift.meta_data.FieldMetaData("systemConfigView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.SystemConfigView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSystemConfig_args.class, metaDataMap);
    }

    public addSystemConfig_args() {
    }

    public addSystemConfig_args(
      one.show.manage.thrift.view.SystemConfigView systemConfigView)
    {
      this();
      this.systemConfigView = systemConfigView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSystemConfig_args(addSystemConfig_args other) {
      if (other.isSetSystemConfigView()) {
        this.systemConfigView = new one.show.manage.thrift.view.SystemConfigView(other.systemConfigView);
      }
    }

    public addSystemConfig_args deepCopy() {
      return new addSystemConfig_args(this);
    }

    @Override
    public void clear() {
      this.systemConfigView = null;
    }

    public one.show.manage.thrift.view.SystemConfigView getSystemConfigView() {
      return this.systemConfigView;
    }

    public addSystemConfig_args setSystemConfigView(one.show.manage.thrift.view.SystemConfigView systemConfigView) {
      this.systemConfigView = systemConfigView;
      return this;
    }

    public void unsetSystemConfigView() {
      this.systemConfigView = null;
    }

    /** Returns true if field systemConfigView is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemConfigView() {
      return this.systemConfigView != null;
    }

    public void setSystemConfigViewIsSet(boolean value) {
      if (!value) {
        this.systemConfigView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYSTEM_CONFIG_VIEW:
        if (value == null) {
          unsetSystemConfigView();
        } else {
          setSystemConfigView((one.show.manage.thrift.view.SystemConfigView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYSTEM_CONFIG_VIEW:
        return getSystemConfigView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYSTEM_CONFIG_VIEW:
        return isSetSystemConfigView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSystemConfig_args)
        return this.equals((addSystemConfig_args)that);
      return false;
    }

    public boolean equals(addSystemConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_systemConfigView = true && this.isSetSystemConfigView();
      boolean that_present_systemConfigView = true && that.isSetSystemConfigView();
      if (this_present_systemConfigView || that_present_systemConfigView) {
        if (!(this_present_systemConfigView && that_present_systemConfigView))
          return false;
        if (!this.systemConfigView.equals(that.systemConfigView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSystemConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSystemConfig_args typedOther = (addSystemConfig_args)other;

      lastComparison = Boolean.valueOf(isSetSystemConfigView()).compareTo(typedOther.isSetSystemConfigView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemConfigView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemConfigView, typedOther.systemConfigView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSystemConfig_args(");
      boolean first = true;

      sb.append("systemConfigView:");
      if (this.systemConfigView == null) {
        sb.append("null");
      } else {
        sb.append(this.systemConfigView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (systemConfigView != null) {
        systemConfigView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSystemConfig_argsStandardSchemeFactory implements SchemeFactory {
      public addSystemConfig_argsStandardScheme getScheme() {
        return new addSystemConfig_argsStandardScheme();
      }
    }

    private static class addSystemConfig_argsStandardScheme extends StandardScheme<addSystemConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSystemConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYSTEM_CONFIG_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemConfigView = new one.show.manage.thrift.view.SystemConfigView();
                struct.systemConfigView.read(iprot);
                struct.setSystemConfigViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSystemConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.systemConfigView != null) {
          oprot.writeFieldBegin(SYSTEM_CONFIG_VIEW_FIELD_DESC);
          struct.systemConfigView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSystemConfig_argsTupleSchemeFactory implements SchemeFactory {
      public addSystemConfig_argsTupleScheme getScheme() {
        return new addSystemConfig_argsTupleScheme();
      }
    }

    private static class addSystemConfig_argsTupleScheme extends TupleScheme<addSystemConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSystemConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSystemConfigView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSystemConfigView()) {
          struct.systemConfigView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSystemConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.systemConfigView = new one.show.manage.thrift.view.SystemConfigView();
          struct.systemConfigView.read(iprot);
          struct.setSystemConfigViewIsSet(true);
        }
      }
    }

  }

  public static class addSystemConfig_result implements org.apache.thrift.TBase<addSystemConfig_result, addSystemConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSystemConfig_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSystemConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSystemConfig_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSystemConfig_result.class, metaDataMap);
    }

    public addSystemConfig_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSystemConfig_result(addSystemConfig_result other) {
    }

    public addSystemConfig_result deepCopy() {
      return new addSystemConfig_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSystemConfig_result)
        return this.equals((addSystemConfig_result)that);
      return false;
    }

    public boolean equals(addSystemConfig_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSystemConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSystemConfig_result typedOther = (addSystemConfig_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSystemConfig_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSystemConfig_resultStandardSchemeFactory implements SchemeFactory {
      public addSystemConfig_resultStandardScheme getScheme() {
        return new addSystemConfig_resultStandardScheme();
      }
    }

    private static class addSystemConfig_resultStandardScheme extends StandardScheme<addSystemConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSystemConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSystemConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSystemConfig_resultTupleSchemeFactory implements SchemeFactory {
      public addSystemConfig_resultTupleScheme getScheme() {
        return new addSystemConfig_resultTupleScheme();
      }
    }

    private static class addSystemConfig_resultTupleScheme extends TupleScheme<addSystemConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSystemConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSystemConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteSystemConfig_args implements org.apache.thrift.TBase<deleteSystemConfig_args, deleteSystemConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSystemConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSystemConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSystemConfig_argsTupleSchemeFactory());
    }

    public String configId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_ID((short)1, "configId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_ID
            return CONFIG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSystemConfig_args.class, metaDataMap);
    }

    public deleteSystemConfig_args() {
    }

    public deleteSystemConfig_args(
      String configId)
    {
      this();
      this.configId = configId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSystemConfig_args(deleteSystemConfig_args other) {
      if (other.isSetConfigId()) {
        this.configId = other.configId;
      }
    }

    public deleteSystemConfig_args deepCopy() {
      return new deleteSystemConfig_args(this);
    }

    @Override
    public void clear() {
      this.configId = null;
    }

    public String getConfigId() {
      return this.configId;
    }

    public deleteSystemConfig_args setConfigId(String configId) {
      this.configId = configId;
      return this;
    }

    public void unsetConfigId() {
      this.configId = null;
    }

    /** Returns true if field configId is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigId() {
      return this.configId != null;
    }

    public void setConfigIdIsSet(boolean value) {
      if (!value) {
        this.configId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_ID:
        if (value == null) {
          unsetConfigId();
        } else {
          setConfigId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_ID:
        return getConfigId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_ID:
        return isSetConfigId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSystemConfig_args)
        return this.equals((deleteSystemConfig_args)that);
      return false;
    }

    public boolean equals(deleteSystemConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configId = true && this.isSetConfigId();
      boolean that_present_configId = true && that.isSetConfigId();
      if (this_present_configId || that_present_configId) {
        if (!(this_present_configId && that_present_configId))
          return false;
        if (!this.configId.equals(that.configId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSystemConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSystemConfig_args typedOther = (deleteSystemConfig_args)other;

      lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(typedOther.isSetConfigId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, typedOther.configId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSystemConfig_args(");
      boolean first = true;

      sb.append("configId:");
      if (this.configId == null) {
        sb.append("null");
      } else {
        sb.append(this.configId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSystemConfig_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSystemConfig_argsStandardScheme getScheme() {
        return new deleteSystemConfig_argsStandardScheme();
      }
    }

    private static class deleteSystemConfig_argsStandardScheme extends StandardScheme<deleteSystemConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSystemConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configId = iprot.readString();
                struct.setConfigIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSystemConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configId != null) {
          oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
          oprot.writeString(struct.configId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSystemConfig_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSystemConfig_argsTupleScheme getScheme() {
        return new deleteSystemConfig_argsTupleScheme();
      }
    }

    private static class deleteSystemConfig_argsTupleScheme extends TupleScheme<deleteSystemConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSystemConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigId()) {
          oprot.writeString(struct.configId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSystemConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configId = iprot.readString();
          struct.setConfigIdIsSet(true);
        }
      }
    }

  }

  public static class deleteSystemConfig_result implements org.apache.thrift.TBase<deleteSystemConfig_result, deleteSystemConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSystemConfig_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSystemConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSystemConfig_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSystemConfig_result.class, metaDataMap);
    }

    public deleteSystemConfig_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSystemConfig_result(deleteSystemConfig_result other) {
    }

    public deleteSystemConfig_result deepCopy() {
      return new deleteSystemConfig_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSystemConfig_result)
        return this.equals((deleteSystemConfig_result)that);
      return false;
    }

    public boolean equals(deleteSystemConfig_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSystemConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSystemConfig_result typedOther = (deleteSystemConfig_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSystemConfig_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSystemConfig_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSystemConfig_resultStandardScheme getScheme() {
        return new deleteSystemConfig_resultStandardScheme();
      }
    }

    private static class deleteSystemConfig_resultStandardScheme extends StandardScheme<deleteSystemConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSystemConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSystemConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSystemConfig_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSystemConfig_resultTupleScheme getScheme() {
        return new deleteSystemConfig_resultTupleScheme();
      }
    }

    private static class deleteSystemConfig_resultTupleScheme extends TupleScheme<deleteSystemConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSystemConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSystemConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSystemConfigByVersion_args implements org.apache.thrift.TBase<getSystemConfigByVersion_args, getSystemConfigByVersion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSystemConfigByVersion_args");

    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSystemConfigByVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSystemConfigByVersion_argsTupleSchemeFactory());
    }

    public String version; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERSION((short)1, "version");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERSION
            return VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSystemConfigByVersion_args.class, metaDataMap);
    }

    public getSystemConfigByVersion_args() {
    }

    public getSystemConfigByVersion_args(
      String version)
    {
      this();
      this.version = version;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemConfigByVersion_args(getSystemConfigByVersion_args other) {
      if (other.isSetVersion()) {
        this.version = other.version;
      }
    }

    public getSystemConfigByVersion_args deepCopy() {
      return new getSystemConfigByVersion_args(this);
    }

    @Override
    public void clear() {
      this.version = null;
    }

    public String getVersion() {
      return this.version;
    }

    public getSystemConfigByVersion_args setVersion(String version) {
      this.version = version;
      return this;
    }

    public void unsetVersion() {
      this.version = null;
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
      if (!value) {
        this.version = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERSION:
        return getVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERSION:
        return isSetVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemConfigByVersion_args)
        return this.equals((getSystemConfigByVersion_args)that);
      return false;
    }

    public boolean equals(getSystemConfigByVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_version = true && this.isSetVersion();
      boolean that_present_version = true && that.isSetVersion();
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (!this.version.equals(that.version))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSystemConfigByVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSystemConfigByVersion_args typedOther = (getSystemConfigByVersion_args)other;

      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSystemConfigByVersion_args(");
      boolean first = true;

      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSystemConfigByVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getSystemConfigByVersion_argsStandardScheme getScheme() {
        return new getSystemConfigByVersion_argsStandardScheme();
      }
    }

    private static class getSystemConfigByVersion_argsStandardScheme extends StandardScheme<getSystemConfigByVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSystemConfigByVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version = iprot.readString();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSystemConfigByVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.version != null) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSystemConfigByVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getSystemConfigByVersion_argsTupleScheme getScheme() {
        return new getSystemConfigByVersion_argsTupleScheme();
      }
    }

    private static class getSystemConfigByVersion_argsTupleScheme extends TupleScheme<getSystemConfigByVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSystemConfigByVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVersion()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVersion()) {
          oprot.writeString(struct.version);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSystemConfigByVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.version = iprot.readString();
          struct.setVersionIsSet(true);
        }
      }
    }

  }

  public static class getSystemConfigByVersion_result implements org.apache.thrift.TBase<getSystemConfigByVersion_result, getSystemConfigByVersion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSystemConfigByVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSystemConfigByVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSystemConfigByVersion_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.SystemConfigView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.SystemConfigView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSystemConfigByVersion_result.class, metaDataMap);
    }

    public getSystemConfigByVersion_result() {
    }

    public getSystemConfigByVersion_result(
      one.show.manage.thrift.view.SystemConfigView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemConfigByVersion_result(getSystemConfigByVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.SystemConfigView(other.success);
      }
    }

    public getSystemConfigByVersion_result deepCopy() {
      return new getSystemConfigByVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.SystemConfigView getSuccess() {
      return this.success;
    }

    public getSystemConfigByVersion_result setSuccess(one.show.manage.thrift.view.SystemConfigView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.SystemConfigView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemConfigByVersion_result)
        return this.equals((getSystemConfigByVersion_result)that);
      return false;
    }

    public boolean equals(getSystemConfigByVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSystemConfigByVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSystemConfigByVersion_result typedOther = (getSystemConfigByVersion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSystemConfigByVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSystemConfigByVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getSystemConfigByVersion_resultStandardScheme getScheme() {
        return new getSystemConfigByVersion_resultStandardScheme();
      }
    }

    private static class getSystemConfigByVersion_resultStandardScheme extends StandardScheme<getSystemConfigByVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSystemConfigByVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.SystemConfigView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSystemConfigByVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSystemConfigByVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getSystemConfigByVersion_resultTupleScheme getScheme() {
        return new getSystemConfigByVersion_resultTupleScheme();
      }
    }

    private static class getSystemConfigByVersion_resultTupleScheme extends TupleScheme<getSystemConfigByVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSystemConfigByVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSystemConfigByVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.SystemConfigView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveRegister_args implements org.apache.thrift.TBase<saveRegister_args, saveRegister_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRegister_args");

    private static final org.apache.thrift.protocol.TField REGISTER_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("registerView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRegister_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.RegisterView registerView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTER_VIEW((short)1, "registerView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTER_VIEW
            return REGISTER_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTER_VIEW, new org.apache.thrift.meta_data.FieldMetaData("registerView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.RegisterView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRegister_args.class, metaDataMap);
    }

    public saveRegister_args() {
    }

    public saveRegister_args(
      one.show.manage.thrift.view.RegisterView registerView)
    {
      this();
      this.registerView = registerView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRegister_args(saveRegister_args other) {
      if (other.isSetRegisterView()) {
        this.registerView = new one.show.manage.thrift.view.RegisterView(other.registerView);
      }
    }

    public saveRegister_args deepCopy() {
      return new saveRegister_args(this);
    }

    @Override
    public void clear() {
      this.registerView = null;
    }

    public one.show.manage.thrift.view.RegisterView getRegisterView() {
      return this.registerView;
    }

    public saveRegister_args setRegisterView(one.show.manage.thrift.view.RegisterView registerView) {
      this.registerView = registerView;
      return this;
    }

    public void unsetRegisterView() {
      this.registerView = null;
    }

    /** Returns true if field registerView is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisterView() {
      return this.registerView != null;
    }

    public void setRegisterViewIsSet(boolean value) {
      if (!value) {
        this.registerView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTER_VIEW:
        if (value == null) {
          unsetRegisterView();
        } else {
          setRegisterView((one.show.manage.thrift.view.RegisterView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTER_VIEW:
        return getRegisterView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTER_VIEW:
        return isSetRegisterView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRegister_args)
        return this.equals((saveRegister_args)that);
      return false;
    }

    public boolean equals(saveRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_registerView = true && this.isSetRegisterView();
      boolean that_present_registerView = true && that.isSetRegisterView();
      if (this_present_registerView || that_present_registerView) {
        if (!(this_present_registerView && that_present_registerView))
          return false;
        if (!this.registerView.equals(that.registerView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveRegister_args typedOther = (saveRegister_args)other;

      lastComparison = Boolean.valueOf(isSetRegisterView()).compareTo(typedOther.isSetRegisterView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisterView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerView, typedOther.registerView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRegister_args(");
      boolean first = true;

      sb.append("registerView:");
      if (this.registerView == null) {
        sb.append("null");
      } else {
        sb.append(this.registerView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registerView != null) {
        registerView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRegister_argsStandardSchemeFactory implements SchemeFactory {
      public saveRegister_argsStandardScheme getScheme() {
        return new saveRegister_argsStandardScheme();
      }
    }

    private static class saveRegister_argsStandardScheme extends StandardScheme<saveRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTER_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registerView = new one.show.manage.thrift.view.RegisterView();
                struct.registerView.read(iprot);
                struct.setRegisterViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registerView != null) {
          oprot.writeFieldBegin(REGISTER_VIEW_FIELD_DESC);
          struct.registerView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRegister_argsTupleSchemeFactory implements SchemeFactory {
      public saveRegister_argsTupleScheme getScheme() {
        return new saveRegister_argsTupleScheme();
      }
    }

    private static class saveRegister_argsTupleScheme extends TupleScheme<saveRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegisterView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegisterView()) {
          struct.registerView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registerView = new one.show.manage.thrift.view.RegisterView();
          struct.registerView.read(iprot);
          struct.setRegisterViewIsSet(true);
        }
      }
    }

  }

  public static class saveRegister_result implements org.apache.thrift.TBase<saveRegister_result, saveRegister_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRegister_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRegister_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRegister_result.class, metaDataMap);
    }

    public saveRegister_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRegister_result(saveRegister_result other) {
    }

    public saveRegister_result deepCopy() {
      return new saveRegister_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRegister_result)
        return this.equals((saveRegister_result)that);
      return false;
    }

    public boolean equals(saveRegister_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveRegister_result typedOther = (saveRegister_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRegister_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRegister_resultStandardSchemeFactory implements SchemeFactory {
      public saveRegister_resultStandardScheme getScheme() {
        return new saveRegister_resultStandardScheme();
      }
    }

    private static class saveRegister_resultStandardScheme extends StandardScheme<saveRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRegister_resultTupleSchemeFactory implements SchemeFactory {
      public saveRegister_resultTupleScheme getScheme() {
        return new saveRegister_resultTupleScheme();
      }
    }

    private static class saveRegister_resultTupleScheme extends TupleScheme<saveRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRegisterByUid_args implements org.apache.thrift.TBase<getRegisterByUid_args, getRegisterByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisterByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisterByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisterByUid_argsTupleSchemeFactory());
    }

    public String uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisterByUid_args.class, metaDataMap);
    }

    public getRegisterByUid_args() {
    }

    public getRegisterByUid_args(
      String uid)
    {
      this();
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisterByUid_args(getRegisterByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public getRegisterByUid_args deepCopy() {
      return new getRegisterByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
    }

    public String getUid() {
      return this.uid;
    }

    public getRegisterByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisterByUid_args)
        return this.equals((getRegisterByUid_args)that);
      return false;
    }

    public boolean equals(getRegisterByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRegisterByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRegisterByUid_args typedOther = (getRegisterByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisterByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisterByUid_argsStandardSchemeFactory implements SchemeFactory {
      public getRegisterByUid_argsStandardScheme getScheme() {
        return new getRegisterByUid_argsStandardScheme();
      }
    }

    private static class getRegisterByUid_argsStandardScheme extends StandardScheme<getRegisterByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisterByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisterByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisterByUid_argsTupleSchemeFactory implements SchemeFactory {
      public getRegisterByUid_argsTupleScheme getScheme() {
        return new getRegisterByUid_argsTupleScheme();
      }
    }

    private static class getRegisterByUid_argsTupleScheme extends TupleScheme<getRegisterByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisterByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisterByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getRegisterByUid_result implements org.apache.thrift.TBase<getRegisterByUid_result, getRegisterByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisterByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisterByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisterByUid_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.RegisterView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.RegisterView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisterByUid_result.class, metaDataMap);
    }

    public getRegisterByUid_result() {
    }

    public getRegisterByUid_result(
      one.show.manage.thrift.view.RegisterView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisterByUid_result(getRegisterByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.RegisterView(other.success);
      }
    }

    public getRegisterByUid_result deepCopy() {
      return new getRegisterByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.RegisterView getSuccess() {
      return this.success;
    }

    public getRegisterByUid_result setSuccess(one.show.manage.thrift.view.RegisterView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.RegisterView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisterByUid_result)
        return this.equals((getRegisterByUid_result)that);
      return false;
    }

    public boolean equals(getRegisterByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRegisterByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRegisterByUid_result typedOther = (getRegisterByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisterByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisterByUid_resultStandardSchemeFactory implements SchemeFactory {
      public getRegisterByUid_resultStandardScheme getScheme() {
        return new getRegisterByUid_resultStandardScheme();
      }
    }

    private static class getRegisterByUid_resultStandardScheme extends StandardScheme<getRegisterByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisterByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.RegisterView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisterByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisterByUid_resultTupleSchemeFactory implements SchemeFactory {
      public getRegisterByUid_resultTupleScheme getScheme() {
        return new getRegisterByUid_resultTupleScheme();
      }
    }

    private static class getRegisterByUid_resultTupleScheme extends TupleScheme<getRegisterByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisterByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisterByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.RegisterView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRegisterByUid_args implements org.apache.thrift.TBase<updateRegisterByUid_args, updateRegisterByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegisterByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegisterByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegisterByUid_argsTupleSchemeFactory());
    }

    public String uid; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAM_MAP((short)2, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegisterByUid_args.class, metaDataMap);
    }

    public updateRegisterByUid_args() {
    }

    public updateRegisterByUid_args(
      String uid,
      Map<String,String> paramMap)
    {
      this();
      this.uid = uid;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegisterByUid_args(updateRegisterByUid_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateRegisterByUid_args deepCopy() {
      return new updateRegisterByUid_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.paramMap = null;
    }

    public String getUid() {
      return this.uid;
    }

    public updateRegisterByUid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public updateRegisterByUid_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegisterByUid_args)
        return this.equals((updateRegisterByUid_args)that);
      return false;
    }

    public boolean equals(updateRegisterByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRegisterByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRegisterByUid_args typedOther = (updateRegisterByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegisterByUid_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegisterByUid_argsStandardSchemeFactory implements SchemeFactory {
      public updateRegisterByUid_argsStandardScheme getScheme() {
        return new updateRegisterByUid_argsStandardScheme();
      }
    }

    private static class updateRegisterByUid_argsStandardScheme extends StandardScheme<updateRegisterByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegisterByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map76.size);
                  for (int _i77 = 0; _i77 < _map76.size; ++_i77)
                  {
                    String _key78; // required
                    String _val79; // required
                    _key78 = iprot.readString();
                    _val79 = iprot.readString();
                    struct.paramMap.put(_key78, _val79);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegisterByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter80 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter80.getKey());
              oprot.writeString(_iter80.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegisterByUid_argsTupleSchemeFactory implements SchemeFactory {
      public updateRegisterByUid_argsTupleScheme getScheme() {
        return new updateRegisterByUid_argsTupleScheme();
      }
    }

    private static class updateRegisterByUid_argsTupleScheme extends TupleScheme<updateRegisterByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegisterByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParamMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter81 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter81.getKey());
              oprot.writeString(_iter81.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegisterByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map82.size);
            for (int _i83 = 0; _i83 < _map82.size; ++_i83)
            {
              String _key84; // required
              String _val85; // required
              _key84 = iprot.readString();
              _val85 = iprot.readString();
              struct.paramMap.put(_key84, _val85);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class updateRegisterByUid_result implements org.apache.thrift.TBase<updateRegisterByUid_result, updateRegisterByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegisterByUid_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegisterByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegisterByUid_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegisterByUid_result.class, metaDataMap);
    }

    public updateRegisterByUid_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegisterByUid_result(updateRegisterByUid_result other) {
    }

    public updateRegisterByUid_result deepCopy() {
      return new updateRegisterByUid_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegisterByUid_result)
        return this.equals((updateRegisterByUid_result)that);
      return false;
    }

    public boolean equals(updateRegisterByUid_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRegisterByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRegisterByUid_result typedOther = (updateRegisterByUid_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegisterByUid_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegisterByUid_resultStandardSchemeFactory implements SchemeFactory {
      public updateRegisterByUid_resultStandardScheme getScheme() {
        return new updateRegisterByUid_resultStandardScheme();
      }
    }

    private static class updateRegisterByUid_resultStandardScheme extends StandardScheme<updateRegisterByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegisterByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegisterByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegisterByUid_resultTupleSchemeFactory implements SchemeFactory {
      public updateRegisterByUid_resultTupleScheme getScheme() {
        return new updateRegisterByUid_resultTupleScheme();
      }
    }

    private static class updateRegisterByUid_resultTupleScheme extends TupleScheme<updateRegisterByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegisterByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegisterByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRegisterList_args implements org.apache.thrift.TBase<getRegisterList_args, getRegisterList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisterList_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisterList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisterList_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisterList_args.class, metaDataMap);
    }

    public getRegisterList_args() {
    }

    public getRegisterList_args(
      Map<String,String> paramMap,
      int start,
      int count)
    {
      this();
      this.paramMap = paramMap;
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisterList_args(getRegisterList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
      this.start = other.start;
      this.count = other.count;
    }

    public getRegisterList_args deepCopy() {
      return new getRegisterList_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getRegisterList_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public getRegisterList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getRegisterList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisterList_args)
        return this.equals((getRegisterList_args)that);
      return false;
    }

    public boolean equals(getRegisterList_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRegisterList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRegisterList_args typedOther = (getRegisterList_args)other;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisterList_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisterList_argsStandardSchemeFactory implements SchemeFactory {
      public getRegisterList_argsStandardScheme getScheme() {
        return new getRegisterList_argsStandardScheme();
      }
    }

    private static class getRegisterList_argsStandardScheme extends StandardScheme<getRegisterList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisterList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map86.size);
                  for (int _i87 = 0; _i87 < _map86.size; ++_i87)
                  {
                    String _key88; // required
                    String _val89; // required
                    _key88 = iprot.readString();
                    _val89 = iprot.readString();
                    struct.paramMap.put(_key88, _val89);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisterList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter90 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter90.getKey());
              oprot.writeString(_iter90.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisterList_argsTupleSchemeFactory implements SchemeFactory {
      public getRegisterList_argsTupleScheme getScheme() {
        return new getRegisterList_argsTupleScheme();
      }
    }

    private static class getRegisterList_argsTupleScheme extends TupleScheme<getRegisterList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisterList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter91 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter91.getKey());
              oprot.writeString(_iter91.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisterList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map92.size);
            for (int _i93 = 0; _i93 < _map92.size; ++_i93)
            {
              String _key94; // required
              String _val95; // required
              _key94 = iprot.readString();
              _val95 = iprot.readString();
              struct.paramMap.put(_key94, _val95);
            }
          }
          struct.setParamMapIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class getRegisterList_result implements org.apache.thrift.TBase<getRegisterList_result, getRegisterList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegisterList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegisterList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegisterList_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.RegisterListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.RegisterListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegisterList_result.class, metaDataMap);
    }

    public getRegisterList_result() {
    }

    public getRegisterList_result(
      one.show.manage.thrift.view.RegisterListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegisterList_result(getRegisterList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.RegisterListView(other.success);
      }
    }

    public getRegisterList_result deepCopy() {
      return new getRegisterList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.RegisterListView getSuccess() {
      return this.success;
    }

    public getRegisterList_result setSuccess(one.show.manage.thrift.view.RegisterListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.RegisterListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegisterList_result)
        return this.equals((getRegisterList_result)that);
      return false;
    }

    public boolean equals(getRegisterList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRegisterList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRegisterList_result typedOther = (getRegisterList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegisterList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegisterList_resultStandardSchemeFactory implements SchemeFactory {
      public getRegisterList_resultStandardScheme getScheme() {
        return new getRegisterList_resultStandardScheme();
      }
    }

    private static class getRegisterList_resultStandardScheme extends StandardScheme<getRegisterList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegisterList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.RegisterListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegisterList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegisterList_resultTupleSchemeFactory implements SchemeFactory {
      public getRegisterList_resultTupleScheme getScheme() {
        return new getRegisterList_resultTupleScheme();
      }
    }

    private static class getRegisterList_resultTupleScheme extends TupleScheme<getRegisterList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegisterList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegisterList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.RegisterListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRegister_args implements org.apache.thrift.TBase<updateRegister_args, updateRegister_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegister_args");

    private static final org.apache.thrift.protocol.TField REGISTER_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("registerView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegister_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.RegisterView registerView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTER_VIEW((short)1, "registerView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTER_VIEW
            return REGISTER_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTER_VIEW, new org.apache.thrift.meta_data.FieldMetaData("registerView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.RegisterView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegister_args.class, metaDataMap);
    }

    public updateRegister_args() {
    }

    public updateRegister_args(
      one.show.manage.thrift.view.RegisterView registerView)
    {
      this();
      this.registerView = registerView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegister_args(updateRegister_args other) {
      if (other.isSetRegisterView()) {
        this.registerView = new one.show.manage.thrift.view.RegisterView(other.registerView);
      }
    }

    public updateRegister_args deepCopy() {
      return new updateRegister_args(this);
    }

    @Override
    public void clear() {
      this.registerView = null;
    }

    public one.show.manage.thrift.view.RegisterView getRegisterView() {
      return this.registerView;
    }

    public updateRegister_args setRegisterView(one.show.manage.thrift.view.RegisterView registerView) {
      this.registerView = registerView;
      return this;
    }

    public void unsetRegisterView() {
      this.registerView = null;
    }

    /** Returns true if field registerView is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisterView() {
      return this.registerView != null;
    }

    public void setRegisterViewIsSet(boolean value) {
      if (!value) {
        this.registerView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTER_VIEW:
        if (value == null) {
          unsetRegisterView();
        } else {
          setRegisterView((one.show.manage.thrift.view.RegisterView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTER_VIEW:
        return getRegisterView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTER_VIEW:
        return isSetRegisterView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegister_args)
        return this.equals((updateRegister_args)that);
      return false;
    }

    public boolean equals(updateRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_registerView = true && this.isSetRegisterView();
      boolean that_present_registerView = true && that.isSetRegisterView();
      if (this_present_registerView || that_present_registerView) {
        if (!(this_present_registerView && that_present_registerView))
          return false;
        if (!this.registerView.equals(that.registerView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRegister_args typedOther = (updateRegister_args)other;

      lastComparison = Boolean.valueOf(isSetRegisterView()).compareTo(typedOther.isSetRegisterView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisterView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerView, typedOther.registerView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegister_args(");
      boolean first = true;

      sb.append("registerView:");
      if (this.registerView == null) {
        sb.append("null");
      } else {
        sb.append(this.registerView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registerView != null) {
        registerView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegister_argsStandardSchemeFactory implements SchemeFactory {
      public updateRegister_argsStandardScheme getScheme() {
        return new updateRegister_argsStandardScheme();
      }
    }

    private static class updateRegister_argsStandardScheme extends StandardScheme<updateRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTER_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registerView = new one.show.manage.thrift.view.RegisterView();
                struct.registerView.read(iprot);
                struct.setRegisterViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registerView != null) {
          oprot.writeFieldBegin(REGISTER_VIEW_FIELD_DESC);
          struct.registerView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegister_argsTupleSchemeFactory implements SchemeFactory {
      public updateRegister_argsTupleScheme getScheme() {
        return new updateRegister_argsTupleScheme();
      }
    }

    private static class updateRegister_argsTupleScheme extends TupleScheme<updateRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegisterView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegisterView()) {
          struct.registerView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registerView = new one.show.manage.thrift.view.RegisterView();
          struct.registerView.read(iprot);
          struct.setRegisterViewIsSet(true);
        }
      }
    }

  }

  public static class updateRegister_result implements org.apache.thrift.TBase<updateRegister_result, updateRegister_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegister_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegister_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegister_result.class, metaDataMap);
    }

    public updateRegister_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegister_result(updateRegister_result other) {
    }

    public updateRegister_result deepCopy() {
      return new updateRegister_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegister_result)
        return this.equals((updateRegister_result)that);
      return false;
    }

    public boolean equals(updateRegister_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRegister_result typedOther = (updateRegister_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegister_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegister_resultStandardSchemeFactory implements SchemeFactory {
      public updateRegister_resultStandardScheme getScheme() {
        return new updateRegister_resultStandardScheme();
      }
    }

    private static class updateRegister_resultStandardScheme extends StandardScheme<updateRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegister_resultTupleSchemeFactory implements SchemeFactory {
      public updateRegister_resultTupleScheme getScheme() {
        return new updateRegister_resultTupleScheme();
      }
    }

    private static class updateRegister_resultTupleScheme extends TupleScheme<updateRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findMasterLevelList_args implements org.apache.thrift.TBase<findMasterLevelList_args, findMasterLevelList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMasterLevelList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMasterLevelList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMasterLevelList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMasterLevelList_args.class, metaDataMap);
    }

    public findMasterLevelList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMasterLevelList_args(findMasterLevelList_args other) {
    }

    public findMasterLevelList_args deepCopy() {
      return new findMasterLevelList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMasterLevelList_args)
        return this.equals((findMasterLevelList_args)that);
      return false;
    }

    public boolean equals(findMasterLevelList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMasterLevelList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMasterLevelList_args typedOther = (findMasterLevelList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMasterLevelList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMasterLevelList_argsStandardSchemeFactory implements SchemeFactory {
      public findMasterLevelList_argsStandardScheme getScheme() {
        return new findMasterLevelList_argsStandardScheme();
      }
    }

    private static class findMasterLevelList_argsStandardScheme extends StandardScheme<findMasterLevelList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMasterLevelList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMasterLevelList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMasterLevelList_argsTupleSchemeFactory implements SchemeFactory {
      public findMasterLevelList_argsTupleScheme getScheme() {
        return new findMasterLevelList_argsTupleScheme();
      }
    }

    private static class findMasterLevelList_argsTupleScheme extends TupleScheme<findMasterLevelList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMasterLevelList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMasterLevelList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findMasterLevelList_result implements org.apache.thrift.TBase<findMasterLevelList_result, findMasterLevelList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMasterLevelList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMasterLevelList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMasterLevelList_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.MasterLevelView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.MasterLevelView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMasterLevelList_result.class, metaDataMap);
    }

    public findMasterLevelList_result() {
    }

    public findMasterLevelList_result(
      List<one.show.manage.thrift.view.MasterLevelView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMasterLevelList_result(findMasterLevelList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.MasterLevelView> __this__success = new ArrayList<one.show.manage.thrift.view.MasterLevelView>();
        for (one.show.manage.thrift.view.MasterLevelView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.MasterLevelView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findMasterLevelList_result deepCopy() {
      return new findMasterLevelList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.MasterLevelView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.MasterLevelView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.MasterLevelView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.MasterLevelView> getSuccess() {
      return this.success;
    }

    public findMasterLevelList_result setSuccess(List<one.show.manage.thrift.view.MasterLevelView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.MasterLevelView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMasterLevelList_result)
        return this.equals((findMasterLevelList_result)that);
      return false;
    }

    public boolean equals(findMasterLevelList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMasterLevelList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMasterLevelList_result typedOther = (findMasterLevelList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMasterLevelList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMasterLevelList_resultStandardSchemeFactory implements SchemeFactory {
      public findMasterLevelList_resultStandardScheme getScheme() {
        return new findMasterLevelList_resultStandardScheme();
      }
    }

    private static class findMasterLevelList_resultStandardScheme extends StandardScheme<findMasterLevelList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMasterLevelList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.MasterLevelView>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    one.show.manage.thrift.view.MasterLevelView _elem98; // required
                    _elem98 = new one.show.manage.thrift.view.MasterLevelView();
                    _elem98.read(iprot);
                    struct.success.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMasterLevelList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.MasterLevelView _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMasterLevelList_resultTupleSchemeFactory implements SchemeFactory {
      public findMasterLevelList_resultTupleScheme getScheme() {
        return new findMasterLevelList_resultTupleScheme();
      }
    }

    private static class findMasterLevelList_resultTupleScheme extends TupleScheme<findMasterLevelList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMasterLevelList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.MasterLevelView _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMasterLevelList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.MasterLevelView>(_list101.size);
            for (int _i102 = 0; _i102 < _list101.size; ++_i102)
            {
              one.show.manage.thrift.view.MasterLevelView _elem103; // required
              _elem103 = new one.show.manage.thrift.view.MasterLevelView();
              _elem103.read(iprot);
              struct.success.add(_elem103);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findFanLevelList_args implements org.apache.thrift.TBase<findFanLevelList_args, findFanLevelList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFanLevelList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFanLevelList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFanLevelList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFanLevelList_args.class, metaDataMap);
    }

    public findFanLevelList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFanLevelList_args(findFanLevelList_args other) {
    }

    public findFanLevelList_args deepCopy() {
      return new findFanLevelList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFanLevelList_args)
        return this.equals((findFanLevelList_args)that);
      return false;
    }

    public boolean equals(findFanLevelList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFanLevelList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFanLevelList_args typedOther = (findFanLevelList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFanLevelList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFanLevelList_argsStandardSchemeFactory implements SchemeFactory {
      public findFanLevelList_argsStandardScheme getScheme() {
        return new findFanLevelList_argsStandardScheme();
      }
    }

    private static class findFanLevelList_argsStandardScheme extends StandardScheme<findFanLevelList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFanLevelList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFanLevelList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFanLevelList_argsTupleSchemeFactory implements SchemeFactory {
      public findFanLevelList_argsTupleScheme getScheme() {
        return new findFanLevelList_argsTupleScheme();
      }
    }

    private static class findFanLevelList_argsTupleScheme extends TupleScheme<findFanLevelList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFanLevelList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFanLevelList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findFanLevelList_result implements org.apache.thrift.TBase<findFanLevelList_result, findFanLevelList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFanLevelList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFanLevelList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFanLevelList_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.FanLevelView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.FanLevelView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFanLevelList_result.class, metaDataMap);
    }

    public findFanLevelList_result() {
    }

    public findFanLevelList_result(
      List<one.show.manage.thrift.view.FanLevelView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFanLevelList_result(findFanLevelList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.FanLevelView> __this__success = new ArrayList<one.show.manage.thrift.view.FanLevelView>();
        for (one.show.manage.thrift.view.FanLevelView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.FanLevelView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findFanLevelList_result deepCopy() {
      return new findFanLevelList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.FanLevelView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.FanLevelView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.FanLevelView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.FanLevelView> getSuccess() {
      return this.success;
    }

    public findFanLevelList_result setSuccess(List<one.show.manage.thrift.view.FanLevelView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.FanLevelView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFanLevelList_result)
        return this.equals((findFanLevelList_result)that);
      return false;
    }

    public boolean equals(findFanLevelList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFanLevelList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFanLevelList_result typedOther = (findFanLevelList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFanLevelList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFanLevelList_resultStandardSchemeFactory implements SchemeFactory {
      public findFanLevelList_resultStandardScheme getScheme() {
        return new findFanLevelList_resultStandardScheme();
      }
    }

    private static class findFanLevelList_resultStandardScheme extends StandardScheme<findFanLevelList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFanLevelList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.FanLevelView>(_list104.size);
                  for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                  {
                    one.show.manage.thrift.view.FanLevelView _elem106; // required
                    _elem106 = new one.show.manage.thrift.view.FanLevelView();
                    _elem106.read(iprot);
                    struct.success.add(_elem106);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFanLevelList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.FanLevelView _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFanLevelList_resultTupleSchemeFactory implements SchemeFactory {
      public findFanLevelList_resultTupleScheme getScheme() {
        return new findFanLevelList_resultTupleScheme();
      }
    }

    private static class findFanLevelList_resultTupleScheme extends TupleScheme<findFanLevelList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFanLevelList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.FanLevelView _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFanLevelList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.FanLevelView>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              one.show.manage.thrift.view.FanLevelView _elem111; // required
              _elem111 = new one.show.manage.thrift.view.FanLevelView();
              _elem111.read(iprot);
              struct.success.add(_elem111);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findNoticeById_args implements org.apache.thrift.TBase<findNoticeById_args, findNoticeById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNoticeById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findNoticeById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findNoticeById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNoticeById_args.class, metaDataMap);
    }

    public findNoticeById_args() {
    }

    public findNoticeById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoticeById_args(findNoticeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public findNoticeById_args deepCopy() {
      return new findNoticeById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public findNoticeById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoticeById_args)
        return this.equals((findNoticeById_args)that);
      return false;
    }

    public boolean equals(findNoticeById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findNoticeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNoticeById_args typedOther = (findNoticeById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findNoticeById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNoticeById_argsStandardSchemeFactory implements SchemeFactory {
      public findNoticeById_argsStandardScheme getScheme() {
        return new findNoticeById_argsStandardScheme();
      }
    }

    private static class findNoticeById_argsStandardScheme extends StandardScheme<findNoticeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNoticeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNoticeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNoticeById_argsTupleSchemeFactory implements SchemeFactory {
      public findNoticeById_argsTupleScheme getScheme() {
        return new findNoticeById_argsTupleScheme();
      }
    }

    private static class findNoticeById_argsTupleScheme extends TupleScheme<findNoticeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNoticeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNoticeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class findNoticeById_result implements org.apache.thrift.TBase<findNoticeById_result, findNoticeById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNoticeById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findNoticeById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findNoticeById_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.NoticeView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.NoticeView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNoticeById_result.class, metaDataMap);
    }

    public findNoticeById_result() {
    }

    public findNoticeById_result(
      one.show.manage.thrift.view.NoticeView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoticeById_result(findNoticeById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.NoticeView(other.success);
      }
    }

    public findNoticeById_result deepCopy() {
      return new findNoticeById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.NoticeView getSuccess() {
      return this.success;
    }

    public findNoticeById_result setSuccess(one.show.manage.thrift.view.NoticeView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.NoticeView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoticeById_result)
        return this.equals((findNoticeById_result)that);
      return false;
    }

    public boolean equals(findNoticeById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findNoticeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNoticeById_result typedOther = (findNoticeById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findNoticeById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNoticeById_resultStandardSchemeFactory implements SchemeFactory {
      public findNoticeById_resultStandardScheme getScheme() {
        return new findNoticeById_resultStandardScheme();
      }
    }

    private static class findNoticeById_resultStandardScheme extends StandardScheme<findNoticeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNoticeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.NoticeView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNoticeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNoticeById_resultTupleSchemeFactory implements SchemeFactory {
      public findNoticeById_resultTupleScheme getScheme() {
        return new findNoticeById_resultTupleScheme();
      }
    }

    private static class findNoticeById_resultTupleScheme extends TupleScheme<findNoticeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNoticeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNoticeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.NoticeView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findEffecNoticeList_args implements org.apache.thrift.TBase<findEffecNoticeList_args, findEffecNoticeList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEffecNoticeList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findEffecNoticeList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findEffecNoticeList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEffecNoticeList_args.class, metaDataMap);
    }

    public findEffecNoticeList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEffecNoticeList_args(findEffecNoticeList_args other) {
    }

    public findEffecNoticeList_args deepCopy() {
      return new findEffecNoticeList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findEffecNoticeList_args)
        return this.equals((findEffecNoticeList_args)that);
      return false;
    }

    public boolean equals(findEffecNoticeList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findEffecNoticeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findEffecNoticeList_args typedOther = (findEffecNoticeList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findEffecNoticeList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEffecNoticeList_argsStandardSchemeFactory implements SchemeFactory {
      public findEffecNoticeList_argsStandardScheme getScheme() {
        return new findEffecNoticeList_argsStandardScheme();
      }
    }

    private static class findEffecNoticeList_argsStandardScheme extends StandardScheme<findEffecNoticeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEffecNoticeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEffecNoticeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEffecNoticeList_argsTupleSchemeFactory implements SchemeFactory {
      public findEffecNoticeList_argsTupleScheme getScheme() {
        return new findEffecNoticeList_argsTupleScheme();
      }
    }

    private static class findEffecNoticeList_argsTupleScheme extends TupleScheme<findEffecNoticeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEffecNoticeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEffecNoticeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findEffecNoticeList_result implements org.apache.thrift.TBase<findEffecNoticeList_result, findEffecNoticeList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEffecNoticeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findEffecNoticeList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findEffecNoticeList_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.NoticeView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.NoticeView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEffecNoticeList_result.class, metaDataMap);
    }

    public findEffecNoticeList_result() {
    }

    public findEffecNoticeList_result(
      List<one.show.manage.thrift.view.NoticeView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEffecNoticeList_result(findEffecNoticeList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.NoticeView> __this__success = new ArrayList<one.show.manage.thrift.view.NoticeView>();
        for (one.show.manage.thrift.view.NoticeView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.NoticeView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findEffecNoticeList_result deepCopy() {
      return new findEffecNoticeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.NoticeView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.NoticeView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.NoticeView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.NoticeView> getSuccess() {
      return this.success;
    }

    public findEffecNoticeList_result setSuccess(List<one.show.manage.thrift.view.NoticeView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.NoticeView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findEffecNoticeList_result)
        return this.equals((findEffecNoticeList_result)that);
      return false;
    }

    public boolean equals(findEffecNoticeList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findEffecNoticeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findEffecNoticeList_result typedOther = (findEffecNoticeList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findEffecNoticeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEffecNoticeList_resultStandardSchemeFactory implements SchemeFactory {
      public findEffecNoticeList_resultStandardScheme getScheme() {
        return new findEffecNoticeList_resultStandardScheme();
      }
    }

    private static class findEffecNoticeList_resultStandardScheme extends StandardScheme<findEffecNoticeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEffecNoticeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.NoticeView>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    one.show.manage.thrift.view.NoticeView _elem114; // required
                    _elem114 = new one.show.manage.thrift.view.NoticeView();
                    _elem114.read(iprot);
                    struct.success.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEffecNoticeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.NoticeView _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEffecNoticeList_resultTupleSchemeFactory implements SchemeFactory {
      public findEffecNoticeList_resultTupleScheme getScheme() {
        return new findEffecNoticeList_resultTupleScheme();
      }
    }

    private static class findEffecNoticeList_resultTupleScheme extends TupleScheme<findEffecNoticeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEffecNoticeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.NoticeView _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEffecNoticeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.NoticeView>(_list117.size);
            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
            {
              one.show.manage.thrift.view.NoticeView _elem119; // required
              _elem119 = new one.show.manage.thrift.view.NoticeView();
              _elem119.read(iprot);
              struct.success.add(_elem119);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findNoticeList_args implements org.apache.thrift.TBase<findNoticeList_args, findNoticeList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNoticeList_args");

    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findNoticeList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findNoticeList_argsTupleSchemeFactory());
    }

    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START((short)1, "start"),
      COUNT((short)2, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START
            return START;
          case 2: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNoticeList_args.class, metaDataMap);
    }

    public findNoticeList_args() {
    }

    public findNoticeList_args(
      int start,
      int count)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoticeList_args(findNoticeList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.start = other.start;
      this.count = other.count;
    }

    public findNoticeList_args deepCopy() {
      return new findNoticeList_args(this);
    }

    @Override
    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getStart() {
      return this.start;
    }

    public findNoticeList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findNoticeList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoticeList_args)
        return this.equals((findNoticeList_args)that);
      return false;
    }

    public boolean equals(findNoticeList_args that) {
      if (that == null)
        return false;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findNoticeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNoticeList_args typedOther = (findNoticeList_args)other;

      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findNoticeList_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNoticeList_argsStandardSchemeFactory implements SchemeFactory {
      public findNoticeList_argsStandardScheme getScheme() {
        return new findNoticeList_argsStandardScheme();
      }
    }

    private static class findNoticeList_argsStandardScheme extends StandardScheme<findNoticeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNoticeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNoticeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNoticeList_argsTupleSchemeFactory implements SchemeFactory {
      public findNoticeList_argsTupleScheme getScheme() {
        return new findNoticeList_argsTupleScheme();
      }
    }

    private static class findNoticeList_argsTupleScheme extends TupleScheme<findNoticeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNoticeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStart()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNoticeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findNoticeList_result implements org.apache.thrift.TBase<findNoticeList_result, findNoticeList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findNoticeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findNoticeList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findNoticeList_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.NoticeListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.NoticeListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findNoticeList_result.class, metaDataMap);
    }

    public findNoticeList_result() {
    }

    public findNoticeList_result(
      one.show.manage.thrift.view.NoticeListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoticeList_result(findNoticeList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.NoticeListView(other.success);
      }
    }

    public findNoticeList_result deepCopy() {
      return new findNoticeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.NoticeListView getSuccess() {
      return this.success;
    }

    public findNoticeList_result setSuccess(one.show.manage.thrift.view.NoticeListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.NoticeListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoticeList_result)
        return this.equals((findNoticeList_result)that);
      return false;
    }

    public boolean equals(findNoticeList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findNoticeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNoticeList_result typedOther = (findNoticeList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findNoticeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findNoticeList_resultStandardSchemeFactory implements SchemeFactory {
      public findNoticeList_resultStandardScheme getScheme() {
        return new findNoticeList_resultStandardScheme();
      }
    }

    private static class findNoticeList_resultStandardScheme extends StandardScheme<findNoticeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findNoticeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.NoticeListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findNoticeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findNoticeList_resultTupleSchemeFactory implements SchemeFactory {
      public findNoticeList_resultTupleScheme getScheme() {
        return new findNoticeList_resultTupleScheme();
      }
    }

    private static class findNoticeList_resultTupleScheme extends TupleScheme<findNoticeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findNoticeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findNoticeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.NoticeListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateNoticeById_args implements org.apache.thrift.TBase<updateNoticeById_args, updateNoticeById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNoticeById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNoticeById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNoticeById_argsTupleSchemeFactory());
    }

    public int id; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PARAM_MAP((short)2, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNoticeById_args.class, metaDataMap);
    }

    public updateNoticeById_args() {
    }

    public updateNoticeById_args(
      int id,
      Map<String,String> paramMap)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNoticeById_args(updateNoticeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateNoticeById_args deepCopy() {
      return new updateNoticeById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.paramMap = null;
    }

    public int getId() {
      return this.id;
    }

    public updateNoticeById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public updateNoticeById_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNoticeById_args)
        return this.equals((updateNoticeById_args)that);
      return false;
    }

    public boolean equals(updateNoticeById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNoticeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNoticeById_args typedOther = (updateNoticeById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNoticeById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNoticeById_argsStandardSchemeFactory implements SchemeFactory {
      public updateNoticeById_argsStandardScheme getScheme() {
        return new updateNoticeById_argsStandardScheme();
      }
    }

    private static class updateNoticeById_argsStandardScheme extends StandardScheme<updateNoticeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNoticeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map120.size);
                  for (int _i121 = 0; _i121 < _map120.size; ++_i121)
                  {
                    String _key122; // required
                    String _val123; // required
                    _key122 = iprot.readString();
                    _val123 = iprot.readString();
                    struct.paramMap.put(_key122, _val123);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNoticeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter124 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter124.getKey());
              oprot.writeString(_iter124.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNoticeById_argsTupleSchemeFactory implements SchemeFactory {
      public updateNoticeById_argsTupleScheme getScheme() {
        return new updateNoticeById_argsTupleScheme();
      }
    }

    private static class updateNoticeById_argsTupleScheme extends TupleScheme<updateNoticeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNoticeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetParamMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter125 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter125.getKey());
              oprot.writeString(_iter125.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNoticeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map126.size);
            for (int _i127 = 0; _i127 < _map126.size; ++_i127)
            {
              String _key128; // required
              String _val129; // required
              _key128 = iprot.readString();
              _val129 = iprot.readString();
              struct.paramMap.put(_key128, _val129);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class updateNoticeById_result implements org.apache.thrift.TBase<updateNoticeById_result, updateNoticeById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNoticeById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNoticeById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNoticeById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNoticeById_result.class, metaDataMap);
    }

    public updateNoticeById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNoticeById_result(updateNoticeById_result other) {
    }

    public updateNoticeById_result deepCopy() {
      return new updateNoticeById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNoticeById_result)
        return this.equals((updateNoticeById_result)that);
      return false;
    }

    public boolean equals(updateNoticeById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNoticeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNoticeById_result typedOther = (updateNoticeById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNoticeById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNoticeById_resultStandardSchemeFactory implements SchemeFactory {
      public updateNoticeById_resultStandardScheme getScheme() {
        return new updateNoticeById_resultStandardScheme();
      }
    }

    private static class updateNoticeById_resultStandardScheme extends StandardScheme<updateNoticeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNoticeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNoticeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNoticeById_resultTupleSchemeFactory implements SchemeFactory {
      public updateNoticeById_resultTupleScheme getScheme() {
        return new updateNoticeById_resultTupleScheme();
      }
    }

    private static class updateNoticeById_resultTupleScheme extends TupleScheme<updateNoticeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNoticeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNoticeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteNoticeById_args implements org.apache.thrift.TBase<deleteNoticeById_args, deleteNoticeById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNoticeById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteNoticeById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteNoticeById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNoticeById_args.class, metaDataMap);
    }

    public deleteNoticeById_args() {
    }

    public deleteNoticeById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNoticeById_args(deleteNoticeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteNoticeById_args deepCopy() {
      return new deleteNoticeById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteNoticeById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNoticeById_args)
        return this.equals((deleteNoticeById_args)that);
      return false;
    }

    public boolean equals(deleteNoticeById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteNoticeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteNoticeById_args typedOther = (deleteNoticeById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNoticeById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNoticeById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteNoticeById_argsStandardScheme getScheme() {
        return new deleteNoticeById_argsStandardScheme();
      }
    }

    private static class deleteNoticeById_argsStandardScheme extends StandardScheme<deleteNoticeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNoticeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNoticeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNoticeById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteNoticeById_argsTupleScheme getScheme() {
        return new deleteNoticeById_argsTupleScheme();
      }
    }

    private static class deleteNoticeById_argsTupleScheme extends TupleScheme<deleteNoticeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNoticeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNoticeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteNoticeById_result implements org.apache.thrift.TBase<deleteNoticeById_result, deleteNoticeById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNoticeById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteNoticeById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteNoticeById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNoticeById_result.class, metaDataMap);
    }

    public deleteNoticeById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNoticeById_result(deleteNoticeById_result other) {
    }

    public deleteNoticeById_result deepCopy() {
      return new deleteNoticeById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNoticeById_result)
        return this.equals((deleteNoticeById_result)that);
      return false;
    }

    public boolean equals(deleteNoticeById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteNoticeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteNoticeById_result typedOther = (deleteNoticeById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNoticeById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNoticeById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteNoticeById_resultStandardScheme getScheme() {
        return new deleteNoticeById_resultStandardScheme();
      }
    }

    private static class deleteNoticeById_resultStandardScheme extends StandardScheme<deleteNoticeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNoticeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNoticeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNoticeById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteNoticeById_resultTupleScheme getScheme() {
        return new deleteNoticeById_resultTupleScheme();
      }
    }

    private static class deleteNoticeById_resultTupleScheme extends TupleScheme<deleteNoticeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNoticeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNoticeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addNotice_args implements org.apache.thrift.TBase<addNotice_args, addNotice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNotice_args");

    private static final org.apache.thrift.protocol.TField NOTICE_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("noticeView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addNotice_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.NoticeView noticeView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTICE_VIEW((short)1, "noticeView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTICE_VIEW
            return NOTICE_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTICE_VIEW, new org.apache.thrift.meta_data.FieldMetaData("noticeView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.NoticeView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNotice_args.class, metaDataMap);
    }

    public addNotice_args() {
    }

    public addNotice_args(
      one.show.manage.thrift.view.NoticeView noticeView)
    {
      this();
      this.noticeView = noticeView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNotice_args(addNotice_args other) {
      if (other.isSetNoticeView()) {
        this.noticeView = new one.show.manage.thrift.view.NoticeView(other.noticeView);
      }
    }

    public addNotice_args deepCopy() {
      return new addNotice_args(this);
    }

    @Override
    public void clear() {
      this.noticeView = null;
    }

    public one.show.manage.thrift.view.NoticeView getNoticeView() {
      return this.noticeView;
    }

    public addNotice_args setNoticeView(one.show.manage.thrift.view.NoticeView noticeView) {
      this.noticeView = noticeView;
      return this;
    }

    public void unsetNoticeView() {
      this.noticeView = null;
    }

    /** Returns true if field noticeView is set (has been assigned a value) and false otherwise */
    public boolean isSetNoticeView() {
      return this.noticeView != null;
    }

    public void setNoticeViewIsSet(boolean value) {
      if (!value) {
        this.noticeView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOTICE_VIEW:
        if (value == null) {
          unsetNoticeView();
        } else {
          setNoticeView((one.show.manage.thrift.view.NoticeView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTICE_VIEW:
        return getNoticeView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOTICE_VIEW:
        return isSetNoticeView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNotice_args)
        return this.equals((addNotice_args)that);
      return false;
    }

    public boolean equals(addNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_noticeView = true && this.isSetNoticeView();
      boolean that_present_noticeView = true && that.isSetNoticeView();
      if (this_present_noticeView || that_present_noticeView) {
        if (!(this_present_noticeView && that_present_noticeView))
          return false;
        if (!this.noticeView.equals(that.noticeView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addNotice_args typedOther = (addNotice_args)other;

      lastComparison = Boolean.valueOf(isSetNoticeView()).compareTo(typedOther.isSetNoticeView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoticeView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noticeView, typedOther.noticeView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNotice_args(");
      boolean first = true;

      sb.append("noticeView:");
      if (this.noticeView == null) {
        sb.append("null");
      } else {
        sb.append(this.noticeView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (noticeView != null) {
        noticeView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNotice_argsStandardSchemeFactory implements SchemeFactory {
      public addNotice_argsStandardScheme getScheme() {
        return new addNotice_argsStandardScheme();
      }
    }

    private static class addNotice_argsStandardScheme extends StandardScheme<addNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTICE_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noticeView = new one.show.manage.thrift.view.NoticeView();
                struct.noticeView.read(iprot);
                struct.setNoticeViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.noticeView != null) {
          oprot.writeFieldBegin(NOTICE_VIEW_FIELD_DESC);
          struct.noticeView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNotice_argsTupleSchemeFactory implements SchemeFactory {
      public addNotice_argsTupleScheme getScheme() {
        return new addNotice_argsTupleScheme();
      }
    }

    private static class addNotice_argsTupleScheme extends TupleScheme<addNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNoticeView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNoticeView()) {
          struct.noticeView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.noticeView = new one.show.manage.thrift.view.NoticeView();
          struct.noticeView.read(iprot);
          struct.setNoticeViewIsSet(true);
        }
      }
    }

  }

  public static class addNotice_result implements org.apache.thrift.TBase<addNotice_result, addNotice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNotice_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addNotice_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNotice_result.class, metaDataMap);
    }

    public addNotice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNotice_result(addNotice_result other) {
    }

    public addNotice_result deepCopy() {
      return new addNotice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNotice_result)
        return this.equals((addNotice_result)that);
      return false;
    }

    public boolean equals(addNotice_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addNotice_result typedOther = (addNotice_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNotice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNotice_resultStandardSchemeFactory implements SchemeFactory {
      public addNotice_resultStandardScheme getScheme() {
        return new addNotice_resultStandardScheme();
      }
    }

    private static class addNotice_resultStandardScheme extends StandardScheme<addNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNotice_resultTupleSchemeFactory implements SchemeFactory {
      public addNotice_resultTupleScheme getScheme() {
        return new addNotice_resultTupleScheme();
      }
    }

    private static class addNotice_resultTupleScheme extends TupleScheme<addNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findUserCDNList_args implements org.apache.thrift.TBase<findUserCDNList_args, findUserCDNList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserCDNList_args");

    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserCDNList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserCDNList_argsTupleSchemeFactory());
    }

    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START((short)1, "start"),
      COUNT((short)2, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START
            return START;
          case 2: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserCDNList_args.class, metaDataMap);
    }

    public findUserCDNList_args() {
    }

    public findUserCDNList_args(
      int start,
      int count)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserCDNList_args(findUserCDNList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.start = other.start;
      this.count = other.count;
    }

    public findUserCDNList_args deepCopy() {
      return new findUserCDNList_args(this);
    }

    @Override
    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getStart() {
      return this.start;
    }

    public findUserCDNList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findUserCDNList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserCDNList_args)
        return this.equals((findUserCDNList_args)that);
      return false;
    }

    public boolean equals(findUserCDNList_args that) {
      if (that == null)
        return false;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserCDNList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserCDNList_args typedOther = (findUserCDNList_args)other;

      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserCDNList_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserCDNList_argsStandardSchemeFactory implements SchemeFactory {
      public findUserCDNList_argsStandardScheme getScheme() {
        return new findUserCDNList_argsStandardScheme();
      }
    }

    private static class findUserCDNList_argsStandardScheme extends StandardScheme<findUserCDNList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserCDNList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserCDNList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserCDNList_argsTupleSchemeFactory implements SchemeFactory {
      public findUserCDNList_argsTupleScheme getScheme() {
        return new findUserCDNList_argsTupleScheme();
      }
    }

    private static class findUserCDNList_argsTupleScheme extends TupleScheme<findUserCDNList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserCDNList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStart()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserCDNList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findUserCDNList_result implements org.apache.thrift.TBase<findUserCDNList_result, findUserCDNList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserCDNList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserCDNList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserCDNList_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.UserCDNListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.UserCDNListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserCDNList_result.class, metaDataMap);
    }

    public findUserCDNList_result() {
    }

    public findUserCDNList_result(
      one.show.manage.thrift.view.UserCDNListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserCDNList_result(findUserCDNList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.UserCDNListView(other.success);
      }
    }

    public findUserCDNList_result deepCopy() {
      return new findUserCDNList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.UserCDNListView getSuccess() {
      return this.success;
    }

    public findUserCDNList_result setSuccess(one.show.manage.thrift.view.UserCDNListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.UserCDNListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserCDNList_result)
        return this.equals((findUserCDNList_result)that);
      return false;
    }

    public boolean equals(findUserCDNList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserCDNList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserCDNList_result typedOther = (findUserCDNList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserCDNList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserCDNList_resultStandardSchemeFactory implements SchemeFactory {
      public findUserCDNList_resultStandardScheme getScheme() {
        return new findUserCDNList_resultStandardScheme();
      }
    }

    private static class findUserCDNList_resultStandardScheme extends StandardScheme<findUserCDNList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserCDNList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.UserCDNListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserCDNList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserCDNList_resultTupleSchemeFactory implements SchemeFactory {
      public findUserCDNList_resultTupleScheme getScheme() {
        return new findUserCDNList_resultTupleScheme();
      }
    }

    private static class findUserCDNList_resultTupleScheme extends TupleScheme<findUserCDNList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserCDNList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserCDNList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.UserCDNListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateUserCDNById_args implements org.apache.thrift.TBase<updateUserCDNById_args, updateUserCDNById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserCDNById_args");

    private static final org.apache.thrift.protocol.TField USER_CDNVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("userCDNView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserCDNById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserCDNById_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.UserCDNView userCDNView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_CDNVIEW((short)1, "userCDNView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_CDNVIEW
            return USER_CDNVIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_CDNVIEW, new org.apache.thrift.meta_data.FieldMetaData("userCDNView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.UserCDNView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserCDNById_args.class, metaDataMap);
    }

    public updateUserCDNById_args() {
    }

    public updateUserCDNById_args(
      one.show.manage.thrift.view.UserCDNView userCDNView)
    {
      this();
      this.userCDNView = userCDNView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserCDNById_args(updateUserCDNById_args other) {
      if (other.isSetUserCDNView()) {
        this.userCDNView = new one.show.manage.thrift.view.UserCDNView(other.userCDNView);
      }
    }

    public updateUserCDNById_args deepCopy() {
      return new updateUserCDNById_args(this);
    }

    @Override
    public void clear() {
      this.userCDNView = null;
    }

    public one.show.manage.thrift.view.UserCDNView getUserCDNView() {
      return this.userCDNView;
    }

    public updateUserCDNById_args setUserCDNView(one.show.manage.thrift.view.UserCDNView userCDNView) {
      this.userCDNView = userCDNView;
      return this;
    }

    public void unsetUserCDNView() {
      this.userCDNView = null;
    }

    /** Returns true if field userCDNView is set (has been assigned a value) and false otherwise */
    public boolean isSetUserCDNView() {
      return this.userCDNView != null;
    }

    public void setUserCDNViewIsSet(boolean value) {
      if (!value) {
        this.userCDNView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_CDNVIEW:
        if (value == null) {
          unsetUserCDNView();
        } else {
          setUserCDNView((one.show.manage.thrift.view.UserCDNView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_CDNVIEW:
        return getUserCDNView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_CDNVIEW:
        return isSetUserCDNView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserCDNById_args)
        return this.equals((updateUserCDNById_args)that);
      return false;
    }

    public boolean equals(updateUserCDNById_args that) {
      if (that == null)
        return false;

      boolean this_present_userCDNView = true && this.isSetUserCDNView();
      boolean that_present_userCDNView = true && that.isSetUserCDNView();
      if (this_present_userCDNView || that_present_userCDNView) {
        if (!(this_present_userCDNView && that_present_userCDNView))
          return false;
        if (!this.userCDNView.equals(that.userCDNView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUserCDNById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUserCDNById_args typedOther = (updateUserCDNById_args)other;

      lastComparison = Boolean.valueOf(isSetUserCDNView()).compareTo(typedOther.isSetUserCDNView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserCDNView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCDNView, typedOther.userCDNView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserCDNById_args(");
      boolean first = true;

      sb.append("userCDNView:");
      if (this.userCDNView == null) {
        sb.append("null");
      } else {
        sb.append(this.userCDNView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userCDNView != null) {
        userCDNView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserCDNById_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserCDNById_argsStandardScheme getScheme() {
        return new updateUserCDNById_argsStandardScheme();
      }
    }

    private static class updateUserCDNById_argsStandardScheme extends StandardScheme<updateUserCDNById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserCDNById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_CDNVIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userCDNView = new one.show.manage.thrift.view.UserCDNView();
                struct.userCDNView.read(iprot);
                struct.setUserCDNViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserCDNById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userCDNView != null) {
          oprot.writeFieldBegin(USER_CDNVIEW_FIELD_DESC);
          struct.userCDNView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserCDNById_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserCDNById_argsTupleScheme getScheme() {
        return new updateUserCDNById_argsTupleScheme();
      }
    }

    private static class updateUserCDNById_argsTupleScheme extends TupleScheme<updateUserCDNById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserCDNById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserCDNView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserCDNView()) {
          struct.userCDNView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserCDNById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userCDNView = new one.show.manage.thrift.view.UserCDNView();
          struct.userCDNView.read(iprot);
          struct.setUserCDNViewIsSet(true);
        }
      }
    }

  }

  public static class updateUserCDNById_result implements org.apache.thrift.TBase<updateUserCDNById_result, updateUserCDNById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserCDNById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserCDNById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserCDNById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserCDNById_result.class, metaDataMap);
    }

    public updateUserCDNById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserCDNById_result(updateUserCDNById_result other) {
    }

    public updateUserCDNById_result deepCopy() {
      return new updateUserCDNById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserCDNById_result)
        return this.equals((updateUserCDNById_result)that);
      return false;
    }

    public boolean equals(updateUserCDNById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUserCDNById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUserCDNById_result typedOther = (updateUserCDNById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserCDNById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserCDNById_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserCDNById_resultStandardScheme getScheme() {
        return new updateUserCDNById_resultStandardScheme();
      }
    }

    private static class updateUserCDNById_resultStandardScheme extends StandardScheme<updateUserCDNById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserCDNById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserCDNById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserCDNById_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserCDNById_resultTupleScheme getScheme() {
        return new updateUserCDNById_resultTupleScheme();
      }
    }

    private static class updateUserCDNById_resultTupleScheme extends TupleScheme<updateUserCDNById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserCDNById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserCDNById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteUserCDN_args implements org.apache.thrift.TBase<deleteUserCDN_args, deleteUserCDN_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserCDN_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserCDN_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserCDN_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserCDN_args.class, metaDataMap);
    }

    public deleteUserCDN_args() {
    }

    public deleteUserCDN_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserCDN_args(deleteUserCDN_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public deleteUserCDN_args deepCopy() {
      return new deleteUserCDN_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public deleteUserCDN_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserCDN_args)
        return this.equals((deleteUserCDN_args)that);
      return false;
    }

    public boolean equals(deleteUserCDN_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteUserCDN_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteUserCDN_args typedOther = (deleteUserCDN_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserCDN_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserCDN_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUserCDN_argsStandardScheme getScheme() {
        return new deleteUserCDN_argsStandardScheme();
      }
    }

    private static class deleteUserCDN_argsStandardScheme extends StandardScheme<deleteUserCDN_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserCDN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserCDN_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserCDN_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUserCDN_argsTupleScheme getScheme() {
        return new deleteUserCDN_argsTupleScheme();
      }
    }

    private static class deleteUserCDN_argsTupleScheme extends TupleScheme<deleteUserCDN_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserCDN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserCDN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class deleteUserCDN_result implements org.apache.thrift.TBase<deleteUserCDN_result, deleteUserCDN_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserCDN_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserCDN_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserCDN_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserCDN_result.class, metaDataMap);
    }

    public deleteUserCDN_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserCDN_result(deleteUserCDN_result other) {
    }

    public deleteUserCDN_result deepCopy() {
      return new deleteUserCDN_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserCDN_result)
        return this.equals((deleteUserCDN_result)that);
      return false;
    }

    public boolean equals(deleteUserCDN_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteUserCDN_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteUserCDN_result typedOther = (deleteUserCDN_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserCDN_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserCDN_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUserCDN_resultStandardScheme getScheme() {
        return new deleteUserCDN_resultStandardScheme();
      }
    }

    private static class deleteUserCDN_resultStandardScheme extends StandardScheme<deleteUserCDN_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserCDN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserCDN_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserCDN_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUserCDN_resultTupleScheme getScheme() {
        return new deleteUserCDN_resultTupleScheme();
      }
    }

    private static class deleteUserCDN_resultTupleScheme extends TupleScheme<deleteUserCDN_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserCDN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserCDN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveUserCDN_args implements org.apache.thrift.TBase<saveUserCDN_args, saveUserCDN_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserCDN_args");

    private static final org.apache.thrift.protocol.TField USER_CDNVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("userCDNView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserCDN_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserCDN_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.UserCDNView userCDNView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_CDNVIEW((short)1, "userCDNView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_CDNVIEW
            return USER_CDNVIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_CDNVIEW, new org.apache.thrift.meta_data.FieldMetaData("userCDNView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.UserCDNView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserCDN_args.class, metaDataMap);
    }

    public saveUserCDN_args() {
    }

    public saveUserCDN_args(
      one.show.manage.thrift.view.UserCDNView userCDNView)
    {
      this();
      this.userCDNView = userCDNView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserCDN_args(saveUserCDN_args other) {
      if (other.isSetUserCDNView()) {
        this.userCDNView = new one.show.manage.thrift.view.UserCDNView(other.userCDNView);
      }
    }

    public saveUserCDN_args deepCopy() {
      return new saveUserCDN_args(this);
    }

    @Override
    public void clear() {
      this.userCDNView = null;
    }

    public one.show.manage.thrift.view.UserCDNView getUserCDNView() {
      return this.userCDNView;
    }

    public saveUserCDN_args setUserCDNView(one.show.manage.thrift.view.UserCDNView userCDNView) {
      this.userCDNView = userCDNView;
      return this;
    }

    public void unsetUserCDNView() {
      this.userCDNView = null;
    }

    /** Returns true if field userCDNView is set (has been assigned a value) and false otherwise */
    public boolean isSetUserCDNView() {
      return this.userCDNView != null;
    }

    public void setUserCDNViewIsSet(boolean value) {
      if (!value) {
        this.userCDNView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_CDNVIEW:
        if (value == null) {
          unsetUserCDNView();
        } else {
          setUserCDNView((one.show.manage.thrift.view.UserCDNView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_CDNVIEW:
        return getUserCDNView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_CDNVIEW:
        return isSetUserCDNView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserCDN_args)
        return this.equals((saveUserCDN_args)that);
      return false;
    }

    public boolean equals(saveUserCDN_args that) {
      if (that == null)
        return false;

      boolean this_present_userCDNView = true && this.isSetUserCDNView();
      boolean that_present_userCDNView = true && that.isSetUserCDNView();
      if (this_present_userCDNView || that_present_userCDNView) {
        if (!(this_present_userCDNView && that_present_userCDNView))
          return false;
        if (!this.userCDNView.equals(that.userCDNView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveUserCDN_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveUserCDN_args typedOther = (saveUserCDN_args)other;

      lastComparison = Boolean.valueOf(isSetUserCDNView()).compareTo(typedOther.isSetUserCDNView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserCDNView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCDNView, typedOther.userCDNView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserCDN_args(");
      boolean first = true;

      sb.append("userCDNView:");
      if (this.userCDNView == null) {
        sb.append("null");
      } else {
        sb.append(this.userCDNView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userCDNView != null) {
        userCDNView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserCDN_argsStandardSchemeFactory implements SchemeFactory {
      public saveUserCDN_argsStandardScheme getScheme() {
        return new saveUserCDN_argsStandardScheme();
      }
    }

    private static class saveUserCDN_argsStandardScheme extends StandardScheme<saveUserCDN_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserCDN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_CDNVIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userCDNView = new one.show.manage.thrift.view.UserCDNView();
                struct.userCDNView.read(iprot);
                struct.setUserCDNViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserCDN_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userCDNView != null) {
          oprot.writeFieldBegin(USER_CDNVIEW_FIELD_DESC);
          struct.userCDNView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserCDN_argsTupleSchemeFactory implements SchemeFactory {
      public saveUserCDN_argsTupleScheme getScheme() {
        return new saveUserCDN_argsTupleScheme();
      }
    }

    private static class saveUserCDN_argsTupleScheme extends TupleScheme<saveUserCDN_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserCDN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserCDNView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserCDNView()) {
          struct.userCDNView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserCDN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userCDNView = new one.show.manage.thrift.view.UserCDNView();
          struct.userCDNView.read(iprot);
          struct.setUserCDNViewIsSet(true);
        }
      }
    }

  }

  public static class saveUserCDN_result implements org.apache.thrift.TBase<saveUserCDN_result, saveUserCDN_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUserCDN_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUserCDN_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUserCDN_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUserCDN_result.class, metaDataMap);
    }

    public saveUserCDN_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUserCDN_result(saveUserCDN_result other) {
    }

    public saveUserCDN_result deepCopy() {
      return new saveUserCDN_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUserCDN_result)
        return this.equals((saveUserCDN_result)that);
      return false;
    }

    public boolean equals(saveUserCDN_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveUserCDN_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveUserCDN_result typedOther = (saveUserCDN_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUserCDN_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUserCDN_resultStandardSchemeFactory implements SchemeFactory {
      public saveUserCDN_resultStandardScheme getScheme() {
        return new saveUserCDN_resultStandardScheme();
      }
    }

    private static class saveUserCDN_resultStandardScheme extends StandardScheme<saveUserCDN_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUserCDN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUserCDN_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUserCDN_resultTupleSchemeFactory implements SchemeFactory {
      public saveUserCDN_resultTupleScheme getScheme() {
        return new saveUserCDN_resultTupleScheme();
      }
    }

    private static class saveUserCDN_resultTupleScheme extends TupleScheme<saveUserCDN_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUserCDN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUserCDN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findUserCDNById_args implements org.apache.thrift.TBase<findUserCDNById_args, findUserCDNById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserCDNById_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserCDNById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserCDNById_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserCDNById_args.class, metaDataMap);
    }

    public findUserCDNById_args() {
    }

    public findUserCDNById_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserCDNById_args(findUserCDNById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public findUserCDNById_args deepCopy() {
      return new findUserCDNById_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findUserCDNById_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserCDNById_args)
        return this.equals((findUserCDNById_args)that);
      return false;
    }

    public boolean equals(findUserCDNById_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserCDNById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserCDNById_args typedOther = (findUserCDNById_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserCDNById_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserCDNById_argsStandardSchemeFactory implements SchemeFactory {
      public findUserCDNById_argsStandardScheme getScheme() {
        return new findUserCDNById_argsStandardScheme();
      }
    }

    private static class findUserCDNById_argsStandardScheme extends StandardScheme<findUserCDNById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserCDNById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserCDNById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserCDNById_argsTupleSchemeFactory implements SchemeFactory {
      public findUserCDNById_argsTupleScheme getScheme() {
        return new findUserCDNById_argsTupleScheme();
      }
    }

    private static class findUserCDNById_argsTupleScheme extends TupleScheme<findUserCDNById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserCDNById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserCDNById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class findUserCDNById_result implements org.apache.thrift.TBase<findUserCDNById_result, findUserCDNById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserCDNById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserCDNById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserCDNById_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.UserCDNView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.UserCDNView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserCDNById_result.class, metaDataMap);
    }

    public findUserCDNById_result() {
    }

    public findUserCDNById_result(
      one.show.manage.thrift.view.UserCDNView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserCDNById_result(findUserCDNById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.UserCDNView(other.success);
      }
    }

    public findUserCDNById_result deepCopy() {
      return new findUserCDNById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.UserCDNView getSuccess() {
      return this.success;
    }

    public findUserCDNById_result setSuccess(one.show.manage.thrift.view.UserCDNView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.UserCDNView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserCDNById_result)
        return this.equals((findUserCDNById_result)that);
      return false;
    }

    public boolean equals(findUserCDNById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findUserCDNById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findUserCDNById_result typedOther = (findUserCDNById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserCDNById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserCDNById_resultStandardSchemeFactory implements SchemeFactory {
      public findUserCDNById_resultStandardScheme getScheme() {
        return new findUserCDNById_resultStandardScheme();
      }
    }

    private static class findUserCDNById_resultStandardScheme extends StandardScheme<findUserCDNById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserCDNById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.UserCDNView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserCDNById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserCDNById_resultTupleSchemeFactory implements SchemeFactory {
      public findUserCDNById_resultTupleScheme getScheme() {
        return new findUserCDNById_resultTupleScheme();
      }
    }

    private static class findUserCDNById_resultTupleScheme extends TupleScheme<findUserCDNById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserCDNById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserCDNById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.UserCDNView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findRobotSendGiftRatioList_args implements org.apache.thrift.TBase<findRobotSendGiftRatioList_args, findRobotSendGiftRatioList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRobotSendGiftRatioList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRobotSendGiftRatioList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRobotSendGiftRatioList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRobotSendGiftRatioList_args.class, metaDataMap);
    }

    public findRobotSendGiftRatioList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRobotSendGiftRatioList_args(findRobotSendGiftRatioList_args other) {
    }

    public findRobotSendGiftRatioList_args deepCopy() {
      return new findRobotSendGiftRatioList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRobotSendGiftRatioList_args)
        return this.equals((findRobotSendGiftRatioList_args)that);
      return false;
    }

    public boolean equals(findRobotSendGiftRatioList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRobotSendGiftRatioList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRobotSendGiftRatioList_args typedOther = (findRobotSendGiftRatioList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRobotSendGiftRatioList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRobotSendGiftRatioList_argsStandardSchemeFactory implements SchemeFactory {
      public findRobotSendGiftRatioList_argsStandardScheme getScheme() {
        return new findRobotSendGiftRatioList_argsStandardScheme();
      }
    }

    private static class findRobotSendGiftRatioList_argsStandardScheme extends StandardScheme<findRobotSendGiftRatioList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRobotSendGiftRatioList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRobotSendGiftRatioList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRobotSendGiftRatioList_argsTupleSchemeFactory implements SchemeFactory {
      public findRobotSendGiftRatioList_argsTupleScheme getScheme() {
        return new findRobotSendGiftRatioList_argsTupleScheme();
      }
    }

    private static class findRobotSendGiftRatioList_argsTupleScheme extends TupleScheme<findRobotSendGiftRatioList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRobotSendGiftRatioList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRobotSendGiftRatioList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findRobotSendGiftRatioList_result implements org.apache.thrift.TBase<findRobotSendGiftRatioList_result, findRobotSendGiftRatioList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRobotSendGiftRatioList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRobotSendGiftRatioList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRobotSendGiftRatioList_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.RobotSendGiftRatioView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.RobotSendGiftRatioView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRobotSendGiftRatioList_result.class, metaDataMap);
    }

    public findRobotSendGiftRatioList_result() {
    }

    public findRobotSendGiftRatioList_result(
      List<one.show.manage.thrift.view.RobotSendGiftRatioView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRobotSendGiftRatioList_result(findRobotSendGiftRatioList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.RobotSendGiftRatioView> __this__success = new ArrayList<one.show.manage.thrift.view.RobotSendGiftRatioView>();
        for (one.show.manage.thrift.view.RobotSendGiftRatioView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.RobotSendGiftRatioView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findRobotSendGiftRatioList_result deepCopy() {
      return new findRobotSendGiftRatioList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.RobotSendGiftRatioView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.RobotSendGiftRatioView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.RobotSendGiftRatioView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.RobotSendGiftRatioView> getSuccess() {
      return this.success;
    }

    public findRobotSendGiftRatioList_result setSuccess(List<one.show.manage.thrift.view.RobotSendGiftRatioView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.RobotSendGiftRatioView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRobotSendGiftRatioList_result)
        return this.equals((findRobotSendGiftRatioList_result)that);
      return false;
    }

    public boolean equals(findRobotSendGiftRatioList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRobotSendGiftRatioList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRobotSendGiftRatioList_result typedOther = (findRobotSendGiftRatioList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRobotSendGiftRatioList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRobotSendGiftRatioList_resultStandardSchemeFactory implements SchemeFactory {
      public findRobotSendGiftRatioList_resultStandardScheme getScheme() {
        return new findRobotSendGiftRatioList_resultStandardScheme();
      }
    }

    private static class findRobotSendGiftRatioList_resultStandardScheme extends StandardScheme<findRobotSendGiftRatioList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRobotSendGiftRatioList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.RobotSendGiftRatioView>(_list130.size);
                  for (int _i131 = 0; _i131 < _list130.size; ++_i131)
                  {
                    one.show.manage.thrift.view.RobotSendGiftRatioView _elem132; // required
                    _elem132 = new one.show.manage.thrift.view.RobotSendGiftRatioView();
                    _elem132.read(iprot);
                    struct.success.add(_elem132);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRobotSendGiftRatioList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.RobotSendGiftRatioView _iter133 : struct.success)
            {
              _iter133.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRobotSendGiftRatioList_resultTupleSchemeFactory implements SchemeFactory {
      public findRobotSendGiftRatioList_resultTupleScheme getScheme() {
        return new findRobotSendGiftRatioList_resultTupleScheme();
      }
    }

    private static class findRobotSendGiftRatioList_resultTupleScheme extends TupleScheme<findRobotSendGiftRatioList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRobotSendGiftRatioList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.RobotSendGiftRatioView _iter134 : struct.success)
            {
              _iter134.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRobotSendGiftRatioList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.RobotSendGiftRatioView>(_list135.size);
            for (int _i136 = 0; _i136 < _list135.size; ++_i136)
            {
              one.show.manage.thrift.view.RobotSendGiftRatioView _elem137; // required
              _elem137 = new one.show.manage.thrift.view.RobotSendGiftRatioView();
              _elem137.read(iprot);
              struct.success.add(_elem137);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveRobotSendGiftRatio_args implements org.apache.thrift.TBase<saveRobotSendGiftRatio_args, saveRobotSendGiftRatio_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRobotSendGiftRatio_args");

    private static final org.apache.thrift.protocol.TField ROBOT_SEND_GIFT_RATIO_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("robotSendGiftRatioView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRobotSendGiftRatio_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRobotSendGiftRatio_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROBOT_SEND_GIFT_RATIO_VIEW((short)1, "robotSendGiftRatioView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROBOT_SEND_GIFT_RATIO_VIEW
            return ROBOT_SEND_GIFT_RATIO_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROBOT_SEND_GIFT_RATIO_VIEW, new org.apache.thrift.meta_data.FieldMetaData("robotSendGiftRatioView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.RobotSendGiftRatioView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRobotSendGiftRatio_args.class, metaDataMap);
    }

    public saveRobotSendGiftRatio_args() {
    }

    public saveRobotSendGiftRatio_args(
      one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView)
    {
      this();
      this.robotSendGiftRatioView = robotSendGiftRatioView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRobotSendGiftRatio_args(saveRobotSendGiftRatio_args other) {
      if (other.isSetRobotSendGiftRatioView()) {
        this.robotSendGiftRatioView = new one.show.manage.thrift.view.RobotSendGiftRatioView(other.robotSendGiftRatioView);
      }
    }

    public saveRobotSendGiftRatio_args deepCopy() {
      return new saveRobotSendGiftRatio_args(this);
    }

    @Override
    public void clear() {
      this.robotSendGiftRatioView = null;
    }

    public one.show.manage.thrift.view.RobotSendGiftRatioView getRobotSendGiftRatioView() {
      return this.robotSendGiftRatioView;
    }

    public saveRobotSendGiftRatio_args setRobotSendGiftRatioView(one.show.manage.thrift.view.RobotSendGiftRatioView robotSendGiftRatioView) {
      this.robotSendGiftRatioView = robotSendGiftRatioView;
      return this;
    }

    public void unsetRobotSendGiftRatioView() {
      this.robotSendGiftRatioView = null;
    }

    /** Returns true if field robotSendGiftRatioView is set (has been assigned a value) and false otherwise */
    public boolean isSetRobotSendGiftRatioView() {
      return this.robotSendGiftRatioView != null;
    }

    public void setRobotSendGiftRatioViewIsSet(boolean value) {
      if (!value) {
        this.robotSendGiftRatioView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROBOT_SEND_GIFT_RATIO_VIEW:
        if (value == null) {
          unsetRobotSendGiftRatioView();
        } else {
          setRobotSendGiftRatioView((one.show.manage.thrift.view.RobotSendGiftRatioView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROBOT_SEND_GIFT_RATIO_VIEW:
        return getRobotSendGiftRatioView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROBOT_SEND_GIFT_RATIO_VIEW:
        return isSetRobotSendGiftRatioView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRobotSendGiftRatio_args)
        return this.equals((saveRobotSendGiftRatio_args)that);
      return false;
    }

    public boolean equals(saveRobotSendGiftRatio_args that) {
      if (that == null)
        return false;

      boolean this_present_robotSendGiftRatioView = true && this.isSetRobotSendGiftRatioView();
      boolean that_present_robotSendGiftRatioView = true && that.isSetRobotSendGiftRatioView();
      if (this_present_robotSendGiftRatioView || that_present_robotSendGiftRatioView) {
        if (!(this_present_robotSendGiftRatioView && that_present_robotSendGiftRatioView))
          return false;
        if (!this.robotSendGiftRatioView.equals(that.robotSendGiftRatioView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveRobotSendGiftRatio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveRobotSendGiftRatio_args typedOther = (saveRobotSendGiftRatio_args)other;

      lastComparison = Boolean.valueOf(isSetRobotSendGiftRatioView()).compareTo(typedOther.isSetRobotSendGiftRatioView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRobotSendGiftRatioView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robotSendGiftRatioView, typedOther.robotSendGiftRatioView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRobotSendGiftRatio_args(");
      boolean first = true;

      sb.append("robotSendGiftRatioView:");
      if (this.robotSendGiftRatioView == null) {
        sb.append("null");
      } else {
        sb.append(this.robotSendGiftRatioView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (robotSendGiftRatioView != null) {
        robotSendGiftRatioView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRobotSendGiftRatio_argsStandardSchemeFactory implements SchemeFactory {
      public saveRobotSendGiftRatio_argsStandardScheme getScheme() {
        return new saveRobotSendGiftRatio_argsStandardScheme();
      }
    }

    private static class saveRobotSendGiftRatio_argsStandardScheme extends StandardScheme<saveRobotSendGiftRatio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRobotSendGiftRatio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROBOT_SEND_GIFT_RATIO_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.robotSendGiftRatioView = new one.show.manage.thrift.view.RobotSendGiftRatioView();
                struct.robotSendGiftRatioView.read(iprot);
                struct.setRobotSendGiftRatioViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRobotSendGiftRatio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.robotSendGiftRatioView != null) {
          oprot.writeFieldBegin(ROBOT_SEND_GIFT_RATIO_VIEW_FIELD_DESC);
          struct.robotSendGiftRatioView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRobotSendGiftRatio_argsTupleSchemeFactory implements SchemeFactory {
      public saveRobotSendGiftRatio_argsTupleScheme getScheme() {
        return new saveRobotSendGiftRatio_argsTupleScheme();
      }
    }

    private static class saveRobotSendGiftRatio_argsTupleScheme extends TupleScheme<saveRobotSendGiftRatio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRobotSendGiftRatio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRobotSendGiftRatioView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRobotSendGiftRatioView()) {
          struct.robotSendGiftRatioView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRobotSendGiftRatio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.robotSendGiftRatioView = new one.show.manage.thrift.view.RobotSendGiftRatioView();
          struct.robotSendGiftRatioView.read(iprot);
          struct.setRobotSendGiftRatioViewIsSet(true);
        }
      }
    }

  }

  public static class saveRobotSendGiftRatio_result implements org.apache.thrift.TBase<saveRobotSendGiftRatio_result, saveRobotSendGiftRatio_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRobotSendGiftRatio_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRobotSendGiftRatio_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRobotSendGiftRatio_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRobotSendGiftRatio_result.class, metaDataMap);
    }

    public saveRobotSendGiftRatio_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRobotSendGiftRatio_result(saveRobotSendGiftRatio_result other) {
    }

    public saveRobotSendGiftRatio_result deepCopy() {
      return new saveRobotSendGiftRatio_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRobotSendGiftRatio_result)
        return this.equals((saveRobotSendGiftRatio_result)that);
      return false;
    }

    public boolean equals(saveRobotSendGiftRatio_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveRobotSendGiftRatio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveRobotSendGiftRatio_result typedOther = (saveRobotSendGiftRatio_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRobotSendGiftRatio_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRobotSendGiftRatio_resultStandardSchemeFactory implements SchemeFactory {
      public saveRobotSendGiftRatio_resultStandardScheme getScheme() {
        return new saveRobotSendGiftRatio_resultStandardScheme();
      }
    }

    private static class saveRobotSendGiftRatio_resultStandardScheme extends StandardScheme<saveRobotSendGiftRatio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRobotSendGiftRatio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRobotSendGiftRatio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRobotSendGiftRatio_resultTupleSchemeFactory implements SchemeFactory {
      public saveRobotSendGiftRatio_resultTupleScheme getScheme() {
        return new saveRobotSendGiftRatio_resultTupleScheme();
      }
    }

    private static class saveRobotSendGiftRatio_resultTupleScheme extends TupleScheme<saveRobotSendGiftRatio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRobotSendGiftRatio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRobotSendGiftRatio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
