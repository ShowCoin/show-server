/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SendExchangeView implements org.apache.thrift.TBase<SendExchangeView, SendExchangeView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendExchangeView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SEND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SEND_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("sendBy", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField VIP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("vipType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField GOLD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("goldNum", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SendExchangeViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SendExchangeViewTupleSchemeFactory());
  }

  public int id; // required
  public int sendType; // required
  public String sendBy; // required
  public long uid; // required
  public int vipType; // required
  public int createAt; // required
  public double goldNum; // required
  public String reason; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SEND_TYPE((short)2, "sendType"),
    SEND_BY((short)3, "sendBy"),
    UID((short)4, "uid"),
    VIP_TYPE((short)5, "vipType"),
    CREATE_AT((short)6, "createAt"),
    GOLD_NUM((short)7, "goldNum"),
    REASON((short)8, "reason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SEND_TYPE
          return SEND_TYPE;
        case 3: // SEND_BY
          return SEND_BY;
        case 4: // UID
          return UID;
        case 5: // VIP_TYPE
          return VIP_TYPE;
        case 6: // CREATE_AT
          return CREATE_AT;
        case 7: // GOLD_NUM
          return GOLD_NUM;
        case 8: // REASON
          return REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SENDTYPE_ISSET_ID = 1;
  private static final int __UID_ISSET_ID = 2;
  private static final int __VIPTYPE_ISSET_ID = 3;
  private static final int __CREATEAT_ISSET_ID = 4;
  private static final int __GOLDNUM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sendType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_BY, new org.apache.thrift.meta_data.FieldMetaData("sendBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("vipType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOLD_NUM, new org.apache.thrift.meta_data.FieldMetaData("goldNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendExchangeView.class, metaDataMap);
  }

  public SendExchangeView() {
  }

  public SendExchangeView(
    int id,
    int sendType,
    String sendBy,
    long uid,
    int vipType,
    int createAt,
    double goldNum,
    String reason)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.sendType = sendType;
    setSendTypeIsSet(true);
    this.sendBy = sendBy;
    this.uid = uid;
    setUidIsSet(true);
    this.vipType = vipType;
    setVipTypeIsSet(true);
    this.createAt = createAt;
    setCreateAtIsSet(true);
    this.goldNum = goldNum;
    setGoldNumIsSet(true);
    this.reason = reason;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SendExchangeView(SendExchangeView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.sendType = other.sendType;
    if (other.isSetSendBy()) {
      this.sendBy = other.sendBy;
    }
    this.uid = other.uid;
    this.vipType = other.vipType;
    this.createAt = other.createAt;
    this.goldNum = other.goldNum;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
  }

  public SendExchangeView deepCopy() {
    return new SendExchangeView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setSendTypeIsSet(false);
    this.sendType = 0;
    this.sendBy = null;
    setUidIsSet(false);
    this.uid = 0;
    setVipTypeIsSet(false);
    this.vipType = 0;
    setCreateAtIsSet(false);
    this.createAt = 0;
    setGoldNumIsSet(false);
    this.goldNum = 0.0;
    this.reason = null;
  }

  public int getId() {
    return this.id;
  }

  public SendExchangeView setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getSendType() {
    return this.sendType;
  }

  public SendExchangeView setSendType(int sendType) {
    this.sendType = sendType;
    setSendTypeIsSet(true);
    return this;
  }

  public void unsetSendType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTYPE_ISSET_ID);
  }

  /** Returns true if field sendType is set (has been assigned a value) and false otherwise */
  public boolean isSetSendType() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDTYPE_ISSET_ID);
  }

  public void setSendTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTYPE_ISSET_ID, value);
  }

  public String getSendBy() {
    return this.sendBy;
  }

  public SendExchangeView setSendBy(String sendBy) {
    this.sendBy = sendBy;
    return this;
  }

  public void unsetSendBy() {
    this.sendBy = null;
  }

  /** Returns true if field sendBy is set (has been assigned a value) and false otherwise */
  public boolean isSetSendBy() {
    return this.sendBy != null;
  }

  public void setSendByIsSet(boolean value) {
    if (!value) {
      this.sendBy = null;
    }
  }

  public long getUid() {
    return this.uid;
  }

  public SendExchangeView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getVipType() {
    return this.vipType;
  }

  public SendExchangeView setVipType(int vipType) {
    this.vipType = vipType;
    setVipTypeIsSet(true);
    return this;
  }

  public void unsetVipType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPTYPE_ISSET_ID);
  }

  /** Returns true if field vipType is set (has been assigned a value) and false otherwise */
  public boolean isSetVipType() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPTYPE_ISSET_ID);
  }

  public void setVipTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPTYPE_ISSET_ID, value);
  }

  public int getCreateAt() {
    return this.createAt;
  }

  public SendExchangeView setCreateAt(int createAt) {
    this.createAt = createAt;
    setCreateAtIsSet(true);
    return this;
  }

  public void unsetCreateAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEAT_ISSET_ID);
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEAT_ISSET_ID);
  }

  public void setCreateAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEAT_ISSET_ID, value);
  }

  public double getGoldNum() {
    return this.goldNum;
  }

  public SendExchangeView setGoldNum(double goldNum) {
    this.goldNum = goldNum;
    setGoldNumIsSet(true);
    return this;
  }

  public void unsetGoldNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOLDNUM_ISSET_ID);
  }

  /** Returns true if field goldNum is set (has been assigned a value) and false otherwise */
  public boolean isSetGoldNum() {
    return EncodingUtils.testBit(__isset_bitfield, __GOLDNUM_ISSET_ID);
  }

  public void setGoldNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOLDNUM_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public SendExchangeView setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case SEND_TYPE:
      if (value == null) {
        unsetSendType();
      } else {
        setSendType((Integer)value);
      }
      break;

    case SEND_BY:
      if (value == null) {
        unsetSendBy();
      } else {
        setSendBy((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case VIP_TYPE:
      if (value == null) {
        unsetVipType();
      } else {
        setVipType((Integer)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((Integer)value);
      }
      break;

    case GOLD_NUM:
      if (value == null) {
        unsetGoldNum();
      } else {
        setGoldNum((Double)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case SEND_TYPE:
      return Integer.valueOf(getSendType());

    case SEND_BY:
      return getSendBy();

    case UID:
      return Long.valueOf(getUid());

    case VIP_TYPE:
      return Integer.valueOf(getVipType());

    case CREATE_AT:
      return Integer.valueOf(getCreateAt());

    case GOLD_NUM:
      return Double.valueOf(getGoldNum());

    case REASON:
      return getReason();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SEND_TYPE:
      return isSetSendType();
    case SEND_BY:
      return isSetSendBy();
    case UID:
      return isSetUid();
    case VIP_TYPE:
      return isSetVipType();
    case CREATE_AT:
      return isSetCreateAt();
    case GOLD_NUM:
      return isSetGoldNum();
    case REASON:
      return isSetReason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SendExchangeView)
      return this.equals((SendExchangeView)that);
    return false;
  }

  public boolean equals(SendExchangeView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_sendType = true;
    boolean that_present_sendType = true;
    if (this_present_sendType || that_present_sendType) {
      if (!(this_present_sendType && that_present_sendType))
        return false;
      if (this.sendType != that.sendType)
        return false;
    }

    boolean this_present_sendBy = true && this.isSetSendBy();
    boolean that_present_sendBy = true && that.isSetSendBy();
    if (this_present_sendBy || that_present_sendBy) {
      if (!(this_present_sendBy && that_present_sendBy))
        return false;
      if (!this.sendBy.equals(that.sendBy))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_vipType = true;
    boolean that_present_vipType = true;
    if (this_present_vipType || that_present_vipType) {
      if (!(this_present_vipType && that_present_vipType))
        return false;
      if (this.vipType != that.vipType)
        return false;
    }

    boolean this_present_createAt = true;
    boolean that_present_createAt = true;
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (this.createAt != that.createAt)
        return false;
    }

    boolean this_present_goldNum = true;
    boolean that_present_goldNum = true;
    if (this_present_goldNum || that_present_goldNum) {
      if (!(this_present_goldNum && that_present_goldNum))
        return false;
      if (this.goldNum != that.goldNum)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SendExchangeView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SendExchangeView typedOther = (SendExchangeView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendType()).compareTo(typedOther.isSetSendType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendType, typedOther.sendType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendBy()).compareTo(typedOther.isSetSendBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendBy, typedOther.sendBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipType()).compareTo(typedOther.isSetVipType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipType, typedOther.vipType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(typedOther.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, typedOther.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoldNum()).compareTo(typedOther.isSetGoldNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoldNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldNum, typedOther.goldNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SendExchangeView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendType:");
    sb.append(this.sendType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendBy:");
    if (this.sendBy == null) {
      sb.append("null");
    } else {
      sb.append(this.sendBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipType:");
    sb.append(this.vipType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createAt:");
    sb.append(this.createAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("goldNum:");
    sb.append(this.goldNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SendExchangeViewStandardSchemeFactory implements SchemeFactory {
    public SendExchangeViewStandardScheme getScheme() {
      return new SendExchangeViewStandardScheme();
    }
  }

  private static class SendExchangeViewStandardScheme extends StandardScheme<SendExchangeView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SendExchangeView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendType = iprot.readI32();
              struct.setSendTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEND_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendBy = iprot.readString();
              struct.setSendByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipType = iprot.readI32();
              struct.setVipTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createAt = iprot.readI32();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GOLD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.goldNum = iprot.readDouble();
              struct.setGoldNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SendExchangeView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEND_TYPE_FIELD_DESC);
      oprot.writeI32(struct.sendType);
      oprot.writeFieldEnd();
      if (struct.sendBy != null) {
        oprot.writeFieldBegin(SEND_BY_FIELD_DESC);
        oprot.writeString(struct.sendBy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_TYPE_FIELD_DESC);
      oprot.writeI32(struct.vipType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
      oprot.writeI32(struct.createAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GOLD_NUM_FIELD_DESC);
      oprot.writeDouble(struct.goldNum);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SendExchangeViewTupleSchemeFactory implements SchemeFactory {
    public SendExchangeViewTupleScheme getScheme() {
      return new SendExchangeViewTupleScheme();
    }
  }

  private static class SendExchangeViewTupleScheme extends TupleScheme<SendExchangeView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SendExchangeView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSendType()) {
        optionals.set(1);
      }
      if (struct.isSetSendBy()) {
        optionals.set(2);
      }
      if (struct.isSetUid()) {
        optionals.set(3);
      }
      if (struct.isSetVipType()) {
        optionals.set(4);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(5);
      }
      if (struct.isSetGoldNum()) {
        optionals.set(6);
      }
      if (struct.isSetReason()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetSendType()) {
        oprot.writeI32(struct.sendType);
      }
      if (struct.isSetSendBy()) {
        oprot.writeString(struct.sendBy);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetVipType()) {
        oprot.writeI32(struct.vipType);
      }
      if (struct.isSetCreateAt()) {
        oprot.writeI32(struct.createAt);
      }
      if (struct.isSetGoldNum()) {
        oprot.writeDouble(struct.goldNum);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SendExchangeView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sendType = iprot.readI32();
        struct.setSendTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sendBy = iprot.readString();
        struct.setSendByIsSet(true);
      }
      if (incoming.get(3)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vipType = iprot.readI32();
        struct.setVipTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createAt = iprot.readI32();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.goldNum = iprot.readDouble();
        struct.setGoldNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
    }
  }

}

