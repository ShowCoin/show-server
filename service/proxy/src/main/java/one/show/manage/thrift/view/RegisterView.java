/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RegisterView implements org.apache.thrift.TBase<RegisterView, RegisterView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterView");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPlace", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("bankBranch", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IDENTITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identityNo", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IDENTITY_FRONT_FIELD_DESC = new org.apache.thrift.protocol.TField("identityFront", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IDENTITY_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("identityBack", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IDENTITY_VERIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("identityVerify", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountType", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ALIPAY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayNo", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ALIPAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PHONE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNo", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegisterViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegisterViewTupleSchemeFactory());
  }

  public String uid; // required
  public int status; // required
  public String reason; // required
  public int createTime; // required
  public int updateTime; // required
  public String userName; // required
  public String bankName; // required
  public String bankPlace; // required
  public String bankBranch; // required
  public String bankNo; // required
  public String identityNo; // required
  public String identityFront; // required
  public String identityBack; // required
  public String identityVerify; // required
  public int accountType; // required
  public String alipayNo; // required
  public String alipayName; // required
  public String phoneNo; // required
  public String qq; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    STATUS((short)2, "status"),
    REASON((short)3, "reason"),
    CREATE_TIME((short)4, "createTime"),
    UPDATE_TIME((short)5, "updateTime"),
    USER_NAME((short)6, "userName"),
    BANK_NAME((short)7, "bankName"),
    BANK_PLACE((short)8, "bankPlace"),
    BANK_BRANCH((short)9, "bankBranch"),
    BANK_NO((short)10, "bankNo"),
    IDENTITY_NO((short)11, "identityNo"),
    IDENTITY_FRONT((short)12, "identityFront"),
    IDENTITY_BACK((short)13, "identityBack"),
    IDENTITY_VERIFY((short)14, "identityVerify"),
    ACCOUNT_TYPE((short)15, "accountType"),
    ALIPAY_NO((short)16, "alipayNo"),
    ALIPAY_NAME((short)17, "alipayName"),
    PHONE_NO((short)18, "phoneNo"),
    QQ((short)19, "qq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // STATUS
          return STATUS;
        case 3: // REASON
          return REASON;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        case 5: // UPDATE_TIME
          return UPDATE_TIME;
        case 6: // USER_NAME
          return USER_NAME;
        case 7: // BANK_NAME
          return BANK_NAME;
        case 8: // BANK_PLACE
          return BANK_PLACE;
        case 9: // BANK_BRANCH
          return BANK_BRANCH;
        case 10: // BANK_NO
          return BANK_NO;
        case 11: // IDENTITY_NO
          return IDENTITY_NO;
        case 12: // IDENTITY_FRONT
          return IDENTITY_FRONT;
        case 13: // IDENTITY_BACK
          return IDENTITY_BACK;
        case 14: // IDENTITY_VERIFY
          return IDENTITY_VERIFY;
        case 15: // ACCOUNT_TYPE
          return ACCOUNT_TYPE;
        case 16: // ALIPAY_NO
          return ALIPAY_NO;
        case 17: // ALIPAY_NAME
          return ALIPAY_NAME;
        case 18: // PHONE_NO
          return PHONE_NO;
        case 19: // QQ
          return QQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __ACCOUNTTYPE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_PLACE, new org.apache.thrift.meta_data.FieldMetaData("bankPlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("bankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_NO, new org.apache.thrift.meta_data.FieldMetaData("identityNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_FRONT, new org.apache.thrift.meta_data.FieldMetaData("identityFront", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_BACK, new org.apache.thrift.meta_data.FieldMetaData("identityBack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_VERIFY, new org.apache.thrift.meta_data.FieldMetaData("identityVerify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALIPAY_NO, new org.apache.thrift.meta_data.FieldMetaData("alipayNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIPAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("alipayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NO, new org.apache.thrift.meta_data.FieldMetaData("phoneNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterView.class, metaDataMap);
  }

  public RegisterView() {
  }

  public RegisterView(
    String uid,
    int status,
    String reason,
    int createTime,
    int updateTime,
    String userName,
    String bankName,
    String bankPlace,
    String bankBranch,
    String bankNo,
    String identityNo,
    String identityFront,
    String identityBack,
    String identityVerify,
    int accountType,
    String alipayNo,
    String alipayName,
    String phoneNo,
    String qq)
  {
    this();
    this.uid = uid;
    this.status = status;
    setStatusIsSet(true);
    this.reason = reason;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.userName = userName;
    this.bankName = bankName;
    this.bankPlace = bankPlace;
    this.bankBranch = bankBranch;
    this.bankNo = bankNo;
    this.identityNo = identityNo;
    this.identityFront = identityFront;
    this.identityBack = identityBack;
    this.identityVerify = identityVerify;
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    this.alipayNo = alipayNo;
    this.alipayName = alipayName;
    this.phoneNo = phoneNo;
    this.qq = qq;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegisterView(RegisterView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    this.status = other.status;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetBankPlace()) {
      this.bankPlace = other.bankPlace;
    }
    if (other.isSetBankBranch()) {
      this.bankBranch = other.bankBranch;
    }
    if (other.isSetBankNo()) {
      this.bankNo = other.bankNo;
    }
    if (other.isSetIdentityNo()) {
      this.identityNo = other.identityNo;
    }
    if (other.isSetIdentityFront()) {
      this.identityFront = other.identityFront;
    }
    if (other.isSetIdentityBack()) {
      this.identityBack = other.identityBack;
    }
    if (other.isSetIdentityVerify()) {
      this.identityVerify = other.identityVerify;
    }
    this.accountType = other.accountType;
    if (other.isSetAlipayNo()) {
      this.alipayNo = other.alipayNo;
    }
    if (other.isSetAlipayName()) {
      this.alipayName = other.alipayName;
    }
    if (other.isSetPhoneNo()) {
      this.phoneNo = other.phoneNo;
    }
    if (other.isSetQq()) {
      this.qq = other.qq;
    }
  }

  public RegisterView deepCopy() {
    return new RegisterView(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    setStatusIsSet(false);
    this.status = 0;
    this.reason = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.userName = null;
    this.bankName = null;
    this.bankPlace = null;
    this.bankBranch = null;
    this.bankNo = null;
    this.identityNo = null;
    this.identityFront = null;
    this.identityBack = null;
    this.identityVerify = null;
    setAccountTypeIsSet(false);
    this.accountType = 0;
    this.alipayNo = null;
    this.alipayName = null;
    this.phoneNo = null;
    this.qq = null;
  }

  public String getUid() {
    return this.uid;
  }

  public RegisterView setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public RegisterView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public RegisterView setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public RegisterView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public RegisterView setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public RegisterView setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public RegisterView setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getBankPlace() {
    return this.bankPlace;
  }

  public RegisterView setBankPlace(String bankPlace) {
    this.bankPlace = bankPlace;
    return this;
  }

  public void unsetBankPlace() {
    this.bankPlace = null;
  }

  /** Returns true if field bankPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPlace() {
    return this.bankPlace != null;
  }

  public void setBankPlaceIsSet(boolean value) {
    if (!value) {
      this.bankPlace = null;
    }
  }

  public String getBankBranch() {
    return this.bankBranch;
  }

  public RegisterView setBankBranch(String bankBranch) {
    this.bankBranch = bankBranch;
    return this;
  }

  public void unsetBankBranch() {
    this.bankBranch = null;
  }

  /** Returns true if field bankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetBankBranch() {
    return this.bankBranch != null;
  }

  public void setBankBranchIsSet(boolean value) {
    if (!value) {
      this.bankBranch = null;
    }
  }

  public String getBankNo() {
    return this.bankNo;
  }

  public RegisterView setBankNo(String bankNo) {
    this.bankNo = bankNo;
    return this;
  }

  public void unsetBankNo() {
    this.bankNo = null;
  }

  /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNo() {
    return this.bankNo != null;
  }

  public void setBankNoIsSet(boolean value) {
    if (!value) {
      this.bankNo = null;
    }
  }

  public String getIdentityNo() {
    return this.identityNo;
  }

  public RegisterView setIdentityNo(String identityNo) {
    this.identityNo = identityNo;
    return this;
  }

  public void unsetIdentityNo() {
    this.identityNo = null;
  }

  /** Returns true if field identityNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityNo() {
    return this.identityNo != null;
  }

  public void setIdentityNoIsSet(boolean value) {
    if (!value) {
      this.identityNo = null;
    }
  }

  public String getIdentityFront() {
    return this.identityFront;
  }

  public RegisterView setIdentityFront(String identityFront) {
    this.identityFront = identityFront;
    return this;
  }

  public void unsetIdentityFront() {
    this.identityFront = null;
  }

  /** Returns true if field identityFront is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityFront() {
    return this.identityFront != null;
  }

  public void setIdentityFrontIsSet(boolean value) {
    if (!value) {
      this.identityFront = null;
    }
  }

  public String getIdentityBack() {
    return this.identityBack;
  }

  public RegisterView setIdentityBack(String identityBack) {
    this.identityBack = identityBack;
    return this;
  }

  public void unsetIdentityBack() {
    this.identityBack = null;
  }

  /** Returns true if field identityBack is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityBack() {
    return this.identityBack != null;
  }

  public void setIdentityBackIsSet(boolean value) {
    if (!value) {
      this.identityBack = null;
    }
  }

  public String getIdentityVerify() {
    return this.identityVerify;
  }

  public RegisterView setIdentityVerify(String identityVerify) {
    this.identityVerify = identityVerify;
    return this;
  }

  public void unsetIdentityVerify() {
    this.identityVerify = null;
  }

  /** Returns true if field identityVerify is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityVerify() {
    return this.identityVerify != null;
  }

  public void setIdentityVerifyIsSet(boolean value) {
    if (!value) {
      this.identityVerify = null;
    }
  }

  public int getAccountType() {
    return this.accountType;
  }

  public RegisterView setAccountType(int accountType) {
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    return this;
  }

  public void unsetAccountType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  /** Returns true if field accountType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  public void setAccountTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID, value);
  }

  public String getAlipayNo() {
    return this.alipayNo;
  }

  public RegisterView setAlipayNo(String alipayNo) {
    this.alipayNo = alipayNo;
    return this;
  }

  public void unsetAlipayNo() {
    this.alipayNo = null;
  }

  /** Returns true if field alipayNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipayNo() {
    return this.alipayNo != null;
  }

  public void setAlipayNoIsSet(boolean value) {
    if (!value) {
      this.alipayNo = null;
    }
  }

  public String getAlipayName() {
    return this.alipayName;
  }

  public RegisterView setAlipayName(String alipayName) {
    this.alipayName = alipayName;
    return this;
  }

  public void unsetAlipayName() {
    this.alipayName = null;
  }

  /** Returns true if field alipayName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipayName() {
    return this.alipayName != null;
  }

  public void setAlipayNameIsSet(boolean value) {
    if (!value) {
      this.alipayName = null;
    }
  }

  public String getPhoneNo() {
    return this.phoneNo;
  }

  public RegisterView setPhoneNo(String phoneNo) {
    this.phoneNo = phoneNo;
    return this;
  }

  public void unsetPhoneNo() {
    this.phoneNo = null;
  }

  /** Returns true if field phoneNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNo() {
    return this.phoneNo != null;
  }

  public void setPhoneNoIsSet(boolean value) {
    if (!value) {
      this.phoneNo = null;
    }
  }

  public String getQq() {
    return this.qq;
  }

  public RegisterView setQq(String qq) {
    this.qq = qq;
    return this;
  }

  public void unsetQq() {
    this.qq = null;
  }

  /** Returns true if field qq is set (has been assigned a value) and false otherwise */
  public boolean isSetQq() {
    return this.qq != null;
  }

  public void setQqIsSet(boolean value) {
    if (!value) {
      this.qq = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BANK_PLACE:
      if (value == null) {
        unsetBankPlace();
      } else {
        setBankPlace((String)value);
      }
      break;

    case BANK_BRANCH:
      if (value == null) {
        unsetBankBranch();
      } else {
        setBankBranch((String)value);
      }
      break;

    case BANK_NO:
      if (value == null) {
        unsetBankNo();
      } else {
        setBankNo((String)value);
      }
      break;

    case IDENTITY_NO:
      if (value == null) {
        unsetIdentityNo();
      } else {
        setIdentityNo((String)value);
      }
      break;

    case IDENTITY_FRONT:
      if (value == null) {
        unsetIdentityFront();
      } else {
        setIdentityFront((String)value);
      }
      break;

    case IDENTITY_BACK:
      if (value == null) {
        unsetIdentityBack();
      } else {
        setIdentityBack((String)value);
      }
      break;

    case IDENTITY_VERIFY:
      if (value == null) {
        unsetIdentityVerify();
      } else {
        setIdentityVerify((String)value);
      }
      break;

    case ACCOUNT_TYPE:
      if (value == null) {
        unsetAccountType();
      } else {
        setAccountType((Integer)value);
      }
      break;

    case ALIPAY_NO:
      if (value == null) {
        unsetAlipayNo();
      } else {
        setAlipayNo((String)value);
      }
      break;

    case ALIPAY_NAME:
      if (value == null) {
        unsetAlipayName();
      } else {
        setAlipayName((String)value);
      }
      break;

    case PHONE_NO:
      if (value == null) {
        unsetPhoneNo();
      } else {
        setPhoneNo((String)value);
      }
      break;

    case QQ:
      if (value == null) {
        unsetQq();
      } else {
        setQq((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case STATUS:
      return Integer.valueOf(getStatus());

    case REASON:
      return getReason();

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    case USER_NAME:
      return getUserName();

    case BANK_NAME:
      return getBankName();

    case BANK_PLACE:
      return getBankPlace();

    case BANK_BRANCH:
      return getBankBranch();

    case BANK_NO:
      return getBankNo();

    case IDENTITY_NO:
      return getIdentityNo();

    case IDENTITY_FRONT:
      return getIdentityFront();

    case IDENTITY_BACK:
      return getIdentityBack();

    case IDENTITY_VERIFY:
      return getIdentityVerify();

    case ACCOUNT_TYPE:
      return Integer.valueOf(getAccountType());

    case ALIPAY_NO:
      return getAlipayNo();

    case ALIPAY_NAME:
      return getAlipayName();

    case PHONE_NO:
      return getPhoneNo();

    case QQ:
      return getQq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case STATUS:
      return isSetStatus();
    case REASON:
      return isSetReason();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case USER_NAME:
      return isSetUserName();
    case BANK_NAME:
      return isSetBankName();
    case BANK_PLACE:
      return isSetBankPlace();
    case BANK_BRANCH:
      return isSetBankBranch();
    case BANK_NO:
      return isSetBankNo();
    case IDENTITY_NO:
      return isSetIdentityNo();
    case IDENTITY_FRONT:
      return isSetIdentityFront();
    case IDENTITY_BACK:
      return isSetIdentityBack();
    case IDENTITY_VERIFY:
      return isSetIdentityVerify();
    case ACCOUNT_TYPE:
      return isSetAccountType();
    case ALIPAY_NO:
      return isSetAlipayNo();
    case ALIPAY_NAME:
      return isSetAlipayName();
    case PHONE_NO:
      return isSetPhoneNo();
    case QQ:
      return isSetQq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegisterView)
      return this.equals((RegisterView)that);
    return false;
  }

  public boolean equals(RegisterView that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_bankPlace = true && this.isSetBankPlace();
    boolean that_present_bankPlace = true && that.isSetBankPlace();
    if (this_present_bankPlace || that_present_bankPlace) {
      if (!(this_present_bankPlace && that_present_bankPlace))
        return false;
      if (!this.bankPlace.equals(that.bankPlace))
        return false;
    }

    boolean this_present_bankBranch = true && this.isSetBankBranch();
    boolean that_present_bankBranch = true && that.isSetBankBranch();
    if (this_present_bankBranch || that_present_bankBranch) {
      if (!(this_present_bankBranch && that_present_bankBranch))
        return false;
      if (!this.bankBranch.equals(that.bankBranch))
        return false;
    }

    boolean this_present_bankNo = true && this.isSetBankNo();
    boolean that_present_bankNo = true && that.isSetBankNo();
    if (this_present_bankNo || that_present_bankNo) {
      if (!(this_present_bankNo && that_present_bankNo))
        return false;
      if (!this.bankNo.equals(that.bankNo))
        return false;
    }

    boolean this_present_identityNo = true && this.isSetIdentityNo();
    boolean that_present_identityNo = true && that.isSetIdentityNo();
    if (this_present_identityNo || that_present_identityNo) {
      if (!(this_present_identityNo && that_present_identityNo))
        return false;
      if (!this.identityNo.equals(that.identityNo))
        return false;
    }

    boolean this_present_identityFront = true && this.isSetIdentityFront();
    boolean that_present_identityFront = true && that.isSetIdentityFront();
    if (this_present_identityFront || that_present_identityFront) {
      if (!(this_present_identityFront && that_present_identityFront))
        return false;
      if (!this.identityFront.equals(that.identityFront))
        return false;
    }

    boolean this_present_identityBack = true && this.isSetIdentityBack();
    boolean that_present_identityBack = true && that.isSetIdentityBack();
    if (this_present_identityBack || that_present_identityBack) {
      if (!(this_present_identityBack && that_present_identityBack))
        return false;
      if (!this.identityBack.equals(that.identityBack))
        return false;
    }

    boolean this_present_identityVerify = true && this.isSetIdentityVerify();
    boolean that_present_identityVerify = true && that.isSetIdentityVerify();
    if (this_present_identityVerify || that_present_identityVerify) {
      if (!(this_present_identityVerify && that_present_identityVerify))
        return false;
      if (!this.identityVerify.equals(that.identityVerify))
        return false;
    }

    boolean this_present_accountType = true;
    boolean that_present_accountType = true;
    if (this_present_accountType || that_present_accountType) {
      if (!(this_present_accountType && that_present_accountType))
        return false;
      if (this.accountType != that.accountType)
        return false;
    }

    boolean this_present_alipayNo = true && this.isSetAlipayNo();
    boolean that_present_alipayNo = true && that.isSetAlipayNo();
    if (this_present_alipayNo || that_present_alipayNo) {
      if (!(this_present_alipayNo && that_present_alipayNo))
        return false;
      if (!this.alipayNo.equals(that.alipayNo))
        return false;
    }

    boolean this_present_alipayName = true && this.isSetAlipayName();
    boolean that_present_alipayName = true && that.isSetAlipayName();
    if (this_present_alipayName || that_present_alipayName) {
      if (!(this_present_alipayName && that_present_alipayName))
        return false;
      if (!this.alipayName.equals(that.alipayName))
        return false;
    }

    boolean this_present_phoneNo = true && this.isSetPhoneNo();
    boolean that_present_phoneNo = true && that.isSetPhoneNo();
    if (this_present_phoneNo || that_present_phoneNo) {
      if (!(this_present_phoneNo && that_present_phoneNo))
        return false;
      if (!this.phoneNo.equals(that.phoneNo))
        return false;
    }

    boolean this_present_qq = true && this.isSetQq();
    boolean that_present_qq = true && that.isSetQq();
    if (this_present_qq || that_present_qq) {
      if (!(this_present_qq && that_present_qq))
        return false;
      if (!this.qq.equals(that.qq))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RegisterView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RegisterView typedOther = (RegisterView)other;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(typedOther.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, typedOther.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPlace()).compareTo(typedOther.isSetBankPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPlace, typedOther.bankPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankBranch()).compareTo(typedOther.isSetBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankBranch, typedOther.bankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(typedOther.isSetBankNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, typedOther.bankNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityNo()).compareTo(typedOther.isSetIdentityNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityNo, typedOther.identityNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityFront()).compareTo(typedOther.isSetIdentityFront());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityFront()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityFront, typedOther.identityFront);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityBack()).compareTo(typedOther.isSetIdentityBack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityBack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityBack, typedOther.identityBack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityVerify()).compareTo(typedOther.isSetIdentityVerify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityVerify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityVerify, typedOther.identityVerify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountType()).compareTo(typedOther.isSetAccountType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountType, typedOther.accountType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipayNo()).compareTo(typedOther.isSetAlipayNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipayNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayNo, typedOther.alipayNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipayName()).compareTo(typedOther.isSetAlipayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayName, typedOther.alipayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNo()).compareTo(typedOther.isSetPhoneNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNo, typedOther.phoneNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQq()).compareTo(typedOther.isSetQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, typedOther.qq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegisterView(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPlace:");
    if (this.bankPlace == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPlace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankBranch:");
    if (this.bankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.bankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNo:");
    if (this.bankNo == null) {
      sb.append("null");
    } else {
      sb.append(this.bankNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityNo:");
    if (this.identityNo == null) {
      sb.append("null");
    } else {
      sb.append(this.identityNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityFront:");
    if (this.identityFront == null) {
      sb.append("null");
    } else {
      sb.append(this.identityFront);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityBack:");
    if (this.identityBack == null) {
      sb.append("null");
    } else {
      sb.append(this.identityBack);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityVerify:");
    if (this.identityVerify == null) {
      sb.append("null");
    } else {
      sb.append(this.identityVerify);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountType:");
    sb.append(this.accountType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alipayNo:");
    if (this.alipayNo == null) {
      sb.append("null");
    } else {
      sb.append(this.alipayNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alipayName:");
    if (this.alipayName == null) {
      sb.append("null");
    } else {
      sb.append(this.alipayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNo:");
    if (this.phoneNo == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qq:");
    if (this.qq == null) {
      sb.append("null");
    } else {
      sb.append(this.qq);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegisterViewStandardSchemeFactory implements SchemeFactory {
    public RegisterViewStandardScheme getScheme() {
      return new RegisterViewStandardScheme();
    }
  }

  private static class RegisterViewStandardScheme extends StandardScheme<RegisterView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPlace = iprot.readString();
              struct.setBankPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankBranch = iprot.readString();
              struct.setBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BANK_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankNo = iprot.readString();
              struct.setBankNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IDENTITY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityNo = iprot.readString();
              struct.setIdentityNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IDENTITY_FRONT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityFront = iprot.readString();
              struct.setIdentityFrontIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IDENTITY_BACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityBack = iprot.readString();
              struct.setIdentityBackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IDENTITY_VERIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityVerify = iprot.readString();
              struct.setIdentityVerifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACCOUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountType = iprot.readI32();
              struct.setAccountTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ALIPAY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alipayNo = iprot.readString();
              struct.setAlipayNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ALIPAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alipayName = iprot.readString();
              struct.setAlipayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PHONE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNo = iprot.readString();
              struct.setPhoneNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qq = iprot.readString();
              struct.setQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.bankPlace != null) {
        oprot.writeFieldBegin(BANK_PLACE_FIELD_DESC);
        oprot.writeString(struct.bankPlace);
        oprot.writeFieldEnd();
      }
      if (struct.bankBranch != null) {
        oprot.writeFieldBegin(BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.bankBranch);
        oprot.writeFieldEnd();
      }
      if (struct.bankNo != null) {
        oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
        oprot.writeString(struct.bankNo);
        oprot.writeFieldEnd();
      }
      if (struct.identityNo != null) {
        oprot.writeFieldBegin(IDENTITY_NO_FIELD_DESC);
        oprot.writeString(struct.identityNo);
        oprot.writeFieldEnd();
      }
      if (struct.identityFront != null) {
        oprot.writeFieldBegin(IDENTITY_FRONT_FIELD_DESC);
        oprot.writeString(struct.identityFront);
        oprot.writeFieldEnd();
      }
      if (struct.identityBack != null) {
        oprot.writeFieldBegin(IDENTITY_BACK_FIELD_DESC);
        oprot.writeString(struct.identityBack);
        oprot.writeFieldEnd();
      }
      if (struct.identityVerify != null) {
        oprot.writeFieldBegin(IDENTITY_VERIFY_FIELD_DESC);
        oprot.writeString(struct.identityVerify);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.accountType);
      oprot.writeFieldEnd();
      if (struct.alipayNo != null) {
        oprot.writeFieldBegin(ALIPAY_NO_FIELD_DESC);
        oprot.writeString(struct.alipayNo);
        oprot.writeFieldEnd();
      }
      if (struct.alipayName != null) {
        oprot.writeFieldBegin(ALIPAY_NAME_FIELD_DESC);
        oprot.writeString(struct.alipayName);
        oprot.writeFieldEnd();
      }
      if (struct.phoneNo != null) {
        oprot.writeFieldBegin(PHONE_NO_FIELD_DESC);
        oprot.writeString(struct.phoneNo);
        oprot.writeFieldEnd();
      }
      if (struct.qq != null) {
        oprot.writeFieldBegin(QQ_FIELD_DESC);
        oprot.writeString(struct.qq);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegisterViewTupleSchemeFactory implements SchemeFactory {
    public RegisterViewTupleScheme getScheme() {
      return new RegisterViewTupleScheme();
    }
  }

  private static class RegisterViewTupleScheme extends TupleScheme<RegisterView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegisterView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetReason()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(4);
      }
      if (struct.isSetUserName()) {
        optionals.set(5);
      }
      if (struct.isSetBankName()) {
        optionals.set(6);
      }
      if (struct.isSetBankPlace()) {
        optionals.set(7);
      }
      if (struct.isSetBankBranch()) {
        optionals.set(8);
      }
      if (struct.isSetBankNo()) {
        optionals.set(9);
      }
      if (struct.isSetIdentityNo()) {
        optionals.set(10);
      }
      if (struct.isSetIdentityFront()) {
        optionals.set(11);
      }
      if (struct.isSetIdentityBack()) {
        optionals.set(12);
      }
      if (struct.isSetIdentityVerify()) {
        optionals.set(13);
      }
      if (struct.isSetAccountType()) {
        optionals.set(14);
      }
      if (struct.isSetAlipayNo()) {
        optionals.set(15);
      }
      if (struct.isSetAlipayName()) {
        optionals.set(16);
      }
      if (struct.isSetPhoneNo()) {
        optionals.set(17);
      }
      if (struct.isSetQq()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBankPlace()) {
        oprot.writeString(struct.bankPlace);
      }
      if (struct.isSetBankBranch()) {
        oprot.writeString(struct.bankBranch);
      }
      if (struct.isSetBankNo()) {
        oprot.writeString(struct.bankNo);
      }
      if (struct.isSetIdentityNo()) {
        oprot.writeString(struct.identityNo);
      }
      if (struct.isSetIdentityFront()) {
        oprot.writeString(struct.identityFront);
      }
      if (struct.isSetIdentityBack()) {
        oprot.writeString(struct.identityBack);
      }
      if (struct.isSetIdentityVerify()) {
        oprot.writeString(struct.identityVerify);
      }
      if (struct.isSetAccountType()) {
        oprot.writeI32(struct.accountType);
      }
      if (struct.isSetAlipayNo()) {
        oprot.writeString(struct.alipayNo);
      }
      if (struct.isSetAlipayName()) {
        oprot.writeString(struct.alipayName);
      }
      if (struct.isSetPhoneNo()) {
        oprot.writeString(struct.phoneNo);
      }
      if (struct.isSetQq()) {
        oprot.writeString(struct.qq);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegisterView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankPlace = iprot.readString();
        struct.setBankPlaceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankBranch = iprot.readString();
        struct.setBankBranchIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bankNo = iprot.readString();
        struct.setBankNoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.identityNo = iprot.readString();
        struct.setIdentityNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.identityFront = iprot.readString();
        struct.setIdentityFrontIsSet(true);
      }
      if (incoming.get(12)) {
        struct.identityBack = iprot.readString();
        struct.setIdentityBackIsSet(true);
      }
      if (incoming.get(13)) {
        struct.identityVerify = iprot.readString();
        struct.setIdentityVerifyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.accountType = iprot.readI32();
        struct.setAccountTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.alipayNo = iprot.readString();
        struct.setAlipayNoIsSet(true);
      }
      if (incoming.get(16)) {
        struct.alipayName = iprot.readString();
        struct.setAlipayNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.phoneNo = iprot.readString();
        struct.setPhoneNoIsSet(true);
      }
      if (incoming.get(18)) {
        struct.qq = iprot.readString();
        struct.setQqIsSet(true);
      }
    }
  }

}

