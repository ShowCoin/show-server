/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActivityServiceProxy {

  public interface Iface {

    public List<one.show.manage.thrift.view.ActivityConfigView> findAllActivityConfigs() throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.ActivityShareView findActivityShareByDid(String did) throws org.apache.thrift.TException;

    public void updateActivityShare(String did, Map<String,String> updateContent) throws org.apache.thrift.TException;

    public void saveActivityShare(one.show.manage.thrift.view.ActivityShareView activityShare) throws org.apache.thrift.TException;

    public one.show.manage.thrift.view.ActivityShareRewardView findActivityShareRewardByDate(int date) throws org.apache.thrift.TException;

    public void updateActivityShareReward(int shareDate, Map<String,String> updateContent) throws org.apache.thrift.TException;

    public void saveActivityShareReward(one.show.manage.thrift.view.ActivityShareRewardView activityShareReward) throws org.apache.thrift.TException;

    public void addToUserShare(String did, String shareReward) throws org.apache.thrift.TException;

    public void addToShareReward(int date, String name, double showCoin) throws org.apache.thrift.TException;

    public void updateActivityConfig(int id, Map<String,String> paramMap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findAllActivityConfigs(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAllActivityConfigs_call> resultHandler) throws org.apache.thrift.TException;

    public void findActivityShareByDid(String did, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findActivityShareByDid_call> resultHandler) throws org.apache.thrift.TException;

    public void updateActivityShare(String did, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateActivityShare_call> resultHandler) throws org.apache.thrift.TException;

    public void saveActivityShare(one.show.manage.thrift.view.ActivityShareView activityShare, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveActivityShare_call> resultHandler) throws org.apache.thrift.TException;

    public void findActivityShareRewardByDate(int date, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findActivityShareRewardByDate_call> resultHandler) throws org.apache.thrift.TException;

    public void updateActivityShareReward(int shareDate, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateActivityShareReward_call> resultHandler) throws org.apache.thrift.TException;

    public void saveActivityShareReward(one.show.manage.thrift.view.ActivityShareRewardView activityShareReward, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveActivityShareReward_call> resultHandler) throws org.apache.thrift.TException;

    public void addToUserShare(String did, String shareReward, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addToUserShare_call> resultHandler) throws org.apache.thrift.TException;

    public void addToShareReward(int date, String name, double showCoin, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addToShareReward_call> resultHandler) throws org.apache.thrift.TException;

    public void updateActivityConfig(int id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateActivityConfig_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<one.show.manage.thrift.view.ActivityConfigView> findAllActivityConfigs() throws org.apache.thrift.TException
    {
      send_findAllActivityConfigs();
      return recv_findAllActivityConfigs();
    }

    public void send_findAllActivityConfigs() throws org.apache.thrift.TException
    {
      findAllActivityConfigs_args args = new findAllActivityConfigs_args();
      sendBase("findAllActivityConfigs", args);
    }

    public List<one.show.manage.thrift.view.ActivityConfigView> recv_findAllActivityConfigs() throws org.apache.thrift.TException
    {
      findAllActivityConfigs_result result = new findAllActivityConfigs_result();
      receiveBase(result, "findAllActivityConfigs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllActivityConfigs failed: unknown result");
    }

    public one.show.manage.thrift.view.ActivityShareView findActivityShareByDid(String did) throws org.apache.thrift.TException
    {
      send_findActivityShareByDid(did);
      return recv_findActivityShareByDid();
    }

    public void send_findActivityShareByDid(String did) throws org.apache.thrift.TException
    {
      findActivityShareByDid_args args = new findActivityShareByDid_args();
      args.setDid(did);
      sendBase("findActivityShareByDid", args);
    }

    public one.show.manage.thrift.view.ActivityShareView recv_findActivityShareByDid() throws org.apache.thrift.TException
    {
      findActivityShareByDid_result result = new findActivityShareByDid_result();
      receiveBase(result, "findActivityShareByDid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findActivityShareByDid failed: unknown result");
    }

    public void updateActivityShare(String did, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      send_updateActivityShare(did, updateContent);
      recv_updateActivityShare();
    }

    public void send_updateActivityShare(String did, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      updateActivityShare_args args = new updateActivityShare_args();
      args.setDid(did);
      args.setUpdateContent(updateContent);
      sendBase("updateActivityShare", args);
    }

    public void recv_updateActivityShare() throws org.apache.thrift.TException
    {
      updateActivityShare_result result = new updateActivityShare_result();
      receiveBase(result, "updateActivityShare");
      return;
    }

    public void saveActivityShare(one.show.manage.thrift.view.ActivityShareView activityShare) throws org.apache.thrift.TException
    {
      send_saveActivityShare(activityShare);
      recv_saveActivityShare();
    }

    public void send_saveActivityShare(one.show.manage.thrift.view.ActivityShareView activityShare) throws org.apache.thrift.TException
    {
      saveActivityShare_args args = new saveActivityShare_args();
      args.setActivityShare(activityShare);
      sendBase("saveActivityShare", args);
    }

    public void recv_saveActivityShare() throws org.apache.thrift.TException
    {
      saveActivityShare_result result = new saveActivityShare_result();
      receiveBase(result, "saveActivityShare");
      return;
    }

    public one.show.manage.thrift.view.ActivityShareRewardView findActivityShareRewardByDate(int date) throws org.apache.thrift.TException
    {
      send_findActivityShareRewardByDate(date);
      return recv_findActivityShareRewardByDate();
    }

    public void send_findActivityShareRewardByDate(int date) throws org.apache.thrift.TException
    {
      findActivityShareRewardByDate_args args = new findActivityShareRewardByDate_args();
      args.setDate(date);
      sendBase("findActivityShareRewardByDate", args);
    }

    public one.show.manage.thrift.view.ActivityShareRewardView recv_findActivityShareRewardByDate() throws org.apache.thrift.TException
    {
      findActivityShareRewardByDate_result result = new findActivityShareRewardByDate_result();
      receiveBase(result, "findActivityShareRewardByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findActivityShareRewardByDate failed: unknown result");
    }

    public void updateActivityShareReward(int shareDate, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      send_updateActivityShareReward(shareDate, updateContent);
      recv_updateActivityShareReward();
    }

    public void send_updateActivityShareReward(int shareDate, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      updateActivityShareReward_args args = new updateActivityShareReward_args();
      args.setShareDate(shareDate);
      args.setUpdateContent(updateContent);
      sendBase("updateActivityShareReward", args);
    }

    public void recv_updateActivityShareReward() throws org.apache.thrift.TException
    {
      updateActivityShareReward_result result = new updateActivityShareReward_result();
      receiveBase(result, "updateActivityShareReward");
      return;
    }

    public void saveActivityShareReward(one.show.manage.thrift.view.ActivityShareRewardView activityShareReward) throws org.apache.thrift.TException
    {
      send_saveActivityShareReward(activityShareReward);
      recv_saveActivityShareReward();
    }

    public void send_saveActivityShareReward(one.show.manage.thrift.view.ActivityShareRewardView activityShareReward) throws org.apache.thrift.TException
    {
      saveActivityShareReward_args args = new saveActivityShareReward_args();
      args.setActivityShareReward(activityShareReward);
      sendBase("saveActivityShareReward", args);
    }

    public void recv_saveActivityShareReward() throws org.apache.thrift.TException
    {
      saveActivityShareReward_result result = new saveActivityShareReward_result();
      receiveBase(result, "saveActivityShareReward");
      return;
    }

    public void addToUserShare(String did, String shareReward) throws org.apache.thrift.TException
    {
      send_addToUserShare(did, shareReward);
      recv_addToUserShare();
    }

    public void send_addToUserShare(String did, String shareReward) throws org.apache.thrift.TException
    {
      addToUserShare_args args = new addToUserShare_args();
      args.setDid(did);
      args.setShareReward(shareReward);
      sendBase("addToUserShare", args);
    }

    public void recv_addToUserShare() throws org.apache.thrift.TException
    {
      addToUserShare_result result = new addToUserShare_result();
      receiveBase(result, "addToUserShare");
      return;
    }

    public void addToShareReward(int date, String name, double showCoin) throws org.apache.thrift.TException
    {
      send_addToShareReward(date, name, showCoin);
      recv_addToShareReward();
    }

    public void send_addToShareReward(int date, String name, double showCoin) throws org.apache.thrift.TException
    {
      addToShareReward_args args = new addToShareReward_args();
      args.setDate(date);
      args.setName(name);
      args.setShowCoin(showCoin);
      sendBase("addToShareReward", args);
    }

    public void recv_addToShareReward() throws org.apache.thrift.TException
    {
      addToShareReward_result result = new addToShareReward_result();
      receiveBase(result, "addToShareReward");
      return;
    }

    public void updateActivityConfig(int id, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_updateActivityConfig(id, paramMap);
      recv_updateActivityConfig();
    }

    public void send_updateActivityConfig(int id, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      updateActivityConfig_args args = new updateActivityConfig_args();
      args.setId(id);
      args.setParamMap(paramMap);
      sendBase("updateActivityConfig", args);
    }

    public void recv_updateActivityConfig() throws org.apache.thrift.TException
    {
      updateActivityConfig_result result = new updateActivityConfig_result();
      receiveBase(result, "updateActivityConfig");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findAllActivityConfigs(org.apache.thrift.async.AsyncMethodCallback<findAllActivityConfigs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllActivityConfigs_call method_call = new findAllActivityConfigs_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllActivityConfigs_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllActivityConfigs_call(org.apache.thrift.async.AsyncMethodCallback<findAllActivityConfigs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllActivityConfigs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllActivityConfigs_args args = new findAllActivityConfigs_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.manage.thrift.view.ActivityConfigView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllActivityConfigs();
      }
    }

    public void findActivityShareByDid(String did, org.apache.thrift.async.AsyncMethodCallback<findActivityShareByDid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findActivityShareByDid_call method_call = new findActivityShareByDid_call(did, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findActivityShareByDid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      public findActivityShareByDid_call(String did, org.apache.thrift.async.AsyncMethodCallback<findActivityShareByDid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findActivityShareByDid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findActivityShareByDid_args args = new findActivityShareByDid_args();
        args.setDid(did);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.ActivityShareView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findActivityShareByDid();
      }
    }

    public void updateActivityShare(String did, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateActivityShare_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateActivityShare_call method_call = new updateActivityShare_call(did, updateContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateActivityShare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      private Map<String,String> updateContent;
      public updateActivityShare_call(String did, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateActivityShare_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
        this.updateContent = updateContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateActivityShare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateActivityShare_args args = new updateActivityShare_args();
        args.setDid(did);
        args.setUpdateContent(updateContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateActivityShare();
      }
    }

    public void saveActivityShare(one.show.manage.thrift.view.ActivityShareView activityShare, org.apache.thrift.async.AsyncMethodCallback<saveActivityShare_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveActivityShare_call method_call = new saveActivityShare_call(activityShare, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveActivityShare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.ActivityShareView activityShare;
      public saveActivityShare_call(one.show.manage.thrift.view.ActivityShareView activityShare, org.apache.thrift.async.AsyncMethodCallback<saveActivityShare_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activityShare = activityShare;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveActivityShare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveActivityShare_args args = new saveActivityShare_args();
        args.setActivityShare(activityShare);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveActivityShare();
      }
    }

    public void findActivityShareRewardByDate(int date, org.apache.thrift.async.AsyncMethodCallback<findActivityShareRewardByDate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findActivityShareRewardByDate_call method_call = new findActivityShareRewardByDate_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findActivityShareRewardByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int date;
      public findActivityShareRewardByDate_call(int date, org.apache.thrift.async.AsyncMethodCallback<findActivityShareRewardByDate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findActivityShareRewardByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findActivityShareRewardByDate_args args = new findActivityShareRewardByDate_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.manage.thrift.view.ActivityShareRewardView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findActivityShareRewardByDate();
      }
    }

    public void updateActivityShareReward(int shareDate, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateActivityShareReward_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateActivityShareReward_call method_call = new updateActivityShareReward_call(shareDate, updateContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateActivityShareReward_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int shareDate;
      private Map<String,String> updateContent;
      public updateActivityShareReward_call(int shareDate, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateActivityShareReward_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shareDate = shareDate;
        this.updateContent = updateContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateActivityShareReward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateActivityShareReward_args args = new updateActivityShareReward_args();
        args.setShareDate(shareDate);
        args.setUpdateContent(updateContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateActivityShareReward();
      }
    }

    public void saveActivityShareReward(one.show.manage.thrift.view.ActivityShareRewardView activityShareReward, org.apache.thrift.async.AsyncMethodCallback<saveActivityShareReward_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveActivityShareReward_call method_call = new saveActivityShareReward_call(activityShareReward, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveActivityShareReward_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.manage.thrift.view.ActivityShareRewardView activityShareReward;
      public saveActivityShareReward_call(one.show.manage.thrift.view.ActivityShareRewardView activityShareReward, org.apache.thrift.async.AsyncMethodCallback<saveActivityShareReward_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activityShareReward = activityShareReward;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveActivityShareReward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveActivityShareReward_args args = new saveActivityShareReward_args();
        args.setActivityShareReward(activityShareReward);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveActivityShareReward();
      }
    }

    public void addToUserShare(String did, String shareReward, org.apache.thrift.async.AsyncMethodCallback<addToUserShare_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToUserShare_call method_call = new addToUserShare_call(did, shareReward, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToUserShare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String did;
      private String shareReward;
      public addToUserShare_call(String did, String shareReward, org.apache.thrift.async.AsyncMethodCallback<addToUserShare_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.did = did;
        this.shareReward = shareReward;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToUserShare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToUserShare_args args = new addToUserShare_args();
        args.setDid(did);
        args.setShareReward(shareReward);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addToUserShare();
      }
    }

    public void addToShareReward(int date, String name, double showCoin, org.apache.thrift.async.AsyncMethodCallback<addToShareReward_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToShareReward_call method_call = new addToShareReward_call(date, name, showCoin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToShareReward_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int date;
      private String name;
      private double showCoin;
      public addToShareReward_call(int date, String name, double showCoin, org.apache.thrift.async.AsyncMethodCallback<addToShareReward_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
        this.name = name;
        this.showCoin = showCoin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToShareReward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToShareReward_args args = new addToShareReward_args();
        args.setDate(date);
        args.setName(name);
        args.setShowCoin(showCoin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addToShareReward();
      }
    }

    public void updateActivityConfig(int id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateActivityConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateActivityConfig_call method_call = new updateActivityConfig_call(id, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateActivityConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private Map<String,String> paramMap;
      public updateActivityConfig_call(int id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateActivityConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateActivityConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateActivityConfig_args args = new updateActivityConfig_args();
        args.setId(id);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateActivityConfig();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findAllActivityConfigs", new findAllActivityConfigs());
      processMap.put("findActivityShareByDid", new findActivityShareByDid());
      processMap.put("updateActivityShare", new updateActivityShare());
      processMap.put("saveActivityShare", new saveActivityShare());
      processMap.put("findActivityShareRewardByDate", new findActivityShareRewardByDate());
      processMap.put("updateActivityShareReward", new updateActivityShareReward());
      processMap.put("saveActivityShareReward", new saveActivityShareReward());
      processMap.put("addToUserShare", new addToUserShare());
      processMap.put("addToShareReward", new addToShareReward());
      processMap.put("updateActivityConfig", new updateActivityConfig());
      return processMap;
    }

    public static class findAllActivityConfigs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllActivityConfigs_args> {
      public findAllActivityConfigs() {
        super("findAllActivityConfigs");
      }

      public findAllActivityConfigs_args getEmptyArgsInstance() {
        return new findAllActivityConfigs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllActivityConfigs_result getResult(I iface, findAllActivityConfigs_args args) throws org.apache.thrift.TException {
        findAllActivityConfigs_result result = new findAllActivityConfigs_result();
        result.success = iface.findAllActivityConfigs();
        return result;
      }
    }

    public static class findActivityShareByDid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findActivityShareByDid_args> {
      public findActivityShareByDid() {
        super("findActivityShareByDid");
      }

      public findActivityShareByDid_args getEmptyArgsInstance() {
        return new findActivityShareByDid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findActivityShareByDid_result getResult(I iface, findActivityShareByDid_args args) throws org.apache.thrift.TException {
        findActivityShareByDid_result result = new findActivityShareByDid_result();
        result.success = iface.findActivityShareByDid(args.did);
        return result;
      }
    }

    public static class updateActivityShare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateActivityShare_args> {
      public updateActivityShare() {
        super("updateActivityShare");
      }

      public updateActivityShare_args getEmptyArgsInstance() {
        return new updateActivityShare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateActivityShare_result getResult(I iface, updateActivityShare_args args) throws org.apache.thrift.TException {
        updateActivityShare_result result = new updateActivityShare_result();
        iface.updateActivityShare(args.did, args.updateContent);
        return result;
      }
    }

    public static class saveActivityShare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveActivityShare_args> {
      public saveActivityShare() {
        super("saveActivityShare");
      }

      public saveActivityShare_args getEmptyArgsInstance() {
        return new saveActivityShare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveActivityShare_result getResult(I iface, saveActivityShare_args args) throws org.apache.thrift.TException {
        saveActivityShare_result result = new saveActivityShare_result();
        iface.saveActivityShare(args.activityShare);
        return result;
      }
    }

    public static class findActivityShareRewardByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findActivityShareRewardByDate_args> {
      public findActivityShareRewardByDate() {
        super("findActivityShareRewardByDate");
      }

      public findActivityShareRewardByDate_args getEmptyArgsInstance() {
        return new findActivityShareRewardByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findActivityShareRewardByDate_result getResult(I iface, findActivityShareRewardByDate_args args) throws org.apache.thrift.TException {
        findActivityShareRewardByDate_result result = new findActivityShareRewardByDate_result();
        result.success = iface.findActivityShareRewardByDate(args.date);
        return result;
      }
    }

    public static class updateActivityShareReward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateActivityShareReward_args> {
      public updateActivityShareReward() {
        super("updateActivityShareReward");
      }

      public updateActivityShareReward_args getEmptyArgsInstance() {
        return new updateActivityShareReward_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateActivityShareReward_result getResult(I iface, updateActivityShareReward_args args) throws org.apache.thrift.TException {
        updateActivityShareReward_result result = new updateActivityShareReward_result();
        iface.updateActivityShareReward(args.shareDate, args.updateContent);
        return result;
      }
    }

    public static class saveActivityShareReward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveActivityShareReward_args> {
      public saveActivityShareReward() {
        super("saveActivityShareReward");
      }

      public saveActivityShareReward_args getEmptyArgsInstance() {
        return new saveActivityShareReward_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveActivityShareReward_result getResult(I iface, saveActivityShareReward_args args) throws org.apache.thrift.TException {
        saveActivityShareReward_result result = new saveActivityShareReward_result();
        iface.saveActivityShareReward(args.activityShareReward);
        return result;
      }
    }

    public static class addToUserShare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToUserShare_args> {
      public addToUserShare() {
        super("addToUserShare");
      }

      public addToUserShare_args getEmptyArgsInstance() {
        return new addToUserShare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addToUserShare_result getResult(I iface, addToUserShare_args args) throws org.apache.thrift.TException {
        addToUserShare_result result = new addToUserShare_result();
        iface.addToUserShare(args.did, args.shareReward);
        return result;
      }
    }

    public static class addToShareReward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToShareReward_args> {
      public addToShareReward() {
        super("addToShareReward");
      }

      public addToShareReward_args getEmptyArgsInstance() {
        return new addToShareReward_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addToShareReward_result getResult(I iface, addToShareReward_args args) throws org.apache.thrift.TException {
        addToShareReward_result result = new addToShareReward_result();
        iface.addToShareReward(args.date, args.name, args.showCoin);
        return result;
      }
    }

    public static class updateActivityConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateActivityConfig_args> {
      public updateActivityConfig() {
        super("updateActivityConfig");
      }

      public updateActivityConfig_args getEmptyArgsInstance() {
        return new updateActivityConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateActivityConfig_result getResult(I iface, updateActivityConfig_args args) throws org.apache.thrift.TException {
        updateActivityConfig_result result = new updateActivityConfig_result();
        iface.updateActivityConfig(args.id, args.paramMap);
        return result;
      }
    }

  }

  public static class findAllActivityConfigs_args implements org.apache.thrift.TBase<findAllActivityConfigs_args, findAllActivityConfigs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllActivityConfigs_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllActivityConfigs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllActivityConfigs_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllActivityConfigs_args.class, metaDataMap);
    }

    public findAllActivityConfigs_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllActivityConfigs_args(findAllActivityConfigs_args other) {
    }

    public findAllActivityConfigs_args deepCopy() {
      return new findAllActivityConfigs_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllActivityConfigs_args)
        return this.equals((findAllActivityConfigs_args)that);
      return false;
    }

    public boolean equals(findAllActivityConfigs_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllActivityConfigs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllActivityConfigs_args typedOther = (findAllActivityConfigs_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllActivityConfigs_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllActivityConfigs_argsStandardSchemeFactory implements SchemeFactory {
      public findAllActivityConfigs_argsStandardScheme getScheme() {
        return new findAllActivityConfigs_argsStandardScheme();
      }
    }

    private static class findAllActivityConfigs_argsStandardScheme extends StandardScheme<findAllActivityConfigs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllActivityConfigs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllActivityConfigs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllActivityConfigs_argsTupleSchemeFactory implements SchemeFactory {
      public findAllActivityConfigs_argsTupleScheme getScheme() {
        return new findAllActivityConfigs_argsTupleScheme();
      }
    }

    private static class findAllActivityConfigs_argsTupleScheme extends TupleScheme<findAllActivityConfigs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllActivityConfigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllActivityConfigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAllActivityConfigs_result implements org.apache.thrift.TBase<findAllActivityConfigs_result, findAllActivityConfigs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllActivityConfigs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllActivityConfigs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllActivityConfigs_resultTupleSchemeFactory());
    }

    public List<one.show.manage.thrift.view.ActivityConfigView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.ActivityConfigView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllActivityConfigs_result.class, metaDataMap);
    }

    public findAllActivityConfigs_result() {
    }

    public findAllActivityConfigs_result(
      List<one.show.manage.thrift.view.ActivityConfigView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllActivityConfigs_result(findAllActivityConfigs_result other) {
      if (other.isSetSuccess()) {
        List<one.show.manage.thrift.view.ActivityConfigView> __this__success = new ArrayList<one.show.manage.thrift.view.ActivityConfigView>();
        for (one.show.manage.thrift.view.ActivityConfigView other_element : other.success) {
          __this__success.add(new one.show.manage.thrift.view.ActivityConfigView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllActivityConfigs_result deepCopy() {
      return new findAllActivityConfigs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.manage.thrift.view.ActivityConfigView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.manage.thrift.view.ActivityConfigView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.manage.thrift.view.ActivityConfigView>();
      }
      this.success.add(elem);
    }

    public List<one.show.manage.thrift.view.ActivityConfigView> getSuccess() {
      return this.success;
    }

    public findAllActivityConfigs_result setSuccess(List<one.show.manage.thrift.view.ActivityConfigView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.manage.thrift.view.ActivityConfigView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllActivityConfigs_result)
        return this.equals((findAllActivityConfigs_result)that);
      return false;
    }

    public boolean equals(findAllActivityConfigs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllActivityConfigs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllActivityConfigs_result typedOther = (findAllActivityConfigs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllActivityConfigs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllActivityConfigs_resultStandardSchemeFactory implements SchemeFactory {
      public findAllActivityConfigs_resultStandardScheme getScheme() {
        return new findAllActivityConfigs_resultStandardScheme();
      }
    }

    private static class findAllActivityConfigs_resultStandardScheme extends StandardScheme<findAllActivityConfigs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllActivityConfigs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.manage.thrift.view.ActivityConfigView>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    one.show.manage.thrift.view.ActivityConfigView _elem2; // required
                    _elem2 = new one.show.manage.thrift.view.ActivityConfigView();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllActivityConfigs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.manage.thrift.view.ActivityConfigView _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllActivityConfigs_resultTupleSchemeFactory implements SchemeFactory {
      public findAllActivityConfigs_resultTupleScheme getScheme() {
        return new findAllActivityConfigs_resultTupleScheme();
      }
    }

    private static class findAllActivityConfigs_resultTupleScheme extends TupleScheme<findAllActivityConfigs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllActivityConfigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.manage.thrift.view.ActivityConfigView _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllActivityConfigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.manage.thrift.view.ActivityConfigView>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              one.show.manage.thrift.view.ActivityConfigView _elem7; // required
              _elem7 = new one.show.manage.thrift.view.ActivityConfigView();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findActivityShareByDid_args implements org.apache.thrift.TBase<findActivityShareByDid_args, findActivityShareByDid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findActivityShareByDid_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findActivityShareByDid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findActivityShareByDid_argsTupleSchemeFactory());
    }

    public String did; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findActivityShareByDid_args.class, metaDataMap);
    }

    public findActivityShareByDid_args() {
    }

    public findActivityShareByDid_args(
      String did)
    {
      this();
      this.did = did;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findActivityShareByDid_args(findActivityShareByDid_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
    }

    public findActivityShareByDid_args deepCopy() {
      return new findActivityShareByDid_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
    }

    public String getDid() {
      return this.did;
    }

    public findActivityShareByDid_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findActivityShareByDid_args)
        return this.equals((findActivityShareByDid_args)that);
      return false;
    }

    public boolean equals(findActivityShareByDid_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findActivityShareByDid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findActivityShareByDid_args typedOther = (findActivityShareByDid_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findActivityShareByDid_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findActivityShareByDid_argsStandardSchemeFactory implements SchemeFactory {
      public findActivityShareByDid_argsStandardScheme getScheme() {
        return new findActivityShareByDid_argsStandardScheme();
      }
    }

    private static class findActivityShareByDid_argsStandardScheme extends StandardScheme<findActivityShareByDid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findActivityShareByDid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findActivityShareByDid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findActivityShareByDid_argsTupleSchemeFactory implements SchemeFactory {
      public findActivityShareByDid_argsTupleScheme getScheme() {
        return new findActivityShareByDid_argsTupleScheme();
      }
    }

    private static class findActivityShareByDid_argsTupleScheme extends TupleScheme<findActivityShareByDid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findActivityShareByDid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findActivityShareByDid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
      }
    }

  }

  public static class findActivityShareByDid_result implements org.apache.thrift.TBase<findActivityShareByDid_result, findActivityShareByDid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findActivityShareByDid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findActivityShareByDid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findActivityShareByDid_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.ActivityShareView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.ActivityShareView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findActivityShareByDid_result.class, metaDataMap);
    }

    public findActivityShareByDid_result() {
    }

    public findActivityShareByDid_result(
      one.show.manage.thrift.view.ActivityShareView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findActivityShareByDid_result(findActivityShareByDid_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.ActivityShareView(other.success);
      }
    }

    public findActivityShareByDid_result deepCopy() {
      return new findActivityShareByDid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.ActivityShareView getSuccess() {
      return this.success;
    }

    public findActivityShareByDid_result setSuccess(one.show.manage.thrift.view.ActivityShareView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.ActivityShareView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findActivityShareByDid_result)
        return this.equals((findActivityShareByDid_result)that);
      return false;
    }

    public boolean equals(findActivityShareByDid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findActivityShareByDid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findActivityShareByDid_result typedOther = (findActivityShareByDid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findActivityShareByDid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findActivityShareByDid_resultStandardSchemeFactory implements SchemeFactory {
      public findActivityShareByDid_resultStandardScheme getScheme() {
        return new findActivityShareByDid_resultStandardScheme();
      }
    }

    private static class findActivityShareByDid_resultStandardScheme extends StandardScheme<findActivityShareByDid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findActivityShareByDid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.ActivityShareView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findActivityShareByDid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findActivityShareByDid_resultTupleSchemeFactory implements SchemeFactory {
      public findActivityShareByDid_resultTupleScheme getScheme() {
        return new findActivityShareByDid_resultTupleScheme();
      }
    }

    private static class findActivityShareByDid_resultTupleScheme extends TupleScheme<findActivityShareByDid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findActivityShareByDid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findActivityShareByDid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.ActivityShareView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateActivityShare_args implements org.apache.thrift.TBase<updateActivityShare_args, updateActivityShare_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActivityShare_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateContent", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActivityShare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActivityShare_argsTupleSchemeFactory());
    }

    public String did; // required
    public Map<String,String> updateContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did"),
      UPDATE_CONTENT((short)2, "updateContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          case 2: // UPDATE_CONTENT
            return UPDATE_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UPDATE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("updateContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActivityShare_args.class, metaDataMap);
    }

    public updateActivityShare_args() {
    }

    public updateActivityShare_args(
      String did,
      Map<String,String> updateContent)
    {
      this();
      this.did = did;
      this.updateContent = updateContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActivityShare_args(updateActivityShare_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
      if (other.isSetUpdateContent()) {
        Map<String,String> __this__updateContent = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.updateContent.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__updateContent_copy_key = other_element_key;

          String __this__updateContent_copy_value = other_element_value;

          __this__updateContent.put(__this__updateContent_copy_key, __this__updateContent_copy_value);
        }
        this.updateContent = __this__updateContent;
      }
    }

    public updateActivityShare_args deepCopy() {
      return new updateActivityShare_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
      this.updateContent = null;
    }

    public String getDid() {
      return this.did;
    }

    public updateActivityShare_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public int getUpdateContentSize() {
      return (this.updateContent == null) ? 0 : this.updateContent.size();
    }

    public void putToUpdateContent(String key, String val) {
      if (this.updateContent == null) {
        this.updateContent = new HashMap<String,String>();
      }
      this.updateContent.put(key, val);
    }

    public Map<String,String> getUpdateContent() {
      return this.updateContent;
    }

    public updateActivityShare_args setUpdateContent(Map<String,String> updateContent) {
      this.updateContent = updateContent;
      return this;
    }

    public void unsetUpdateContent() {
      this.updateContent = null;
    }

    /** Returns true if field updateContent is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateContent() {
      return this.updateContent != null;
    }

    public void setUpdateContentIsSet(boolean value) {
      if (!value) {
        this.updateContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      case UPDATE_CONTENT:
        if (value == null) {
          unsetUpdateContent();
        } else {
          setUpdateContent((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      case UPDATE_CONTENT:
        return getUpdateContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      case UPDATE_CONTENT:
        return isSetUpdateContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActivityShare_args)
        return this.equals((updateActivityShare_args)that);
      return false;
    }

    public boolean equals(updateActivityShare_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      boolean this_present_updateContent = true && this.isSetUpdateContent();
      boolean that_present_updateContent = true && that.isSetUpdateContent();
      if (this_present_updateContent || that_present_updateContent) {
        if (!(this_present_updateContent && that_present_updateContent))
          return false;
        if (!this.updateContent.equals(that.updateContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateActivityShare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateActivityShare_args typedOther = (updateActivityShare_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateContent()).compareTo(typedOther.isSetUpdateContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateContent, typedOther.updateContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActivityShare_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateContent:");
      if (this.updateContent == null) {
        sb.append("null");
      } else {
        sb.append(this.updateContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActivityShare_argsStandardSchemeFactory implements SchemeFactory {
      public updateActivityShare_argsStandardScheme getScheme() {
        return new updateActivityShare_argsStandardScheme();
      }
    }

    private static class updateActivityShare_argsStandardScheme extends StandardScheme<updateActivityShare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActivityShare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATE_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.updateContent = new HashMap<String,String>(2*_map8.size);
                  for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                  {
                    String _key10; // required
                    String _val11; // required
                    _key10 = iprot.readString();
                    _val11 = iprot.readString();
                    struct.updateContent.put(_key10, _val11);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpdateContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActivityShare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        if (struct.updateContent != null) {
          oprot.writeFieldBegin(UPDATE_CONTENT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.updateContent.size()));
            for (Map.Entry<String, String> _iter12 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActivityShare_argsTupleSchemeFactory implements SchemeFactory {
      public updateActivityShare_argsTupleScheme getScheme() {
        return new updateActivityShare_argsTupleScheme();
      }
    }

    private static class updateActivityShare_argsTupleScheme extends TupleScheme<updateActivityShare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActivityShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        if (struct.isSetUpdateContent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
        if (struct.isSetUpdateContent()) {
          {
            oprot.writeI32(struct.updateContent.size());
            for (Map.Entry<String, String> _iter13 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeString(_iter13.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActivityShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.updateContent = new HashMap<String,String>(2*_map14.size);
            for (int _i15 = 0; _i15 < _map14.size; ++_i15)
            {
              String _key16; // required
              String _val17; // required
              _key16 = iprot.readString();
              _val17 = iprot.readString();
              struct.updateContent.put(_key16, _val17);
            }
          }
          struct.setUpdateContentIsSet(true);
        }
      }
    }

  }

  public static class updateActivityShare_result implements org.apache.thrift.TBase<updateActivityShare_result, updateActivityShare_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActivityShare_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActivityShare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActivityShare_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActivityShare_result.class, metaDataMap);
    }

    public updateActivityShare_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActivityShare_result(updateActivityShare_result other) {
    }

    public updateActivityShare_result deepCopy() {
      return new updateActivityShare_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActivityShare_result)
        return this.equals((updateActivityShare_result)that);
      return false;
    }

    public boolean equals(updateActivityShare_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateActivityShare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateActivityShare_result typedOther = (updateActivityShare_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActivityShare_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActivityShare_resultStandardSchemeFactory implements SchemeFactory {
      public updateActivityShare_resultStandardScheme getScheme() {
        return new updateActivityShare_resultStandardScheme();
      }
    }

    private static class updateActivityShare_resultStandardScheme extends StandardScheme<updateActivityShare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActivityShare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActivityShare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActivityShare_resultTupleSchemeFactory implements SchemeFactory {
      public updateActivityShare_resultTupleScheme getScheme() {
        return new updateActivityShare_resultTupleScheme();
      }
    }

    private static class updateActivityShare_resultTupleScheme extends TupleScheme<updateActivityShare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActivityShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActivityShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveActivityShare_args implements org.apache.thrift.TBase<saveActivityShare_args, saveActivityShare_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveActivityShare_args");

    private static final org.apache.thrift.protocol.TField ACTIVITY_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("activityShare", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveActivityShare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveActivityShare_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.ActivityShareView activityShare; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVITY_SHARE((short)1, "activityShare");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVITY_SHARE
            return ACTIVITY_SHARE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVITY_SHARE, new org.apache.thrift.meta_data.FieldMetaData("activityShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.ActivityShareView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveActivityShare_args.class, metaDataMap);
    }

    public saveActivityShare_args() {
    }

    public saveActivityShare_args(
      one.show.manage.thrift.view.ActivityShareView activityShare)
    {
      this();
      this.activityShare = activityShare;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveActivityShare_args(saveActivityShare_args other) {
      if (other.isSetActivityShare()) {
        this.activityShare = new one.show.manage.thrift.view.ActivityShareView(other.activityShare);
      }
    }

    public saveActivityShare_args deepCopy() {
      return new saveActivityShare_args(this);
    }

    @Override
    public void clear() {
      this.activityShare = null;
    }

    public one.show.manage.thrift.view.ActivityShareView getActivityShare() {
      return this.activityShare;
    }

    public saveActivityShare_args setActivityShare(one.show.manage.thrift.view.ActivityShareView activityShare) {
      this.activityShare = activityShare;
      return this;
    }

    public void unsetActivityShare() {
      this.activityShare = null;
    }

    /** Returns true if field activityShare is set (has been assigned a value) and false otherwise */
    public boolean isSetActivityShare() {
      return this.activityShare != null;
    }

    public void setActivityShareIsSet(boolean value) {
      if (!value) {
        this.activityShare = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVITY_SHARE:
        if (value == null) {
          unsetActivityShare();
        } else {
          setActivityShare((one.show.manage.thrift.view.ActivityShareView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVITY_SHARE:
        return getActivityShare();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVITY_SHARE:
        return isSetActivityShare();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveActivityShare_args)
        return this.equals((saveActivityShare_args)that);
      return false;
    }

    public boolean equals(saveActivityShare_args that) {
      if (that == null)
        return false;

      boolean this_present_activityShare = true && this.isSetActivityShare();
      boolean that_present_activityShare = true && that.isSetActivityShare();
      if (this_present_activityShare || that_present_activityShare) {
        if (!(this_present_activityShare && that_present_activityShare))
          return false;
        if (!this.activityShare.equals(that.activityShare))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveActivityShare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveActivityShare_args typedOther = (saveActivityShare_args)other;

      lastComparison = Boolean.valueOf(isSetActivityShare()).compareTo(typedOther.isSetActivityShare());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivityShare()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityShare, typedOther.activityShare);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveActivityShare_args(");
      boolean first = true;

      sb.append("activityShare:");
      if (this.activityShare == null) {
        sb.append("null");
      } else {
        sb.append(this.activityShare);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (activityShare != null) {
        activityShare.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveActivityShare_argsStandardSchemeFactory implements SchemeFactory {
      public saveActivityShare_argsStandardScheme getScheme() {
        return new saveActivityShare_argsStandardScheme();
      }
    }

    private static class saveActivityShare_argsStandardScheme extends StandardScheme<saveActivityShare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveActivityShare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVITY_SHARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activityShare = new one.show.manage.thrift.view.ActivityShareView();
                struct.activityShare.read(iprot);
                struct.setActivityShareIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveActivityShare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.activityShare != null) {
          oprot.writeFieldBegin(ACTIVITY_SHARE_FIELD_DESC);
          struct.activityShare.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveActivityShare_argsTupleSchemeFactory implements SchemeFactory {
      public saveActivityShare_argsTupleScheme getScheme() {
        return new saveActivityShare_argsTupleScheme();
      }
    }

    private static class saveActivityShare_argsTupleScheme extends TupleScheme<saveActivityShare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveActivityShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActivityShare()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActivityShare()) {
          struct.activityShare.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveActivityShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.activityShare = new one.show.manage.thrift.view.ActivityShareView();
          struct.activityShare.read(iprot);
          struct.setActivityShareIsSet(true);
        }
      }
    }

  }

  public static class saveActivityShare_result implements org.apache.thrift.TBase<saveActivityShare_result, saveActivityShare_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveActivityShare_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveActivityShare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveActivityShare_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveActivityShare_result.class, metaDataMap);
    }

    public saveActivityShare_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveActivityShare_result(saveActivityShare_result other) {
    }

    public saveActivityShare_result deepCopy() {
      return new saveActivityShare_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveActivityShare_result)
        return this.equals((saveActivityShare_result)that);
      return false;
    }

    public boolean equals(saveActivityShare_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveActivityShare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveActivityShare_result typedOther = (saveActivityShare_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveActivityShare_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveActivityShare_resultStandardSchemeFactory implements SchemeFactory {
      public saveActivityShare_resultStandardScheme getScheme() {
        return new saveActivityShare_resultStandardScheme();
      }
    }

    private static class saveActivityShare_resultStandardScheme extends StandardScheme<saveActivityShare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveActivityShare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveActivityShare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveActivityShare_resultTupleSchemeFactory implements SchemeFactory {
      public saveActivityShare_resultTupleScheme getScheme() {
        return new saveActivityShare_resultTupleScheme();
      }
    }

    private static class saveActivityShare_resultTupleScheme extends TupleScheme<saveActivityShare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveActivityShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveActivityShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findActivityShareRewardByDate_args implements org.apache.thrift.TBase<findActivityShareRewardByDate_args, findActivityShareRewardByDate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findActivityShareRewardByDate_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findActivityShareRewardByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findActivityShareRewardByDate_argsTupleSchemeFactory());
    }

    public int date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findActivityShareRewardByDate_args.class, metaDataMap);
    }

    public findActivityShareRewardByDate_args() {
    }

    public findActivityShareRewardByDate_args(
      int date)
    {
      this();
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findActivityShareRewardByDate_args(findActivityShareRewardByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.date = other.date;
    }

    public findActivityShareRewardByDate_args deepCopy() {
      return new findActivityShareRewardByDate_args(this);
    }

    @Override
    public void clear() {
      setDateIsSet(false);
      this.date = 0;
    }

    public int getDate() {
      return this.date;
    }

    public findActivityShareRewardByDate_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return Integer.valueOf(getDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findActivityShareRewardByDate_args)
        return this.equals((findActivityShareRewardByDate_args)that);
      return false;
    }

    public boolean equals(findActivityShareRewardByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findActivityShareRewardByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findActivityShareRewardByDate_args typedOther = (findActivityShareRewardByDate_args)other;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findActivityShareRewardByDate_args(");
      boolean first = true;

      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findActivityShareRewardByDate_argsStandardSchemeFactory implements SchemeFactory {
      public findActivityShareRewardByDate_argsStandardScheme getScheme() {
        return new findActivityShareRewardByDate_argsStandardScheme();
      }
    }

    private static class findActivityShareRewardByDate_argsStandardScheme extends StandardScheme<findActivityShareRewardByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findActivityShareRewardByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findActivityShareRewardByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findActivityShareRewardByDate_argsTupleSchemeFactory implements SchemeFactory {
      public findActivityShareRewardByDate_argsTupleScheme getScheme() {
        return new findActivityShareRewardByDate_argsTupleScheme();
      }
    }

    private static class findActivityShareRewardByDate_argsTupleScheme extends TupleScheme<findActivityShareRewardByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findActivityShareRewardByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findActivityShareRewardByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class findActivityShareRewardByDate_result implements org.apache.thrift.TBase<findActivityShareRewardByDate_result, findActivityShareRewardByDate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findActivityShareRewardByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findActivityShareRewardByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findActivityShareRewardByDate_resultTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.ActivityShareRewardView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.ActivityShareRewardView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findActivityShareRewardByDate_result.class, metaDataMap);
    }

    public findActivityShareRewardByDate_result() {
    }

    public findActivityShareRewardByDate_result(
      one.show.manage.thrift.view.ActivityShareRewardView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findActivityShareRewardByDate_result(findActivityShareRewardByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.manage.thrift.view.ActivityShareRewardView(other.success);
      }
    }

    public findActivityShareRewardByDate_result deepCopy() {
      return new findActivityShareRewardByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.manage.thrift.view.ActivityShareRewardView getSuccess() {
      return this.success;
    }

    public findActivityShareRewardByDate_result setSuccess(one.show.manage.thrift.view.ActivityShareRewardView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.manage.thrift.view.ActivityShareRewardView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findActivityShareRewardByDate_result)
        return this.equals((findActivityShareRewardByDate_result)that);
      return false;
    }

    public boolean equals(findActivityShareRewardByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findActivityShareRewardByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findActivityShareRewardByDate_result typedOther = (findActivityShareRewardByDate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findActivityShareRewardByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findActivityShareRewardByDate_resultStandardSchemeFactory implements SchemeFactory {
      public findActivityShareRewardByDate_resultStandardScheme getScheme() {
        return new findActivityShareRewardByDate_resultStandardScheme();
      }
    }

    private static class findActivityShareRewardByDate_resultStandardScheme extends StandardScheme<findActivityShareRewardByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findActivityShareRewardByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.manage.thrift.view.ActivityShareRewardView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findActivityShareRewardByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findActivityShareRewardByDate_resultTupleSchemeFactory implements SchemeFactory {
      public findActivityShareRewardByDate_resultTupleScheme getScheme() {
        return new findActivityShareRewardByDate_resultTupleScheme();
      }
    }

    private static class findActivityShareRewardByDate_resultTupleScheme extends TupleScheme<findActivityShareRewardByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findActivityShareRewardByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findActivityShareRewardByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.manage.thrift.view.ActivityShareRewardView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateActivityShareReward_args implements org.apache.thrift.TBase<updateActivityShareReward_args, updateActivityShareReward_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActivityShareReward_args");

    private static final org.apache.thrift.protocol.TField SHARE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareDate", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateContent", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActivityShareReward_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActivityShareReward_argsTupleSchemeFactory());
    }

    public int shareDate; // required
    public Map<String,String> updateContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHARE_DATE((short)1, "shareDate"),
      UPDATE_CONTENT((short)2, "updateContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARE_DATE
            return SHARE_DATE;
          case 2: // UPDATE_CONTENT
            return UPDATE_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHAREDATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARE_DATE, new org.apache.thrift.meta_data.FieldMetaData("shareDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UPDATE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("updateContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActivityShareReward_args.class, metaDataMap);
    }

    public updateActivityShareReward_args() {
    }

    public updateActivityShareReward_args(
      int shareDate,
      Map<String,String> updateContent)
    {
      this();
      this.shareDate = shareDate;
      setShareDateIsSet(true);
      this.updateContent = updateContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActivityShareReward_args(updateActivityShareReward_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shareDate = other.shareDate;
      if (other.isSetUpdateContent()) {
        Map<String,String> __this__updateContent = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.updateContent.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__updateContent_copy_key = other_element_key;

          String __this__updateContent_copy_value = other_element_value;

          __this__updateContent.put(__this__updateContent_copy_key, __this__updateContent_copy_value);
        }
        this.updateContent = __this__updateContent;
      }
    }

    public updateActivityShareReward_args deepCopy() {
      return new updateActivityShareReward_args(this);
    }

    @Override
    public void clear() {
      setShareDateIsSet(false);
      this.shareDate = 0;
      this.updateContent = null;
    }

    public int getShareDate() {
      return this.shareDate;
    }

    public updateActivityShareReward_args setShareDate(int shareDate) {
      this.shareDate = shareDate;
      setShareDateIsSet(true);
      return this;
    }

    public void unsetShareDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHAREDATE_ISSET_ID);
    }

    /** Returns true if field shareDate is set (has been assigned a value) and false otherwise */
    public boolean isSetShareDate() {
      return EncodingUtils.testBit(__isset_bitfield, __SHAREDATE_ISSET_ID);
    }

    public void setShareDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHAREDATE_ISSET_ID, value);
    }

    public int getUpdateContentSize() {
      return (this.updateContent == null) ? 0 : this.updateContent.size();
    }

    public void putToUpdateContent(String key, String val) {
      if (this.updateContent == null) {
        this.updateContent = new HashMap<String,String>();
      }
      this.updateContent.put(key, val);
    }

    public Map<String,String> getUpdateContent() {
      return this.updateContent;
    }

    public updateActivityShareReward_args setUpdateContent(Map<String,String> updateContent) {
      this.updateContent = updateContent;
      return this;
    }

    public void unsetUpdateContent() {
      this.updateContent = null;
    }

    /** Returns true if field updateContent is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateContent() {
      return this.updateContent != null;
    }

    public void setUpdateContentIsSet(boolean value) {
      if (!value) {
        this.updateContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARE_DATE:
        if (value == null) {
          unsetShareDate();
        } else {
          setShareDate((Integer)value);
        }
        break;

      case UPDATE_CONTENT:
        if (value == null) {
          unsetUpdateContent();
        } else {
          setUpdateContent((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARE_DATE:
        return Integer.valueOf(getShareDate());

      case UPDATE_CONTENT:
        return getUpdateContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARE_DATE:
        return isSetShareDate();
      case UPDATE_CONTENT:
        return isSetUpdateContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActivityShareReward_args)
        return this.equals((updateActivityShareReward_args)that);
      return false;
    }

    public boolean equals(updateActivityShareReward_args that) {
      if (that == null)
        return false;

      boolean this_present_shareDate = true;
      boolean that_present_shareDate = true;
      if (this_present_shareDate || that_present_shareDate) {
        if (!(this_present_shareDate && that_present_shareDate))
          return false;
        if (this.shareDate != that.shareDate)
          return false;
      }

      boolean this_present_updateContent = true && this.isSetUpdateContent();
      boolean that_present_updateContent = true && that.isSetUpdateContent();
      if (this_present_updateContent || that_present_updateContent) {
        if (!(this_present_updateContent && that_present_updateContent))
          return false;
        if (!this.updateContent.equals(that.updateContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateActivityShareReward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateActivityShareReward_args typedOther = (updateActivityShareReward_args)other;

      lastComparison = Boolean.valueOf(isSetShareDate()).compareTo(typedOther.isSetShareDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShareDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareDate, typedOther.shareDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateContent()).compareTo(typedOther.isSetUpdateContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateContent, typedOther.updateContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActivityShareReward_args(");
      boolean first = true;

      sb.append("shareDate:");
      sb.append(this.shareDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateContent:");
      if (this.updateContent == null) {
        sb.append("null");
      } else {
        sb.append(this.updateContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActivityShareReward_argsStandardSchemeFactory implements SchemeFactory {
      public updateActivityShareReward_argsStandardScheme getScheme() {
        return new updateActivityShareReward_argsStandardScheme();
      }
    }

    private static class updateActivityShareReward_argsStandardScheme extends StandardScheme<updateActivityShareReward_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActivityShareReward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHARE_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shareDate = iprot.readI32();
                struct.setShareDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATE_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.updateContent = new HashMap<String,String>(2*_map18.size);
                  for (int _i19 = 0; _i19 < _map18.size; ++_i19)
                  {
                    String _key20; // required
                    String _val21; // required
                    _key20 = iprot.readString();
                    _val21 = iprot.readString();
                    struct.updateContent.put(_key20, _val21);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpdateContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActivityShareReward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHARE_DATE_FIELD_DESC);
        oprot.writeI32(struct.shareDate);
        oprot.writeFieldEnd();
        if (struct.updateContent != null) {
          oprot.writeFieldBegin(UPDATE_CONTENT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.updateContent.size()));
            for (Map.Entry<String, String> _iter22 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActivityShareReward_argsTupleSchemeFactory implements SchemeFactory {
      public updateActivityShareReward_argsTupleScheme getScheme() {
        return new updateActivityShareReward_argsTupleScheme();
      }
    }

    private static class updateActivityShareReward_argsTupleScheme extends TupleScheme<updateActivityShareReward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActivityShareReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShareDate()) {
          optionals.set(0);
        }
        if (struct.isSetUpdateContent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShareDate()) {
          oprot.writeI32(struct.shareDate);
        }
        if (struct.isSetUpdateContent()) {
          {
            oprot.writeI32(struct.updateContent.size());
            for (Map.Entry<String, String> _iter23 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActivityShareReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shareDate = iprot.readI32();
          struct.setShareDateIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.updateContent = new HashMap<String,String>(2*_map24.size);
            for (int _i25 = 0; _i25 < _map24.size; ++_i25)
            {
              String _key26; // required
              String _val27; // required
              _key26 = iprot.readString();
              _val27 = iprot.readString();
              struct.updateContent.put(_key26, _val27);
            }
          }
          struct.setUpdateContentIsSet(true);
        }
      }
    }

  }

  public static class updateActivityShareReward_result implements org.apache.thrift.TBase<updateActivityShareReward_result, updateActivityShareReward_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActivityShareReward_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActivityShareReward_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActivityShareReward_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActivityShareReward_result.class, metaDataMap);
    }

    public updateActivityShareReward_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActivityShareReward_result(updateActivityShareReward_result other) {
    }

    public updateActivityShareReward_result deepCopy() {
      return new updateActivityShareReward_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActivityShareReward_result)
        return this.equals((updateActivityShareReward_result)that);
      return false;
    }

    public boolean equals(updateActivityShareReward_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateActivityShareReward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateActivityShareReward_result typedOther = (updateActivityShareReward_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActivityShareReward_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActivityShareReward_resultStandardSchemeFactory implements SchemeFactory {
      public updateActivityShareReward_resultStandardScheme getScheme() {
        return new updateActivityShareReward_resultStandardScheme();
      }
    }

    private static class updateActivityShareReward_resultStandardScheme extends StandardScheme<updateActivityShareReward_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActivityShareReward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActivityShareReward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActivityShareReward_resultTupleSchemeFactory implements SchemeFactory {
      public updateActivityShareReward_resultTupleScheme getScheme() {
        return new updateActivityShareReward_resultTupleScheme();
      }
    }

    private static class updateActivityShareReward_resultTupleScheme extends TupleScheme<updateActivityShareReward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActivityShareReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActivityShareReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveActivityShareReward_args implements org.apache.thrift.TBase<saveActivityShareReward_args, saveActivityShareReward_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveActivityShareReward_args");

    private static final org.apache.thrift.protocol.TField ACTIVITY_SHARE_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("activityShareReward", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveActivityShareReward_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveActivityShareReward_argsTupleSchemeFactory());
    }

    public one.show.manage.thrift.view.ActivityShareRewardView activityShareReward; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVITY_SHARE_REWARD((short)1, "activityShareReward");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVITY_SHARE_REWARD
            return ACTIVITY_SHARE_REWARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVITY_SHARE_REWARD, new org.apache.thrift.meta_data.FieldMetaData("activityShareReward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.manage.thrift.view.ActivityShareRewardView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveActivityShareReward_args.class, metaDataMap);
    }

    public saveActivityShareReward_args() {
    }

    public saveActivityShareReward_args(
      one.show.manage.thrift.view.ActivityShareRewardView activityShareReward)
    {
      this();
      this.activityShareReward = activityShareReward;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveActivityShareReward_args(saveActivityShareReward_args other) {
      if (other.isSetActivityShareReward()) {
        this.activityShareReward = new one.show.manage.thrift.view.ActivityShareRewardView(other.activityShareReward);
      }
    }

    public saveActivityShareReward_args deepCopy() {
      return new saveActivityShareReward_args(this);
    }

    @Override
    public void clear() {
      this.activityShareReward = null;
    }

    public one.show.manage.thrift.view.ActivityShareRewardView getActivityShareReward() {
      return this.activityShareReward;
    }

    public saveActivityShareReward_args setActivityShareReward(one.show.manage.thrift.view.ActivityShareRewardView activityShareReward) {
      this.activityShareReward = activityShareReward;
      return this;
    }

    public void unsetActivityShareReward() {
      this.activityShareReward = null;
    }

    /** Returns true if field activityShareReward is set (has been assigned a value) and false otherwise */
    public boolean isSetActivityShareReward() {
      return this.activityShareReward != null;
    }

    public void setActivityShareRewardIsSet(boolean value) {
      if (!value) {
        this.activityShareReward = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVITY_SHARE_REWARD:
        if (value == null) {
          unsetActivityShareReward();
        } else {
          setActivityShareReward((one.show.manage.thrift.view.ActivityShareRewardView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVITY_SHARE_REWARD:
        return getActivityShareReward();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVITY_SHARE_REWARD:
        return isSetActivityShareReward();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveActivityShareReward_args)
        return this.equals((saveActivityShareReward_args)that);
      return false;
    }

    public boolean equals(saveActivityShareReward_args that) {
      if (that == null)
        return false;

      boolean this_present_activityShareReward = true && this.isSetActivityShareReward();
      boolean that_present_activityShareReward = true && that.isSetActivityShareReward();
      if (this_present_activityShareReward || that_present_activityShareReward) {
        if (!(this_present_activityShareReward && that_present_activityShareReward))
          return false;
        if (!this.activityShareReward.equals(that.activityShareReward))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveActivityShareReward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveActivityShareReward_args typedOther = (saveActivityShareReward_args)other;

      lastComparison = Boolean.valueOf(isSetActivityShareReward()).compareTo(typedOther.isSetActivityShareReward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivityShareReward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityShareReward, typedOther.activityShareReward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveActivityShareReward_args(");
      boolean first = true;

      sb.append("activityShareReward:");
      if (this.activityShareReward == null) {
        sb.append("null");
      } else {
        sb.append(this.activityShareReward);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (activityShareReward != null) {
        activityShareReward.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveActivityShareReward_argsStandardSchemeFactory implements SchemeFactory {
      public saveActivityShareReward_argsStandardScheme getScheme() {
        return new saveActivityShareReward_argsStandardScheme();
      }
    }

    private static class saveActivityShareReward_argsStandardScheme extends StandardScheme<saveActivityShareReward_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveActivityShareReward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVITY_SHARE_REWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activityShareReward = new one.show.manage.thrift.view.ActivityShareRewardView();
                struct.activityShareReward.read(iprot);
                struct.setActivityShareRewardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveActivityShareReward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.activityShareReward != null) {
          oprot.writeFieldBegin(ACTIVITY_SHARE_REWARD_FIELD_DESC);
          struct.activityShareReward.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveActivityShareReward_argsTupleSchemeFactory implements SchemeFactory {
      public saveActivityShareReward_argsTupleScheme getScheme() {
        return new saveActivityShareReward_argsTupleScheme();
      }
    }

    private static class saveActivityShareReward_argsTupleScheme extends TupleScheme<saveActivityShareReward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveActivityShareReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActivityShareReward()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActivityShareReward()) {
          struct.activityShareReward.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveActivityShareReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.activityShareReward = new one.show.manage.thrift.view.ActivityShareRewardView();
          struct.activityShareReward.read(iprot);
          struct.setActivityShareRewardIsSet(true);
        }
      }
    }

  }

  public static class saveActivityShareReward_result implements org.apache.thrift.TBase<saveActivityShareReward_result, saveActivityShareReward_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveActivityShareReward_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveActivityShareReward_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveActivityShareReward_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveActivityShareReward_result.class, metaDataMap);
    }

    public saveActivityShareReward_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveActivityShareReward_result(saveActivityShareReward_result other) {
    }

    public saveActivityShareReward_result deepCopy() {
      return new saveActivityShareReward_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveActivityShareReward_result)
        return this.equals((saveActivityShareReward_result)that);
      return false;
    }

    public boolean equals(saveActivityShareReward_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveActivityShareReward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveActivityShareReward_result typedOther = (saveActivityShareReward_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveActivityShareReward_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveActivityShareReward_resultStandardSchemeFactory implements SchemeFactory {
      public saveActivityShareReward_resultStandardScheme getScheme() {
        return new saveActivityShareReward_resultStandardScheme();
      }
    }

    private static class saveActivityShareReward_resultStandardScheme extends StandardScheme<saveActivityShareReward_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveActivityShareReward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveActivityShareReward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveActivityShareReward_resultTupleSchemeFactory implements SchemeFactory {
      public saveActivityShareReward_resultTupleScheme getScheme() {
        return new saveActivityShareReward_resultTupleScheme();
      }
    }

    private static class saveActivityShareReward_resultTupleScheme extends TupleScheme<saveActivityShareReward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveActivityShareReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveActivityShareReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addToUserShare_args implements org.apache.thrift.TBase<addToUserShare_args, addToUserShare_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToUserShare_args");

    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SHARE_REWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("shareReward", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToUserShare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToUserShare_argsTupleSchemeFactory());
    }

    public String did; // required
    public String shareReward; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DID((short)1, "did"),
      SHARE_REWARD((short)2, "shareReward");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DID
            return DID;
          case 2: // SHARE_REWARD
            return SHARE_REWARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SHARE_REWARD, new org.apache.thrift.meta_data.FieldMetaData("shareReward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToUserShare_args.class, metaDataMap);
    }

    public addToUserShare_args() {
    }

    public addToUserShare_args(
      String did,
      String shareReward)
    {
      this();
      this.did = did;
      this.shareReward = shareReward;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToUserShare_args(addToUserShare_args other) {
      if (other.isSetDid()) {
        this.did = other.did;
      }
      if (other.isSetShareReward()) {
        this.shareReward = other.shareReward;
      }
    }

    public addToUserShare_args deepCopy() {
      return new addToUserShare_args(this);
    }

    @Override
    public void clear() {
      this.did = null;
      this.shareReward = null;
    }

    public String getDid() {
      return this.did;
    }

    public addToUserShare_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public String getShareReward() {
      return this.shareReward;
    }

    public addToUserShare_args setShareReward(String shareReward) {
      this.shareReward = shareReward;
      return this;
    }

    public void unsetShareReward() {
      this.shareReward = null;
    }

    /** Returns true if field shareReward is set (has been assigned a value) and false otherwise */
    public boolean isSetShareReward() {
      return this.shareReward != null;
    }

    public void setShareRewardIsSet(boolean value) {
      if (!value) {
        this.shareReward = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      case SHARE_REWARD:
        if (value == null) {
          unsetShareReward();
        } else {
          setShareReward((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DID:
        return getDid();

      case SHARE_REWARD:
        return getShareReward();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DID:
        return isSetDid();
      case SHARE_REWARD:
        return isSetShareReward();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToUserShare_args)
        return this.equals((addToUserShare_args)that);
      return false;
    }

    public boolean equals(addToUserShare_args that) {
      if (that == null)
        return false;

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      boolean this_present_shareReward = true && this.isSetShareReward();
      boolean that_present_shareReward = true && that.isSetShareReward();
      if (this_present_shareReward || that_present_shareReward) {
        if (!(this_present_shareReward && that_present_shareReward))
          return false;
        if (!this.shareReward.equals(that.shareReward))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addToUserShare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addToUserShare_args typedOther = (addToUserShare_args)other;

      lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShareReward()).compareTo(typedOther.isSetShareReward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShareReward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareReward, typedOther.shareReward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToUserShare_args(");
      boolean first = true;

      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shareReward:");
      if (this.shareReward == null) {
        sb.append("null");
      } else {
        sb.append(this.shareReward);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToUserShare_argsStandardSchemeFactory implements SchemeFactory {
      public addToUserShare_argsStandardScheme getScheme() {
        return new addToUserShare_argsStandardScheme();
      }
    }

    private static class addToUserShare_argsStandardScheme extends StandardScheme<addToUserShare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToUserShare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SHARE_REWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.shareReward = iprot.readString();
                struct.setShareRewardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToUserShare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        if (struct.shareReward != null) {
          oprot.writeFieldBegin(SHARE_REWARD_FIELD_DESC);
          oprot.writeString(struct.shareReward);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToUserShare_argsTupleSchemeFactory implements SchemeFactory {
      public addToUserShare_argsTupleScheme getScheme() {
        return new addToUserShare_argsTupleScheme();
      }
    }

    private static class addToUserShare_argsTupleScheme extends TupleScheme<addToUserShare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToUserShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDid()) {
          optionals.set(0);
        }
        if (struct.isSetShareReward()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDid()) {
          oprot.writeString(struct.did);
        }
        if (struct.isSetShareReward()) {
          oprot.writeString(struct.shareReward);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToUserShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.did = iprot.readString();
          struct.setDidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.shareReward = iprot.readString();
          struct.setShareRewardIsSet(true);
        }
      }
    }

  }

  public static class addToUserShare_result implements org.apache.thrift.TBase<addToUserShare_result, addToUserShare_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToUserShare_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToUserShare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToUserShare_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToUserShare_result.class, metaDataMap);
    }

    public addToUserShare_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToUserShare_result(addToUserShare_result other) {
    }

    public addToUserShare_result deepCopy() {
      return new addToUserShare_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToUserShare_result)
        return this.equals((addToUserShare_result)that);
      return false;
    }

    public boolean equals(addToUserShare_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addToUserShare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addToUserShare_result typedOther = (addToUserShare_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToUserShare_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToUserShare_resultStandardSchemeFactory implements SchemeFactory {
      public addToUserShare_resultStandardScheme getScheme() {
        return new addToUserShare_resultStandardScheme();
      }
    }

    private static class addToUserShare_resultStandardScheme extends StandardScheme<addToUserShare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToUserShare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToUserShare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToUserShare_resultTupleSchemeFactory implements SchemeFactory {
      public addToUserShare_resultTupleScheme getScheme() {
        return new addToUserShare_resultTupleScheme();
      }
    }

    private static class addToUserShare_resultTupleScheme extends TupleScheme<addToUserShare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToUserShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToUserShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addToShareReward_args implements org.apache.thrift.TBase<addToShareReward_args, addToShareReward_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToShareReward_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SHOW_COIN_FIELD_DESC = new org.apache.thrift.protocol.TField("showCoin", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToShareReward_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToShareReward_argsTupleSchemeFactory());
    }

    public int date; // required
    public String name; // required
    public double showCoin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date"),
      NAME((short)2, "name"),
      SHOW_COIN((short)3, "showCoin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          case 2: // NAME
            return NAME;
          case 3: // SHOW_COIN
            return SHOW_COIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATE_ISSET_ID = 0;
    private static final int __SHOWCOIN_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SHOW_COIN, new org.apache.thrift.meta_data.FieldMetaData("showCoin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToShareReward_args.class, metaDataMap);
    }

    public addToShareReward_args() {
    }

    public addToShareReward_args(
      int date,
      String name,
      double showCoin)
    {
      this();
      this.date = date;
      setDateIsSet(true);
      this.name = name;
      this.showCoin = showCoin;
      setShowCoinIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToShareReward_args(addToShareReward_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.date = other.date;
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.showCoin = other.showCoin;
    }

    public addToShareReward_args deepCopy() {
      return new addToShareReward_args(this);
    }

    @Override
    public void clear() {
      setDateIsSet(false);
      this.date = 0;
      this.name = null;
      setShowCoinIsSet(false);
      this.showCoin = 0.0;
    }

    public int getDate() {
      return this.date;
    }

    public addToShareReward_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public addToShareReward_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public double getShowCoin() {
      return this.showCoin;
    }

    public addToShareReward_args setShowCoin(double showCoin) {
      this.showCoin = showCoin;
      setShowCoinIsSet(true);
      return this;
    }

    public void unsetShowCoin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWCOIN_ISSET_ID);
    }

    /** Returns true if field showCoin is set (has been assigned a value) and false otherwise */
    public boolean isSetShowCoin() {
      return EncodingUtils.testBit(__isset_bitfield, __SHOWCOIN_ISSET_ID);
    }

    public void setShowCoinIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWCOIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SHOW_COIN:
        if (value == null) {
          unsetShowCoin();
        } else {
          setShowCoin((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return Integer.valueOf(getDate());

      case NAME:
        return getName();

      case SHOW_COIN:
        return Double.valueOf(getShowCoin());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      case NAME:
        return isSetName();
      case SHOW_COIN:
        return isSetShowCoin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToShareReward_args)
        return this.equals((addToShareReward_args)that);
      return false;
    }

    public boolean equals(addToShareReward_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_showCoin = true;
      boolean that_present_showCoin = true;
      if (this_present_showCoin || that_present_showCoin) {
        if (!(this_present_showCoin && that_present_showCoin))
          return false;
        if (this.showCoin != that.showCoin)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addToShareReward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addToShareReward_args typedOther = (addToShareReward_args)other;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShowCoin()).compareTo(typedOther.isSetShowCoin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShowCoin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showCoin, typedOther.showCoin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToShareReward_args(");
      boolean first = true;

      sb.append("date:");
      sb.append(this.date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("showCoin:");
      sb.append(this.showCoin);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToShareReward_argsStandardSchemeFactory implements SchemeFactory {
      public addToShareReward_argsStandardScheme getScheme() {
        return new addToShareReward_argsStandardScheme();
      }
    }

    private static class addToShareReward_argsStandardScheme extends StandardScheme<addToShareReward_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToShareReward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHOW_COIN
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.showCoin = iprot.readDouble();
                struct.setShowCoinIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToShareReward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SHOW_COIN_FIELD_DESC);
        oprot.writeDouble(struct.showCoin);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToShareReward_argsTupleSchemeFactory implements SchemeFactory {
      public addToShareReward_argsTupleScheme getScheme() {
        return new addToShareReward_argsTupleScheme();
      }
    }

    private static class addToShareReward_argsTupleScheme extends TupleScheme<addToShareReward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToShareReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetShowCoin()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetShowCoin()) {
          oprot.writeDouble(struct.showCoin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToShareReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.showCoin = iprot.readDouble();
          struct.setShowCoinIsSet(true);
        }
      }
    }

  }

  public static class addToShareReward_result implements org.apache.thrift.TBase<addToShareReward_result, addToShareReward_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToShareReward_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToShareReward_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToShareReward_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToShareReward_result.class, metaDataMap);
    }

    public addToShareReward_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToShareReward_result(addToShareReward_result other) {
    }

    public addToShareReward_result deepCopy() {
      return new addToShareReward_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToShareReward_result)
        return this.equals((addToShareReward_result)that);
      return false;
    }

    public boolean equals(addToShareReward_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addToShareReward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addToShareReward_result typedOther = (addToShareReward_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToShareReward_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToShareReward_resultStandardSchemeFactory implements SchemeFactory {
      public addToShareReward_resultStandardScheme getScheme() {
        return new addToShareReward_resultStandardScheme();
      }
    }

    private static class addToShareReward_resultStandardScheme extends StandardScheme<addToShareReward_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToShareReward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToShareReward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToShareReward_resultTupleSchemeFactory implements SchemeFactory {
      public addToShareReward_resultTupleScheme getScheme() {
        return new addToShareReward_resultTupleScheme();
      }
    }

    private static class addToShareReward_resultTupleScheme extends TupleScheme<addToShareReward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToShareReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToShareReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateActivityConfig_args implements org.apache.thrift.TBase<updateActivityConfig_args, updateActivityConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActivityConfig_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActivityConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActivityConfig_argsTupleSchemeFactory());
    }

    public int id; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PARAM_MAP((short)2, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActivityConfig_args.class, metaDataMap);
    }

    public updateActivityConfig_args() {
    }

    public updateActivityConfig_args(
      int id,
      Map<String,String> paramMap)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActivityConfig_args(updateActivityConfig_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateActivityConfig_args deepCopy() {
      return new updateActivityConfig_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.paramMap = null;
    }

    public int getId() {
      return this.id;
    }

    public updateActivityConfig_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public updateActivityConfig_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActivityConfig_args)
        return this.equals((updateActivityConfig_args)that);
      return false;
    }

    public boolean equals(updateActivityConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateActivityConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateActivityConfig_args typedOther = (updateActivityConfig_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActivityConfig_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActivityConfig_argsStandardSchemeFactory implements SchemeFactory {
      public updateActivityConfig_argsStandardScheme getScheme() {
        return new updateActivityConfig_argsStandardScheme();
      }
    }

    private static class updateActivityConfig_argsStandardScheme extends StandardScheme<updateActivityConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActivityConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map28.size);
                  for (int _i29 = 0; _i29 < _map28.size; ++_i29)
                  {
                    String _key30; // required
                    String _val31; // required
                    _key30 = iprot.readString();
                    _val31 = iprot.readString();
                    struct.paramMap.put(_key30, _val31);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActivityConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter32 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter32.getKey());
              oprot.writeString(_iter32.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActivityConfig_argsTupleSchemeFactory implements SchemeFactory {
      public updateActivityConfig_argsTupleScheme getScheme() {
        return new updateActivityConfig_argsTupleScheme();
      }
    }

    private static class updateActivityConfig_argsTupleScheme extends TupleScheme<updateActivityConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActivityConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetParamMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter33 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter33.getKey());
              oprot.writeString(_iter33.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActivityConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map34.size);
            for (int _i35 = 0; _i35 < _map34.size; ++_i35)
            {
              String _key36; // required
              String _val37; // required
              _key36 = iprot.readString();
              _val37 = iprot.readString();
              struct.paramMap.put(_key36, _val37);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class updateActivityConfig_result implements org.apache.thrift.TBase<updateActivityConfig_result, updateActivityConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActivityConfig_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActivityConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActivityConfig_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActivityConfig_result.class, metaDataMap);
    }

    public updateActivityConfig_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActivityConfig_result(updateActivityConfig_result other) {
    }

    public updateActivityConfig_result deepCopy() {
      return new updateActivityConfig_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActivityConfig_result)
        return this.equals((updateActivityConfig_result)that);
      return false;
    }

    public boolean equals(updateActivityConfig_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateActivityConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateActivityConfig_result typedOther = (updateActivityConfig_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActivityConfig_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActivityConfig_resultStandardSchemeFactory implements SchemeFactory {
      public updateActivityConfig_resultStandardScheme getScheme() {
        return new updateActivityConfig_resultStandardScheme();
      }
    }

    private static class updateActivityConfig_resultStandardScheme extends StandardScheme<updateActivityConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActivityConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActivityConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActivityConfig_resultTupleSchemeFactory implements SchemeFactory {
      public updateActivityConfig_resultTupleScheme getScheme() {
        return new updateActivityConfig_resultTupleScheme();
      }
    }

    private static class updateActivityConfig_resultTupleScheme extends TupleScheme<updateActivityConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActivityConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActivityConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
