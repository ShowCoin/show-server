/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.manage.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RobotSendGiftRatioView implements org.apache.thrift.TBase<RobotSendGiftRatioView, RobotSendGiftRatioView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RobotSendGiftRatioView");

  private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("minCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RobotSendGiftRatioViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RobotSendGiftRatioViewTupleSchemeFactory());
  }

  public int giftId; // required
  public int minCount; // required
  public int maxCount; // required
  public double ratio; // required
  public int createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GIFT_ID((short)1, "giftId"),
    MIN_COUNT((short)2, "minCount"),
    MAX_COUNT((short)3, "maxCount"),
    RATIO((short)4, "ratio"),
    CREATE_TIME((short)5, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GIFT_ID
          return GIFT_ID;
        case 2: // MIN_COUNT
          return MIN_COUNT;
        case 3: // MAX_COUNT
          return MAX_COUNT;
        case 4: // RATIO
          return RATIO;
        case 5: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GIFTID_ISSET_ID = 0;
  private static final int __MINCOUNT_ISSET_ID = 1;
  private static final int __MAXCOUNT_ISSET_ID = 2;
  private static final int __RATIO_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("minCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RATIO, new org.apache.thrift.meta_data.FieldMetaData("ratio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RobotSendGiftRatioView.class, metaDataMap);
  }

  public RobotSendGiftRatioView() {
  }

  public RobotSendGiftRatioView(
    int giftId,
    int minCount,
    int maxCount,
    double ratio,
    int createTime)
  {
    this();
    this.giftId = giftId;
    setGiftIdIsSet(true);
    this.minCount = minCount;
    setMinCountIsSet(true);
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    this.ratio = ratio;
    setRatioIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RobotSendGiftRatioView(RobotSendGiftRatioView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.giftId = other.giftId;
    this.minCount = other.minCount;
    this.maxCount = other.maxCount;
    this.ratio = other.ratio;
    this.createTime = other.createTime;
  }

  public RobotSendGiftRatioView deepCopy() {
    return new RobotSendGiftRatioView(this);
  }

  @Override
  public void clear() {
    setGiftIdIsSet(false);
    this.giftId = 0;
    setMinCountIsSet(false);
    this.minCount = 0;
    setMaxCountIsSet(false);
    this.maxCount = 0;
    setRatioIsSet(false);
    this.ratio = 0.0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
  }

  public int getGiftId() {
    return this.giftId;
  }

  public RobotSendGiftRatioView setGiftId(int giftId) {
    this.giftId = giftId;
    setGiftIdIsSet(true);
    return this;
  }

  public void unsetGiftId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTID_ISSET_ID);
  }

  /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftId() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTID_ISSET_ID);
  }

  public void setGiftIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTID_ISSET_ID, value);
  }

  public int getMinCount() {
    return this.minCount;
  }

  public RobotSendGiftRatioView setMinCount(int minCount) {
    this.minCount = minCount;
    setMinCountIsSet(true);
    return this;
  }

  public void unsetMinCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINCOUNT_ISSET_ID);
  }

  /** Returns true if field minCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMinCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MINCOUNT_ISSET_ID);
  }

  public void setMinCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINCOUNT_ISSET_ID, value);
  }

  public int getMaxCount() {
    return this.maxCount;
  }

  public RobotSendGiftRatioView setMaxCount(int maxCount) {
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    return this;
  }

  public void unsetMaxCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  public void setMaxCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCOUNT_ISSET_ID, value);
  }

  public double getRatio() {
    return this.ratio;
  }

  public RobotSendGiftRatioView setRatio(double ratio) {
    this.ratio = ratio;
    setRatioIsSet(true);
    return this;
  }

  public void unsetRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATIO_ISSET_ID);
  }

  /** Returns true if field ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __RATIO_ISSET_ID);
  }

  public void setRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATIO_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public RobotSendGiftRatioView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GIFT_ID:
      if (value == null) {
        unsetGiftId();
      } else {
        setGiftId((Integer)value);
      }
      break;

    case MIN_COUNT:
      if (value == null) {
        unsetMinCount();
      } else {
        setMinCount((Integer)value);
      }
      break;

    case MAX_COUNT:
      if (value == null) {
        unsetMaxCount();
      } else {
        setMaxCount((Integer)value);
      }
      break;

    case RATIO:
      if (value == null) {
        unsetRatio();
      } else {
        setRatio((Double)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GIFT_ID:
      return Integer.valueOf(getGiftId());

    case MIN_COUNT:
      return Integer.valueOf(getMinCount());

    case MAX_COUNT:
      return Integer.valueOf(getMaxCount());

    case RATIO:
      return Double.valueOf(getRatio());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GIFT_ID:
      return isSetGiftId();
    case MIN_COUNT:
      return isSetMinCount();
    case MAX_COUNT:
      return isSetMaxCount();
    case RATIO:
      return isSetRatio();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RobotSendGiftRatioView)
      return this.equals((RobotSendGiftRatioView)that);
    return false;
  }

  public boolean equals(RobotSendGiftRatioView that) {
    if (that == null)
      return false;

    boolean this_present_giftId = true;
    boolean that_present_giftId = true;
    if (this_present_giftId || that_present_giftId) {
      if (!(this_present_giftId && that_present_giftId))
        return false;
      if (this.giftId != that.giftId)
        return false;
    }

    boolean this_present_minCount = true;
    boolean that_present_minCount = true;
    if (this_present_minCount || that_present_minCount) {
      if (!(this_present_minCount && that_present_minCount))
        return false;
      if (this.minCount != that.minCount)
        return false;
    }

    boolean this_present_maxCount = true;
    boolean that_present_maxCount = true;
    if (this_present_maxCount || that_present_maxCount) {
      if (!(this_present_maxCount && that_present_maxCount))
        return false;
      if (this.maxCount != that.maxCount)
        return false;
    }

    boolean this_present_ratio = true;
    boolean that_present_ratio = true;
    if (this_present_ratio || that_present_ratio) {
      if (!(this_present_ratio && that_present_ratio))
        return false;
      if (this.ratio != that.ratio)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RobotSendGiftRatioView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RobotSendGiftRatioView typedOther = (RobotSendGiftRatioView)other;

    lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinCount()).compareTo(typedOther.isSetMinCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minCount, typedOther.minCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(typedOther.isSetMaxCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, typedOther.maxCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatio()).compareTo(typedOther.isSetRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratio, typedOther.ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RobotSendGiftRatioView(");
    boolean first = true;

    sb.append("giftId:");
    sb.append(this.giftId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minCount:");
    sb.append(this.minCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCount:");
    sb.append(this.maxCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ratio:");
    sb.append(this.ratio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RobotSendGiftRatioViewStandardSchemeFactory implements SchemeFactory {
    public RobotSendGiftRatioViewStandardScheme getScheme() {
      return new RobotSendGiftRatioViewStandardScheme();
    }
  }

  private static class RobotSendGiftRatioViewStandardScheme extends StandardScheme<RobotSendGiftRatioView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RobotSendGiftRatioView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GIFT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giftId = iprot.readI32();
              struct.setGiftIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minCount = iprot.readI32();
              struct.setMinCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxCount = iprot.readI32();
              struct.setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ratio = iprot.readDouble();
              struct.setRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RobotSendGiftRatioView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
      oprot.writeI32(struct.giftId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.minCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI32(struct.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATIO_FIELD_DESC);
      oprot.writeDouble(struct.ratio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RobotSendGiftRatioViewTupleSchemeFactory implements SchemeFactory {
    public RobotSendGiftRatioViewTupleScheme getScheme() {
      return new RobotSendGiftRatioViewTupleScheme();
    }
  }

  private static class RobotSendGiftRatioViewTupleScheme extends TupleScheme<RobotSendGiftRatioView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RobotSendGiftRatioView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGiftId()) {
        optionals.set(0);
      }
      if (struct.isSetMinCount()) {
        optionals.set(1);
      }
      if (struct.isSetMaxCount()) {
        optionals.set(2);
      }
      if (struct.isSetRatio()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetGiftId()) {
        oprot.writeI32(struct.giftId);
      }
      if (struct.isSetMinCount()) {
        oprot.writeI32(struct.minCount);
      }
      if (struct.isSetMaxCount()) {
        oprot.writeI32(struct.maxCount);
      }
      if (struct.isSetRatio()) {
        oprot.writeDouble(struct.ratio);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RobotSendGiftRatioView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.giftId = iprot.readI32();
        struct.setGiftIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.minCount = iprot.readI32();
        struct.setMinCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxCount = iprot.readI32();
        struct.setMaxCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ratio = iprot.readDouble();
        struct.setRatioIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

