/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransactionToView implements org.apache.thrift.TBase<TransactionToView, TransactionToView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionToView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RECEIVE_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveItemId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIVE_ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveItemName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECEIVE_ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveItemType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RECEIVE_ITEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveItemNumber", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemNumber", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField FROM_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUid", org.apache.thrift.protocol.TType.I64, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionToViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionToViewTupleSchemeFactory());
  }

  public String id; // required
  public int receiveItemId; // required
  public String receiveItemName; // required
  public int receiveItemType; // required
  public double receiveItemNumber; // required
  public int actuallyItemId; // required
  public String actuallyItemName; // required
  public int actuallyItemType; // required
  public double actuallyItemNumber; // required
  public double actuallyItemPrice; // required
  public int actionType; // required
  public String reason; // required
  public String vid; // required
  public long uid; // required
  public int createTime; // required
  public long fromUid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    RECEIVE_ITEM_ID((short)2, "receiveItemId"),
    RECEIVE_ITEM_NAME((short)3, "receiveItemName"),
    RECEIVE_ITEM_TYPE((short)4, "receiveItemType"),
    RECEIVE_ITEM_NUMBER((short)5, "receiveItemNumber"),
    ACTUALLY_ITEM_ID((short)6, "actuallyItemId"),
    ACTUALLY_ITEM_NAME((short)7, "actuallyItemName"),
    ACTUALLY_ITEM_TYPE((short)8, "actuallyItemType"),
    ACTUALLY_ITEM_NUMBER((short)9, "actuallyItemNumber"),
    ACTUALLY_ITEM_PRICE((short)10, "actuallyItemPrice"),
    ACTION_TYPE((short)11, "actionType"),
    REASON((short)12, "reason"),
    VID((short)13, "vid"),
    UID((short)14, "uid"),
    CREATE_TIME((short)15, "createTime"),
    FROM_UID((short)16, "fromUid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // RECEIVE_ITEM_ID
          return RECEIVE_ITEM_ID;
        case 3: // RECEIVE_ITEM_NAME
          return RECEIVE_ITEM_NAME;
        case 4: // RECEIVE_ITEM_TYPE
          return RECEIVE_ITEM_TYPE;
        case 5: // RECEIVE_ITEM_NUMBER
          return RECEIVE_ITEM_NUMBER;
        case 6: // ACTUALLY_ITEM_ID
          return ACTUALLY_ITEM_ID;
        case 7: // ACTUALLY_ITEM_NAME
          return ACTUALLY_ITEM_NAME;
        case 8: // ACTUALLY_ITEM_TYPE
          return ACTUALLY_ITEM_TYPE;
        case 9: // ACTUALLY_ITEM_NUMBER
          return ACTUALLY_ITEM_NUMBER;
        case 10: // ACTUALLY_ITEM_PRICE
          return ACTUALLY_ITEM_PRICE;
        case 11: // ACTION_TYPE
          return ACTION_TYPE;
        case 12: // REASON
          return REASON;
        case 13: // VID
          return VID;
        case 14: // UID
          return UID;
        case 15: // CREATE_TIME
          return CREATE_TIME;
        case 16: // FROM_UID
          return FROM_UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECEIVEITEMID_ISSET_ID = 0;
  private static final int __RECEIVEITEMTYPE_ISSET_ID = 1;
  private static final int __RECEIVEITEMNUMBER_ISSET_ID = 2;
  private static final int __ACTUALLYITEMID_ISSET_ID = 3;
  private static final int __ACTUALLYITEMTYPE_ISSET_ID = 4;
  private static final int __ACTUALLYITEMNUMBER_ISSET_ID = 5;
  private static final int __ACTUALLYITEMPRICE_ISSET_ID = 6;
  private static final int __ACTIONTYPE_ISSET_ID = 7;
  private static final int __UID_ISSET_ID = 8;
  private static final int __CREATETIME_ISSET_ID = 9;
  private static final int __FROMUID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVE_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("receiveItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVE_ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("receiveItemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVE_ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("receiveItemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVE_ITEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("receiveItemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_PRICE, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FROM_UID, new org.apache.thrift.meta_data.FieldMetaData("fromUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionToView.class, metaDataMap);
  }

  public TransactionToView() {
  }

  public TransactionToView(
    String id,
    int receiveItemId,
    String receiveItemName,
    int receiveItemType,
    double receiveItemNumber,
    int actuallyItemId,
    String actuallyItemName,
    int actuallyItemType,
    double actuallyItemNumber,
    double actuallyItemPrice,
    int actionType,
    String reason,
    String vid,
    long uid,
    int createTime,
    long fromUid)
  {
    this();
    this.id = id;
    this.receiveItemId = receiveItemId;
    setReceiveItemIdIsSet(true);
    this.receiveItemName = receiveItemName;
    this.receiveItemType = receiveItemType;
    setReceiveItemTypeIsSet(true);
    this.receiveItemNumber = receiveItemNumber;
    setReceiveItemNumberIsSet(true);
    this.actuallyItemId = actuallyItemId;
    setActuallyItemIdIsSet(true);
    this.actuallyItemName = actuallyItemName;
    this.actuallyItemType = actuallyItemType;
    setActuallyItemTypeIsSet(true);
    this.actuallyItemNumber = actuallyItemNumber;
    setActuallyItemNumberIsSet(true);
    this.actuallyItemPrice = actuallyItemPrice;
    setActuallyItemPriceIsSet(true);
    this.actionType = actionType;
    setActionTypeIsSet(true);
    this.reason = reason;
    this.vid = vid;
    this.uid = uid;
    setUidIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.fromUid = fromUid;
    setFromUidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionToView(TransactionToView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.receiveItemId = other.receiveItemId;
    if (other.isSetReceiveItemName()) {
      this.receiveItemName = other.receiveItemName;
    }
    this.receiveItemType = other.receiveItemType;
    this.receiveItemNumber = other.receiveItemNumber;
    this.actuallyItemId = other.actuallyItemId;
    if (other.isSetActuallyItemName()) {
      this.actuallyItemName = other.actuallyItemName;
    }
    this.actuallyItemType = other.actuallyItemType;
    this.actuallyItemNumber = other.actuallyItemNumber;
    this.actuallyItemPrice = other.actuallyItemPrice;
    this.actionType = other.actionType;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetVid()) {
      this.vid = other.vid;
    }
    this.uid = other.uid;
    this.createTime = other.createTime;
    this.fromUid = other.fromUid;
  }

  public TransactionToView deepCopy() {
    return new TransactionToView(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setReceiveItemIdIsSet(false);
    this.receiveItemId = 0;
    this.receiveItemName = null;
    setReceiveItemTypeIsSet(false);
    this.receiveItemType = 0;
    setReceiveItemNumberIsSet(false);
    this.receiveItemNumber = 0.0;
    setActuallyItemIdIsSet(false);
    this.actuallyItemId = 0;
    this.actuallyItemName = null;
    setActuallyItemTypeIsSet(false);
    this.actuallyItemType = 0;
    setActuallyItemNumberIsSet(false);
    this.actuallyItemNumber = 0.0;
    setActuallyItemPriceIsSet(false);
    this.actuallyItemPrice = 0.0;
    setActionTypeIsSet(false);
    this.actionType = 0;
    this.reason = null;
    this.vid = null;
    setUidIsSet(false);
    this.uid = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setFromUidIsSet(false);
    this.fromUid = 0;
  }

  public String getId() {
    return this.id;
  }

  public TransactionToView setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getReceiveItemId() {
    return this.receiveItemId;
  }

  public TransactionToView setReceiveItemId(int receiveItemId) {
    this.receiveItemId = receiveItemId;
    setReceiveItemIdIsSet(true);
    return this;
  }

  public void unsetReceiveItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEITEMID_ISSET_ID);
  }

  /** Returns true if field receiveItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEITEMID_ISSET_ID);
  }

  public void setReceiveItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEITEMID_ISSET_ID, value);
  }

  public String getReceiveItemName() {
    return this.receiveItemName;
  }

  public TransactionToView setReceiveItemName(String receiveItemName) {
    this.receiveItemName = receiveItemName;
    return this;
  }

  public void unsetReceiveItemName() {
    this.receiveItemName = null;
  }

  /** Returns true if field receiveItemName is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveItemName() {
    return this.receiveItemName != null;
  }

  public void setReceiveItemNameIsSet(boolean value) {
    if (!value) {
      this.receiveItemName = null;
    }
  }

  public int getReceiveItemType() {
    return this.receiveItemType;
  }

  public TransactionToView setReceiveItemType(int receiveItemType) {
    this.receiveItemType = receiveItemType;
    setReceiveItemTypeIsSet(true);
    return this;
  }

  public void unsetReceiveItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEITEMTYPE_ISSET_ID);
  }

  /** Returns true if field receiveItemType is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEITEMTYPE_ISSET_ID);
  }

  public void setReceiveItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEITEMTYPE_ISSET_ID, value);
  }

  public double getReceiveItemNumber() {
    return this.receiveItemNumber;
  }

  public TransactionToView setReceiveItemNumber(double receiveItemNumber) {
    this.receiveItemNumber = receiveItemNumber;
    setReceiveItemNumberIsSet(true);
    return this;
  }

  public void unsetReceiveItemNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEITEMNUMBER_ISSET_ID);
  }

  /** Returns true if field receiveItemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveItemNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEITEMNUMBER_ISSET_ID);
  }

  public void setReceiveItemNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEITEMNUMBER_ISSET_ID, value);
  }

  public int getActuallyItemId() {
    return this.actuallyItemId;
  }

  public TransactionToView setActuallyItemId(int actuallyItemId) {
    this.actuallyItemId = actuallyItemId;
    setActuallyItemIdIsSet(true);
    return this;
  }

  public void unsetActuallyItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYITEMID_ISSET_ID);
  }

  /** Returns true if field actuallyItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYITEMID_ISSET_ID);
  }

  public void setActuallyItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYITEMID_ISSET_ID, value);
  }

  public String getActuallyItemName() {
    return this.actuallyItemName;
  }

  public TransactionToView setActuallyItemName(String actuallyItemName) {
    this.actuallyItemName = actuallyItemName;
    return this;
  }

  public void unsetActuallyItemName() {
    this.actuallyItemName = null;
  }

  /** Returns true if field actuallyItemName is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemName() {
    return this.actuallyItemName != null;
  }

  public void setActuallyItemNameIsSet(boolean value) {
    if (!value) {
      this.actuallyItemName = null;
    }
  }

  public int getActuallyItemType() {
    return this.actuallyItemType;
  }

  public TransactionToView setActuallyItemType(int actuallyItemType) {
    this.actuallyItemType = actuallyItemType;
    setActuallyItemTypeIsSet(true);
    return this;
  }

  public void unsetActuallyItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYITEMTYPE_ISSET_ID);
  }

  /** Returns true if field actuallyItemType is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYITEMTYPE_ISSET_ID);
  }

  public void setActuallyItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYITEMTYPE_ISSET_ID, value);
  }

  public double getActuallyItemNumber() {
    return this.actuallyItemNumber;
  }

  public TransactionToView setActuallyItemNumber(double actuallyItemNumber) {
    this.actuallyItemNumber = actuallyItemNumber;
    setActuallyItemNumberIsSet(true);
    return this;
  }

  public void unsetActuallyItemNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYITEMNUMBER_ISSET_ID);
  }

  /** Returns true if field actuallyItemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYITEMNUMBER_ISSET_ID);
  }

  public void setActuallyItemNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYITEMNUMBER_ISSET_ID, value);
  }

  public double getActuallyItemPrice() {
    return this.actuallyItemPrice;
  }

  public TransactionToView setActuallyItemPrice(double actuallyItemPrice) {
    this.actuallyItemPrice = actuallyItemPrice;
    setActuallyItemPriceIsSet(true);
    return this;
  }

  public void unsetActuallyItemPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYITEMPRICE_ISSET_ID);
  }

  /** Returns true if field actuallyItemPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYITEMPRICE_ISSET_ID);
  }

  public void setActuallyItemPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYITEMPRICE_ISSET_ID, value);
  }

  public int getActionType() {
    return this.actionType;
  }

  public TransactionToView setActionType(int actionType) {
    this.actionType = actionType;
    setActionTypeIsSet(true);
    return this;
  }

  public void unsetActionType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID);
  }

  /** Returns true if field actionType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID);
  }

  public void setActionTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public TransactionToView setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public String getVid() {
    return this.vid;
  }

  public TransactionToView setVid(String vid) {
    this.vid = vid;
    return this;
  }

  public void unsetVid() {
    this.vid = null;
  }

  /** Returns true if field vid is set (has been assigned a value) and false otherwise */
  public boolean isSetVid() {
    return this.vid != null;
  }

  public void setVidIsSet(boolean value) {
    if (!value) {
      this.vid = null;
    }
  }

  public long getUid() {
    return this.uid;
  }

  public TransactionToView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public TransactionToView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getFromUid() {
    return this.fromUid;
  }

  public TransactionToView setFromUid(long fromUid) {
    this.fromUid = fromUid;
    setFromUidIsSet(true);
    return this;
  }

  public void unsetFromUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMUID_ISSET_ID);
  }

  /** Returns true if field fromUid is set (has been assigned a value) and false otherwise */
  public boolean isSetFromUid() {
    return EncodingUtils.testBit(__isset_bitfield, __FROMUID_ISSET_ID);
  }

  public void setFromUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case RECEIVE_ITEM_ID:
      if (value == null) {
        unsetReceiveItemId();
      } else {
        setReceiveItemId((Integer)value);
      }
      break;

    case RECEIVE_ITEM_NAME:
      if (value == null) {
        unsetReceiveItemName();
      } else {
        setReceiveItemName((String)value);
      }
      break;

    case RECEIVE_ITEM_TYPE:
      if (value == null) {
        unsetReceiveItemType();
      } else {
        setReceiveItemType((Integer)value);
      }
      break;

    case RECEIVE_ITEM_NUMBER:
      if (value == null) {
        unsetReceiveItemNumber();
      } else {
        setReceiveItemNumber((Double)value);
      }
      break;

    case ACTUALLY_ITEM_ID:
      if (value == null) {
        unsetActuallyItemId();
      } else {
        setActuallyItemId((Integer)value);
      }
      break;

    case ACTUALLY_ITEM_NAME:
      if (value == null) {
        unsetActuallyItemName();
      } else {
        setActuallyItemName((String)value);
      }
      break;

    case ACTUALLY_ITEM_TYPE:
      if (value == null) {
        unsetActuallyItemType();
      } else {
        setActuallyItemType((Integer)value);
      }
      break;

    case ACTUALLY_ITEM_NUMBER:
      if (value == null) {
        unsetActuallyItemNumber();
      } else {
        setActuallyItemNumber((Double)value);
      }
      break;

    case ACTUALLY_ITEM_PRICE:
      if (value == null) {
        unsetActuallyItemPrice();
      } else {
        setActuallyItemPrice((Double)value);
      }
      break;

    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((Integer)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case FROM_UID:
      if (value == null) {
        unsetFromUid();
      } else {
        setFromUid((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case RECEIVE_ITEM_ID:
      return Integer.valueOf(getReceiveItemId());

    case RECEIVE_ITEM_NAME:
      return getReceiveItemName();

    case RECEIVE_ITEM_TYPE:
      return Integer.valueOf(getReceiveItemType());

    case RECEIVE_ITEM_NUMBER:
      return Double.valueOf(getReceiveItemNumber());

    case ACTUALLY_ITEM_ID:
      return Integer.valueOf(getActuallyItemId());

    case ACTUALLY_ITEM_NAME:
      return getActuallyItemName();

    case ACTUALLY_ITEM_TYPE:
      return Integer.valueOf(getActuallyItemType());

    case ACTUALLY_ITEM_NUMBER:
      return Double.valueOf(getActuallyItemNumber());

    case ACTUALLY_ITEM_PRICE:
      return Double.valueOf(getActuallyItemPrice());

    case ACTION_TYPE:
      return Integer.valueOf(getActionType());

    case REASON:
      return getReason();

    case VID:
      return getVid();

    case UID:
      return Long.valueOf(getUid());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case FROM_UID:
      return Long.valueOf(getFromUid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case RECEIVE_ITEM_ID:
      return isSetReceiveItemId();
    case RECEIVE_ITEM_NAME:
      return isSetReceiveItemName();
    case RECEIVE_ITEM_TYPE:
      return isSetReceiveItemType();
    case RECEIVE_ITEM_NUMBER:
      return isSetReceiveItemNumber();
    case ACTUALLY_ITEM_ID:
      return isSetActuallyItemId();
    case ACTUALLY_ITEM_NAME:
      return isSetActuallyItemName();
    case ACTUALLY_ITEM_TYPE:
      return isSetActuallyItemType();
    case ACTUALLY_ITEM_NUMBER:
      return isSetActuallyItemNumber();
    case ACTUALLY_ITEM_PRICE:
      return isSetActuallyItemPrice();
    case ACTION_TYPE:
      return isSetActionType();
    case REASON:
      return isSetReason();
    case VID:
      return isSetVid();
    case UID:
      return isSetUid();
    case CREATE_TIME:
      return isSetCreateTime();
    case FROM_UID:
      return isSetFromUid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionToView)
      return this.equals((TransactionToView)that);
    return false;
  }

  public boolean equals(TransactionToView that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_receiveItemId = true;
    boolean that_present_receiveItemId = true;
    if (this_present_receiveItemId || that_present_receiveItemId) {
      if (!(this_present_receiveItemId && that_present_receiveItemId))
        return false;
      if (this.receiveItemId != that.receiveItemId)
        return false;
    }

    boolean this_present_receiveItemName = true && this.isSetReceiveItemName();
    boolean that_present_receiveItemName = true && that.isSetReceiveItemName();
    if (this_present_receiveItemName || that_present_receiveItemName) {
      if (!(this_present_receiveItemName && that_present_receiveItemName))
        return false;
      if (!this.receiveItemName.equals(that.receiveItemName))
        return false;
    }

    boolean this_present_receiveItemType = true;
    boolean that_present_receiveItemType = true;
    if (this_present_receiveItemType || that_present_receiveItemType) {
      if (!(this_present_receiveItemType && that_present_receiveItemType))
        return false;
      if (this.receiveItemType != that.receiveItemType)
        return false;
    }

    boolean this_present_receiveItemNumber = true;
    boolean that_present_receiveItemNumber = true;
    if (this_present_receiveItemNumber || that_present_receiveItemNumber) {
      if (!(this_present_receiveItemNumber && that_present_receiveItemNumber))
        return false;
      if (this.receiveItemNumber != that.receiveItemNumber)
        return false;
    }

    boolean this_present_actuallyItemId = true;
    boolean that_present_actuallyItemId = true;
    if (this_present_actuallyItemId || that_present_actuallyItemId) {
      if (!(this_present_actuallyItemId && that_present_actuallyItemId))
        return false;
      if (this.actuallyItemId != that.actuallyItemId)
        return false;
    }

    boolean this_present_actuallyItemName = true && this.isSetActuallyItemName();
    boolean that_present_actuallyItemName = true && that.isSetActuallyItemName();
    if (this_present_actuallyItemName || that_present_actuallyItemName) {
      if (!(this_present_actuallyItemName && that_present_actuallyItemName))
        return false;
      if (!this.actuallyItemName.equals(that.actuallyItemName))
        return false;
    }

    boolean this_present_actuallyItemType = true;
    boolean that_present_actuallyItemType = true;
    if (this_present_actuallyItemType || that_present_actuallyItemType) {
      if (!(this_present_actuallyItemType && that_present_actuallyItemType))
        return false;
      if (this.actuallyItemType != that.actuallyItemType)
        return false;
    }

    boolean this_present_actuallyItemNumber = true;
    boolean that_present_actuallyItemNumber = true;
    if (this_present_actuallyItemNumber || that_present_actuallyItemNumber) {
      if (!(this_present_actuallyItemNumber && that_present_actuallyItemNumber))
        return false;
      if (this.actuallyItemNumber != that.actuallyItemNumber)
        return false;
    }

    boolean this_present_actuallyItemPrice = true;
    boolean that_present_actuallyItemPrice = true;
    if (this_present_actuallyItemPrice || that_present_actuallyItemPrice) {
      if (!(this_present_actuallyItemPrice && that_present_actuallyItemPrice))
        return false;
      if (this.actuallyItemPrice != that.actuallyItemPrice)
        return false;
    }

    boolean this_present_actionType = true;
    boolean that_present_actionType = true;
    if (this_present_actionType || that_present_actionType) {
      if (!(this_present_actionType && that_present_actionType))
        return false;
      if (this.actionType != that.actionType)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_vid = true && this.isSetVid();
    boolean that_present_vid = true && that.isSetVid();
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (!this.vid.equals(that.vid))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_fromUid = true;
    boolean that_present_fromUid = true;
    if (this_present_fromUid || that_present_fromUid) {
      if (!(this_present_fromUid && that_present_fromUid))
        return false;
      if (this.fromUid != that.fromUid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TransactionToView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TransactionToView typedOther = (TransactionToView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveItemId()).compareTo(typedOther.isSetReceiveItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveItemId, typedOther.receiveItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveItemName()).compareTo(typedOther.isSetReceiveItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveItemName, typedOther.receiveItemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveItemType()).compareTo(typedOther.isSetReceiveItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveItemType, typedOther.receiveItemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveItemNumber()).compareTo(typedOther.isSetReceiveItemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveItemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveItemNumber, typedOther.receiveItemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemId()).compareTo(typedOther.isSetActuallyItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemId, typedOther.actuallyItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemName()).compareTo(typedOther.isSetActuallyItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemName, typedOther.actuallyItemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemType()).compareTo(typedOther.isSetActuallyItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemType, typedOther.actuallyItemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemNumber()).compareTo(typedOther.isSetActuallyItemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemNumber, typedOther.actuallyItemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemPrice()).compareTo(typedOther.isSetActuallyItemPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemPrice, typedOther.actuallyItemPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionType()).compareTo(typedOther.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionType, typedOther.actionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromUid()).compareTo(typedOther.isSetFromUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUid, typedOther.fromUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransactionToView(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveItemId:");
    sb.append(this.receiveItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveItemName:");
    if (this.receiveItemName == null) {
      sb.append("null");
    } else {
      sb.append(this.receiveItemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveItemType:");
    sb.append(this.receiveItemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveItemNumber:");
    sb.append(this.receiveItemNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemId:");
    sb.append(this.actuallyItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemName:");
    if (this.actuallyItemName == null) {
      sb.append("null");
    } else {
      sb.append(this.actuallyItemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemType:");
    sb.append(this.actuallyItemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemNumber:");
    sb.append(this.actuallyItemNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemPrice:");
    sb.append(this.actuallyItemPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionType:");
    sb.append(this.actionType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vid:");
    if (this.vid == null) {
      sb.append("null");
    } else {
      sb.append(this.vid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromUid:");
    sb.append(this.fromUid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionToViewStandardSchemeFactory implements SchemeFactory {
    public TransactionToViewStandardScheme getScheme() {
      return new TransactionToViewStandardScheme();
    }
  }

  private static class TransactionToViewStandardScheme extends StandardScheme<TransactionToView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionToView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECEIVE_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiveItemId = iprot.readI32();
              struct.setReceiveItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIVE_ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiveItemName = iprot.readString();
              struct.setReceiveItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECEIVE_ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiveItemType = iprot.readI32();
              struct.setReceiveItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECEIVE_ITEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receiveItemNumber = iprot.readDouble();
              struct.setReceiveItemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTUALLY_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actuallyItemId = iprot.readI32();
              struct.setActuallyItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTUALLY_ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actuallyItemName = iprot.readString();
              struct.setActuallyItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTUALLY_ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actuallyItemType = iprot.readI32();
              struct.setActuallyItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTUALLY_ITEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actuallyItemNumber = iprot.readDouble();
              struct.setActuallyItemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTUALLY_ITEM_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actuallyItemPrice = iprot.readDouble();
              struct.setActuallyItemPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionType = iprot.readI32();
              struct.setActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vid = iprot.readString();
              struct.setVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FROM_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fromUid = iprot.readI64();
              struct.setFromUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionToView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECEIVE_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.receiveItemId);
      oprot.writeFieldEnd();
      if (struct.receiveItemName != null) {
        oprot.writeFieldBegin(RECEIVE_ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.receiveItemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECEIVE_ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.receiveItemType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVE_ITEM_NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.receiveItemNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUALLY_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.actuallyItemId);
      oprot.writeFieldEnd();
      if (struct.actuallyItemName != null) {
        oprot.writeFieldBegin(ACTUALLY_ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.actuallyItemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTUALLY_ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.actuallyItemType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUALLY_ITEM_NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.actuallyItemNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUALLY_ITEM_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.actuallyItemPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.actionType);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      if (struct.vid != null) {
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeString(struct.vid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROM_UID_FIELD_DESC);
      oprot.writeI64(struct.fromUid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionToViewTupleSchemeFactory implements SchemeFactory {
    public TransactionToViewTupleScheme getScheme() {
      return new TransactionToViewTupleScheme();
    }
  }

  private static class TransactionToViewTupleScheme extends TupleScheme<TransactionToView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionToView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetReceiveItemId()) {
        optionals.set(1);
      }
      if (struct.isSetReceiveItemName()) {
        optionals.set(2);
      }
      if (struct.isSetReceiveItemType()) {
        optionals.set(3);
      }
      if (struct.isSetReceiveItemNumber()) {
        optionals.set(4);
      }
      if (struct.isSetActuallyItemId()) {
        optionals.set(5);
      }
      if (struct.isSetActuallyItemName()) {
        optionals.set(6);
      }
      if (struct.isSetActuallyItemType()) {
        optionals.set(7);
      }
      if (struct.isSetActuallyItemNumber()) {
        optionals.set(8);
      }
      if (struct.isSetActuallyItemPrice()) {
        optionals.set(9);
      }
      if (struct.isSetActionType()) {
        optionals.set(10);
      }
      if (struct.isSetReason()) {
        optionals.set(11);
      }
      if (struct.isSetVid()) {
        optionals.set(12);
      }
      if (struct.isSetUid()) {
        optionals.set(13);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(14);
      }
      if (struct.isSetFromUid()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetReceiveItemId()) {
        oprot.writeI32(struct.receiveItemId);
      }
      if (struct.isSetReceiveItemName()) {
        oprot.writeString(struct.receiveItemName);
      }
      if (struct.isSetReceiveItemType()) {
        oprot.writeI32(struct.receiveItemType);
      }
      if (struct.isSetReceiveItemNumber()) {
        oprot.writeDouble(struct.receiveItemNumber);
      }
      if (struct.isSetActuallyItemId()) {
        oprot.writeI32(struct.actuallyItemId);
      }
      if (struct.isSetActuallyItemName()) {
        oprot.writeString(struct.actuallyItemName);
      }
      if (struct.isSetActuallyItemType()) {
        oprot.writeI32(struct.actuallyItemType);
      }
      if (struct.isSetActuallyItemNumber()) {
        oprot.writeDouble(struct.actuallyItemNumber);
      }
      if (struct.isSetActuallyItemPrice()) {
        oprot.writeDouble(struct.actuallyItemPrice);
      }
      if (struct.isSetActionType()) {
        oprot.writeI32(struct.actionType);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetVid()) {
        oprot.writeString(struct.vid);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetFromUid()) {
        oprot.writeI64(struct.fromUid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionToView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.receiveItemId = iprot.readI32();
        struct.setReceiveItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.receiveItemName = iprot.readString();
        struct.setReceiveItemNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.receiveItemType = iprot.readI32();
        struct.setReceiveItemTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.receiveItemNumber = iprot.readDouble();
        struct.setReceiveItemNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.actuallyItemId = iprot.readI32();
        struct.setActuallyItemIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.actuallyItemName = iprot.readString();
        struct.setActuallyItemNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.actuallyItemType = iprot.readI32();
        struct.setActuallyItemTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.actuallyItemNumber = iprot.readDouble();
        struct.setActuallyItemNumberIsSet(true);
      }
      if (incoming.get(9)) {
        struct.actuallyItemPrice = iprot.readDouble();
        struct.setActuallyItemPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.actionType = iprot.readI32();
        struct.setActionTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(12)) {
        struct.vid = iprot.readString();
        struct.setVidIsSet(true);
      }
      if (incoming.get(13)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.fromUid = iprot.readI64();
        struct.setFromUidIsSet(true);
      }
    }
  }

}

