/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PayServiceProxy {

  public interface Iface {

    public long getMaxBatchNo() throws org.apache.thrift.TException;

    public void saveOrders(one.show.pay.thrift.view.OrdersView ordersView) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.OrdersView getOrdersById(long orderId) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.OrdersView findOrderViewByReceipt(String md5_receipt) throws org.apache.thrift.TException;

    public void updateOrdersById(long orderId, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public int updateOrdersByConditions(Map<String,String> conditions, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.StockView> findStockByUidAndParam(long uid, Map<String,String> params) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.StockView findStockByUidAndItem(long uid, int itemType, int itemId) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.StockLogListView findStockLogByUidAndParam(long uid, Map<String,String> params, int start, int count) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.TransactionToView> findTransactionToUidList(long uid, Map<String,String> params, int satrt, int pageCount) throws org.apache.thrift.TException;

    public int findTransactionToUidCount(long uid, Map<String,String> params) throws org.apache.thrift.TException;

    public void saveTransactionToView(one.show.pay.thrift.view.TransactionToView TransactionToView) throws org.apache.thrift.TException;

    public void saveTransactionFromView(one.show.pay.thrift.view.TransactionFromView transactionFromView) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.OrdersListView findOrdersListByParams(Map<String,String> params, int start, int count) throws org.apache.thrift.TException;

    public int findOrdersMoneyByParams(Map<String,String> params) throws org.apache.thrift.TException;

    public double getStockLogItemTotalByUid(long uid, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.OrdersView> findOrdersViewsByUid(long uid, Map<String,String> params, int start, int pageCount) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.TransactionFromView> findTransactionFromViewListByParams(long uid, Map<String,String> params, int start, int pageCount) throws org.apache.thrift.TException;

    public int findTransactionFromViewCountByParams(long uid, Map<String,String> params) throws org.apache.thrift.TException;

    public int systemSend(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException;

    public int send(long uid, one.show.pay.thrift.view.ItemView itemView, long liveId, long tid) throws org.apache.thrift.TException;

    public int consume(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException;

    public int buy(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.ExtractRmbView getExtractRmbViewById(long id) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.ExtractRmbView> getExtractRmbListByBatchNo(long batchNo) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.ExtractRmbView> getExtractRmbListByStatus(int status, int count) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.ExtractRmbListView getExtractRmbListByUid(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException;

    public double getExtractRmbTotalByUid(long uid, String key, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public void updateExtractRmbById(long id, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public void saveExtractRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView) throws org.apache.thrift.TException;

    public int redeemRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView) throws org.apache.thrift.TException;

    public void charge(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.GiftRankView> findGiftRanksByUid(long uid, int start, int count) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.GiftRankView> findGiftRanksByVid(long vid, int start, int count) throws org.apache.thrift.TException;

    public int findTotalReceiveByVid(long vid) throws org.apache.thrift.TException;

    public List<one.show.pay.thrift.view.PayConfigView> findAllPayConfigs() throws org.apache.thrift.TException;

    public void saveExtractBind(one.show.pay.thrift.view.ExtractBindView extractBindView) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.ExtractBindView getExtractBindByUid(long uid) throws org.apache.thrift.TException;

    public void updateExtractBindByUid(long uid, String alipayAccount, String alipayName) throws org.apache.thrift.TException;

    public void freeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc) throws org.apache.thrift.TException;

    public void unfreeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc) throws org.apache.thrift.TException;

    public void reduce(long uid, one.show.pay.thrift.view.ItemView item, int actionId, String actionDesc) throws org.apache.thrift.TException;

    public double getExtractRmbTotalCount() throws org.apache.thrift.TException;

    public int saveFamilyClearing(one.show.pay.thrift.view.FamilyClearingView familyClearingView) throws org.apache.thrift.TException;

    public void saveFamilyMemberClearing(one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.FamilyClearingListView findFamilyClearingList(Map<String,String> params, int start, int count) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.FamilyMemberClearingListView findFamilyMemberClearingListByCidAndFamilyId(int cid, long familyId, int start, int count) throws org.apache.thrift.TException;

    public one.show.pay.thrift.view.FamilyClearingView getFamilyClearingViewById(long id) throws org.apache.thrift.TException;

    public void updateFamilyClearingView(long id, Map<String,String> updateContent) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getMaxBatchNo(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMaxBatchNo_call> resultHandler) throws org.apache.thrift.TException;

    public void saveOrders(one.show.pay.thrift.view.OrdersView ordersView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveOrders_call> resultHandler) throws org.apache.thrift.TException;

    public void getOrdersById(long orderId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOrdersById_call> resultHandler) throws org.apache.thrift.TException;

    public void findOrderViewByReceipt(String md5_receipt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findOrderViewByReceipt_call> resultHandler) throws org.apache.thrift.TException;

    public void updateOrdersById(long orderId, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateOrdersById_call> resultHandler) throws org.apache.thrift.TException;

    public void updateOrdersByConditions(Map<String,String> conditions, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateOrdersByConditions_call> resultHandler) throws org.apache.thrift.TException;

    public void findStockByUidAndParam(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findStockByUidAndParam_call> resultHandler) throws org.apache.thrift.TException;

    public void findStockByUidAndItem(long uid, int itemType, int itemId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findStockByUidAndItem_call> resultHandler) throws org.apache.thrift.TException;

    public void findStockLogByUidAndParam(long uid, Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findStockLogByUidAndParam_call> resultHandler) throws org.apache.thrift.TException;

    public void findTransactionToUidList(long uid, Map<String,String> params, int satrt, int pageCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findTransactionToUidList_call> resultHandler) throws org.apache.thrift.TException;

    public void findTransactionToUidCount(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findTransactionToUidCount_call> resultHandler) throws org.apache.thrift.TException;

    public void saveTransactionToView(one.show.pay.thrift.view.TransactionToView TransactionToView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveTransactionToView_call> resultHandler) throws org.apache.thrift.TException;

    public void saveTransactionFromView(one.show.pay.thrift.view.TransactionFromView transactionFromView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveTransactionFromView_call> resultHandler) throws org.apache.thrift.TException;

    public void findOrdersListByParams(Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findOrdersListByParams_call> resultHandler) throws org.apache.thrift.TException;

    public void findOrdersMoneyByParams(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findOrdersMoneyByParams_call> resultHandler) throws org.apache.thrift.TException;

    public void getStockLogItemTotalByUid(long uid, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStockLogItemTotalByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void findOrdersViewsByUid(long uid, Map<String,String> params, int start, int pageCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findOrdersViewsByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void findTransactionFromViewListByParams(long uid, Map<String,String> params, int start, int pageCount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findTransactionFromViewListByParams_call> resultHandler) throws org.apache.thrift.TException;

    public void findTransactionFromViewCountByParams(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findTransactionFromViewCountByParams_call> resultHandler) throws org.apache.thrift.TException;

    public void systemSend(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.systemSend_call> resultHandler) throws org.apache.thrift.TException;

    public void send(long uid, one.show.pay.thrift.view.ItemView itemView, long liveId, long tid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.send_call> resultHandler) throws org.apache.thrift.TException;

    public void consume(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.consume_call> resultHandler) throws org.apache.thrift.TException;

    public void buy(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.buy_call> resultHandler) throws org.apache.thrift.TException;

    public void getExtractRmbViewById(long id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExtractRmbViewById_call> resultHandler) throws org.apache.thrift.TException;

    public void getExtractRmbListByBatchNo(long batchNo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExtractRmbListByBatchNo_call> resultHandler) throws org.apache.thrift.TException;

    public void getExtractRmbListByStatus(int status, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExtractRmbListByStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getExtractRmbListByUid(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExtractRmbListByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void getExtractRmbTotalByUid(long uid, String key, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExtractRmbTotalByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void updateExtractRmbById(long id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateExtractRmbById_call> resultHandler) throws org.apache.thrift.TException;

    public void saveExtractRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveExtractRmb_call> resultHandler) throws org.apache.thrift.TException;

    public void redeemRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.redeemRmb_call> resultHandler) throws org.apache.thrift.TException;

    public void charge(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.charge_call> resultHandler) throws org.apache.thrift.TException;

    public void findGiftRanksByUid(long uid, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findGiftRanksByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void findGiftRanksByVid(long vid, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findGiftRanksByVid_call> resultHandler) throws org.apache.thrift.TException;

    public void findTotalReceiveByVid(long vid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findTotalReceiveByVid_call> resultHandler) throws org.apache.thrift.TException;

    public void findAllPayConfigs(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAllPayConfigs_call> resultHandler) throws org.apache.thrift.TException;

    public void saveExtractBind(one.show.pay.thrift.view.ExtractBindView extractBindView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveExtractBind_call> resultHandler) throws org.apache.thrift.TException;

    public void getExtractBindByUid(long uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExtractBindByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void updateExtractBindByUid(long uid, String alipayAccount, String alipayName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateExtractBindByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void freeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.freeze_call> resultHandler) throws org.apache.thrift.TException;

    public void unfreeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.unfreeze_call> resultHandler) throws org.apache.thrift.TException;

    public void reduce(long uid, one.show.pay.thrift.view.ItemView item, int actionId, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reduce_call> resultHandler) throws org.apache.thrift.TException;

    public void getExtractRmbTotalCount(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExtractRmbTotalCount_call> resultHandler) throws org.apache.thrift.TException;

    public void saveFamilyClearing(one.show.pay.thrift.view.FamilyClearingView familyClearingView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveFamilyClearing_call> resultHandler) throws org.apache.thrift.TException;

    public void saveFamilyMemberClearing(one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveFamilyMemberClearing_call> resultHandler) throws org.apache.thrift.TException;

    public void findFamilyClearingList(Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFamilyClearingList_call> resultHandler) throws org.apache.thrift.TException;

    public void findFamilyMemberClearingListByCidAndFamilyId(int cid, long familyId, int start, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findFamilyMemberClearingListByCidAndFamilyId_call> resultHandler) throws org.apache.thrift.TException;

    public void getFamilyClearingViewById(long id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFamilyClearingViewById_call> resultHandler) throws org.apache.thrift.TException;

    public void updateFamilyClearingView(long id, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateFamilyClearingView_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getMaxBatchNo() throws org.apache.thrift.TException
    {
      send_getMaxBatchNo();
      return recv_getMaxBatchNo();
    }

    public void send_getMaxBatchNo() throws org.apache.thrift.TException
    {
      getMaxBatchNo_args args = new getMaxBatchNo_args();
      sendBase("getMaxBatchNo", args);
    }

    public long recv_getMaxBatchNo() throws org.apache.thrift.TException
    {
      getMaxBatchNo_result result = new getMaxBatchNo_result();
      receiveBase(result, "getMaxBatchNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMaxBatchNo failed: unknown result");
    }

    public void saveOrders(one.show.pay.thrift.view.OrdersView ordersView) throws org.apache.thrift.TException
    {
      send_saveOrders(ordersView);
      recv_saveOrders();
    }

    public void send_saveOrders(one.show.pay.thrift.view.OrdersView ordersView) throws org.apache.thrift.TException
    {
      saveOrders_args args = new saveOrders_args();
      args.setOrdersView(ordersView);
      sendBase("saveOrders", args);
    }

    public void recv_saveOrders() throws org.apache.thrift.TException
    {
      saveOrders_result result = new saveOrders_result();
      receiveBase(result, "saveOrders");
      return;
    }

    public one.show.pay.thrift.view.OrdersView getOrdersById(long orderId) throws org.apache.thrift.TException
    {
      send_getOrdersById(orderId);
      return recv_getOrdersById();
    }

    public void send_getOrdersById(long orderId) throws org.apache.thrift.TException
    {
      getOrdersById_args args = new getOrdersById_args();
      args.setOrderId(orderId);
      sendBase("getOrdersById", args);
    }

    public one.show.pay.thrift.view.OrdersView recv_getOrdersById() throws org.apache.thrift.TException
    {
      getOrdersById_result result = new getOrdersById_result();
      receiveBase(result, "getOrdersById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrdersById failed: unknown result");
    }

    public one.show.pay.thrift.view.OrdersView findOrderViewByReceipt(String md5_receipt) throws org.apache.thrift.TException
    {
      send_findOrderViewByReceipt(md5_receipt);
      return recv_findOrderViewByReceipt();
    }

    public void send_findOrderViewByReceipt(String md5_receipt) throws org.apache.thrift.TException
    {
      findOrderViewByReceipt_args args = new findOrderViewByReceipt_args();
      args.setMd5_receipt(md5_receipt);
      sendBase("findOrderViewByReceipt", args);
    }

    public one.show.pay.thrift.view.OrdersView recv_findOrderViewByReceipt() throws org.apache.thrift.TException
    {
      findOrderViewByReceipt_result result = new findOrderViewByReceipt_result();
      receiveBase(result, "findOrderViewByReceipt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOrderViewByReceipt failed: unknown result");
    }

    public void updateOrdersById(long orderId, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_updateOrdersById(orderId, paramMap);
      recv_updateOrdersById();
    }

    public void send_updateOrdersById(long orderId, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      updateOrdersById_args args = new updateOrdersById_args();
      args.setOrderId(orderId);
      args.setParamMap(paramMap);
      sendBase("updateOrdersById", args);
    }

    public void recv_updateOrdersById() throws org.apache.thrift.TException
    {
      updateOrdersById_result result = new updateOrdersById_result();
      receiveBase(result, "updateOrdersById");
      return;
    }

    public int updateOrdersByConditions(Map<String,String> conditions, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_updateOrdersByConditions(conditions, paramMap);
      return recv_updateOrdersByConditions();
    }

    public void send_updateOrdersByConditions(Map<String,String> conditions, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      updateOrdersByConditions_args args = new updateOrdersByConditions_args();
      args.setConditions(conditions);
      args.setParamMap(paramMap);
      sendBase("updateOrdersByConditions", args);
    }

    public int recv_updateOrdersByConditions() throws org.apache.thrift.TException
    {
      updateOrdersByConditions_result result = new updateOrdersByConditions_result();
      receiveBase(result, "updateOrdersByConditions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOrdersByConditions failed: unknown result");
    }

    public List<one.show.pay.thrift.view.StockView> findStockByUidAndParam(long uid, Map<String,String> params) throws org.apache.thrift.TException
    {
      send_findStockByUidAndParam(uid, params);
      return recv_findStockByUidAndParam();
    }

    public void send_findStockByUidAndParam(long uid, Map<String,String> params) throws org.apache.thrift.TException
    {
      findStockByUidAndParam_args args = new findStockByUidAndParam_args();
      args.setUid(uid);
      args.setParams(params);
      sendBase("findStockByUidAndParam", args);
    }

    public List<one.show.pay.thrift.view.StockView> recv_findStockByUidAndParam() throws org.apache.thrift.TException
    {
      findStockByUidAndParam_result result = new findStockByUidAndParam_result();
      receiveBase(result, "findStockByUidAndParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStockByUidAndParam failed: unknown result");
    }

    public one.show.pay.thrift.view.StockView findStockByUidAndItem(long uid, int itemType, int itemId) throws org.apache.thrift.TException
    {
      send_findStockByUidAndItem(uid, itemType, itemId);
      return recv_findStockByUidAndItem();
    }

    public void send_findStockByUidAndItem(long uid, int itemType, int itemId) throws org.apache.thrift.TException
    {
      findStockByUidAndItem_args args = new findStockByUidAndItem_args();
      args.setUid(uid);
      args.setItemType(itemType);
      args.setItemId(itemId);
      sendBase("findStockByUidAndItem", args);
    }

    public one.show.pay.thrift.view.StockView recv_findStockByUidAndItem() throws org.apache.thrift.TException
    {
      findStockByUidAndItem_result result = new findStockByUidAndItem_result();
      receiveBase(result, "findStockByUidAndItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStockByUidAndItem failed: unknown result");
    }

    public one.show.pay.thrift.view.StockLogListView findStockLogByUidAndParam(long uid, Map<String,String> params, int start, int count) throws org.apache.thrift.TException
    {
      send_findStockLogByUidAndParam(uid, params, start, count);
      return recv_findStockLogByUidAndParam();
    }

    public void send_findStockLogByUidAndParam(long uid, Map<String,String> params, int start, int count) throws org.apache.thrift.TException
    {
      findStockLogByUidAndParam_args args = new findStockLogByUidAndParam_args();
      args.setUid(uid);
      args.setParams(params);
      args.setStart(start);
      args.setCount(count);
      sendBase("findStockLogByUidAndParam", args);
    }

    public one.show.pay.thrift.view.StockLogListView recv_findStockLogByUidAndParam() throws org.apache.thrift.TException
    {
      findStockLogByUidAndParam_result result = new findStockLogByUidAndParam_result();
      receiveBase(result, "findStockLogByUidAndParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStockLogByUidAndParam failed: unknown result");
    }

    public List<one.show.pay.thrift.view.TransactionToView> findTransactionToUidList(long uid, Map<String,String> params, int satrt, int pageCount) throws org.apache.thrift.TException
    {
      send_findTransactionToUidList(uid, params, satrt, pageCount);
      return recv_findTransactionToUidList();
    }

    public void send_findTransactionToUidList(long uid, Map<String,String> params, int satrt, int pageCount) throws org.apache.thrift.TException
    {
      findTransactionToUidList_args args = new findTransactionToUidList_args();
      args.setUid(uid);
      args.setParams(params);
      args.setSatrt(satrt);
      args.setPageCount(pageCount);
      sendBase("findTransactionToUidList", args);
    }

    public List<one.show.pay.thrift.view.TransactionToView> recv_findTransactionToUidList() throws org.apache.thrift.TException
    {
      findTransactionToUidList_result result = new findTransactionToUidList_result();
      receiveBase(result, "findTransactionToUidList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTransactionToUidList failed: unknown result");
    }

    public int findTransactionToUidCount(long uid, Map<String,String> params) throws org.apache.thrift.TException
    {
      send_findTransactionToUidCount(uid, params);
      return recv_findTransactionToUidCount();
    }

    public void send_findTransactionToUidCount(long uid, Map<String,String> params) throws org.apache.thrift.TException
    {
      findTransactionToUidCount_args args = new findTransactionToUidCount_args();
      args.setUid(uid);
      args.setParams(params);
      sendBase("findTransactionToUidCount", args);
    }

    public int recv_findTransactionToUidCount() throws org.apache.thrift.TException
    {
      findTransactionToUidCount_result result = new findTransactionToUidCount_result();
      receiveBase(result, "findTransactionToUidCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTransactionToUidCount failed: unknown result");
    }

    public void saveTransactionToView(one.show.pay.thrift.view.TransactionToView TransactionToView) throws org.apache.thrift.TException
    {
      send_saveTransactionToView(TransactionToView);
      recv_saveTransactionToView();
    }

    public void send_saveTransactionToView(one.show.pay.thrift.view.TransactionToView TransactionToView) throws org.apache.thrift.TException
    {
      saveTransactionToView_args args = new saveTransactionToView_args();
      args.setTransactionToView(TransactionToView);
      sendBase("saveTransactionToView", args);
    }

    public void recv_saveTransactionToView() throws org.apache.thrift.TException
    {
      saveTransactionToView_result result = new saveTransactionToView_result();
      receiveBase(result, "saveTransactionToView");
      return;
    }

    public void saveTransactionFromView(one.show.pay.thrift.view.TransactionFromView transactionFromView) throws org.apache.thrift.TException
    {
      send_saveTransactionFromView(transactionFromView);
      recv_saveTransactionFromView();
    }

    public void send_saveTransactionFromView(one.show.pay.thrift.view.TransactionFromView transactionFromView) throws org.apache.thrift.TException
    {
      saveTransactionFromView_args args = new saveTransactionFromView_args();
      args.setTransactionFromView(transactionFromView);
      sendBase("saveTransactionFromView", args);
    }

    public void recv_saveTransactionFromView() throws org.apache.thrift.TException
    {
      saveTransactionFromView_result result = new saveTransactionFromView_result();
      receiveBase(result, "saveTransactionFromView");
      return;
    }

    public one.show.pay.thrift.view.OrdersListView findOrdersListByParams(Map<String,String> params, int start, int count) throws org.apache.thrift.TException
    {
      send_findOrdersListByParams(params, start, count);
      return recv_findOrdersListByParams();
    }

    public void send_findOrdersListByParams(Map<String,String> params, int start, int count) throws org.apache.thrift.TException
    {
      findOrdersListByParams_args args = new findOrdersListByParams_args();
      args.setParams(params);
      args.setStart(start);
      args.setCount(count);
      sendBase("findOrdersListByParams", args);
    }

    public one.show.pay.thrift.view.OrdersListView recv_findOrdersListByParams() throws org.apache.thrift.TException
    {
      findOrdersListByParams_result result = new findOrdersListByParams_result();
      receiveBase(result, "findOrdersListByParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOrdersListByParams failed: unknown result");
    }

    public int findOrdersMoneyByParams(Map<String,String> params) throws org.apache.thrift.TException
    {
      send_findOrdersMoneyByParams(params);
      return recv_findOrdersMoneyByParams();
    }

    public void send_findOrdersMoneyByParams(Map<String,String> params) throws org.apache.thrift.TException
    {
      findOrdersMoneyByParams_args args = new findOrdersMoneyByParams_args();
      args.setParams(params);
      sendBase("findOrdersMoneyByParams", args);
    }

    public int recv_findOrdersMoneyByParams() throws org.apache.thrift.TException
    {
      findOrdersMoneyByParams_result result = new findOrdersMoneyByParams_result();
      receiveBase(result, "findOrdersMoneyByParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOrdersMoneyByParams failed: unknown result");
    }

    public double getStockLogItemTotalByUid(long uid, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_getStockLogItemTotalByUid(uid, paramMap);
      return recv_getStockLogItemTotalByUid();
    }

    public void send_getStockLogItemTotalByUid(long uid, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getStockLogItemTotalByUid_args args = new getStockLogItemTotalByUid_args();
      args.setUid(uid);
      args.setParamMap(paramMap);
      sendBase("getStockLogItemTotalByUid", args);
    }

    public double recv_getStockLogItemTotalByUid() throws org.apache.thrift.TException
    {
      getStockLogItemTotalByUid_result result = new getStockLogItemTotalByUid_result();
      receiveBase(result, "getStockLogItemTotalByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStockLogItemTotalByUid failed: unknown result");
    }

    public List<one.show.pay.thrift.view.OrdersView> findOrdersViewsByUid(long uid, Map<String,String> params, int start, int pageCount) throws org.apache.thrift.TException
    {
      send_findOrdersViewsByUid(uid, params, start, pageCount);
      return recv_findOrdersViewsByUid();
    }

    public void send_findOrdersViewsByUid(long uid, Map<String,String> params, int start, int pageCount) throws org.apache.thrift.TException
    {
      findOrdersViewsByUid_args args = new findOrdersViewsByUid_args();
      args.setUid(uid);
      args.setParams(params);
      args.setStart(start);
      args.setPageCount(pageCount);
      sendBase("findOrdersViewsByUid", args);
    }

    public List<one.show.pay.thrift.view.OrdersView> recv_findOrdersViewsByUid() throws org.apache.thrift.TException
    {
      findOrdersViewsByUid_result result = new findOrdersViewsByUid_result();
      receiveBase(result, "findOrdersViewsByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOrdersViewsByUid failed: unknown result");
    }

    public List<one.show.pay.thrift.view.TransactionFromView> findTransactionFromViewListByParams(long uid, Map<String,String> params, int start, int pageCount) throws org.apache.thrift.TException
    {
      send_findTransactionFromViewListByParams(uid, params, start, pageCount);
      return recv_findTransactionFromViewListByParams();
    }

    public void send_findTransactionFromViewListByParams(long uid, Map<String,String> params, int start, int pageCount) throws org.apache.thrift.TException
    {
      findTransactionFromViewListByParams_args args = new findTransactionFromViewListByParams_args();
      args.setUid(uid);
      args.setParams(params);
      args.setStart(start);
      args.setPageCount(pageCount);
      sendBase("findTransactionFromViewListByParams", args);
    }

    public List<one.show.pay.thrift.view.TransactionFromView> recv_findTransactionFromViewListByParams() throws org.apache.thrift.TException
    {
      findTransactionFromViewListByParams_result result = new findTransactionFromViewListByParams_result();
      receiveBase(result, "findTransactionFromViewListByParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTransactionFromViewListByParams failed: unknown result");
    }

    public int findTransactionFromViewCountByParams(long uid, Map<String,String> params) throws org.apache.thrift.TException
    {
      send_findTransactionFromViewCountByParams(uid, params);
      return recv_findTransactionFromViewCountByParams();
    }

    public void send_findTransactionFromViewCountByParams(long uid, Map<String,String> params) throws org.apache.thrift.TException
    {
      findTransactionFromViewCountByParams_args args = new findTransactionFromViewCountByParams_args();
      args.setUid(uid);
      args.setParams(params);
      sendBase("findTransactionFromViewCountByParams", args);
    }

    public int recv_findTransactionFromViewCountByParams() throws org.apache.thrift.TException
    {
      findTransactionFromViewCountByParams_result result = new findTransactionFromViewCountByParams_result();
      receiveBase(result, "findTransactionFromViewCountByParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTransactionFromViewCountByParams failed: unknown result");
    }

    public int systemSend(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException
    {
      send_systemSend(uid, itemView);
      return recv_systemSend();
    }

    public void send_systemSend(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException
    {
      systemSend_args args = new systemSend_args();
      args.setUid(uid);
      args.setItemView(itemView);
      sendBase("systemSend", args);
    }

    public int recv_systemSend() throws org.apache.thrift.TException
    {
      systemSend_result result = new systemSend_result();
      receiveBase(result, "systemSend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "systemSend failed: unknown result");
    }

    public int send(long uid, one.show.pay.thrift.view.ItemView itemView, long liveId, long tid) throws org.apache.thrift.TException
    {
      send_send(uid, itemView, liveId, tid);
      return recv_send();
    }

    public void send_send(long uid, one.show.pay.thrift.view.ItemView itemView, long liveId, long tid) throws org.apache.thrift.TException
    {
      send_args args = new send_args();
      args.setUid(uid);
      args.setItemView(itemView);
      args.setLiveId(liveId);
      args.setTid(tid);
      sendBase("send", args);
    }

    public int recv_send() throws org.apache.thrift.TException
    {
      send_result result = new send_result();
      receiveBase(result, "send");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "send failed: unknown result");
    }

    public int consume(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException
    {
      send_consume(uid, itemView);
      return recv_consume();
    }

    public void send_consume(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException
    {
      consume_args args = new consume_args();
      args.setUid(uid);
      args.setItemView(itemView);
      sendBase("consume", args);
    }

    public int recv_consume() throws org.apache.thrift.TException
    {
      consume_result result = new consume_result();
      receiveBase(result, "consume");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consume failed: unknown result");
    }

    public int buy(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException
    {
      send_buy(uid, itemView);
      return recv_buy();
    }

    public void send_buy(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException
    {
      buy_args args = new buy_args();
      args.setUid(uid);
      args.setItemView(itemView);
      sendBase("buy", args);
    }

    public int recv_buy() throws org.apache.thrift.TException
    {
      buy_result result = new buy_result();
      receiveBase(result, "buy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "buy failed: unknown result");
    }

    public one.show.pay.thrift.view.ExtractRmbView getExtractRmbViewById(long id) throws org.apache.thrift.TException
    {
      send_getExtractRmbViewById(id);
      return recv_getExtractRmbViewById();
    }

    public void send_getExtractRmbViewById(long id) throws org.apache.thrift.TException
    {
      getExtractRmbViewById_args args = new getExtractRmbViewById_args();
      args.setId(id);
      sendBase("getExtractRmbViewById", args);
    }

    public one.show.pay.thrift.view.ExtractRmbView recv_getExtractRmbViewById() throws org.apache.thrift.TException
    {
      getExtractRmbViewById_result result = new getExtractRmbViewById_result();
      receiveBase(result, "getExtractRmbViewById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtractRmbViewById failed: unknown result");
    }

    public List<one.show.pay.thrift.view.ExtractRmbView> getExtractRmbListByBatchNo(long batchNo) throws org.apache.thrift.TException
    {
      send_getExtractRmbListByBatchNo(batchNo);
      return recv_getExtractRmbListByBatchNo();
    }

    public void send_getExtractRmbListByBatchNo(long batchNo) throws org.apache.thrift.TException
    {
      getExtractRmbListByBatchNo_args args = new getExtractRmbListByBatchNo_args();
      args.setBatchNo(batchNo);
      sendBase("getExtractRmbListByBatchNo", args);
    }

    public List<one.show.pay.thrift.view.ExtractRmbView> recv_getExtractRmbListByBatchNo() throws org.apache.thrift.TException
    {
      getExtractRmbListByBatchNo_result result = new getExtractRmbListByBatchNo_result();
      receiveBase(result, "getExtractRmbListByBatchNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtractRmbListByBatchNo failed: unknown result");
    }

    public List<one.show.pay.thrift.view.ExtractRmbView> getExtractRmbListByStatus(int status, int count) throws org.apache.thrift.TException
    {
      send_getExtractRmbListByStatus(status, count);
      return recv_getExtractRmbListByStatus();
    }

    public void send_getExtractRmbListByStatus(int status, int count) throws org.apache.thrift.TException
    {
      getExtractRmbListByStatus_args args = new getExtractRmbListByStatus_args();
      args.setStatus(status);
      args.setCount(count);
      sendBase("getExtractRmbListByStatus", args);
    }

    public List<one.show.pay.thrift.view.ExtractRmbView> recv_getExtractRmbListByStatus() throws org.apache.thrift.TException
    {
      getExtractRmbListByStatus_result result = new getExtractRmbListByStatus_result();
      receiveBase(result, "getExtractRmbListByStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtractRmbListByStatus failed: unknown result");
    }

    public one.show.pay.thrift.view.ExtractRmbListView getExtractRmbListByUid(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException
    {
      send_getExtractRmbListByUid(paramMap, start, count);
      return recv_getExtractRmbListByUid();
    }

    public void send_getExtractRmbListByUid(Map<String,String> paramMap, int start, int count) throws org.apache.thrift.TException
    {
      getExtractRmbListByUid_args args = new getExtractRmbListByUid_args();
      args.setParamMap(paramMap);
      args.setStart(start);
      args.setCount(count);
      sendBase("getExtractRmbListByUid", args);
    }

    public one.show.pay.thrift.view.ExtractRmbListView recv_getExtractRmbListByUid() throws org.apache.thrift.TException
    {
      getExtractRmbListByUid_result result = new getExtractRmbListByUid_result();
      receiveBase(result, "getExtractRmbListByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtractRmbListByUid failed: unknown result");
    }

    public double getExtractRmbTotalByUid(long uid, String key, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_getExtractRmbTotalByUid(uid, key, paramMap);
      return recv_getExtractRmbTotalByUid();
    }

    public void send_getExtractRmbTotalByUid(long uid, String key, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      getExtractRmbTotalByUid_args args = new getExtractRmbTotalByUid_args();
      args.setUid(uid);
      args.setKey(key);
      args.setParamMap(paramMap);
      sendBase("getExtractRmbTotalByUid", args);
    }

    public double recv_getExtractRmbTotalByUid() throws org.apache.thrift.TException
    {
      getExtractRmbTotalByUid_result result = new getExtractRmbTotalByUid_result();
      receiveBase(result, "getExtractRmbTotalByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtractRmbTotalByUid failed: unknown result");
    }

    public void updateExtractRmbById(long id, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_updateExtractRmbById(id, paramMap);
      recv_updateExtractRmbById();
    }

    public void send_updateExtractRmbById(long id, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      updateExtractRmbById_args args = new updateExtractRmbById_args();
      args.setId(id);
      args.setParamMap(paramMap);
      sendBase("updateExtractRmbById", args);
    }

    public void recv_updateExtractRmbById() throws org.apache.thrift.TException
    {
      updateExtractRmbById_result result = new updateExtractRmbById_result();
      receiveBase(result, "updateExtractRmbById");
      return;
    }

    public void saveExtractRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView) throws org.apache.thrift.TException
    {
      send_saveExtractRmb(extractRmbView);
      recv_saveExtractRmb();
    }

    public void send_saveExtractRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView) throws org.apache.thrift.TException
    {
      saveExtractRmb_args args = new saveExtractRmb_args();
      args.setExtractRmbView(extractRmbView);
      sendBase("saveExtractRmb", args);
    }

    public void recv_saveExtractRmb() throws org.apache.thrift.TException
    {
      saveExtractRmb_result result = new saveExtractRmb_result();
      receiveBase(result, "saveExtractRmb");
      return;
    }

    public int redeemRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView) throws org.apache.thrift.TException
    {
      send_redeemRmb(extractRmbView);
      return recv_redeemRmb();
    }

    public void send_redeemRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView) throws org.apache.thrift.TException
    {
      redeemRmb_args args = new redeemRmb_args();
      args.setExtractRmbView(extractRmbView);
      sendBase("redeemRmb", args);
    }

    public int recv_redeemRmb() throws org.apache.thrift.TException
    {
      redeemRmb_result result = new redeemRmb_result();
      receiveBase(result, "redeemRmb");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "redeemRmb failed: unknown result");
    }

    public void charge(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException
    {
      send_charge(uid, itemView);
      recv_charge();
    }

    public void send_charge(long uid, one.show.pay.thrift.view.ItemView itemView) throws org.apache.thrift.TException
    {
      charge_args args = new charge_args();
      args.setUid(uid);
      args.setItemView(itemView);
      sendBase("charge", args);
    }

    public void recv_charge() throws org.apache.thrift.TException
    {
      charge_result result = new charge_result();
      receiveBase(result, "charge");
      return;
    }

    public List<one.show.pay.thrift.view.GiftRankView> findGiftRanksByUid(long uid, int start, int count) throws org.apache.thrift.TException
    {
      send_findGiftRanksByUid(uid, start, count);
      return recv_findGiftRanksByUid();
    }

    public void send_findGiftRanksByUid(long uid, int start, int count) throws org.apache.thrift.TException
    {
      findGiftRanksByUid_args args = new findGiftRanksByUid_args();
      args.setUid(uid);
      args.setStart(start);
      args.setCount(count);
      sendBase("findGiftRanksByUid", args);
    }

    public List<one.show.pay.thrift.view.GiftRankView> recv_findGiftRanksByUid() throws org.apache.thrift.TException
    {
      findGiftRanksByUid_result result = new findGiftRanksByUid_result();
      receiveBase(result, "findGiftRanksByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGiftRanksByUid failed: unknown result");
    }

    public List<one.show.pay.thrift.view.GiftRankView> findGiftRanksByVid(long vid, int start, int count) throws org.apache.thrift.TException
    {
      send_findGiftRanksByVid(vid, start, count);
      return recv_findGiftRanksByVid();
    }

    public void send_findGiftRanksByVid(long vid, int start, int count) throws org.apache.thrift.TException
    {
      findGiftRanksByVid_args args = new findGiftRanksByVid_args();
      args.setVid(vid);
      args.setStart(start);
      args.setCount(count);
      sendBase("findGiftRanksByVid", args);
    }

    public List<one.show.pay.thrift.view.GiftRankView> recv_findGiftRanksByVid() throws org.apache.thrift.TException
    {
      findGiftRanksByVid_result result = new findGiftRanksByVid_result();
      receiveBase(result, "findGiftRanksByVid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGiftRanksByVid failed: unknown result");
    }

    public int findTotalReceiveByVid(long vid) throws org.apache.thrift.TException
    {
      send_findTotalReceiveByVid(vid);
      return recv_findTotalReceiveByVid();
    }

    public void send_findTotalReceiveByVid(long vid) throws org.apache.thrift.TException
    {
      findTotalReceiveByVid_args args = new findTotalReceiveByVid_args();
      args.setVid(vid);
      sendBase("findTotalReceiveByVid", args);
    }

    public int recv_findTotalReceiveByVid() throws org.apache.thrift.TException
    {
      findTotalReceiveByVid_result result = new findTotalReceiveByVid_result();
      receiveBase(result, "findTotalReceiveByVid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTotalReceiveByVid failed: unknown result");
    }

    public List<one.show.pay.thrift.view.PayConfigView> findAllPayConfigs() throws org.apache.thrift.TException
    {
      send_findAllPayConfigs();
      return recv_findAllPayConfigs();
    }

    public void send_findAllPayConfigs() throws org.apache.thrift.TException
    {
      findAllPayConfigs_args args = new findAllPayConfigs_args();
      sendBase("findAllPayConfigs", args);
    }

    public List<one.show.pay.thrift.view.PayConfigView> recv_findAllPayConfigs() throws org.apache.thrift.TException
    {
      findAllPayConfigs_result result = new findAllPayConfigs_result();
      receiveBase(result, "findAllPayConfigs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllPayConfigs failed: unknown result");
    }

    public void saveExtractBind(one.show.pay.thrift.view.ExtractBindView extractBindView) throws org.apache.thrift.TException
    {
      send_saveExtractBind(extractBindView);
      recv_saveExtractBind();
    }

    public void send_saveExtractBind(one.show.pay.thrift.view.ExtractBindView extractBindView) throws org.apache.thrift.TException
    {
      saveExtractBind_args args = new saveExtractBind_args();
      args.setExtractBindView(extractBindView);
      sendBase("saveExtractBind", args);
    }

    public void recv_saveExtractBind() throws org.apache.thrift.TException
    {
      saveExtractBind_result result = new saveExtractBind_result();
      receiveBase(result, "saveExtractBind");
      return;
    }

    public one.show.pay.thrift.view.ExtractBindView getExtractBindByUid(long uid) throws org.apache.thrift.TException
    {
      send_getExtractBindByUid(uid);
      return recv_getExtractBindByUid();
    }

    public void send_getExtractBindByUid(long uid) throws org.apache.thrift.TException
    {
      getExtractBindByUid_args args = new getExtractBindByUid_args();
      args.setUid(uid);
      sendBase("getExtractBindByUid", args);
    }

    public one.show.pay.thrift.view.ExtractBindView recv_getExtractBindByUid() throws org.apache.thrift.TException
    {
      getExtractBindByUid_result result = new getExtractBindByUid_result();
      receiveBase(result, "getExtractBindByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtractBindByUid failed: unknown result");
    }

    public void updateExtractBindByUid(long uid, String alipayAccount, String alipayName) throws org.apache.thrift.TException
    {
      send_updateExtractBindByUid(uid, alipayAccount, alipayName);
      recv_updateExtractBindByUid();
    }

    public void send_updateExtractBindByUid(long uid, String alipayAccount, String alipayName) throws org.apache.thrift.TException
    {
      updateExtractBindByUid_args args = new updateExtractBindByUid_args();
      args.setUid(uid);
      args.setAlipayAccount(alipayAccount);
      args.setAlipayName(alipayName);
      sendBase("updateExtractBindByUid", args);
    }

    public void recv_updateExtractBindByUid() throws org.apache.thrift.TException
    {
      updateExtractBindByUid_result result = new updateExtractBindByUid_result();
      receiveBase(result, "updateExtractBindByUid");
      return;
    }

    public void freeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc) throws org.apache.thrift.TException
    {
      send_freeze(uid, itemView, actionValue, actionDesc);
      recv_freeze();
    }

    public void send_freeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc) throws org.apache.thrift.TException
    {
      freeze_args args = new freeze_args();
      args.setUid(uid);
      args.setItemView(itemView);
      args.setActionValue(actionValue);
      args.setActionDesc(actionDesc);
      sendBase("freeze", args);
    }

    public void recv_freeze() throws org.apache.thrift.TException
    {
      freeze_result result = new freeze_result();
      receiveBase(result, "freeze");
      return;
    }

    public void unfreeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc) throws org.apache.thrift.TException
    {
      send_unfreeze(uid, itemView, actionValue, actionDesc);
      recv_unfreeze();
    }

    public void send_unfreeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc) throws org.apache.thrift.TException
    {
      unfreeze_args args = new unfreeze_args();
      args.setUid(uid);
      args.setItemView(itemView);
      args.setActionValue(actionValue);
      args.setActionDesc(actionDesc);
      sendBase("unfreeze", args);
    }

    public void recv_unfreeze() throws org.apache.thrift.TException
    {
      unfreeze_result result = new unfreeze_result();
      receiveBase(result, "unfreeze");
      return;
    }

    public void reduce(long uid, one.show.pay.thrift.view.ItemView item, int actionId, String actionDesc) throws org.apache.thrift.TException
    {
      send_reduce(uid, item, actionId, actionDesc);
      recv_reduce();
    }

    public void send_reduce(long uid, one.show.pay.thrift.view.ItemView item, int actionId, String actionDesc) throws org.apache.thrift.TException
    {
      reduce_args args = new reduce_args();
      args.setUid(uid);
      args.setItem(item);
      args.setActionId(actionId);
      args.setActionDesc(actionDesc);
      sendBase("reduce", args);
    }

    public void recv_reduce() throws org.apache.thrift.TException
    {
      reduce_result result = new reduce_result();
      receiveBase(result, "reduce");
      return;
    }

    public double getExtractRmbTotalCount() throws org.apache.thrift.TException
    {
      send_getExtractRmbTotalCount();
      return recv_getExtractRmbTotalCount();
    }

    public void send_getExtractRmbTotalCount() throws org.apache.thrift.TException
    {
      getExtractRmbTotalCount_args args = new getExtractRmbTotalCount_args();
      sendBase("getExtractRmbTotalCount", args);
    }

    public double recv_getExtractRmbTotalCount() throws org.apache.thrift.TException
    {
      getExtractRmbTotalCount_result result = new getExtractRmbTotalCount_result();
      receiveBase(result, "getExtractRmbTotalCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtractRmbTotalCount failed: unknown result");
    }

    public int saveFamilyClearing(one.show.pay.thrift.view.FamilyClearingView familyClearingView) throws org.apache.thrift.TException
    {
      send_saveFamilyClearing(familyClearingView);
      return recv_saveFamilyClearing();
    }

    public void send_saveFamilyClearing(one.show.pay.thrift.view.FamilyClearingView familyClearingView) throws org.apache.thrift.TException
    {
      saveFamilyClearing_args args = new saveFamilyClearing_args();
      args.setFamilyClearingView(familyClearingView);
      sendBase("saveFamilyClearing", args);
    }

    public int recv_saveFamilyClearing() throws org.apache.thrift.TException
    {
      saveFamilyClearing_result result = new saveFamilyClearing_result();
      receiveBase(result, "saveFamilyClearing");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveFamilyClearing failed: unknown result");
    }

    public void saveFamilyMemberClearing(one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView) throws org.apache.thrift.TException
    {
      send_saveFamilyMemberClearing(familyMemberClearingView);
      recv_saveFamilyMemberClearing();
    }

    public void send_saveFamilyMemberClearing(one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView) throws org.apache.thrift.TException
    {
      saveFamilyMemberClearing_args args = new saveFamilyMemberClearing_args();
      args.setFamilyMemberClearingView(familyMemberClearingView);
      sendBase("saveFamilyMemberClearing", args);
    }

    public void recv_saveFamilyMemberClearing() throws org.apache.thrift.TException
    {
      saveFamilyMemberClearing_result result = new saveFamilyMemberClearing_result();
      receiveBase(result, "saveFamilyMemberClearing");
      return;
    }

    public one.show.pay.thrift.view.FamilyClearingListView findFamilyClearingList(Map<String,String> params, int start, int count) throws org.apache.thrift.TException
    {
      send_findFamilyClearingList(params, start, count);
      return recv_findFamilyClearingList();
    }

    public void send_findFamilyClearingList(Map<String,String> params, int start, int count) throws org.apache.thrift.TException
    {
      findFamilyClearingList_args args = new findFamilyClearingList_args();
      args.setParams(params);
      args.setStart(start);
      args.setCount(count);
      sendBase("findFamilyClearingList", args);
    }

    public one.show.pay.thrift.view.FamilyClearingListView recv_findFamilyClearingList() throws org.apache.thrift.TException
    {
      findFamilyClearingList_result result = new findFamilyClearingList_result();
      receiveBase(result, "findFamilyClearingList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFamilyClearingList failed: unknown result");
    }

    public one.show.pay.thrift.view.FamilyMemberClearingListView findFamilyMemberClearingListByCidAndFamilyId(int cid, long familyId, int start, int count) throws org.apache.thrift.TException
    {
      send_findFamilyMemberClearingListByCidAndFamilyId(cid, familyId, start, count);
      return recv_findFamilyMemberClearingListByCidAndFamilyId();
    }

    public void send_findFamilyMemberClearingListByCidAndFamilyId(int cid, long familyId, int start, int count) throws org.apache.thrift.TException
    {
      findFamilyMemberClearingListByCidAndFamilyId_args args = new findFamilyMemberClearingListByCidAndFamilyId_args();
      args.setCid(cid);
      args.setFamilyId(familyId);
      args.setStart(start);
      args.setCount(count);
      sendBase("findFamilyMemberClearingListByCidAndFamilyId", args);
    }

    public one.show.pay.thrift.view.FamilyMemberClearingListView recv_findFamilyMemberClearingListByCidAndFamilyId() throws org.apache.thrift.TException
    {
      findFamilyMemberClearingListByCidAndFamilyId_result result = new findFamilyMemberClearingListByCidAndFamilyId_result();
      receiveBase(result, "findFamilyMemberClearingListByCidAndFamilyId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFamilyMemberClearingListByCidAndFamilyId failed: unknown result");
    }

    public one.show.pay.thrift.view.FamilyClearingView getFamilyClearingViewById(long id) throws org.apache.thrift.TException
    {
      send_getFamilyClearingViewById(id);
      return recv_getFamilyClearingViewById();
    }

    public void send_getFamilyClearingViewById(long id) throws org.apache.thrift.TException
    {
      getFamilyClearingViewById_args args = new getFamilyClearingViewById_args();
      args.setId(id);
      sendBase("getFamilyClearingViewById", args);
    }

    public one.show.pay.thrift.view.FamilyClearingView recv_getFamilyClearingViewById() throws org.apache.thrift.TException
    {
      getFamilyClearingViewById_result result = new getFamilyClearingViewById_result();
      receiveBase(result, "getFamilyClearingViewById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFamilyClearingViewById failed: unknown result");
    }

    public void updateFamilyClearingView(long id, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      send_updateFamilyClearingView(id, updateContent);
      recv_updateFamilyClearingView();
    }

    public void send_updateFamilyClearingView(long id, Map<String,String> updateContent) throws org.apache.thrift.TException
    {
      updateFamilyClearingView_args args = new updateFamilyClearingView_args();
      args.setId(id);
      args.setUpdateContent(updateContent);
      sendBase("updateFamilyClearingView", args);
    }

    public void recv_updateFamilyClearingView() throws org.apache.thrift.TException
    {
      updateFamilyClearingView_result result = new updateFamilyClearingView_result();
      receiveBase(result, "updateFamilyClearingView");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getMaxBatchNo(org.apache.thrift.async.AsyncMethodCallback<getMaxBatchNo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMaxBatchNo_call method_call = new getMaxBatchNo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMaxBatchNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getMaxBatchNo_call(org.apache.thrift.async.AsyncMethodCallback<getMaxBatchNo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMaxBatchNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMaxBatchNo_args args = new getMaxBatchNo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMaxBatchNo();
      }
    }

    public void saveOrders(one.show.pay.thrift.view.OrdersView ordersView, org.apache.thrift.async.AsyncMethodCallback<saveOrders_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOrders_call method_call = new saveOrders_call(ordersView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOrders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.pay.thrift.view.OrdersView ordersView;
      public saveOrders_call(one.show.pay.thrift.view.OrdersView ordersView, org.apache.thrift.async.AsyncMethodCallback<saveOrders_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ordersView = ordersView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOrders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOrders_args args = new saveOrders_args();
        args.setOrdersView(ordersView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveOrders();
      }
    }

    public void getOrdersById(long orderId, org.apache.thrift.async.AsyncMethodCallback<getOrdersById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrdersById_call method_call = new getOrdersById_call(orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrdersById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long orderId;
      public getOrdersById_call(long orderId, org.apache.thrift.async.AsyncMethodCallback<getOrdersById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrdersById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrdersById_args args = new getOrdersById_args();
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.OrdersView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrdersById();
      }
    }

    public void findOrderViewByReceipt(String md5_receipt, org.apache.thrift.async.AsyncMethodCallback<findOrderViewByReceipt_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOrderViewByReceipt_call method_call = new findOrderViewByReceipt_call(md5_receipt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOrderViewByReceipt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String md5_receipt;
      public findOrderViewByReceipt_call(String md5_receipt, org.apache.thrift.async.AsyncMethodCallback<findOrderViewByReceipt_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.md5_receipt = md5_receipt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOrderViewByReceipt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOrderViewByReceipt_args args = new findOrderViewByReceipt_args();
        args.setMd5_receipt(md5_receipt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.OrdersView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOrderViewByReceipt();
      }
    }

    public void updateOrdersById(long orderId, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateOrdersById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOrdersById_call method_call = new updateOrdersById_call(orderId, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOrdersById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long orderId;
      private Map<String,String> paramMap;
      public updateOrdersById_call(long orderId, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateOrdersById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOrdersById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOrdersById_args args = new updateOrdersById_args();
        args.setOrderId(orderId);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateOrdersById();
      }
    }

    public void updateOrdersByConditions(Map<String,String> conditions, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateOrdersByConditions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOrdersByConditions_call method_call = new updateOrdersByConditions_call(conditions, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOrdersByConditions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> conditions;
      private Map<String,String> paramMap;
      public updateOrdersByConditions_call(Map<String,String> conditions, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateOrdersByConditions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.conditions = conditions;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOrdersByConditions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOrdersByConditions_args args = new updateOrdersByConditions_args();
        args.setConditions(conditions);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOrdersByConditions();
      }
    }

    public void findStockByUidAndParam(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<findStockByUidAndParam_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStockByUidAndParam_call method_call = new findStockByUidAndParam_call(uid, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStockByUidAndParam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private Map<String,String> params;
      public findStockByUidAndParam_call(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<findStockByUidAndParam_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStockByUidAndParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStockByUidAndParam_args args = new findStockByUidAndParam_args();
        args.setUid(uid);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.StockView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStockByUidAndParam();
      }
    }

    public void findStockByUidAndItem(long uid, int itemType, int itemId, org.apache.thrift.async.AsyncMethodCallback<findStockByUidAndItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStockByUidAndItem_call method_call = new findStockByUidAndItem_call(uid, itemType, itemId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStockByUidAndItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int itemType;
      private int itemId;
      public findStockByUidAndItem_call(long uid, int itemType, int itemId, org.apache.thrift.async.AsyncMethodCallback<findStockByUidAndItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.itemType = itemType;
        this.itemId = itemId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStockByUidAndItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStockByUidAndItem_args args = new findStockByUidAndItem_args();
        args.setUid(uid);
        args.setItemType(itemType);
        args.setItemId(itemId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.StockView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStockByUidAndItem();
      }
    }

    public void findStockLogByUidAndParam(long uid, Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findStockLogByUidAndParam_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStockLogByUidAndParam_call method_call = new findStockLogByUidAndParam_call(uid, params, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStockLogByUidAndParam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private Map<String,String> params;
      private int start;
      private int count;
      public findStockLogByUidAndParam_call(long uid, Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findStockLogByUidAndParam_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.params = params;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStockLogByUidAndParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStockLogByUidAndParam_args args = new findStockLogByUidAndParam_args();
        args.setUid(uid);
        args.setParams(params);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.StockLogListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStockLogByUidAndParam();
      }
    }

    public void findTransactionToUidList(long uid, Map<String,String> params, int satrt, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findTransactionToUidList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTransactionToUidList_call method_call = new findTransactionToUidList_call(uid, params, satrt, pageCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTransactionToUidList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private Map<String,String> params;
      private int satrt;
      private int pageCount;
      public findTransactionToUidList_call(long uid, Map<String,String> params, int satrt, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findTransactionToUidList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.params = params;
        this.satrt = satrt;
        this.pageCount = pageCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTransactionToUidList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTransactionToUidList_args args = new findTransactionToUidList_args();
        args.setUid(uid);
        args.setParams(params);
        args.setSatrt(satrt);
        args.setPageCount(pageCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.TransactionToView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTransactionToUidList();
      }
    }

    public void findTransactionToUidCount(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<findTransactionToUidCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTransactionToUidCount_call method_call = new findTransactionToUidCount_call(uid, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTransactionToUidCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private Map<String,String> params;
      public findTransactionToUidCount_call(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<findTransactionToUidCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTransactionToUidCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTransactionToUidCount_args args = new findTransactionToUidCount_args();
        args.setUid(uid);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTransactionToUidCount();
      }
    }

    public void saveTransactionToView(one.show.pay.thrift.view.TransactionToView TransactionToView, org.apache.thrift.async.AsyncMethodCallback<saveTransactionToView_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveTransactionToView_call method_call = new saveTransactionToView_call(TransactionToView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveTransactionToView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.pay.thrift.view.TransactionToView TransactionToView;
      public saveTransactionToView_call(one.show.pay.thrift.view.TransactionToView TransactionToView, org.apache.thrift.async.AsyncMethodCallback<saveTransactionToView_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.TransactionToView = TransactionToView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTransactionToView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveTransactionToView_args args = new saveTransactionToView_args();
        args.setTransactionToView(TransactionToView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveTransactionToView();
      }
    }

    public void saveTransactionFromView(one.show.pay.thrift.view.TransactionFromView transactionFromView, org.apache.thrift.async.AsyncMethodCallback<saveTransactionFromView_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveTransactionFromView_call method_call = new saveTransactionFromView_call(transactionFromView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveTransactionFromView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.pay.thrift.view.TransactionFromView transactionFromView;
      public saveTransactionFromView_call(one.show.pay.thrift.view.TransactionFromView transactionFromView, org.apache.thrift.async.AsyncMethodCallback<saveTransactionFromView_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transactionFromView = transactionFromView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveTransactionFromView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveTransactionFromView_args args = new saveTransactionFromView_args();
        args.setTransactionFromView(transactionFromView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveTransactionFromView();
      }
    }

    public void findOrdersListByParams(Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findOrdersListByParams_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOrdersListByParams_call method_call = new findOrdersListByParams_call(params, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOrdersListByParams_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> params;
      private int start;
      private int count;
      public findOrdersListByParams_call(Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findOrdersListByParams_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOrdersListByParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOrdersListByParams_args args = new findOrdersListByParams_args();
        args.setParams(params);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.OrdersListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOrdersListByParams();
      }
    }

    public void findOrdersMoneyByParams(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<findOrdersMoneyByParams_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOrdersMoneyByParams_call method_call = new findOrdersMoneyByParams_call(params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOrdersMoneyByParams_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> params;
      public findOrdersMoneyByParams_call(Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<findOrdersMoneyByParams_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOrdersMoneyByParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOrdersMoneyByParams_args args = new findOrdersMoneyByParams_args();
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOrdersMoneyByParams();
      }
    }

    public void getStockLogItemTotalByUid(long uid, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<getStockLogItemTotalByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStockLogItemTotalByUid_call method_call = new getStockLogItemTotalByUid_call(uid, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStockLogItemTotalByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private Map<String,String> paramMap;
      public getStockLogItemTotalByUid_call(long uid, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<getStockLogItemTotalByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStockLogItemTotalByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStockLogItemTotalByUid_args args = new getStockLogItemTotalByUid_args();
        args.setUid(uid);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStockLogItemTotalByUid();
      }
    }

    public void findOrdersViewsByUid(long uid, Map<String,String> params, int start, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findOrdersViewsByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOrdersViewsByUid_call method_call = new findOrdersViewsByUid_call(uid, params, start, pageCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOrdersViewsByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private Map<String,String> params;
      private int start;
      private int pageCount;
      public findOrdersViewsByUid_call(long uid, Map<String,String> params, int start, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findOrdersViewsByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.params = params;
        this.start = start;
        this.pageCount = pageCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOrdersViewsByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOrdersViewsByUid_args args = new findOrdersViewsByUid_args();
        args.setUid(uid);
        args.setParams(params);
        args.setStart(start);
        args.setPageCount(pageCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.OrdersView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOrdersViewsByUid();
      }
    }

    public void findTransactionFromViewListByParams(long uid, Map<String,String> params, int start, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findTransactionFromViewListByParams_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTransactionFromViewListByParams_call method_call = new findTransactionFromViewListByParams_call(uid, params, start, pageCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTransactionFromViewListByParams_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private Map<String,String> params;
      private int start;
      private int pageCount;
      public findTransactionFromViewListByParams_call(long uid, Map<String,String> params, int start, int pageCount, org.apache.thrift.async.AsyncMethodCallback<findTransactionFromViewListByParams_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.params = params;
        this.start = start;
        this.pageCount = pageCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTransactionFromViewListByParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTransactionFromViewListByParams_args args = new findTransactionFromViewListByParams_args();
        args.setUid(uid);
        args.setParams(params);
        args.setStart(start);
        args.setPageCount(pageCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.TransactionFromView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTransactionFromViewListByParams();
      }
    }

    public void findTransactionFromViewCountByParams(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<findTransactionFromViewCountByParams_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTransactionFromViewCountByParams_call method_call = new findTransactionFromViewCountByParams_call(uid, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTransactionFromViewCountByParams_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private Map<String,String> params;
      public findTransactionFromViewCountByParams_call(long uid, Map<String,String> params, org.apache.thrift.async.AsyncMethodCallback<findTransactionFromViewCountByParams_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTransactionFromViewCountByParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTransactionFromViewCountByParams_args args = new findTransactionFromViewCountByParams_args();
        args.setUid(uid);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTransactionFromViewCountByParams();
      }
    }

    public void systemSend(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<systemSend_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      systemSend_call method_call = new systemSend_call(uid, itemView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class systemSend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private one.show.pay.thrift.view.ItemView itemView;
      public systemSend_call(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<systemSend_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.itemView = itemView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("systemSend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        systemSend_args args = new systemSend_args();
        args.setUid(uid);
        args.setItemView(itemView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_systemSend();
      }
    }

    public void send(long uid, one.show.pay.thrift.view.ItemView itemView, long liveId, long tid, org.apache.thrift.async.AsyncMethodCallback<send_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      send_call method_call = new send_call(uid, itemView, liveId, tid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class send_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private one.show.pay.thrift.view.ItemView itemView;
      private long liveId;
      private long tid;
      public send_call(long uid, one.show.pay.thrift.view.ItemView itemView, long liveId, long tid, org.apache.thrift.async.AsyncMethodCallback<send_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.itemView = itemView;
        this.liveId = liveId;
        this.tid = tid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("send", org.apache.thrift.protocol.TMessageType.CALL, 0));
        send_args args = new send_args();
        args.setUid(uid);
        args.setItemView(itemView);
        args.setLiveId(liveId);
        args.setTid(tid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_send();
      }
    }

    public void consume(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<consume_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consume_call method_call = new consume_call(uid, itemView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consume_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private one.show.pay.thrift.view.ItemView itemView;
      public consume_call(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<consume_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.itemView = itemView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consume", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consume_args args = new consume_args();
        args.setUid(uid);
        args.setItemView(itemView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consume();
      }
    }

    public void buy(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<buy_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      buy_call method_call = new buy_call(uid, itemView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class buy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private one.show.pay.thrift.view.ItemView itemView;
      public buy_call(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<buy_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.itemView = itemView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("buy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        buy_args args = new buy_args();
        args.setUid(uid);
        args.setItemView(itemView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_buy();
      }
    }

    public void getExtractRmbViewById(long id, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbViewById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtractRmbViewById_call method_call = new getExtractRmbViewById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtractRmbViewById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public getExtractRmbViewById_call(long id, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbViewById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtractRmbViewById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtractRmbViewById_args args = new getExtractRmbViewById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.ExtractRmbView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtractRmbViewById();
      }
    }

    public void getExtractRmbListByBatchNo(long batchNo, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbListByBatchNo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtractRmbListByBatchNo_call method_call = new getExtractRmbListByBatchNo_call(batchNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtractRmbListByBatchNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long batchNo;
      public getExtractRmbListByBatchNo_call(long batchNo, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbListByBatchNo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchNo = batchNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtractRmbListByBatchNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtractRmbListByBatchNo_args args = new getExtractRmbListByBatchNo_args();
        args.setBatchNo(batchNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.ExtractRmbView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtractRmbListByBatchNo();
      }
    }

    public void getExtractRmbListByStatus(int status, int count, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbListByStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtractRmbListByStatus_call method_call = new getExtractRmbListByStatus_call(status, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtractRmbListByStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int status;
      private int count;
      public getExtractRmbListByStatus_call(int status, int count, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbListByStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtractRmbListByStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtractRmbListByStatus_args args = new getExtractRmbListByStatus_args();
        args.setStatus(status);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.ExtractRmbView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtractRmbListByStatus();
      }
    }

    public void getExtractRmbListByUid(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbListByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtractRmbListByUid_call method_call = new getExtractRmbListByUid_call(paramMap, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtractRmbListByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> paramMap;
      private int start;
      private int count;
      public getExtractRmbListByUid_call(Map<String,String> paramMap, int start, int count, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbListByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramMap = paramMap;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtractRmbListByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtractRmbListByUid_args args = new getExtractRmbListByUid_args();
        args.setParamMap(paramMap);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.ExtractRmbListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtractRmbListByUid();
      }
    }

    public void getExtractRmbTotalByUid(long uid, String key, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbTotalByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtractRmbTotalByUid_call method_call = new getExtractRmbTotalByUid_call(uid, key, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtractRmbTotalByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private String key;
      private Map<String,String> paramMap;
      public getExtractRmbTotalByUid_call(long uid, String key, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<getExtractRmbTotalByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.key = key;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtractRmbTotalByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtractRmbTotalByUid_args args = new getExtractRmbTotalByUid_args();
        args.setUid(uid);
        args.setKey(key);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtractRmbTotalByUid();
      }
    }

    public void updateExtractRmbById(long id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateExtractRmbById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateExtractRmbById_call method_call = new updateExtractRmbById_call(id, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateExtractRmbById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private Map<String,String> paramMap;
      public updateExtractRmbById_call(long id, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback<updateExtractRmbById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateExtractRmbById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateExtractRmbById_args args = new updateExtractRmbById_args();
        args.setId(id);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateExtractRmbById();
      }
    }

    public void saveExtractRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView, org.apache.thrift.async.AsyncMethodCallback<saveExtractRmb_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveExtractRmb_call method_call = new saveExtractRmb_call(extractRmbView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveExtractRmb_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.pay.thrift.view.ExtractRmbView extractRmbView;
      public saveExtractRmb_call(one.show.pay.thrift.view.ExtractRmbView extractRmbView, org.apache.thrift.async.AsyncMethodCallback<saveExtractRmb_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.extractRmbView = extractRmbView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveExtractRmb", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveExtractRmb_args args = new saveExtractRmb_args();
        args.setExtractRmbView(extractRmbView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveExtractRmb();
      }
    }

    public void redeemRmb(one.show.pay.thrift.view.ExtractRmbView extractRmbView, org.apache.thrift.async.AsyncMethodCallback<redeemRmb_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      redeemRmb_call method_call = new redeemRmb_call(extractRmbView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class redeemRmb_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.pay.thrift.view.ExtractRmbView extractRmbView;
      public redeemRmb_call(one.show.pay.thrift.view.ExtractRmbView extractRmbView, org.apache.thrift.async.AsyncMethodCallback<redeemRmb_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.extractRmbView = extractRmbView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("redeemRmb", org.apache.thrift.protocol.TMessageType.CALL, 0));
        redeemRmb_args args = new redeemRmb_args();
        args.setExtractRmbView(extractRmbView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_redeemRmb();
      }
    }

    public void charge(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<charge_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      charge_call method_call = new charge_call(uid, itemView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class charge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private one.show.pay.thrift.view.ItemView itemView;
      public charge_call(long uid, one.show.pay.thrift.view.ItemView itemView, org.apache.thrift.async.AsyncMethodCallback<charge_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.itemView = itemView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("charge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        charge_args args = new charge_args();
        args.setUid(uid);
        args.setItemView(itemView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_charge();
      }
    }

    public void findGiftRanksByUid(long uid, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findGiftRanksByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGiftRanksByUid_call method_call = new findGiftRanksByUid_call(uid, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGiftRanksByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private int start;
      private int count;
      public findGiftRanksByUid_call(long uid, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findGiftRanksByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGiftRanksByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGiftRanksByUid_args args = new findGiftRanksByUid_args();
        args.setUid(uid);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.GiftRankView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGiftRanksByUid();
      }
    }

    public void findGiftRanksByVid(long vid, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findGiftRanksByVid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGiftRanksByVid_call method_call = new findGiftRanksByVid_call(vid, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGiftRanksByVid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long vid;
      private int start;
      private int count;
      public findGiftRanksByVid_call(long vid, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findGiftRanksByVid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vid = vid;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGiftRanksByVid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGiftRanksByVid_args args = new findGiftRanksByVid_args();
        args.setVid(vid);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.GiftRankView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGiftRanksByVid();
      }
    }

    public void findTotalReceiveByVid(long vid, org.apache.thrift.async.AsyncMethodCallback<findTotalReceiveByVid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTotalReceiveByVid_call method_call = new findTotalReceiveByVid_call(vid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTotalReceiveByVid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long vid;
      public findTotalReceiveByVid_call(long vid, org.apache.thrift.async.AsyncMethodCallback<findTotalReceiveByVid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vid = vid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTotalReceiveByVid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTotalReceiveByVid_args args = new findTotalReceiveByVid_args();
        args.setVid(vid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTotalReceiveByVid();
      }
    }

    public void findAllPayConfigs(org.apache.thrift.async.AsyncMethodCallback<findAllPayConfigs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllPayConfigs_call method_call = new findAllPayConfigs_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllPayConfigs_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllPayConfigs_call(org.apache.thrift.async.AsyncMethodCallback<findAllPayConfigs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllPayConfigs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllPayConfigs_args args = new findAllPayConfigs_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.pay.thrift.view.PayConfigView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllPayConfigs();
      }
    }

    public void saveExtractBind(one.show.pay.thrift.view.ExtractBindView extractBindView, org.apache.thrift.async.AsyncMethodCallback<saveExtractBind_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveExtractBind_call method_call = new saveExtractBind_call(extractBindView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveExtractBind_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.pay.thrift.view.ExtractBindView extractBindView;
      public saveExtractBind_call(one.show.pay.thrift.view.ExtractBindView extractBindView, org.apache.thrift.async.AsyncMethodCallback<saveExtractBind_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.extractBindView = extractBindView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveExtractBind", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveExtractBind_args args = new saveExtractBind_args();
        args.setExtractBindView(extractBindView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveExtractBind();
      }
    }

    public void getExtractBindByUid(long uid, org.apache.thrift.async.AsyncMethodCallback<getExtractBindByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtractBindByUid_call method_call = new getExtractBindByUid_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtractBindByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public getExtractBindByUid_call(long uid, org.apache.thrift.async.AsyncMethodCallback<getExtractBindByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtractBindByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtractBindByUid_args args = new getExtractBindByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.ExtractBindView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtractBindByUid();
      }
    }

    public void updateExtractBindByUid(long uid, String alipayAccount, String alipayName, org.apache.thrift.async.AsyncMethodCallback<updateExtractBindByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateExtractBindByUid_call method_call = new updateExtractBindByUid_call(uid, alipayAccount, alipayName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateExtractBindByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private String alipayAccount;
      private String alipayName;
      public updateExtractBindByUid_call(long uid, String alipayAccount, String alipayName, org.apache.thrift.async.AsyncMethodCallback<updateExtractBindByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.alipayAccount = alipayAccount;
        this.alipayName = alipayName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateExtractBindByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateExtractBindByUid_args args = new updateExtractBindByUid_args();
        args.setUid(uid);
        args.setAlipayAccount(alipayAccount);
        args.setAlipayName(alipayName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateExtractBindByUid();
      }
    }

    public void freeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<freeze_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      freeze_call method_call = new freeze_call(uid, itemView, actionValue, actionDesc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class freeze_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private one.show.pay.thrift.view.ItemView itemView;
      private int actionValue;
      private String actionDesc;
      public freeze_call(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<freeze_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.itemView = itemView;
        this.actionValue = actionValue;
        this.actionDesc = actionDesc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("freeze", org.apache.thrift.protocol.TMessageType.CALL, 0));
        freeze_args args = new freeze_args();
        args.setUid(uid);
        args.setItemView(itemView);
        args.setActionValue(actionValue);
        args.setActionDesc(actionDesc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_freeze();
      }
    }

    public void unfreeze(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<unfreeze_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unfreeze_call method_call = new unfreeze_call(uid, itemView, actionValue, actionDesc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unfreeze_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private one.show.pay.thrift.view.ItemView itemView;
      private int actionValue;
      private String actionDesc;
      public unfreeze_call(long uid, one.show.pay.thrift.view.ItemView itemView, int actionValue, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<unfreeze_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.itemView = itemView;
        this.actionValue = actionValue;
        this.actionDesc = actionDesc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unfreeze", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unfreeze_args args = new unfreeze_args();
        args.setUid(uid);
        args.setItemView(itemView);
        args.setActionValue(actionValue);
        args.setActionDesc(actionDesc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unfreeze();
      }
    }

    public void reduce(long uid, one.show.pay.thrift.view.ItemView item, int actionId, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<reduce_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reduce_call method_call = new reduce_call(uid, item, actionId, actionDesc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reduce_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private one.show.pay.thrift.view.ItemView item;
      private int actionId;
      private String actionDesc;
      public reduce_call(long uid, one.show.pay.thrift.view.ItemView item, int actionId, String actionDesc, org.apache.thrift.async.AsyncMethodCallback<reduce_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.item = item;
        this.actionId = actionId;
        this.actionDesc = actionDesc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reduce", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reduce_args args = new reduce_args();
        args.setUid(uid);
        args.setItem(item);
        args.setActionId(actionId);
        args.setActionDesc(actionDesc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_reduce();
      }
    }

    public void getExtractRmbTotalCount(org.apache.thrift.async.AsyncMethodCallback<getExtractRmbTotalCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtractRmbTotalCount_call method_call = new getExtractRmbTotalCount_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtractRmbTotalCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getExtractRmbTotalCount_call(org.apache.thrift.async.AsyncMethodCallback<getExtractRmbTotalCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtractRmbTotalCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtractRmbTotalCount_args args = new getExtractRmbTotalCount_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtractRmbTotalCount();
      }
    }

    public void saveFamilyClearing(one.show.pay.thrift.view.FamilyClearingView familyClearingView, org.apache.thrift.async.AsyncMethodCallback<saveFamilyClearing_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFamilyClearing_call method_call = new saveFamilyClearing_call(familyClearingView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveFamilyClearing_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.pay.thrift.view.FamilyClearingView familyClearingView;
      public saveFamilyClearing_call(one.show.pay.thrift.view.FamilyClearingView familyClearingView, org.apache.thrift.async.AsyncMethodCallback<saveFamilyClearing_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyClearingView = familyClearingView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFamilyClearing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFamilyClearing_args args = new saveFamilyClearing_args();
        args.setFamilyClearingView(familyClearingView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveFamilyClearing();
      }
    }

    public void saveFamilyMemberClearing(one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView, org.apache.thrift.async.AsyncMethodCallback<saveFamilyMemberClearing_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFamilyMemberClearing_call method_call = new saveFamilyMemberClearing_call(familyMemberClearingView, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveFamilyMemberClearing_call extends org.apache.thrift.async.TAsyncMethodCall {
      private one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView;
      public saveFamilyMemberClearing_call(one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView, org.apache.thrift.async.AsyncMethodCallback<saveFamilyMemberClearing_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.familyMemberClearingView = familyMemberClearingView;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFamilyMemberClearing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFamilyMemberClearing_args args = new saveFamilyMemberClearing_args();
        args.setFamilyMemberClearingView(familyMemberClearingView);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveFamilyMemberClearing();
      }
    }

    public void findFamilyClearingList(Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findFamilyClearingList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFamilyClearingList_call method_call = new findFamilyClearingList_call(params, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFamilyClearingList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> params;
      private int start;
      private int count;
      public findFamilyClearingList_call(Map<String,String> params, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findFamilyClearingList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFamilyClearingList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFamilyClearingList_args args = new findFamilyClearingList_args();
        args.setParams(params);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.FamilyClearingListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFamilyClearingList();
      }
    }

    public void findFamilyMemberClearingListByCidAndFamilyId(int cid, long familyId, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findFamilyMemberClearingListByCidAndFamilyId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFamilyMemberClearingListByCidAndFamilyId_call method_call = new findFamilyMemberClearingListByCidAndFamilyId_call(cid, familyId, start, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFamilyMemberClearingListByCidAndFamilyId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cid;
      private long familyId;
      private int start;
      private int count;
      public findFamilyMemberClearingListByCidAndFamilyId_call(int cid, long familyId, int start, int count, org.apache.thrift.async.AsyncMethodCallback<findFamilyMemberClearingListByCidAndFamilyId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.familyId = familyId;
        this.start = start;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFamilyMemberClearingListByCidAndFamilyId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFamilyMemberClearingListByCidAndFamilyId_args args = new findFamilyMemberClearingListByCidAndFamilyId_args();
        args.setCid(cid);
        args.setFamilyId(familyId);
        args.setStart(start);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.FamilyMemberClearingListView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFamilyMemberClearingListByCidAndFamilyId();
      }
    }

    public void getFamilyClearingViewById(long id, org.apache.thrift.async.AsyncMethodCallback<getFamilyClearingViewById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFamilyClearingViewById_call method_call = new getFamilyClearingViewById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFamilyClearingViewById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public getFamilyClearingViewById_call(long id, org.apache.thrift.async.AsyncMethodCallback<getFamilyClearingViewById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFamilyClearingViewById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFamilyClearingViewById_args args = new getFamilyClearingViewById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public one.show.pay.thrift.view.FamilyClearingView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFamilyClearingViewById();
      }
    }

    public void updateFamilyClearingView(long id, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateFamilyClearingView_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFamilyClearingView_call method_call = new updateFamilyClearingView_call(id, updateContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFamilyClearingView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private Map<String,String> updateContent;
      public updateFamilyClearingView_call(long id, Map<String,String> updateContent, org.apache.thrift.async.AsyncMethodCallback<updateFamilyClearingView_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.updateContent = updateContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFamilyClearingView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFamilyClearingView_args args = new updateFamilyClearingView_args();
        args.setId(id);
        args.setUpdateContent(updateContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateFamilyClearingView();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getMaxBatchNo", new getMaxBatchNo());
      processMap.put("saveOrders", new saveOrders());
      processMap.put("getOrdersById", new getOrdersById());
      processMap.put("findOrderViewByReceipt", new findOrderViewByReceipt());
      processMap.put("updateOrdersById", new updateOrdersById());
      processMap.put("updateOrdersByConditions", new updateOrdersByConditions());
      processMap.put("findStockByUidAndParam", new findStockByUidAndParam());
      processMap.put("findStockByUidAndItem", new findStockByUidAndItem());
      processMap.put("findStockLogByUidAndParam", new findStockLogByUidAndParam());
      processMap.put("findTransactionToUidList", new findTransactionToUidList());
      processMap.put("findTransactionToUidCount", new findTransactionToUidCount());
      processMap.put("saveTransactionToView", new saveTransactionToView());
      processMap.put("saveTransactionFromView", new saveTransactionFromView());
      processMap.put("findOrdersListByParams", new findOrdersListByParams());
      processMap.put("findOrdersMoneyByParams", new findOrdersMoneyByParams());
      processMap.put("getStockLogItemTotalByUid", new getStockLogItemTotalByUid());
      processMap.put("findOrdersViewsByUid", new findOrdersViewsByUid());
      processMap.put("findTransactionFromViewListByParams", new findTransactionFromViewListByParams());
      processMap.put("findTransactionFromViewCountByParams", new findTransactionFromViewCountByParams());
      processMap.put("systemSend", new systemSend());
      processMap.put("send", new send());
      processMap.put("consume", new consume());
      processMap.put("buy", new buy());
      processMap.put("getExtractRmbViewById", new getExtractRmbViewById());
      processMap.put("getExtractRmbListByBatchNo", new getExtractRmbListByBatchNo());
      processMap.put("getExtractRmbListByStatus", new getExtractRmbListByStatus());
      processMap.put("getExtractRmbListByUid", new getExtractRmbListByUid());
      processMap.put("getExtractRmbTotalByUid", new getExtractRmbTotalByUid());
      processMap.put("updateExtractRmbById", new updateExtractRmbById());
      processMap.put("saveExtractRmb", new saveExtractRmb());
      processMap.put("redeemRmb", new redeemRmb());
      processMap.put("charge", new charge());
      processMap.put("findGiftRanksByUid", new findGiftRanksByUid());
      processMap.put("findGiftRanksByVid", new findGiftRanksByVid());
      processMap.put("findTotalReceiveByVid", new findTotalReceiveByVid());
      processMap.put("findAllPayConfigs", new findAllPayConfigs());
      processMap.put("saveExtractBind", new saveExtractBind());
      processMap.put("getExtractBindByUid", new getExtractBindByUid());
      processMap.put("updateExtractBindByUid", new updateExtractBindByUid());
      processMap.put("freeze", new freeze());
      processMap.put("unfreeze", new unfreeze());
      processMap.put("reduce", new reduce());
      processMap.put("getExtractRmbTotalCount", new getExtractRmbTotalCount());
      processMap.put("saveFamilyClearing", new saveFamilyClearing());
      processMap.put("saveFamilyMemberClearing", new saveFamilyMemberClearing());
      processMap.put("findFamilyClearingList", new findFamilyClearingList());
      processMap.put("findFamilyMemberClearingListByCidAndFamilyId", new findFamilyMemberClearingListByCidAndFamilyId());
      processMap.put("getFamilyClearingViewById", new getFamilyClearingViewById());
      processMap.put("updateFamilyClearingView", new updateFamilyClearingView());
      return processMap;
    }

    public static class getMaxBatchNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMaxBatchNo_args> {
      public getMaxBatchNo() {
        super("getMaxBatchNo");
      }

      public getMaxBatchNo_args getEmptyArgsInstance() {
        return new getMaxBatchNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMaxBatchNo_result getResult(I iface, getMaxBatchNo_args args) throws org.apache.thrift.TException {
        getMaxBatchNo_result result = new getMaxBatchNo_result();
        result.success = iface.getMaxBatchNo();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveOrders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOrders_args> {
      public saveOrders() {
        super("saveOrders");
      }

      public saveOrders_args getEmptyArgsInstance() {
        return new saveOrders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOrders_result getResult(I iface, saveOrders_args args) throws org.apache.thrift.TException {
        saveOrders_result result = new saveOrders_result();
        iface.saveOrders(args.ordersView);
        return result;
      }
    }

    public static class getOrdersById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrdersById_args> {
      public getOrdersById() {
        super("getOrdersById");
      }

      public getOrdersById_args getEmptyArgsInstance() {
        return new getOrdersById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrdersById_result getResult(I iface, getOrdersById_args args) throws org.apache.thrift.TException {
        getOrdersById_result result = new getOrdersById_result();
        result.success = iface.getOrdersById(args.orderId);
        return result;
      }
    }

    public static class findOrderViewByReceipt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOrderViewByReceipt_args> {
      public findOrderViewByReceipt() {
        super("findOrderViewByReceipt");
      }

      public findOrderViewByReceipt_args getEmptyArgsInstance() {
        return new findOrderViewByReceipt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findOrderViewByReceipt_result getResult(I iface, findOrderViewByReceipt_args args) throws org.apache.thrift.TException {
        findOrderViewByReceipt_result result = new findOrderViewByReceipt_result();
        result.success = iface.findOrderViewByReceipt(args.md5_receipt);
        return result;
      }
    }

    public static class updateOrdersById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOrdersById_args> {
      public updateOrdersById() {
        super("updateOrdersById");
      }

      public updateOrdersById_args getEmptyArgsInstance() {
        return new updateOrdersById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOrdersById_result getResult(I iface, updateOrdersById_args args) throws org.apache.thrift.TException {
        updateOrdersById_result result = new updateOrdersById_result();
        iface.updateOrdersById(args.orderId, args.paramMap);
        return result;
      }
    }

    public static class updateOrdersByConditions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOrdersByConditions_args> {
      public updateOrdersByConditions() {
        super("updateOrdersByConditions");
      }

      public updateOrdersByConditions_args getEmptyArgsInstance() {
        return new updateOrdersByConditions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOrdersByConditions_result getResult(I iface, updateOrdersByConditions_args args) throws org.apache.thrift.TException {
        updateOrdersByConditions_result result = new updateOrdersByConditions_result();
        result.success = iface.updateOrdersByConditions(args.conditions, args.paramMap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findStockByUidAndParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStockByUidAndParam_args> {
      public findStockByUidAndParam() {
        super("findStockByUidAndParam");
      }

      public findStockByUidAndParam_args getEmptyArgsInstance() {
        return new findStockByUidAndParam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStockByUidAndParam_result getResult(I iface, findStockByUidAndParam_args args) throws org.apache.thrift.TException {
        findStockByUidAndParam_result result = new findStockByUidAndParam_result();
        result.success = iface.findStockByUidAndParam(args.uid, args.params);
        return result;
      }
    }

    public static class findStockByUidAndItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStockByUidAndItem_args> {
      public findStockByUidAndItem() {
        super("findStockByUidAndItem");
      }

      public findStockByUidAndItem_args getEmptyArgsInstance() {
        return new findStockByUidAndItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStockByUidAndItem_result getResult(I iface, findStockByUidAndItem_args args) throws org.apache.thrift.TException {
        findStockByUidAndItem_result result = new findStockByUidAndItem_result();
        result.success = iface.findStockByUidAndItem(args.uid, args.itemType, args.itemId);
        return result;
      }
    }

    public static class findStockLogByUidAndParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStockLogByUidAndParam_args> {
      public findStockLogByUidAndParam() {
        super("findStockLogByUidAndParam");
      }

      public findStockLogByUidAndParam_args getEmptyArgsInstance() {
        return new findStockLogByUidAndParam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStockLogByUidAndParam_result getResult(I iface, findStockLogByUidAndParam_args args) throws org.apache.thrift.TException {
        findStockLogByUidAndParam_result result = new findStockLogByUidAndParam_result();
        result.success = iface.findStockLogByUidAndParam(args.uid, args.params, args.start, args.count);
        return result;
      }
    }

    public static class findTransactionToUidList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTransactionToUidList_args> {
      public findTransactionToUidList() {
        super("findTransactionToUidList");
      }

      public findTransactionToUidList_args getEmptyArgsInstance() {
        return new findTransactionToUidList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findTransactionToUidList_result getResult(I iface, findTransactionToUidList_args args) throws org.apache.thrift.TException {
        findTransactionToUidList_result result = new findTransactionToUidList_result();
        result.success = iface.findTransactionToUidList(args.uid, args.params, args.satrt, args.pageCount);
        return result;
      }
    }

    public static class findTransactionToUidCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTransactionToUidCount_args> {
      public findTransactionToUidCount() {
        super("findTransactionToUidCount");
      }

      public findTransactionToUidCount_args getEmptyArgsInstance() {
        return new findTransactionToUidCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findTransactionToUidCount_result getResult(I iface, findTransactionToUidCount_args args) throws org.apache.thrift.TException {
        findTransactionToUidCount_result result = new findTransactionToUidCount_result();
        result.success = iface.findTransactionToUidCount(args.uid, args.params);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveTransactionToView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveTransactionToView_args> {
      public saveTransactionToView() {
        super("saveTransactionToView");
      }

      public saveTransactionToView_args getEmptyArgsInstance() {
        return new saveTransactionToView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveTransactionToView_result getResult(I iface, saveTransactionToView_args args) throws org.apache.thrift.TException {
        saveTransactionToView_result result = new saveTransactionToView_result();
        iface.saveTransactionToView(args.TransactionToView);
        return result;
      }
    }

    public static class saveTransactionFromView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveTransactionFromView_args> {
      public saveTransactionFromView() {
        super("saveTransactionFromView");
      }

      public saveTransactionFromView_args getEmptyArgsInstance() {
        return new saveTransactionFromView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveTransactionFromView_result getResult(I iface, saveTransactionFromView_args args) throws org.apache.thrift.TException {
        saveTransactionFromView_result result = new saveTransactionFromView_result();
        iface.saveTransactionFromView(args.transactionFromView);
        return result;
      }
    }

    public static class findOrdersListByParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOrdersListByParams_args> {
      public findOrdersListByParams() {
        super("findOrdersListByParams");
      }

      public findOrdersListByParams_args getEmptyArgsInstance() {
        return new findOrdersListByParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findOrdersListByParams_result getResult(I iface, findOrdersListByParams_args args) throws org.apache.thrift.TException {
        findOrdersListByParams_result result = new findOrdersListByParams_result();
        result.success = iface.findOrdersListByParams(args.params, args.start, args.count);
        return result;
      }
    }

    public static class findOrdersMoneyByParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOrdersMoneyByParams_args> {
      public findOrdersMoneyByParams() {
        super("findOrdersMoneyByParams");
      }

      public findOrdersMoneyByParams_args getEmptyArgsInstance() {
        return new findOrdersMoneyByParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findOrdersMoneyByParams_result getResult(I iface, findOrdersMoneyByParams_args args) throws org.apache.thrift.TException {
        findOrdersMoneyByParams_result result = new findOrdersMoneyByParams_result();
        result.success = iface.findOrdersMoneyByParams(args.params);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getStockLogItemTotalByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStockLogItemTotalByUid_args> {
      public getStockLogItemTotalByUid() {
        super("getStockLogItemTotalByUid");
      }

      public getStockLogItemTotalByUid_args getEmptyArgsInstance() {
        return new getStockLogItemTotalByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStockLogItemTotalByUid_result getResult(I iface, getStockLogItemTotalByUid_args args) throws org.apache.thrift.TException {
        getStockLogItemTotalByUid_result result = new getStockLogItemTotalByUid_result();
        result.success = iface.getStockLogItemTotalByUid(args.uid, args.paramMap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findOrdersViewsByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOrdersViewsByUid_args> {
      public findOrdersViewsByUid() {
        super("findOrdersViewsByUid");
      }

      public findOrdersViewsByUid_args getEmptyArgsInstance() {
        return new findOrdersViewsByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findOrdersViewsByUid_result getResult(I iface, findOrdersViewsByUid_args args) throws org.apache.thrift.TException {
        findOrdersViewsByUid_result result = new findOrdersViewsByUid_result();
        result.success = iface.findOrdersViewsByUid(args.uid, args.params, args.start, args.pageCount);
        return result;
      }
    }

    public static class findTransactionFromViewListByParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTransactionFromViewListByParams_args> {
      public findTransactionFromViewListByParams() {
        super("findTransactionFromViewListByParams");
      }

      public findTransactionFromViewListByParams_args getEmptyArgsInstance() {
        return new findTransactionFromViewListByParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findTransactionFromViewListByParams_result getResult(I iface, findTransactionFromViewListByParams_args args) throws org.apache.thrift.TException {
        findTransactionFromViewListByParams_result result = new findTransactionFromViewListByParams_result();
        result.success = iface.findTransactionFromViewListByParams(args.uid, args.params, args.start, args.pageCount);
        return result;
      }
    }

    public static class findTransactionFromViewCountByParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTransactionFromViewCountByParams_args> {
      public findTransactionFromViewCountByParams() {
        super("findTransactionFromViewCountByParams");
      }

      public findTransactionFromViewCountByParams_args getEmptyArgsInstance() {
        return new findTransactionFromViewCountByParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findTransactionFromViewCountByParams_result getResult(I iface, findTransactionFromViewCountByParams_args args) throws org.apache.thrift.TException {
        findTransactionFromViewCountByParams_result result = new findTransactionFromViewCountByParams_result();
        result.success = iface.findTransactionFromViewCountByParams(args.uid, args.params);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class systemSend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, systemSend_args> {
      public systemSend() {
        super("systemSend");
      }

      public systemSend_args getEmptyArgsInstance() {
        return new systemSend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public systemSend_result getResult(I iface, systemSend_args args) throws org.apache.thrift.TException {
        systemSend_result result = new systemSend_result();
        result.success = iface.systemSend(args.uid, args.itemView);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class send<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_args> {
      public send() {
        super("send");
      }

      public send_args getEmptyArgsInstance() {
        return new send_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public send_result getResult(I iface, send_args args) throws org.apache.thrift.TException {
        send_result result = new send_result();
        result.success = iface.send(args.uid, args.itemView, args.liveId, args.tid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class consume<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consume_args> {
      public consume() {
        super("consume");
      }

      public consume_args getEmptyArgsInstance() {
        return new consume_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consume_result getResult(I iface, consume_args args) throws org.apache.thrift.TException {
        consume_result result = new consume_result();
        result.success = iface.consume(args.uid, args.itemView);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class buy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, buy_args> {
      public buy() {
        super("buy");
      }

      public buy_args getEmptyArgsInstance() {
        return new buy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public buy_result getResult(I iface, buy_args args) throws org.apache.thrift.TException {
        buy_result result = new buy_result();
        result.success = iface.buy(args.uid, args.itemView);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getExtractRmbViewById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtractRmbViewById_args> {
      public getExtractRmbViewById() {
        super("getExtractRmbViewById");
      }

      public getExtractRmbViewById_args getEmptyArgsInstance() {
        return new getExtractRmbViewById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExtractRmbViewById_result getResult(I iface, getExtractRmbViewById_args args) throws org.apache.thrift.TException {
        getExtractRmbViewById_result result = new getExtractRmbViewById_result();
        result.success = iface.getExtractRmbViewById(args.id);
        return result;
      }
    }

    public static class getExtractRmbListByBatchNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtractRmbListByBatchNo_args> {
      public getExtractRmbListByBatchNo() {
        super("getExtractRmbListByBatchNo");
      }

      public getExtractRmbListByBatchNo_args getEmptyArgsInstance() {
        return new getExtractRmbListByBatchNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExtractRmbListByBatchNo_result getResult(I iface, getExtractRmbListByBatchNo_args args) throws org.apache.thrift.TException {
        getExtractRmbListByBatchNo_result result = new getExtractRmbListByBatchNo_result();
        result.success = iface.getExtractRmbListByBatchNo(args.batchNo);
        return result;
      }
    }

    public static class getExtractRmbListByStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtractRmbListByStatus_args> {
      public getExtractRmbListByStatus() {
        super("getExtractRmbListByStatus");
      }

      public getExtractRmbListByStatus_args getEmptyArgsInstance() {
        return new getExtractRmbListByStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExtractRmbListByStatus_result getResult(I iface, getExtractRmbListByStatus_args args) throws org.apache.thrift.TException {
        getExtractRmbListByStatus_result result = new getExtractRmbListByStatus_result();
        result.success = iface.getExtractRmbListByStatus(args.status, args.count);
        return result;
      }
    }

    public static class getExtractRmbListByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtractRmbListByUid_args> {
      public getExtractRmbListByUid() {
        super("getExtractRmbListByUid");
      }

      public getExtractRmbListByUid_args getEmptyArgsInstance() {
        return new getExtractRmbListByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExtractRmbListByUid_result getResult(I iface, getExtractRmbListByUid_args args) throws org.apache.thrift.TException {
        getExtractRmbListByUid_result result = new getExtractRmbListByUid_result();
        result.success = iface.getExtractRmbListByUid(args.paramMap, args.start, args.count);
        return result;
      }
    }

    public static class getExtractRmbTotalByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtractRmbTotalByUid_args> {
      public getExtractRmbTotalByUid() {
        super("getExtractRmbTotalByUid");
      }

      public getExtractRmbTotalByUid_args getEmptyArgsInstance() {
        return new getExtractRmbTotalByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExtractRmbTotalByUid_result getResult(I iface, getExtractRmbTotalByUid_args args) throws org.apache.thrift.TException {
        getExtractRmbTotalByUid_result result = new getExtractRmbTotalByUid_result();
        result.success = iface.getExtractRmbTotalByUid(args.uid, args.key, args.paramMap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateExtractRmbById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExtractRmbById_args> {
      public updateExtractRmbById() {
        super("updateExtractRmbById");
      }

      public updateExtractRmbById_args getEmptyArgsInstance() {
        return new updateExtractRmbById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateExtractRmbById_result getResult(I iface, updateExtractRmbById_args args) throws org.apache.thrift.TException {
        updateExtractRmbById_result result = new updateExtractRmbById_result();
        iface.updateExtractRmbById(args.id, args.paramMap);
        return result;
      }
    }

    public static class saveExtractRmb<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveExtractRmb_args> {
      public saveExtractRmb() {
        super("saveExtractRmb");
      }

      public saveExtractRmb_args getEmptyArgsInstance() {
        return new saveExtractRmb_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveExtractRmb_result getResult(I iface, saveExtractRmb_args args) throws org.apache.thrift.TException {
        saveExtractRmb_result result = new saveExtractRmb_result();
        iface.saveExtractRmb(args.extractRmbView);
        return result;
      }
    }

    public static class redeemRmb<I extends Iface> extends org.apache.thrift.ProcessFunction<I, redeemRmb_args> {
      public redeemRmb() {
        super("redeemRmb");
      }

      public redeemRmb_args getEmptyArgsInstance() {
        return new redeemRmb_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public redeemRmb_result getResult(I iface, redeemRmb_args args) throws org.apache.thrift.TException {
        redeemRmb_result result = new redeemRmb_result();
        result.success = iface.redeemRmb(args.extractRmbView);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class charge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, charge_args> {
      public charge() {
        super("charge");
      }

      public charge_args getEmptyArgsInstance() {
        return new charge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public charge_result getResult(I iface, charge_args args) throws org.apache.thrift.TException {
        charge_result result = new charge_result();
        iface.charge(args.uid, args.itemView);
        return result;
      }
    }

    public static class findGiftRanksByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGiftRanksByUid_args> {
      public findGiftRanksByUid() {
        super("findGiftRanksByUid");
      }

      public findGiftRanksByUid_args getEmptyArgsInstance() {
        return new findGiftRanksByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findGiftRanksByUid_result getResult(I iface, findGiftRanksByUid_args args) throws org.apache.thrift.TException {
        findGiftRanksByUid_result result = new findGiftRanksByUid_result();
        result.success = iface.findGiftRanksByUid(args.uid, args.start, args.count);
        return result;
      }
    }

    public static class findGiftRanksByVid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGiftRanksByVid_args> {
      public findGiftRanksByVid() {
        super("findGiftRanksByVid");
      }

      public findGiftRanksByVid_args getEmptyArgsInstance() {
        return new findGiftRanksByVid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findGiftRanksByVid_result getResult(I iface, findGiftRanksByVid_args args) throws org.apache.thrift.TException {
        findGiftRanksByVid_result result = new findGiftRanksByVid_result();
        result.success = iface.findGiftRanksByVid(args.vid, args.start, args.count);
        return result;
      }
    }

    public static class findTotalReceiveByVid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTotalReceiveByVid_args> {
      public findTotalReceiveByVid() {
        super("findTotalReceiveByVid");
      }

      public findTotalReceiveByVid_args getEmptyArgsInstance() {
        return new findTotalReceiveByVid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findTotalReceiveByVid_result getResult(I iface, findTotalReceiveByVid_args args) throws org.apache.thrift.TException {
        findTotalReceiveByVid_result result = new findTotalReceiveByVid_result();
        result.success = iface.findTotalReceiveByVid(args.vid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAllPayConfigs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllPayConfigs_args> {
      public findAllPayConfigs() {
        super("findAllPayConfigs");
      }

      public findAllPayConfigs_args getEmptyArgsInstance() {
        return new findAllPayConfigs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllPayConfigs_result getResult(I iface, findAllPayConfigs_args args) throws org.apache.thrift.TException {
        findAllPayConfigs_result result = new findAllPayConfigs_result();
        result.success = iface.findAllPayConfigs();
        return result;
      }
    }

    public static class saveExtractBind<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveExtractBind_args> {
      public saveExtractBind() {
        super("saveExtractBind");
      }

      public saveExtractBind_args getEmptyArgsInstance() {
        return new saveExtractBind_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveExtractBind_result getResult(I iface, saveExtractBind_args args) throws org.apache.thrift.TException {
        saveExtractBind_result result = new saveExtractBind_result();
        iface.saveExtractBind(args.extractBindView);
        return result;
      }
    }

    public static class getExtractBindByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtractBindByUid_args> {
      public getExtractBindByUid() {
        super("getExtractBindByUid");
      }

      public getExtractBindByUid_args getEmptyArgsInstance() {
        return new getExtractBindByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExtractBindByUid_result getResult(I iface, getExtractBindByUid_args args) throws org.apache.thrift.TException {
        getExtractBindByUid_result result = new getExtractBindByUid_result();
        result.success = iface.getExtractBindByUid(args.uid);
        return result;
      }
    }

    public static class updateExtractBindByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExtractBindByUid_args> {
      public updateExtractBindByUid() {
        super("updateExtractBindByUid");
      }

      public updateExtractBindByUid_args getEmptyArgsInstance() {
        return new updateExtractBindByUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateExtractBindByUid_result getResult(I iface, updateExtractBindByUid_args args) throws org.apache.thrift.TException {
        updateExtractBindByUid_result result = new updateExtractBindByUid_result();
        iface.updateExtractBindByUid(args.uid, args.alipayAccount, args.alipayName);
        return result;
      }
    }

    public static class freeze<I extends Iface> extends org.apache.thrift.ProcessFunction<I, freeze_args> {
      public freeze() {
        super("freeze");
      }

      public freeze_args getEmptyArgsInstance() {
        return new freeze_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public freeze_result getResult(I iface, freeze_args args) throws org.apache.thrift.TException {
        freeze_result result = new freeze_result();
        iface.freeze(args.uid, args.itemView, args.actionValue, args.actionDesc);
        return result;
      }
    }

    public static class unfreeze<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unfreeze_args> {
      public unfreeze() {
        super("unfreeze");
      }

      public unfreeze_args getEmptyArgsInstance() {
        return new unfreeze_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unfreeze_result getResult(I iface, unfreeze_args args) throws org.apache.thrift.TException {
        unfreeze_result result = new unfreeze_result();
        iface.unfreeze(args.uid, args.itemView, args.actionValue, args.actionDesc);
        return result;
      }
    }

    public static class reduce<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reduce_args> {
      public reduce() {
        super("reduce");
      }

      public reduce_args getEmptyArgsInstance() {
        return new reduce_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reduce_result getResult(I iface, reduce_args args) throws org.apache.thrift.TException {
        reduce_result result = new reduce_result();
        iface.reduce(args.uid, args.item, args.actionId, args.actionDesc);
        return result;
      }
    }

    public static class getExtractRmbTotalCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtractRmbTotalCount_args> {
      public getExtractRmbTotalCount() {
        super("getExtractRmbTotalCount");
      }

      public getExtractRmbTotalCount_args getEmptyArgsInstance() {
        return new getExtractRmbTotalCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExtractRmbTotalCount_result getResult(I iface, getExtractRmbTotalCount_args args) throws org.apache.thrift.TException {
        getExtractRmbTotalCount_result result = new getExtractRmbTotalCount_result();
        result.success = iface.getExtractRmbTotalCount();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveFamilyClearing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveFamilyClearing_args> {
      public saveFamilyClearing() {
        super("saveFamilyClearing");
      }

      public saveFamilyClearing_args getEmptyArgsInstance() {
        return new saveFamilyClearing_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveFamilyClearing_result getResult(I iface, saveFamilyClearing_args args) throws org.apache.thrift.TException {
        saveFamilyClearing_result result = new saveFamilyClearing_result();
        result.success = iface.saveFamilyClearing(args.familyClearingView);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveFamilyMemberClearing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveFamilyMemberClearing_args> {
      public saveFamilyMemberClearing() {
        super("saveFamilyMemberClearing");
      }

      public saveFamilyMemberClearing_args getEmptyArgsInstance() {
        return new saveFamilyMemberClearing_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveFamilyMemberClearing_result getResult(I iface, saveFamilyMemberClearing_args args) throws org.apache.thrift.TException {
        saveFamilyMemberClearing_result result = new saveFamilyMemberClearing_result();
        iface.saveFamilyMemberClearing(args.familyMemberClearingView);
        return result;
      }
    }

    public static class findFamilyClearingList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFamilyClearingList_args> {
      public findFamilyClearingList() {
        super("findFamilyClearingList");
      }

      public findFamilyClearingList_args getEmptyArgsInstance() {
        return new findFamilyClearingList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFamilyClearingList_result getResult(I iface, findFamilyClearingList_args args) throws org.apache.thrift.TException {
        findFamilyClearingList_result result = new findFamilyClearingList_result();
        result.success = iface.findFamilyClearingList(args.params, args.start, args.count);
        return result;
      }
    }

    public static class findFamilyMemberClearingListByCidAndFamilyId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFamilyMemberClearingListByCidAndFamilyId_args> {
      public findFamilyMemberClearingListByCidAndFamilyId() {
        super("findFamilyMemberClearingListByCidAndFamilyId");
      }

      public findFamilyMemberClearingListByCidAndFamilyId_args getEmptyArgsInstance() {
        return new findFamilyMemberClearingListByCidAndFamilyId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFamilyMemberClearingListByCidAndFamilyId_result getResult(I iface, findFamilyMemberClearingListByCidAndFamilyId_args args) throws org.apache.thrift.TException {
        findFamilyMemberClearingListByCidAndFamilyId_result result = new findFamilyMemberClearingListByCidAndFamilyId_result();
        result.success = iface.findFamilyMemberClearingListByCidAndFamilyId(args.cid, args.familyId, args.start, args.count);
        return result;
      }
    }

    public static class getFamilyClearingViewById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFamilyClearingViewById_args> {
      public getFamilyClearingViewById() {
        super("getFamilyClearingViewById");
      }

      public getFamilyClearingViewById_args getEmptyArgsInstance() {
        return new getFamilyClearingViewById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFamilyClearingViewById_result getResult(I iface, getFamilyClearingViewById_args args) throws org.apache.thrift.TException {
        getFamilyClearingViewById_result result = new getFamilyClearingViewById_result();
        result.success = iface.getFamilyClearingViewById(args.id);
        return result;
      }
    }

    public static class updateFamilyClearingView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFamilyClearingView_args> {
      public updateFamilyClearingView() {
        super("updateFamilyClearingView");
      }

      public updateFamilyClearingView_args getEmptyArgsInstance() {
        return new updateFamilyClearingView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFamilyClearingView_result getResult(I iface, updateFamilyClearingView_args args) throws org.apache.thrift.TException {
        updateFamilyClearingView_result result = new updateFamilyClearingView_result();
        iface.updateFamilyClearingView(args.id, args.updateContent);
        return result;
      }
    }

  }

  public static class getMaxBatchNo_args implements org.apache.thrift.TBase<getMaxBatchNo_args, getMaxBatchNo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxBatchNo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMaxBatchNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMaxBatchNo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxBatchNo_args.class, metaDataMap);
    }

    public getMaxBatchNo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxBatchNo_args(getMaxBatchNo_args other) {
    }

    public getMaxBatchNo_args deepCopy() {
      return new getMaxBatchNo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxBatchNo_args)
        return this.equals((getMaxBatchNo_args)that);
      return false;
    }

    public boolean equals(getMaxBatchNo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMaxBatchNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMaxBatchNo_args typedOther = (getMaxBatchNo_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxBatchNo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMaxBatchNo_argsStandardSchemeFactory implements SchemeFactory {
      public getMaxBatchNo_argsStandardScheme getScheme() {
        return new getMaxBatchNo_argsStandardScheme();
      }
    }

    private static class getMaxBatchNo_argsStandardScheme extends StandardScheme<getMaxBatchNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMaxBatchNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMaxBatchNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMaxBatchNo_argsTupleSchemeFactory implements SchemeFactory {
      public getMaxBatchNo_argsTupleScheme getScheme() {
        return new getMaxBatchNo_argsTupleScheme();
      }
    }

    private static class getMaxBatchNo_argsTupleScheme extends TupleScheme<getMaxBatchNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMaxBatchNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMaxBatchNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMaxBatchNo_result implements org.apache.thrift.TBase<getMaxBatchNo_result, getMaxBatchNo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxBatchNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMaxBatchNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMaxBatchNo_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxBatchNo_result.class, metaDataMap);
    }

    public getMaxBatchNo_result() {
    }

    public getMaxBatchNo_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxBatchNo_result(getMaxBatchNo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getMaxBatchNo_result deepCopy() {
      return new getMaxBatchNo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getMaxBatchNo_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxBatchNo_result)
        return this.equals((getMaxBatchNo_result)that);
      return false;
    }

    public boolean equals(getMaxBatchNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMaxBatchNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMaxBatchNo_result typedOther = (getMaxBatchNo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxBatchNo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMaxBatchNo_resultStandardSchemeFactory implements SchemeFactory {
      public getMaxBatchNo_resultStandardScheme getScheme() {
        return new getMaxBatchNo_resultStandardScheme();
      }
    }

    private static class getMaxBatchNo_resultStandardScheme extends StandardScheme<getMaxBatchNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMaxBatchNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMaxBatchNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMaxBatchNo_resultTupleSchemeFactory implements SchemeFactory {
      public getMaxBatchNo_resultTupleScheme getScheme() {
        return new getMaxBatchNo_resultTupleScheme();
      }
    }

    private static class getMaxBatchNo_resultTupleScheme extends TupleScheme<getMaxBatchNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMaxBatchNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMaxBatchNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveOrders_args implements org.apache.thrift.TBase<saveOrders_args, saveOrders_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrders_args");

    private static final org.apache.thrift.protocol.TField ORDERS_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("ordersView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOrders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOrders_argsTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.OrdersView ordersView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERS_VIEW((short)1, "ordersView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERS_VIEW
            return ORDERS_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERS_VIEW, new org.apache.thrift.meta_data.FieldMetaData("ordersView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.OrdersView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrders_args.class, metaDataMap);
    }

    public saveOrders_args() {
    }

    public saveOrders_args(
      one.show.pay.thrift.view.OrdersView ordersView)
    {
      this();
      this.ordersView = ordersView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrders_args(saveOrders_args other) {
      if (other.isSetOrdersView()) {
        this.ordersView = new one.show.pay.thrift.view.OrdersView(other.ordersView);
      }
    }

    public saveOrders_args deepCopy() {
      return new saveOrders_args(this);
    }

    @Override
    public void clear() {
      this.ordersView = null;
    }

    public one.show.pay.thrift.view.OrdersView getOrdersView() {
      return this.ordersView;
    }

    public saveOrders_args setOrdersView(one.show.pay.thrift.view.OrdersView ordersView) {
      this.ordersView = ordersView;
      return this;
    }

    public void unsetOrdersView() {
      this.ordersView = null;
    }

    /** Returns true if field ordersView is set (has been assigned a value) and false otherwise */
    public boolean isSetOrdersView() {
      return this.ordersView != null;
    }

    public void setOrdersViewIsSet(boolean value) {
      if (!value) {
        this.ordersView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERS_VIEW:
        if (value == null) {
          unsetOrdersView();
        } else {
          setOrdersView((one.show.pay.thrift.view.OrdersView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERS_VIEW:
        return getOrdersView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERS_VIEW:
        return isSetOrdersView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrders_args)
        return this.equals((saveOrders_args)that);
      return false;
    }

    public boolean equals(saveOrders_args that) {
      if (that == null)
        return false;

      boolean this_present_ordersView = true && this.isSetOrdersView();
      boolean that_present_ordersView = true && that.isSetOrdersView();
      if (this_present_ordersView || that_present_ordersView) {
        if (!(this_present_ordersView && that_present_ordersView))
          return false;
        if (!this.ordersView.equals(that.ordersView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveOrders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveOrders_args typedOther = (saveOrders_args)other;

      lastComparison = Boolean.valueOf(isSetOrdersView()).compareTo(typedOther.isSetOrdersView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrdersView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordersView, typedOther.ordersView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOrders_args(");
      boolean first = true;

      sb.append("ordersView:");
      if (this.ordersView == null) {
        sb.append("null");
      } else {
        sb.append(this.ordersView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ordersView != null) {
        ordersView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrders_argsStandardSchemeFactory implements SchemeFactory {
      public saveOrders_argsStandardScheme getScheme() {
        return new saveOrders_argsStandardScheme();
      }
    }

    private static class saveOrders_argsStandardScheme extends StandardScheme<saveOrders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERS_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ordersView = new one.show.pay.thrift.view.OrdersView();
                struct.ordersView.read(iprot);
                struct.setOrdersViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ordersView != null) {
          oprot.writeFieldBegin(ORDERS_VIEW_FIELD_DESC);
          struct.ordersView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrders_argsTupleSchemeFactory implements SchemeFactory {
      public saveOrders_argsTupleScheme getScheme() {
        return new saveOrders_argsTupleScheme();
      }
    }

    private static class saveOrders_argsTupleScheme extends TupleScheme<saveOrders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrdersView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrdersView()) {
          struct.ordersView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ordersView = new one.show.pay.thrift.view.OrdersView();
          struct.ordersView.read(iprot);
          struct.setOrdersViewIsSet(true);
        }
      }
    }

  }

  public static class saveOrders_result implements org.apache.thrift.TBase<saveOrders_result, saveOrders_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrders_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOrders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOrders_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrders_result.class, metaDataMap);
    }

    public saveOrders_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrders_result(saveOrders_result other) {
    }

    public saveOrders_result deepCopy() {
      return new saveOrders_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrders_result)
        return this.equals((saveOrders_result)that);
      return false;
    }

    public boolean equals(saveOrders_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveOrders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveOrders_result typedOther = (saveOrders_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOrders_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrders_resultStandardSchemeFactory implements SchemeFactory {
      public saveOrders_resultStandardScheme getScheme() {
        return new saveOrders_resultStandardScheme();
      }
    }

    private static class saveOrders_resultStandardScheme extends StandardScheme<saveOrders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrders_resultTupleSchemeFactory implements SchemeFactory {
      public saveOrders_resultTupleScheme getScheme() {
        return new saveOrders_resultTupleScheme();
      }
    }

    private static class saveOrders_resultTupleScheme extends TupleScheme<saveOrders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getOrdersById_args implements org.apache.thrift.TBase<getOrdersById_args, getOrdersById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrdersById_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrdersById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrdersById_argsTupleSchemeFactory());
    }

    public long orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrdersById_args.class, metaDataMap);
    }

    public getOrdersById_args() {
    }

    public getOrdersById_args(
      long orderId)
    {
      this();
      this.orderId = orderId;
      setOrderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrdersById_args(getOrdersById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orderId = other.orderId;
    }

    public getOrdersById_args deepCopy() {
      return new getOrdersById_args(this);
    }

    @Override
    public void clear() {
      setOrderIdIsSet(false);
      this.orderId = 0;
    }

    public long getOrderId() {
      return this.orderId;
    }

    public getOrdersById_args setOrderId(long orderId) {
      this.orderId = orderId;
      setOrderIdIsSet(true);
      return this;
    }

    public void unsetOrderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    public void setOrderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return Long.valueOf(getOrderId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrdersById_args)
        return this.equals((getOrdersById_args)that);
      return false;
    }

    public boolean equals(getOrdersById_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true;
      boolean that_present_orderId = true;
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (this.orderId != that.orderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrdersById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrdersById_args typedOther = (getOrdersById_args)other;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, typedOther.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrdersById_args(");
      boolean first = true;

      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrdersById_argsStandardSchemeFactory implements SchemeFactory {
      public getOrdersById_argsStandardScheme getScheme() {
        return new getOrdersById_argsStandardScheme();
      }
    }

    private static class getOrdersById_argsStandardScheme extends StandardScheme<getOrdersById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrdersById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.orderId = iprot.readI64();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrdersById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrdersById_argsTupleSchemeFactory implements SchemeFactory {
      public getOrdersById_argsTupleScheme getScheme() {
        return new getOrdersById_argsTupleScheme();
      }
    }

    private static class getOrdersById_argsTupleScheme extends TupleScheme<getOrdersById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrdersById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderId()) {
          oprot.writeI64(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrdersById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderId = iprot.readI64();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class getOrdersById_result implements org.apache.thrift.TBase<getOrdersById_result, getOrdersById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrdersById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrdersById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrdersById_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.OrdersView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.OrdersView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrdersById_result.class, metaDataMap);
    }

    public getOrdersById_result() {
    }

    public getOrdersById_result(
      one.show.pay.thrift.view.OrdersView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrdersById_result(getOrdersById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.OrdersView(other.success);
      }
    }

    public getOrdersById_result deepCopy() {
      return new getOrdersById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.OrdersView getSuccess() {
      return this.success;
    }

    public getOrdersById_result setSuccess(one.show.pay.thrift.view.OrdersView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.OrdersView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrdersById_result)
        return this.equals((getOrdersById_result)that);
      return false;
    }

    public boolean equals(getOrdersById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrdersById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrdersById_result typedOther = (getOrdersById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrdersById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrdersById_resultStandardSchemeFactory implements SchemeFactory {
      public getOrdersById_resultStandardScheme getScheme() {
        return new getOrdersById_resultStandardScheme();
      }
    }

    private static class getOrdersById_resultStandardScheme extends StandardScheme<getOrdersById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrdersById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.OrdersView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrdersById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrdersById_resultTupleSchemeFactory implements SchemeFactory {
      public getOrdersById_resultTupleScheme getScheme() {
        return new getOrdersById_resultTupleScheme();
      }
    }

    private static class getOrdersById_resultTupleScheme extends TupleScheme<getOrdersById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrdersById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrdersById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.OrdersView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findOrderViewByReceipt_args implements org.apache.thrift.TBase<findOrderViewByReceipt_args, findOrderViewByReceipt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrderViewByReceipt_args");

    private static final org.apache.thrift.protocol.TField MD5_RECEIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("md5_receipt", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrderViewByReceipt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrderViewByReceipt_argsTupleSchemeFactory());
    }

    public String md5_receipt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MD5_RECEIPT((short)1, "md5_receipt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MD5_RECEIPT
            return MD5_RECEIPT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MD5_RECEIPT, new org.apache.thrift.meta_data.FieldMetaData("md5_receipt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrderViewByReceipt_args.class, metaDataMap);
    }

    public findOrderViewByReceipt_args() {
    }

    public findOrderViewByReceipt_args(
      String md5_receipt)
    {
      this();
      this.md5_receipt = md5_receipt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrderViewByReceipt_args(findOrderViewByReceipt_args other) {
      if (other.isSetMd5_receipt()) {
        this.md5_receipt = other.md5_receipt;
      }
    }

    public findOrderViewByReceipt_args deepCopy() {
      return new findOrderViewByReceipt_args(this);
    }

    @Override
    public void clear() {
      this.md5_receipt = null;
    }

    public String getMd5_receipt() {
      return this.md5_receipt;
    }

    public findOrderViewByReceipt_args setMd5_receipt(String md5_receipt) {
      this.md5_receipt = md5_receipt;
      return this;
    }

    public void unsetMd5_receipt() {
      this.md5_receipt = null;
    }

    /** Returns true if field md5_receipt is set (has been assigned a value) and false otherwise */
    public boolean isSetMd5_receipt() {
      return this.md5_receipt != null;
    }

    public void setMd5_receiptIsSet(boolean value) {
      if (!value) {
        this.md5_receipt = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MD5_RECEIPT:
        if (value == null) {
          unsetMd5_receipt();
        } else {
          setMd5_receipt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MD5_RECEIPT:
        return getMd5_receipt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MD5_RECEIPT:
        return isSetMd5_receipt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrderViewByReceipt_args)
        return this.equals((findOrderViewByReceipt_args)that);
      return false;
    }

    public boolean equals(findOrderViewByReceipt_args that) {
      if (that == null)
        return false;

      boolean this_present_md5_receipt = true && this.isSetMd5_receipt();
      boolean that_present_md5_receipt = true && that.isSetMd5_receipt();
      if (this_present_md5_receipt || that_present_md5_receipt) {
        if (!(this_present_md5_receipt && that_present_md5_receipt))
          return false;
        if (!this.md5_receipt.equals(that.md5_receipt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrderViewByReceipt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrderViewByReceipt_args typedOther = (findOrderViewByReceipt_args)other;

      lastComparison = Boolean.valueOf(isSetMd5_receipt()).compareTo(typedOther.isSetMd5_receipt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMd5_receipt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5_receipt, typedOther.md5_receipt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrderViewByReceipt_args(");
      boolean first = true;

      sb.append("md5_receipt:");
      if (this.md5_receipt == null) {
        sb.append("null");
      } else {
        sb.append(this.md5_receipt);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrderViewByReceipt_argsStandardSchemeFactory implements SchemeFactory {
      public findOrderViewByReceipt_argsStandardScheme getScheme() {
        return new findOrderViewByReceipt_argsStandardScheme();
      }
    }

    private static class findOrderViewByReceipt_argsStandardScheme extends StandardScheme<findOrderViewByReceipt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrderViewByReceipt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MD5_RECEIPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.md5_receipt = iprot.readString();
                struct.setMd5_receiptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrderViewByReceipt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.md5_receipt != null) {
          oprot.writeFieldBegin(MD5_RECEIPT_FIELD_DESC);
          oprot.writeString(struct.md5_receipt);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrderViewByReceipt_argsTupleSchemeFactory implements SchemeFactory {
      public findOrderViewByReceipt_argsTupleScheme getScheme() {
        return new findOrderViewByReceipt_argsTupleScheme();
      }
    }

    private static class findOrderViewByReceipt_argsTupleScheme extends TupleScheme<findOrderViewByReceipt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrderViewByReceipt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMd5_receipt()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMd5_receipt()) {
          oprot.writeString(struct.md5_receipt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrderViewByReceipt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.md5_receipt = iprot.readString();
          struct.setMd5_receiptIsSet(true);
        }
      }
    }

  }

  public static class findOrderViewByReceipt_result implements org.apache.thrift.TBase<findOrderViewByReceipt_result, findOrderViewByReceipt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrderViewByReceipt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrderViewByReceipt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrderViewByReceipt_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.OrdersView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.OrdersView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrderViewByReceipt_result.class, metaDataMap);
    }

    public findOrderViewByReceipt_result() {
    }

    public findOrderViewByReceipt_result(
      one.show.pay.thrift.view.OrdersView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrderViewByReceipt_result(findOrderViewByReceipt_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.OrdersView(other.success);
      }
    }

    public findOrderViewByReceipt_result deepCopy() {
      return new findOrderViewByReceipt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.OrdersView getSuccess() {
      return this.success;
    }

    public findOrderViewByReceipt_result setSuccess(one.show.pay.thrift.view.OrdersView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.OrdersView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrderViewByReceipt_result)
        return this.equals((findOrderViewByReceipt_result)that);
      return false;
    }

    public boolean equals(findOrderViewByReceipt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrderViewByReceipt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrderViewByReceipt_result typedOther = (findOrderViewByReceipt_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrderViewByReceipt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrderViewByReceipt_resultStandardSchemeFactory implements SchemeFactory {
      public findOrderViewByReceipt_resultStandardScheme getScheme() {
        return new findOrderViewByReceipt_resultStandardScheme();
      }
    }

    private static class findOrderViewByReceipt_resultStandardScheme extends StandardScheme<findOrderViewByReceipt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrderViewByReceipt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.OrdersView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrderViewByReceipt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrderViewByReceipt_resultTupleSchemeFactory implements SchemeFactory {
      public findOrderViewByReceipt_resultTupleScheme getScheme() {
        return new findOrderViewByReceipt_resultTupleScheme();
      }
    }

    private static class findOrderViewByReceipt_resultTupleScheme extends TupleScheme<findOrderViewByReceipt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrderViewByReceipt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrderViewByReceipt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.OrdersView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOrdersById_args implements org.apache.thrift.TBase<updateOrdersById_args, updateOrdersById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrdersById_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrdersById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrdersById_argsTupleSchemeFactory());
    }

    public long orderId; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      PARAM_MAP((short)2, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrdersById_args.class, metaDataMap);
    }

    public updateOrdersById_args() {
    }

    public updateOrdersById_args(
      long orderId,
      Map<String,String> paramMap)
    {
      this();
      this.orderId = orderId;
      setOrderIdIsSet(true);
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrdersById_args(updateOrdersById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orderId = other.orderId;
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateOrdersById_args deepCopy() {
      return new updateOrdersById_args(this);
    }

    @Override
    public void clear() {
      setOrderIdIsSet(false);
      this.orderId = 0;
      this.paramMap = null;
    }

    public long getOrderId() {
      return this.orderId;
    }

    public updateOrdersById_args setOrderId(long orderId) {
      this.orderId = orderId;
      setOrderIdIsSet(true);
      return this;
    }

    public void unsetOrderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    public void setOrderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public updateOrdersById_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((Long)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return Long.valueOf(getOrderId());

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrdersById_args)
        return this.equals((updateOrdersById_args)that);
      return false;
    }

    public boolean equals(updateOrdersById_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true;
      boolean that_present_orderId = true;
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (this.orderId != that.orderId)
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateOrdersById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateOrdersById_args typedOther = (updateOrdersById_args)other;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, typedOther.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrdersById_args(");
      boolean first = true;

      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrdersById_argsStandardSchemeFactory implements SchemeFactory {
      public updateOrdersById_argsStandardScheme getScheme() {
        return new updateOrdersById_argsStandardScheme();
      }
    }

    private static class updateOrdersById_argsStandardScheme extends StandardScheme<updateOrdersById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrdersById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.orderId = iprot.readI64();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2; // required
                    String _val3; // required
                    _key2 = iprot.readString();
                    _val3 = iprot.readString();
                    struct.paramMap.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrdersById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter4 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrdersById_argsTupleSchemeFactory implements SchemeFactory {
      public updateOrdersById_argsTupleScheme getScheme() {
        return new updateOrdersById_argsTupleScheme();
      }
    }

    private static class updateOrdersById_argsTupleScheme extends TupleScheme<updateOrdersById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrdersById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetParamMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeI64(struct.orderId);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter5 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrdersById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readI64();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8; // required
              String _val9; // required
              _key8 = iprot.readString();
              _val9 = iprot.readString();
              struct.paramMap.put(_key8, _val9);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class updateOrdersById_result implements org.apache.thrift.TBase<updateOrdersById_result, updateOrdersById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrdersById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrdersById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrdersById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrdersById_result.class, metaDataMap);
    }

    public updateOrdersById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrdersById_result(updateOrdersById_result other) {
    }

    public updateOrdersById_result deepCopy() {
      return new updateOrdersById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrdersById_result)
        return this.equals((updateOrdersById_result)that);
      return false;
    }

    public boolean equals(updateOrdersById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateOrdersById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateOrdersById_result typedOther = (updateOrdersById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrdersById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrdersById_resultStandardSchemeFactory implements SchemeFactory {
      public updateOrdersById_resultStandardScheme getScheme() {
        return new updateOrdersById_resultStandardScheme();
      }
    }

    private static class updateOrdersById_resultStandardScheme extends StandardScheme<updateOrdersById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrdersById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrdersById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrdersById_resultTupleSchemeFactory implements SchemeFactory {
      public updateOrdersById_resultTupleScheme getScheme() {
        return new updateOrdersById_resultTupleScheme();
      }
    }

    private static class updateOrdersById_resultTupleScheme extends TupleScheme<updateOrdersById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrdersById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrdersById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateOrdersByConditions_args implements org.apache.thrift.TBase<updateOrdersByConditions_args, updateOrdersByConditions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrdersByConditions_args");

    private static final org.apache.thrift.protocol.TField CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("conditions", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrdersByConditions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrdersByConditions_argsTupleSchemeFactory());
    }

    public Map<String,String> conditions; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONDITIONS((short)1, "conditions"),
      PARAM_MAP((short)2, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONDITIONS
            return CONDITIONS;
          case 2: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("conditions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrdersByConditions_args.class, metaDataMap);
    }

    public updateOrdersByConditions_args() {
    }

    public updateOrdersByConditions_args(
      Map<String,String> conditions,
      Map<String,String> paramMap)
    {
      this();
      this.conditions = conditions;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrdersByConditions_args(updateOrdersByConditions_args other) {
      if (other.isSetConditions()) {
        Map<String,String> __this__conditions = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.conditions.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__conditions_copy_key = other_element_key;

          String __this__conditions_copy_value = other_element_value;

          __this__conditions.put(__this__conditions_copy_key, __this__conditions_copy_value);
        }
        this.conditions = __this__conditions;
      }
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateOrdersByConditions_args deepCopy() {
      return new updateOrdersByConditions_args(this);
    }

    @Override
    public void clear() {
      this.conditions = null;
      this.paramMap = null;
    }

    public int getConditionsSize() {
      return (this.conditions == null) ? 0 : this.conditions.size();
    }

    public void putToConditions(String key, String val) {
      if (this.conditions == null) {
        this.conditions = new HashMap<String,String>();
      }
      this.conditions.put(key, val);
    }

    public Map<String,String> getConditions() {
      return this.conditions;
    }

    public updateOrdersByConditions_args setConditions(Map<String,String> conditions) {
      this.conditions = conditions;
      return this;
    }

    public void unsetConditions() {
      this.conditions = null;
    }

    /** Returns true if field conditions is set (has been assigned a value) and false otherwise */
    public boolean isSetConditions() {
      return this.conditions != null;
    }

    public void setConditionsIsSet(boolean value) {
      if (!value) {
        this.conditions = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public updateOrdersByConditions_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONDITIONS:
        if (value == null) {
          unsetConditions();
        } else {
          setConditions((Map<String,String>)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITIONS:
        return getConditions();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONDITIONS:
        return isSetConditions();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrdersByConditions_args)
        return this.equals((updateOrdersByConditions_args)that);
      return false;
    }

    public boolean equals(updateOrdersByConditions_args that) {
      if (that == null)
        return false;

      boolean this_present_conditions = true && this.isSetConditions();
      boolean that_present_conditions = true && that.isSetConditions();
      if (this_present_conditions || that_present_conditions) {
        if (!(this_present_conditions && that_present_conditions))
          return false;
        if (!this.conditions.equals(that.conditions))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateOrdersByConditions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateOrdersByConditions_args typedOther = (updateOrdersByConditions_args)other;

      lastComparison = Boolean.valueOf(isSetConditions()).compareTo(typedOther.isSetConditions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConditions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditions, typedOther.conditions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrdersByConditions_args(");
      boolean first = true;

      sb.append("conditions:");
      if (this.conditions == null) {
        sb.append("null");
      } else {
        sb.append(this.conditions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrdersByConditions_argsStandardSchemeFactory implements SchemeFactory {
      public updateOrdersByConditions_argsStandardScheme getScheme() {
        return new updateOrdersByConditions_argsStandardScheme();
      }
    }

    private static class updateOrdersByConditions_argsStandardScheme extends StandardScheme<updateOrdersByConditions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrdersByConditions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONDITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.conditions = new HashMap<String,String>(2*_map10.size);
                  for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                  {
                    String _key12; // required
                    String _val13; // required
                    _key12 = iprot.readString();
                    _val13 = iprot.readString();
                    struct.conditions.put(_key12, _val13);
                  }
                  iprot.readMapEnd();
                }
                struct.setConditionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map14.size);
                  for (int _i15 = 0; _i15 < _map14.size; ++_i15)
                  {
                    String _key16; // required
                    String _val17; // required
                    _key16 = iprot.readString();
                    _val17 = iprot.readString();
                    struct.paramMap.put(_key16, _val17);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrdersByConditions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.conditions != null) {
          oprot.writeFieldBegin(CONDITIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.conditions.size()));
            for (Map.Entry<String, String> _iter18 : struct.conditions.entrySet())
            {
              oprot.writeString(_iter18.getKey());
              oprot.writeString(_iter18.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter19 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter19.getKey());
              oprot.writeString(_iter19.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrdersByConditions_argsTupleSchemeFactory implements SchemeFactory {
      public updateOrdersByConditions_argsTupleScheme getScheme() {
        return new updateOrdersByConditions_argsTupleScheme();
      }
    }

    private static class updateOrdersByConditions_argsTupleScheme extends TupleScheme<updateOrdersByConditions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrdersByConditions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConditions()) {
          optionals.set(0);
        }
        if (struct.isSetParamMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConditions()) {
          {
            oprot.writeI32(struct.conditions.size());
            for (Map.Entry<String, String> _iter20 : struct.conditions.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              oprot.writeString(_iter20.getValue());
            }
          }
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter21 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              oprot.writeString(_iter21.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrdersByConditions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.conditions = new HashMap<String,String>(2*_map22.size);
            for (int _i23 = 0; _i23 < _map22.size; ++_i23)
            {
              String _key24; // required
              String _val25; // required
              _key24 = iprot.readString();
              _val25 = iprot.readString();
              struct.conditions.put(_key24, _val25);
            }
          }
          struct.setConditionsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map26.size);
            for (int _i27 = 0; _i27 < _map26.size; ++_i27)
            {
              String _key28; // required
              String _val29; // required
              _key28 = iprot.readString();
              _val29 = iprot.readString();
              struct.paramMap.put(_key28, _val29);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class updateOrdersByConditions_result implements org.apache.thrift.TBase<updateOrdersByConditions_result, updateOrdersByConditions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrdersByConditions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrdersByConditions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrdersByConditions_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrdersByConditions_result.class, metaDataMap);
    }

    public updateOrdersByConditions_result() {
    }

    public updateOrdersByConditions_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrdersByConditions_result(updateOrdersByConditions_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateOrdersByConditions_result deepCopy() {
      return new updateOrdersByConditions_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateOrdersByConditions_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrdersByConditions_result)
        return this.equals((updateOrdersByConditions_result)that);
      return false;
    }

    public boolean equals(updateOrdersByConditions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateOrdersByConditions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateOrdersByConditions_result typedOther = (updateOrdersByConditions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrdersByConditions_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrdersByConditions_resultStandardSchemeFactory implements SchemeFactory {
      public updateOrdersByConditions_resultStandardScheme getScheme() {
        return new updateOrdersByConditions_resultStandardScheme();
      }
    }

    private static class updateOrdersByConditions_resultStandardScheme extends StandardScheme<updateOrdersByConditions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrdersByConditions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrdersByConditions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrdersByConditions_resultTupleSchemeFactory implements SchemeFactory {
      public updateOrdersByConditions_resultTupleScheme getScheme() {
        return new updateOrdersByConditions_resultTupleScheme();
      }
    }

    private static class updateOrdersByConditions_resultTupleScheme extends TupleScheme<updateOrdersByConditions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrdersByConditions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrdersByConditions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStockByUidAndParam_args implements org.apache.thrift.TBase<findStockByUidAndParam_args, findStockByUidAndParam_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockByUidAndParam_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockByUidAndParam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockByUidAndParam_argsTupleSchemeFactory());
    }

    public long uid; // required
    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockByUidAndParam_args.class, metaDataMap);
    }

    public findStockByUidAndParam_args() {
    }

    public findStockByUidAndParam_args(
      long uid,
      Map<String,String> params)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockByUidAndParam_args(findStockByUidAndParam_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
    }

    public findStockByUidAndParam_args deepCopy() {
      return new findStockByUidAndParam_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.params = null;
    }

    public long getUid() {
      return this.uid;
    }

    public findStockByUidAndParam_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findStockByUidAndParam_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockByUidAndParam_args)
        return this.equals((findStockByUidAndParam_args)that);
      return false;
    }

    public boolean equals(findStockByUidAndParam_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStockByUidAndParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStockByUidAndParam_args typedOther = (findStockByUidAndParam_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockByUidAndParam_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockByUidAndParam_argsStandardSchemeFactory implements SchemeFactory {
      public findStockByUidAndParam_argsStandardScheme getScheme() {
        return new findStockByUidAndParam_argsStandardScheme();
      }
    }

    private static class findStockByUidAndParam_argsStandardScheme extends StandardScheme<findStockByUidAndParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockByUidAndParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map30.size);
                  for (int _i31 = 0; _i31 < _map30.size; ++_i31)
                  {
                    String _key32; // required
                    String _val33; // required
                    _key32 = iprot.readString();
                    _val33 = iprot.readString();
                    struct.params.put(_key32, _val33);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockByUidAndParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter34 : struct.params.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockByUidAndParam_argsTupleSchemeFactory implements SchemeFactory {
      public findStockByUidAndParam_argsTupleScheme getScheme() {
        return new findStockByUidAndParam_argsTupleScheme();
      }
    }

    private static class findStockByUidAndParam_argsTupleScheme extends TupleScheme<findStockByUidAndParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockByUidAndParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter35 : struct.params.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockByUidAndParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map36.size);
            for (int _i37 = 0; _i37 < _map36.size; ++_i37)
            {
              String _key38; // required
              String _val39; // required
              _key38 = iprot.readString();
              _val39 = iprot.readString();
              struct.params.put(_key38, _val39);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findStockByUidAndParam_result implements org.apache.thrift.TBase<findStockByUidAndParam_result, findStockByUidAndParam_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockByUidAndParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockByUidAndParam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockByUidAndParam_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.StockView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.StockView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockByUidAndParam_result.class, metaDataMap);
    }

    public findStockByUidAndParam_result() {
    }

    public findStockByUidAndParam_result(
      List<one.show.pay.thrift.view.StockView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockByUidAndParam_result(findStockByUidAndParam_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.StockView> __this__success = new ArrayList<one.show.pay.thrift.view.StockView>();
        for (one.show.pay.thrift.view.StockView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.StockView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findStockByUidAndParam_result deepCopy() {
      return new findStockByUidAndParam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.StockView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.StockView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.StockView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.StockView> getSuccess() {
      return this.success;
    }

    public findStockByUidAndParam_result setSuccess(List<one.show.pay.thrift.view.StockView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.StockView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockByUidAndParam_result)
        return this.equals((findStockByUidAndParam_result)that);
      return false;
    }

    public boolean equals(findStockByUidAndParam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStockByUidAndParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStockByUidAndParam_result typedOther = (findStockByUidAndParam_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockByUidAndParam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockByUidAndParam_resultStandardSchemeFactory implements SchemeFactory {
      public findStockByUidAndParam_resultStandardScheme getScheme() {
        return new findStockByUidAndParam_resultStandardScheme();
      }
    }

    private static class findStockByUidAndParam_resultStandardScheme extends StandardScheme<findStockByUidAndParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockByUidAndParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.StockView>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    one.show.pay.thrift.view.StockView _elem42; // required
                    _elem42 = new one.show.pay.thrift.view.StockView();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockByUidAndParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.StockView _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockByUidAndParam_resultTupleSchemeFactory implements SchemeFactory {
      public findStockByUidAndParam_resultTupleScheme getScheme() {
        return new findStockByUidAndParam_resultTupleScheme();
      }
    }

    private static class findStockByUidAndParam_resultTupleScheme extends TupleScheme<findStockByUidAndParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockByUidAndParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.StockView _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockByUidAndParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.StockView>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              one.show.pay.thrift.view.StockView _elem47; // required
              _elem47 = new one.show.pay.thrift.view.StockView();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStockByUidAndItem_args implements org.apache.thrift.TBase<findStockByUidAndItem_args, findStockByUidAndItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockByUidAndItem_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockByUidAndItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockByUidAndItem_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int itemType; // required
    public int itemId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM_TYPE((short)2, "itemType"),
      ITEM_ID((short)3, "itemId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __ITEMTYPE_ISSET_ID = 1;
    private static final int __ITEMID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockByUidAndItem_args.class, metaDataMap);
    }

    public findStockByUidAndItem_args() {
    }

    public findStockByUidAndItem_args(
      long uid,
      int itemType,
      int itemId)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.itemType = itemType;
      setItemTypeIsSet(true);
      this.itemId = itemId;
      setItemIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockByUidAndItem_args(findStockByUidAndItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.itemType = other.itemType;
      this.itemId = other.itemId;
    }

    public findStockByUidAndItem_args deepCopy() {
      return new findStockByUidAndItem_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setItemTypeIsSet(false);
      this.itemType = 0;
      setItemIdIsSet(false);
      this.itemId = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findStockByUidAndItem_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getItemType() {
      return this.itemType;
    }

    public findStockByUidAndItem_args setItemType(int itemType) {
      this.itemType = itemType;
      setItemTypeIsSet(true);
      return this;
    }

    public void unsetItemType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
    }

    /** Returns true if field itemType is set (has been assigned a value) and false otherwise */
    public boolean isSetItemType() {
      return EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
    }

    public void setItemTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
    }

    public int getItemId() {
      return this.itemId;
    }

    public findStockByUidAndItem_args setItemId(int itemId) {
      this.itemId = itemId;
      setItemIdIsSet(true);
      return this;
    }

    public void unsetItemId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
    }

    public void setItemIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItemType();
        } else {
          setItemType((Integer)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM_TYPE:
        return Integer.valueOf(getItemType());

      case ITEM_ID:
        return Integer.valueOf(getItemId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM_TYPE:
        return isSetItemType();
      case ITEM_ID:
        return isSetItemId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockByUidAndItem_args)
        return this.equals((findStockByUidAndItem_args)that);
      return false;
    }

    public boolean equals(findStockByUidAndItem_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_itemType = true;
      boolean that_present_itemType = true;
      if (this_present_itemType || that_present_itemType) {
        if (!(this_present_itemType && that_present_itemType))
          return false;
        if (this.itemType != that.itemType)
          return false;
      }

      boolean this_present_itemId = true;
      boolean that_present_itemId = true;
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (this.itemId != that.itemId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStockByUidAndItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStockByUidAndItem_args typedOther = (findStockByUidAndItem_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemType()).compareTo(typedOther.isSetItemType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemType, typedOther.itemType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockByUidAndItem_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemType:");
      sb.append(this.itemType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      sb.append(this.itemId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockByUidAndItem_argsStandardSchemeFactory implements SchemeFactory {
      public findStockByUidAndItem_argsStandardScheme getScheme() {
        return new findStockByUidAndItem_argsStandardScheme();
      }
    }

    private static class findStockByUidAndItem_argsStandardScheme extends StandardScheme<findStockByUidAndItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockByUidAndItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.itemType = iprot.readI32();
                struct.setItemTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.itemId = iprot.readI32();
                struct.setItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockByUidAndItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.itemType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeI32(struct.itemId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockByUidAndItem_argsTupleSchemeFactory implements SchemeFactory {
      public findStockByUidAndItem_argsTupleScheme getScheme() {
        return new findStockByUidAndItem_argsTupleScheme();
      }
    }

    private static class findStockByUidAndItem_argsTupleScheme extends TupleScheme<findStockByUidAndItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockByUidAndItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItemType()) {
          optionals.set(1);
        }
        if (struct.isSetItemId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItemType()) {
          oprot.writeI32(struct.itemType);
        }
        if (struct.isSetItemId()) {
          oprot.writeI32(struct.itemId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockByUidAndItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemType = iprot.readI32();
          struct.setItemTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itemId = iprot.readI32();
          struct.setItemIdIsSet(true);
        }
      }
    }

  }

  public static class findStockByUidAndItem_result implements org.apache.thrift.TBase<findStockByUidAndItem_result, findStockByUidAndItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockByUidAndItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockByUidAndItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockByUidAndItem_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.StockView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.StockView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockByUidAndItem_result.class, metaDataMap);
    }

    public findStockByUidAndItem_result() {
    }

    public findStockByUidAndItem_result(
      one.show.pay.thrift.view.StockView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockByUidAndItem_result(findStockByUidAndItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.StockView(other.success);
      }
    }

    public findStockByUidAndItem_result deepCopy() {
      return new findStockByUidAndItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.StockView getSuccess() {
      return this.success;
    }

    public findStockByUidAndItem_result setSuccess(one.show.pay.thrift.view.StockView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.StockView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockByUidAndItem_result)
        return this.equals((findStockByUidAndItem_result)that);
      return false;
    }

    public boolean equals(findStockByUidAndItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStockByUidAndItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStockByUidAndItem_result typedOther = (findStockByUidAndItem_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockByUidAndItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockByUidAndItem_resultStandardSchemeFactory implements SchemeFactory {
      public findStockByUidAndItem_resultStandardScheme getScheme() {
        return new findStockByUidAndItem_resultStandardScheme();
      }
    }

    private static class findStockByUidAndItem_resultStandardScheme extends StandardScheme<findStockByUidAndItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockByUidAndItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.StockView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockByUidAndItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockByUidAndItem_resultTupleSchemeFactory implements SchemeFactory {
      public findStockByUidAndItem_resultTupleScheme getScheme() {
        return new findStockByUidAndItem_resultTupleScheme();
      }
    }

    private static class findStockByUidAndItem_resultTupleScheme extends TupleScheme<findStockByUidAndItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockByUidAndItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockByUidAndItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.StockView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStockLogByUidAndParam_args implements org.apache.thrift.TBase<findStockLogByUidAndParam_args, findStockLogByUidAndParam_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockLogByUidAndParam_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockLogByUidAndParam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockLogByUidAndParam_argsTupleSchemeFactory());
    }

    public long uid; // required
    public Map<String,String> params; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAMS((short)2, "params"),
      START((short)3, "start"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAMS
            return PARAMS;
          case 3: // START
            return START;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockLogByUidAndParam_args.class, metaDataMap);
    }

    public findStockLogByUidAndParam_args() {
    }

    public findStockLogByUidAndParam_args(
      long uid,
      Map<String,String> params,
      int start,
      int count)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.params = params;
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockLogByUidAndParam_args(findStockLogByUidAndParam_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
      this.start = other.start;
      this.count = other.count;
    }

    public findStockLogByUidAndParam_args deepCopy() {
      return new findStockLogByUidAndParam_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.params = null;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findStockLogByUidAndParam_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findStockLogByUidAndParam_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public findStockLogByUidAndParam_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findStockLogByUidAndParam_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PARAMS:
        return getParams();

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAMS:
        return isSetParams();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockLogByUidAndParam_args)
        return this.equals((findStockLogByUidAndParam_args)that);
      return false;
    }

    public boolean equals(findStockLogByUidAndParam_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStockLogByUidAndParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStockLogByUidAndParam_args typedOther = (findStockLogByUidAndParam_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockLogByUidAndParam_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockLogByUidAndParam_argsStandardSchemeFactory implements SchemeFactory {
      public findStockLogByUidAndParam_argsStandardScheme getScheme() {
        return new findStockLogByUidAndParam_argsStandardScheme();
      }
    }

    private static class findStockLogByUidAndParam_argsStandardScheme extends StandardScheme<findStockLogByUidAndParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockLogByUidAndParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map48.size);
                  for (int _i49 = 0; _i49 < _map48.size; ++_i49)
                  {
                    String _key50; // required
                    String _val51; // required
                    _key50 = iprot.readString();
                    _val51 = iprot.readString();
                    struct.params.put(_key50, _val51);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockLogByUidAndParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter52 : struct.params.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              oprot.writeString(_iter52.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockLogByUidAndParam_argsTupleSchemeFactory implements SchemeFactory {
      public findStockLogByUidAndParam_argsTupleScheme getScheme() {
        return new findStockLogByUidAndParam_argsTupleScheme();
      }
    }

    private static class findStockLogByUidAndParam_argsTupleScheme extends TupleScheme<findStockLogByUidAndParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockLogByUidAndParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter53 : struct.params.entrySet())
            {
              oprot.writeString(_iter53.getKey());
              oprot.writeString(_iter53.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockLogByUidAndParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map54.size);
            for (int _i55 = 0; _i55 < _map54.size; ++_i55)
            {
              String _key56; // required
              String _val57; // required
              _key56 = iprot.readString();
              _val57 = iprot.readString();
              struct.params.put(_key56, _val57);
            }
          }
          struct.setParamsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findStockLogByUidAndParam_result implements org.apache.thrift.TBase<findStockLogByUidAndParam_result, findStockLogByUidAndParam_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStockLogByUidAndParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStockLogByUidAndParam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStockLogByUidAndParam_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.StockLogListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.StockLogListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStockLogByUidAndParam_result.class, metaDataMap);
    }

    public findStockLogByUidAndParam_result() {
    }

    public findStockLogByUidAndParam_result(
      one.show.pay.thrift.view.StockLogListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStockLogByUidAndParam_result(findStockLogByUidAndParam_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.StockLogListView(other.success);
      }
    }

    public findStockLogByUidAndParam_result deepCopy() {
      return new findStockLogByUidAndParam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.StockLogListView getSuccess() {
      return this.success;
    }

    public findStockLogByUidAndParam_result setSuccess(one.show.pay.thrift.view.StockLogListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.StockLogListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStockLogByUidAndParam_result)
        return this.equals((findStockLogByUidAndParam_result)that);
      return false;
    }

    public boolean equals(findStockLogByUidAndParam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStockLogByUidAndParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStockLogByUidAndParam_result typedOther = (findStockLogByUidAndParam_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStockLogByUidAndParam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStockLogByUidAndParam_resultStandardSchemeFactory implements SchemeFactory {
      public findStockLogByUidAndParam_resultStandardScheme getScheme() {
        return new findStockLogByUidAndParam_resultStandardScheme();
      }
    }

    private static class findStockLogByUidAndParam_resultStandardScheme extends StandardScheme<findStockLogByUidAndParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStockLogByUidAndParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.StockLogListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStockLogByUidAndParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStockLogByUidAndParam_resultTupleSchemeFactory implements SchemeFactory {
      public findStockLogByUidAndParam_resultTupleScheme getScheme() {
        return new findStockLogByUidAndParam_resultTupleScheme();
      }
    }

    private static class findStockLogByUidAndParam_resultTupleScheme extends TupleScheme<findStockLogByUidAndParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStockLogByUidAndParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStockLogByUidAndParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.StockLogListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findTransactionToUidList_args implements org.apache.thrift.TBase<findTransactionToUidList_args, findTransactionToUidList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTransactionToUidList_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField SATRT_FIELD_DESC = new org.apache.thrift.protocol.TField("satrt", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTransactionToUidList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTransactionToUidList_argsTupleSchemeFactory());
    }

    public long uid; // required
    public Map<String,String> params; // required
    public int satrt; // required
    public int pageCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAMS((short)2, "params"),
      SATRT((short)3, "satrt"),
      PAGE_COUNT((short)4, "pageCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAMS
            return PARAMS;
          case 3: // SATRT
            return SATRT;
          case 4: // PAGE_COUNT
            return PAGE_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __SATRT_ISSET_ID = 1;
    private static final int __PAGECOUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SATRT, new org.apache.thrift.meta_data.FieldMetaData("satrt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTransactionToUidList_args.class, metaDataMap);
    }

    public findTransactionToUidList_args() {
    }

    public findTransactionToUidList_args(
      long uid,
      Map<String,String> params,
      int satrt,
      int pageCount)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.params = params;
      this.satrt = satrt;
      setSatrtIsSet(true);
      this.pageCount = pageCount;
      setPageCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTransactionToUidList_args(findTransactionToUidList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
      this.satrt = other.satrt;
      this.pageCount = other.pageCount;
    }

    public findTransactionToUidList_args deepCopy() {
      return new findTransactionToUidList_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.params = null;
      setSatrtIsSet(false);
      this.satrt = 0;
      setPageCountIsSet(false);
      this.pageCount = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findTransactionToUidList_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findTransactionToUidList_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public int getSatrt() {
      return this.satrt;
    }

    public findTransactionToUidList_args setSatrt(int satrt) {
      this.satrt = satrt;
      setSatrtIsSet(true);
      return this;
    }

    public void unsetSatrt() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SATRT_ISSET_ID);
    }

    /** Returns true if field satrt is set (has been assigned a value) and false otherwise */
    public boolean isSetSatrt() {
      return EncodingUtils.testBit(__isset_bitfield, __SATRT_ISSET_ID);
    }

    public void setSatrtIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SATRT_ISSET_ID, value);
    }

    public int getPageCount() {
      return this.pageCount;
    }

    public findTransactionToUidList_args setPageCount(int pageCount) {
      this.pageCount = pageCount;
      setPageCountIsSet(true);
      return this;
    }

    public void unsetPageCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
    public boolean isSetPageCount() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    public void setPageCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      case SATRT:
        if (value == null) {
          unsetSatrt();
        } else {
          setSatrt((Integer)value);
        }
        break;

      case PAGE_COUNT:
        if (value == null) {
          unsetPageCount();
        } else {
          setPageCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PARAMS:
        return getParams();

      case SATRT:
        return Integer.valueOf(getSatrt());

      case PAGE_COUNT:
        return Integer.valueOf(getPageCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAMS:
        return isSetParams();
      case SATRT:
        return isSetSatrt();
      case PAGE_COUNT:
        return isSetPageCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTransactionToUidList_args)
        return this.equals((findTransactionToUidList_args)that);
      return false;
    }

    public boolean equals(findTransactionToUidList_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_satrt = true;
      boolean that_present_satrt = true;
      if (this_present_satrt || that_present_satrt) {
        if (!(this_present_satrt && that_present_satrt))
          return false;
        if (this.satrt != that.satrt)
          return false;
      }

      boolean this_present_pageCount = true;
      boolean that_present_pageCount = true;
      if (this_present_pageCount || that_present_pageCount) {
        if (!(this_present_pageCount && that_present_pageCount))
          return false;
        if (this.pageCount != that.pageCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTransactionToUidList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTransactionToUidList_args typedOther = (findTransactionToUidList_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSatrt()).compareTo(typedOther.isSetSatrt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSatrt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.satrt, typedOther.satrt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(typedOther.isSetPageCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, typedOther.pageCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTransactionToUidList_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("satrt:");
      sb.append(this.satrt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageCount:");
      sb.append(this.pageCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTransactionToUidList_argsStandardSchemeFactory implements SchemeFactory {
      public findTransactionToUidList_argsStandardScheme getScheme() {
        return new findTransactionToUidList_argsStandardScheme();
      }
    }

    private static class findTransactionToUidList_argsStandardScheme extends StandardScheme<findTransactionToUidList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTransactionToUidList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map58.size);
                  for (int _i59 = 0; _i59 < _map58.size; ++_i59)
                  {
                    String _key60; // required
                    String _val61; // required
                    _key60 = iprot.readString();
                    _val61 = iprot.readString();
                    struct.params.put(_key60, _val61);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SATRT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.satrt = iprot.readI32();
                struct.setSatrtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageCount = iprot.readI32();
                struct.setPageCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTransactionToUidList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter62 : struct.params.entrySet())
            {
              oprot.writeString(_iter62.getKey());
              oprot.writeString(_iter62.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SATRT_FIELD_DESC);
        oprot.writeI32(struct.satrt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.pageCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTransactionToUidList_argsTupleSchemeFactory implements SchemeFactory {
      public findTransactionToUidList_argsTupleScheme getScheme() {
        return new findTransactionToUidList_argsTupleScheme();
      }
    }

    private static class findTransactionToUidList_argsTupleScheme extends TupleScheme<findTransactionToUidList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTransactionToUidList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        if (struct.isSetSatrt()) {
          optionals.set(2);
        }
        if (struct.isSetPageCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter63 : struct.params.entrySet())
            {
              oprot.writeString(_iter63.getKey());
              oprot.writeString(_iter63.getValue());
            }
          }
        }
        if (struct.isSetSatrt()) {
          oprot.writeI32(struct.satrt);
        }
        if (struct.isSetPageCount()) {
          oprot.writeI32(struct.pageCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTransactionToUidList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map64.size);
            for (int _i65 = 0; _i65 < _map64.size; ++_i65)
            {
              String _key66; // required
              String _val67; // required
              _key66 = iprot.readString();
              _val67 = iprot.readString();
              struct.params.put(_key66, _val67);
            }
          }
          struct.setParamsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.satrt = iprot.readI32();
          struct.setSatrtIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageCount = iprot.readI32();
          struct.setPageCountIsSet(true);
        }
      }
    }

  }

  public static class findTransactionToUidList_result implements org.apache.thrift.TBase<findTransactionToUidList_result, findTransactionToUidList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTransactionToUidList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTransactionToUidList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTransactionToUidList_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.TransactionToView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.TransactionToView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTransactionToUidList_result.class, metaDataMap);
    }

    public findTransactionToUidList_result() {
    }

    public findTransactionToUidList_result(
      List<one.show.pay.thrift.view.TransactionToView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTransactionToUidList_result(findTransactionToUidList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.TransactionToView> __this__success = new ArrayList<one.show.pay.thrift.view.TransactionToView>();
        for (one.show.pay.thrift.view.TransactionToView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.TransactionToView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findTransactionToUidList_result deepCopy() {
      return new findTransactionToUidList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.TransactionToView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.TransactionToView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.TransactionToView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.TransactionToView> getSuccess() {
      return this.success;
    }

    public findTransactionToUidList_result setSuccess(List<one.show.pay.thrift.view.TransactionToView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.TransactionToView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTransactionToUidList_result)
        return this.equals((findTransactionToUidList_result)that);
      return false;
    }

    public boolean equals(findTransactionToUidList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTransactionToUidList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTransactionToUidList_result typedOther = (findTransactionToUidList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTransactionToUidList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTransactionToUidList_resultStandardSchemeFactory implements SchemeFactory {
      public findTransactionToUidList_resultStandardScheme getScheme() {
        return new findTransactionToUidList_resultStandardScheme();
      }
    }

    private static class findTransactionToUidList_resultStandardScheme extends StandardScheme<findTransactionToUidList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTransactionToUidList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.TransactionToView>(_list68.size);
                  for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                  {
                    one.show.pay.thrift.view.TransactionToView _elem70; // required
                    _elem70 = new one.show.pay.thrift.view.TransactionToView();
                    _elem70.read(iprot);
                    struct.success.add(_elem70);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTransactionToUidList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.TransactionToView _iter71 : struct.success)
            {
              _iter71.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTransactionToUidList_resultTupleSchemeFactory implements SchemeFactory {
      public findTransactionToUidList_resultTupleScheme getScheme() {
        return new findTransactionToUidList_resultTupleScheme();
      }
    }

    private static class findTransactionToUidList_resultTupleScheme extends TupleScheme<findTransactionToUidList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTransactionToUidList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.TransactionToView _iter72 : struct.success)
            {
              _iter72.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTransactionToUidList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.TransactionToView>(_list73.size);
            for (int _i74 = 0; _i74 < _list73.size; ++_i74)
            {
              one.show.pay.thrift.view.TransactionToView _elem75; // required
              _elem75 = new one.show.pay.thrift.view.TransactionToView();
              _elem75.read(iprot);
              struct.success.add(_elem75);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findTransactionToUidCount_args implements org.apache.thrift.TBase<findTransactionToUidCount_args, findTransactionToUidCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTransactionToUidCount_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTransactionToUidCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTransactionToUidCount_argsTupleSchemeFactory());
    }

    public long uid; // required
    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTransactionToUidCount_args.class, metaDataMap);
    }

    public findTransactionToUidCount_args() {
    }

    public findTransactionToUidCount_args(
      long uid,
      Map<String,String> params)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTransactionToUidCount_args(findTransactionToUidCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
    }

    public findTransactionToUidCount_args deepCopy() {
      return new findTransactionToUidCount_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.params = null;
    }

    public long getUid() {
      return this.uid;
    }

    public findTransactionToUidCount_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findTransactionToUidCount_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTransactionToUidCount_args)
        return this.equals((findTransactionToUidCount_args)that);
      return false;
    }

    public boolean equals(findTransactionToUidCount_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTransactionToUidCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTransactionToUidCount_args typedOther = (findTransactionToUidCount_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTransactionToUidCount_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTransactionToUidCount_argsStandardSchemeFactory implements SchemeFactory {
      public findTransactionToUidCount_argsStandardScheme getScheme() {
        return new findTransactionToUidCount_argsStandardScheme();
      }
    }

    private static class findTransactionToUidCount_argsStandardScheme extends StandardScheme<findTransactionToUidCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTransactionToUidCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map76.size);
                  for (int _i77 = 0; _i77 < _map76.size; ++_i77)
                  {
                    String _key78; // required
                    String _val79; // required
                    _key78 = iprot.readString();
                    _val79 = iprot.readString();
                    struct.params.put(_key78, _val79);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTransactionToUidCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter80 : struct.params.entrySet())
            {
              oprot.writeString(_iter80.getKey());
              oprot.writeString(_iter80.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTransactionToUidCount_argsTupleSchemeFactory implements SchemeFactory {
      public findTransactionToUidCount_argsTupleScheme getScheme() {
        return new findTransactionToUidCount_argsTupleScheme();
      }
    }

    private static class findTransactionToUidCount_argsTupleScheme extends TupleScheme<findTransactionToUidCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTransactionToUidCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter81 : struct.params.entrySet())
            {
              oprot.writeString(_iter81.getKey());
              oprot.writeString(_iter81.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTransactionToUidCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map82.size);
            for (int _i83 = 0; _i83 < _map82.size; ++_i83)
            {
              String _key84; // required
              String _val85; // required
              _key84 = iprot.readString();
              _val85 = iprot.readString();
              struct.params.put(_key84, _val85);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findTransactionToUidCount_result implements org.apache.thrift.TBase<findTransactionToUidCount_result, findTransactionToUidCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTransactionToUidCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTransactionToUidCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTransactionToUidCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTransactionToUidCount_result.class, metaDataMap);
    }

    public findTransactionToUidCount_result() {
    }

    public findTransactionToUidCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTransactionToUidCount_result(findTransactionToUidCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public findTransactionToUidCount_result deepCopy() {
      return new findTransactionToUidCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public findTransactionToUidCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTransactionToUidCount_result)
        return this.equals((findTransactionToUidCount_result)that);
      return false;
    }

    public boolean equals(findTransactionToUidCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTransactionToUidCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTransactionToUidCount_result typedOther = (findTransactionToUidCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTransactionToUidCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTransactionToUidCount_resultStandardSchemeFactory implements SchemeFactory {
      public findTransactionToUidCount_resultStandardScheme getScheme() {
        return new findTransactionToUidCount_resultStandardScheme();
      }
    }

    private static class findTransactionToUidCount_resultStandardScheme extends StandardScheme<findTransactionToUidCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTransactionToUidCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTransactionToUidCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTransactionToUidCount_resultTupleSchemeFactory implements SchemeFactory {
      public findTransactionToUidCount_resultTupleScheme getScheme() {
        return new findTransactionToUidCount_resultTupleScheme();
      }
    }

    private static class findTransactionToUidCount_resultTupleScheme extends TupleScheme<findTransactionToUidCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTransactionToUidCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTransactionToUidCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveTransactionToView_args implements org.apache.thrift.TBase<saveTransactionToView_args, saveTransactionToView_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTransactionToView_args");

    private static final org.apache.thrift.protocol.TField TRANSACTION_TO_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("TransactionToView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveTransactionToView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveTransactionToView_argsTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.TransactionToView TransactionToView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTION_TO_VIEW((short)1, "TransactionToView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTION_TO_VIEW
            return TRANSACTION_TO_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTION_TO_VIEW, new org.apache.thrift.meta_data.FieldMetaData("TransactionToView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.TransactionToView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTransactionToView_args.class, metaDataMap);
    }

    public saveTransactionToView_args() {
    }

    public saveTransactionToView_args(
      one.show.pay.thrift.view.TransactionToView TransactionToView)
    {
      this();
      this.TransactionToView = TransactionToView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveTransactionToView_args(saveTransactionToView_args other) {
      if (other.isSetTransactionToView()) {
        this.TransactionToView = new one.show.pay.thrift.view.TransactionToView(other.TransactionToView);
      }
    }

    public saveTransactionToView_args deepCopy() {
      return new saveTransactionToView_args(this);
    }

    @Override
    public void clear() {
      this.TransactionToView = null;
    }

    public one.show.pay.thrift.view.TransactionToView getTransactionToView() {
      return this.TransactionToView;
    }

    public saveTransactionToView_args setTransactionToView(one.show.pay.thrift.view.TransactionToView TransactionToView) {
      this.TransactionToView = TransactionToView;
      return this;
    }

    public void unsetTransactionToView() {
      this.TransactionToView = null;
    }

    /** Returns true if field TransactionToView is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionToView() {
      return this.TransactionToView != null;
    }

    public void setTransactionToViewIsSet(boolean value) {
      if (!value) {
        this.TransactionToView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTION_TO_VIEW:
        if (value == null) {
          unsetTransactionToView();
        } else {
          setTransactionToView((one.show.pay.thrift.view.TransactionToView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTION_TO_VIEW:
        return getTransactionToView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTION_TO_VIEW:
        return isSetTransactionToView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveTransactionToView_args)
        return this.equals((saveTransactionToView_args)that);
      return false;
    }

    public boolean equals(saveTransactionToView_args that) {
      if (that == null)
        return false;

      boolean this_present_TransactionToView = true && this.isSetTransactionToView();
      boolean that_present_TransactionToView = true && that.isSetTransactionToView();
      if (this_present_TransactionToView || that_present_TransactionToView) {
        if (!(this_present_TransactionToView && that_present_TransactionToView))
          return false;
        if (!this.TransactionToView.equals(that.TransactionToView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveTransactionToView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveTransactionToView_args typedOther = (saveTransactionToView_args)other;

      lastComparison = Boolean.valueOf(isSetTransactionToView()).compareTo(typedOther.isSetTransactionToView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionToView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TransactionToView, typedOther.TransactionToView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveTransactionToView_args(");
      boolean first = true;

      sb.append("TransactionToView:");
      if (this.TransactionToView == null) {
        sb.append("null");
      } else {
        sb.append(this.TransactionToView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (TransactionToView != null) {
        TransactionToView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveTransactionToView_argsStandardSchemeFactory implements SchemeFactory {
      public saveTransactionToView_argsStandardScheme getScheme() {
        return new saveTransactionToView_argsStandardScheme();
      }
    }

    private static class saveTransactionToView_argsStandardScheme extends StandardScheme<saveTransactionToView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveTransactionToView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTION_TO_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.TransactionToView = new one.show.pay.thrift.view.TransactionToView();
                struct.TransactionToView.read(iprot);
                struct.setTransactionToViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveTransactionToView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.TransactionToView != null) {
          oprot.writeFieldBegin(TRANSACTION_TO_VIEW_FIELD_DESC);
          struct.TransactionToView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveTransactionToView_argsTupleSchemeFactory implements SchemeFactory {
      public saveTransactionToView_argsTupleScheme getScheme() {
        return new saveTransactionToView_argsTupleScheme();
      }
    }

    private static class saveTransactionToView_argsTupleScheme extends TupleScheme<saveTransactionToView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveTransactionToView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransactionToView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransactionToView()) {
          struct.TransactionToView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveTransactionToView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.TransactionToView = new one.show.pay.thrift.view.TransactionToView();
          struct.TransactionToView.read(iprot);
          struct.setTransactionToViewIsSet(true);
        }
      }
    }

  }

  public static class saveTransactionToView_result implements org.apache.thrift.TBase<saveTransactionToView_result, saveTransactionToView_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTransactionToView_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveTransactionToView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveTransactionToView_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTransactionToView_result.class, metaDataMap);
    }

    public saveTransactionToView_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveTransactionToView_result(saveTransactionToView_result other) {
    }

    public saveTransactionToView_result deepCopy() {
      return new saveTransactionToView_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveTransactionToView_result)
        return this.equals((saveTransactionToView_result)that);
      return false;
    }

    public boolean equals(saveTransactionToView_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveTransactionToView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveTransactionToView_result typedOther = (saveTransactionToView_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveTransactionToView_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveTransactionToView_resultStandardSchemeFactory implements SchemeFactory {
      public saveTransactionToView_resultStandardScheme getScheme() {
        return new saveTransactionToView_resultStandardScheme();
      }
    }

    private static class saveTransactionToView_resultStandardScheme extends StandardScheme<saveTransactionToView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveTransactionToView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveTransactionToView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveTransactionToView_resultTupleSchemeFactory implements SchemeFactory {
      public saveTransactionToView_resultTupleScheme getScheme() {
        return new saveTransactionToView_resultTupleScheme();
      }
    }

    private static class saveTransactionToView_resultTupleScheme extends TupleScheme<saveTransactionToView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveTransactionToView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveTransactionToView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveTransactionFromView_args implements org.apache.thrift.TBase<saveTransactionFromView_args, saveTransactionFromView_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTransactionFromView_args");

    private static final org.apache.thrift.protocol.TField TRANSACTION_FROM_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionFromView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveTransactionFromView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveTransactionFromView_argsTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.TransactionFromView transactionFromView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTION_FROM_VIEW((short)1, "transactionFromView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTION_FROM_VIEW
            return TRANSACTION_FROM_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTION_FROM_VIEW, new org.apache.thrift.meta_data.FieldMetaData("transactionFromView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.TransactionFromView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTransactionFromView_args.class, metaDataMap);
    }

    public saveTransactionFromView_args() {
    }

    public saveTransactionFromView_args(
      one.show.pay.thrift.view.TransactionFromView transactionFromView)
    {
      this();
      this.transactionFromView = transactionFromView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveTransactionFromView_args(saveTransactionFromView_args other) {
      if (other.isSetTransactionFromView()) {
        this.transactionFromView = new one.show.pay.thrift.view.TransactionFromView(other.transactionFromView);
      }
    }

    public saveTransactionFromView_args deepCopy() {
      return new saveTransactionFromView_args(this);
    }

    @Override
    public void clear() {
      this.transactionFromView = null;
    }

    public one.show.pay.thrift.view.TransactionFromView getTransactionFromView() {
      return this.transactionFromView;
    }

    public saveTransactionFromView_args setTransactionFromView(one.show.pay.thrift.view.TransactionFromView transactionFromView) {
      this.transactionFromView = transactionFromView;
      return this;
    }

    public void unsetTransactionFromView() {
      this.transactionFromView = null;
    }

    /** Returns true if field transactionFromView is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionFromView() {
      return this.transactionFromView != null;
    }

    public void setTransactionFromViewIsSet(boolean value) {
      if (!value) {
        this.transactionFromView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTION_FROM_VIEW:
        if (value == null) {
          unsetTransactionFromView();
        } else {
          setTransactionFromView((one.show.pay.thrift.view.TransactionFromView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTION_FROM_VIEW:
        return getTransactionFromView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTION_FROM_VIEW:
        return isSetTransactionFromView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveTransactionFromView_args)
        return this.equals((saveTransactionFromView_args)that);
      return false;
    }

    public boolean equals(saveTransactionFromView_args that) {
      if (that == null)
        return false;

      boolean this_present_transactionFromView = true && this.isSetTransactionFromView();
      boolean that_present_transactionFromView = true && that.isSetTransactionFromView();
      if (this_present_transactionFromView || that_present_transactionFromView) {
        if (!(this_present_transactionFromView && that_present_transactionFromView))
          return false;
        if (!this.transactionFromView.equals(that.transactionFromView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveTransactionFromView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveTransactionFromView_args typedOther = (saveTransactionFromView_args)other;

      lastComparison = Boolean.valueOf(isSetTransactionFromView()).compareTo(typedOther.isSetTransactionFromView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionFromView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionFromView, typedOther.transactionFromView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveTransactionFromView_args(");
      boolean first = true;

      sb.append("transactionFromView:");
      if (this.transactionFromView == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionFromView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transactionFromView != null) {
        transactionFromView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveTransactionFromView_argsStandardSchemeFactory implements SchemeFactory {
      public saveTransactionFromView_argsStandardScheme getScheme() {
        return new saveTransactionFromView_argsStandardScheme();
      }
    }

    private static class saveTransactionFromView_argsStandardScheme extends StandardScheme<saveTransactionFromView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveTransactionFromView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTION_FROM_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transactionFromView = new one.show.pay.thrift.view.TransactionFromView();
                struct.transactionFromView.read(iprot);
                struct.setTransactionFromViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveTransactionFromView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transactionFromView != null) {
          oprot.writeFieldBegin(TRANSACTION_FROM_VIEW_FIELD_DESC);
          struct.transactionFromView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveTransactionFromView_argsTupleSchemeFactory implements SchemeFactory {
      public saveTransactionFromView_argsTupleScheme getScheme() {
        return new saveTransactionFromView_argsTupleScheme();
      }
    }

    private static class saveTransactionFromView_argsTupleScheme extends TupleScheme<saveTransactionFromView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveTransactionFromView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransactionFromView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransactionFromView()) {
          struct.transactionFromView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveTransactionFromView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transactionFromView = new one.show.pay.thrift.view.TransactionFromView();
          struct.transactionFromView.read(iprot);
          struct.setTransactionFromViewIsSet(true);
        }
      }
    }

  }

  public static class saveTransactionFromView_result implements org.apache.thrift.TBase<saveTransactionFromView_result, saveTransactionFromView_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveTransactionFromView_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveTransactionFromView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveTransactionFromView_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveTransactionFromView_result.class, metaDataMap);
    }

    public saveTransactionFromView_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveTransactionFromView_result(saveTransactionFromView_result other) {
    }

    public saveTransactionFromView_result deepCopy() {
      return new saveTransactionFromView_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveTransactionFromView_result)
        return this.equals((saveTransactionFromView_result)that);
      return false;
    }

    public boolean equals(saveTransactionFromView_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveTransactionFromView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveTransactionFromView_result typedOther = (saveTransactionFromView_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveTransactionFromView_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveTransactionFromView_resultStandardSchemeFactory implements SchemeFactory {
      public saveTransactionFromView_resultStandardScheme getScheme() {
        return new saveTransactionFromView_resultStandardScheme();
      }
    }

    private static class saveTransactionFromView_resultStandardScheme extends StandardScheme<saveTransactionFromView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveTransactionFromView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveTransactionFromView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveTransactionFromView_resultTupleSchemeFactory implements SchemeFactory {
      public saveTransactionFromView_resultTupleScheme getScheme() {
        return new saveTransactionFromView_resultTupleScheme();
      }
    }

    private static class saveTransactionFromView_resultTupleScheme extends TupleScheme<saveTransactionFromView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveTransactionFromView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveTransactionFromView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findOrdersListByParams_args implements org.apache.thrift.TBase<findOrdersListByParams_args, findOrdersListByParams_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrdersListByParams_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrdersListByParams_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrdersListByParams_argsTupleSchemeFactory());
    }

    public Map<String,String> params; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrdersListByParams_args.class, metaDataMap);
    }

    public findOrdersListByParams_args() {
    }

    public findOrdersListByParams_args(
      Map<String,String> params,
      int start,
      int count)
    {
      this();
      this.params = params;
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrdersListByParams_args(findOrdersListByParams_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
      this.start = other.start;
      this.count = other.count;
    }

    public findOrdersListByParams_args deepCopy() {
      return new findOrdersListByParams_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findOrdersListByParams_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public findOrdersListByParams_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findOrdersListByParams_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrdersListByParams_args)
        return this.equals((findOrdersListByParams_args)that);
      return false;
    }

    public boolean equals(findOrdersListByParams_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrdersListByParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrdersListByParams_args typedOther = (findOrdersListByParams_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrdersListByParams_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrdersListByParams_argsStandardSchemeFactory implements SchemeFactory {
      public findOrdersListByParams_argsStandardScheme getScheme() {
        return new findOrdersListByParams_argsStandardScheme();
      }
    }

    private static class findOrdersListByParams_argsStandardScheme extends StandardScheme<findOrdersListByParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrdersListByParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map86.size);
                  for (int _i87 = 0; _i87 < _map86.size; ++_i87)
                  {
                    String _key88; // required
                    String _val89; // required
                    _key88 = iprot.readString();
                    _val89 = iprot.readString();
                    struct.params.put(_key88, _val89);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrdersListByParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter90 : struct.params.entrySet())
            {
              oprot.writeString(_iter90.getKey());
              oprot.writeString(_iter90.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrdersListByParams_argsTupleSchemeFactory implements SchemeFactory {
      public findOrdersListByParams_argsTupleScheme getScheme() {
        return new findOrdersListByParams_argsTupleScheme();
      }
    }

    private static class findOrdersListByParams_argsTupleScheme extends TupleScheme<findOrdersListByParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrdersListByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter91 : struct.params.entrySet())
            {
              oprot.writeString(_iter91.getKey());
              oprot.writeString(_iter91.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrdersListByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map92.size);
            for (int _i93 = 0; _i93 < _map92.size; ++_i93)
            {
              String _key94; // required
              String _val95; // required
              _key94 = iprot.readString();
              _val95 = iprot.readString();
              struct.params.put(_key94, _val95);
            }
          }
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findOrdersListByParams_result implements org.apache.thrift.TBase<findOrdersListByParams_result, findOrdersListByParams_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrdersListByParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrdersListByParams_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrdersListByParams_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.OrdersListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.OrdersListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrdersListByParams_result.class, metaDataMap);
    }

    public findOrdersListByParams_result() {
    }

    public findOrdersListByParams_result(
      one.show.pay.thrift.view.OrdersListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrdersListByParams_result(findOrdersListByParams_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.OrdersListView(other.success);
      }
    }

    public findOrdersListByParams_result deepCopy() {
      return new findOrdersListByParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.OrdersListView getSuccess() {
      return this.success;
    }

    public findOrdersListByParams_result setSuccess(one.show.pay.thrift.view.OrdersListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.OrdersListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrdersListByParams_result)
        return this.equals((findOrdersListByParams_result)that);
      return false;
    }

    public boolean equals(findOrdersListByParams_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrdersListByParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrdersListByParams_result typedOther = (findOrdersListByParams_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrdersListByParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrdersListByParams_resultStandardSchemeFactory implements SchemeFactory {
      public findOrdersListByParams_resultStandardScheme getScheme() {
        return new findOrdersListByParams_resultStandardScheme();
      }
    }

    private static class findOrdersListByParams_resultStandardScheme extends StandardScheme<findOrdersListByParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrdersListByParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.OrdersListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrdersListByParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrdersListByParams_resultTupleSchemeFactory implements SchemeFactory {
      public findOrdersListByParams_resultTupleScheme getScheme() {
        return new findOrdersListByParams_resultTupleScheme();
      }
    }

    private static class findOrdersListByParams_resultTupleScheme extends TupleScheme<findOrdersListByParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrdersListByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrdersListByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.OrdersListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findOrdersMoneyByParams_args implements org.apache.thrift.TBase<findOrdersMoneyByParams_args, findOrdersMoneyByParams_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrdersMoneyByParams_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrdersMoneyByParams_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrdersMoneyByParams_argsTupleSchemeFactory());
    }

    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrdersMoneyByParams_args.class, metaDataMap);
    }

    public findOrdersMoneyByParams_args() {
    }

    public findOrdersMoneyByParams_args(
      Map<String,String> params)
    {
      this();
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrdersMoneyByParams_args(findOrdersMoneyByParams_args other) {
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
    }

    public findOrdersMoneyByParams_args deepCopy() {
      return new findOrdersMoneyByParams_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findOrdersMoneyByParams_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrdersMoneyByParams_args)
        return this.equals((findOrdersMoneyByParams_args)that);
      return false;
    }

    public boolean equals(findOrdersMoneyByParams_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrdersMoneyByParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrdersMoneyByParams_args typedOther = (findOrdersMoneyByParams_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrdersMoneyByParams_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrdersMoneyByParams_argsStandardSchemeFactory implements SchemeFactory {
      public findOrdersMoneyByParams_argsStandardScheme getScheme() {
        return new findOrdersMoneyByParams_argsStandardScheme();
      }
    }

    private static class findOrdersMoneyByParams_argsStandardScheme extends StandardScheme<findOrdersMoneyByParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrdersMoneyByParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map96.size);
                  for (int _i97 = 0; _i97 < _map96.size; ++_i97)
                  {
                    String _key98; // required
                    String _val99; // required
                    _key98 = iprot.readString();
                    _val99 = iprot.readString();
                    struct.params.put(_key98, _val99);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrdersMoneyByParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter100 : struct.params.entrySet())
            {
              oprot.writeString(_iter100.getKey());
              oprot.writeString(_iter100.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrdersMoneyByParams_argsTupleSchemeFactory implements SchemeFactory {
      public findOrdersMoneyByParams_argsTupleScheme getScheme() {
        return new findOrdersMoneyByParams_argsTupleScheme();
      }
    }

    private static class findOrdersMoneyByParams_argsTupleScheme extends TupleScheme<findOrdersMoneyByParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrdersMoneyByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter101 : struct.params.entrySet())
            {
              oprot.writeString(_iter101.getKey());
              oprot.writeString(_iter101.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrdersMoneyByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map102 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map102.size);
            for (int _i103 = 0; _i103 < _map102.size; ++_i103)
            {
              String _key104; // required
              String _val105; // required
              _key104 = iprot.readString();
              _val105 = iprot.readString();
              struct.params.put(_key104, _val105);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findOrdersMoneyByParams_result implements org.apache.thrift.TBase<findOrdersMoneyByParams_result, findOrdersMoneyByParams_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrdersMoneyByParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrdersMoneyByParams_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrdersMoneyByParams_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrdersMoneyByParams_result.class, metaDataMap);
    }

    public findOrdersMoneyByParams_result() {
    }

    public findOrdersMoneyByParams_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrdersMoneyByParams_result(findOrdersMoneyByParams_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public findOrdersMoneyByParams_result deepCopy() {
      return new findOrdersMoneyByParams_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public findOrdersMoneyByParams_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrdersMoneyByParams_result)
        return this.equals((findOrdersMoneyByParams_result)that);
      return false;
    }

    public boolean equals(findOrdersMoneyByParams_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrdersMoneyByParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrdersMoneyByParams_result typedOther = (findOrdersMoneyByParams_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrdersMoneyByParams_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrdersMoneyByParams_resultStandardSchemeFactory implements SchemeFactory {
      public findOrdersMoneyByParams_resultStandardScheme getScheme() {
        return new findOrdersMoneyByParams_resultStandardScheme();
      }
    }

    private static class findOrdersMoneyByParams_resultStandardScheme extends StandardScheme<findOrdersMoneyByParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrdersMoneyByParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrdersMoneyByParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrdersMoneyByParams_resultTupleSchemeFactory implements SchemeFactory {
      public findOrdersMoneyByParams_resultTupleScheme getScheme() {
        return new findOrdersMoneyByParams_resultTupleScheme();
      }
    }

    private static class findOrdersMoneyByParams_resultTupleScheme extends TupleScheme<findOrdersMoneyByParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrdersMoneyByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrdersMoneyByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStockLogItemTotalByUid_args implements org.apache.thrift.TBase<getStockLogItemTotalByUid_args, getStockLogItemTotalByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStockLogItemTotalByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStockLogItemTotalByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStockLogItemTotalByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAM_MAP((short)2, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStockLogItemTotalByUid_args.class, metaDataMap);
    }

    public getStockLogItemTotalByUid_args() {
    }

    public getStockLogItemTotalByUid_args(
      long uid,
      Map<String,String> paramMap)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStockLogItemTotalByUid_args(getStockLogItemTotalByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public getStockLogItemTotalByUid_args deepCopy() {
      return new getStockLogItemTotalByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.paramMap = null;
    }

    public long getUid() {
      return this.uid;
    }

    public getStockLogItemTotalByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getStockLogItemTotalByUid_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStockLogItemTotalByUid_args)
        return this.equals((getStockLogItemTotalByUid_args)that);
      return false;
    }

    public boolean equals(getStockLogItemTotalByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStockLogItemTotalByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStockLogItemTotalByUid_args typedOther = (getStockLogItemTotalByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStockLogItemTotalByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStockLogItemTotalByUid_argsStandardSchemeFactory implements SchemeFactory {
      public getStockLogItemTotalByUid_argsStandardScheme getScheme() {
        return new getStockLogItemTotalByUid_argsStandardScheme();
      }
    }

    private static class getStockLogItemTotalByUid_argsStandardScheme extends StandardScheme<getStockLogItemTotalByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStockLogItemTotalByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map106.size);
                  for (int _i107 = 0; _i107 < _map106.size; ++_i107)
                  {
                    String _key108; // required
                    String _val109; // required
                    _key108 = iprot.readString();
                    _val109 = iprot.readString();
                    struct.paramMap.put(_key108, _val109);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStockLogItemTotalByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter110 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter110.getKey());
              oprot.writeString(_iter110.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStockLogItemTotalByUid_argsTupleSchemeFactory implements SchemeFactory {
      public getStockLogItemTotalByUid_argsTupleScheme getScheme() {
        return new getStockLogItemTotalByUid_argsTupleScheme();
      }
    }

    private static class getStockLogItemTotalByUid_argsTupleScheme extends TupleScheme<getStockLogItemTotalByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStockLogItemTotalByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParamMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter111 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter111.getKey());
              oprot.writeString(_iter111.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStockLogItemTotalByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map112.size);
            for (int _i113 = 0; _i113 < _map112.size; ++_i113)
            {
              String _key114; // required
              String _val115; // required
              _key114 = iprot.readString();
              _val115 = iprot.readString();
              struct.paramMap.put(_key114, _val115);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getStockLogItemTotalByUid_result implements org.apache.thrift.TBase<getStockLogItemTotalByUid_result, getStockLogItemTotalByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStockLogItemTotalByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStockLogItemTotalByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStockLogItemTotalByUid_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStockLogItemTotalByUid_result.class, metaDataMap);
    }

    public getStockLogItemTotalByUid_result() {
    }

    public getStockLogItemTotalByUid_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStockLogItemTotalByUid_result(getStockLogItemTotalByUid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getStockLogItemTotalByUid_result deepCopy() {
      return new getStockLogItemTotalByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getStockLogItemTotalByUid_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStockLogItemTotalByUid_result)
        return this.equals((getStockLogItemTotalByUid_result)that);
      return false;
    }

    public boolean equals(getStockLogItemTotalByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStockLogItemTotalByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStockLogItemTotalByUid_result typedOther = (getStockLogItemTotalByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStockLogItemTotalByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStockLogItemTotalByUid_resultStandardSchemeFactory implements SchemeFactory {
      public getStockLogItemTotalByUid_resultStandardScheme getScheme() {
        return new getStockLogItemTotalByUid_resultStandardScheme();
      }
    }

    private static class getStockLogItemTotalByUid_resultStandardScheme extends StandardScheme<getStockLogItemTotalByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStockLogItemTotalByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStockLogItemTotalByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStockLogItemTotalByUid_resultTupleSchemeFactory implements SchemeFactory {
      public getStockLogItemTotalByUid_resultTupleScheme getScheme() {
        return new getStockLogItemTotalByUid_resultTupleScheme();
      }
    }

    private static class getStockLogItemTotalByUid_resultTupleScheme extends TupleScheme<getStockLogItemTotalByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStockLogItemTotalByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStockLogItemTotalByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findOrdersViewsByUid_args implements org.apache.thrift.TBase<findOrdersViewsByUid_args, findOrdersViewsByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrdersViewsByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrdersViewsByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrdersViewsByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public Map<String,String> params; // required
    public int start; // required
    public int pageCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAMS((short)2, "params"),
      START((short)3, "start"),
      PAGE_COUNT((short)4, "pageCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAMS
            return PARAMS;
          case 3: // START
            return START;
          case 4: // PAGE_COUNT
            return PAGE_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __PAGECOUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrdersViewsByUid_args.class, metaDataMap);
    }

    public findOrdersViewsByUid_args() {
    }

    public findOrdersViewsByUid_args(
      long uid,
      Map<String,String> params,
      int start,
      int pageCount)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.params = params;
      this.start = start;
      setStartIsSet(true);
      this.pageCount = pageCount;
      setPageCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrdersViewsByUid_args(findOrdersViewsByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
      this.start = other.start;
      this.pageCount = other.pageCount;
    }

    public findOrdersViewsByUid_args deepCopy() {
      return new findOrdersViewsByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.params = null;
      setStartIsSet(false);
      this.start = 0;
      setPageCountIsSet(false);
      this.pageCount = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findOrdersViewsByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findOrdersViewsByUid_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public findOrdersViewsByUid_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getPageCount() {
      return this.pageCount;
    }

    public findOrdersViewsByUid_args setPageCount(int pageCount) {
      this.pageCount = pageCount;
      setPageCountIsSet(true);
      return this;
    }

    public void unsetPageCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
    public boolean isSetPageCount() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    public void setPageCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case PAGE_COUNT:
        if (value == null) {
          unsetPageCount();
        } else {
          setPageCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PARAMS:
        return getParams();

      case START:
        return Integer.valueOf(getStart());

      case PAGE_COUNT:
        return Integer.valueOf(getPageCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAMS:
        return isSetParams();
      case START:
        return isSetStart();
      case PAGE_COUNT:
        return isSetPageCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrdersViewsByUid_args)
        return this.equals((findOrdersViewsByUid_args)that);
      return false;
    }

    public boolean equals(findOrdersViewsByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_pageCount = true;
      boolean that_present_pageCount = true;
      if (this_present_pageCount || that_present_pageCount) {
        if (!(this_present_pageCount && that_present_pageCount))
          return false;
        if (this.pageCount != that.pageCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrdersViewsByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrdersViewsByUid_args typedOther = (findOrdersViewsByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(typedOther.isSetPageCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, typedOther.pageCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrdersViewsByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageCount:");
      sb.append(this.pageCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrdersViewsByUid_argsStandardSchemeFactory implements SchemeFactory {
      public findOrdersViewsByUid_argsStandardScheme getScheme() {
        return new findOrdersViewsByUid_argsStandardScheme();
      }
    }

    private static class findOrdersViewsByUid_argsStandardScheme extends StandardScheme<findOrdersViewsByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrdersViewsByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map116.size);
                  for (int _i117 = 0; _i117 < _map116.size; ++_i117)
                  {
                    String _key118; // required
                    String _val119; // required
                    _key118 = iprot.readString();
                    _val119 = iprot.readString();
                    struct.params.put(_key118, _val119);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageCount = iprot.readI32();
                struct.setPageCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrdersViewsByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter120 : struct.params.entrySet())
            {
              oprot.writeString(_iter120.getKey());
              oprot.writeString(_iter120.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.pageCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrdersViewsByUid_argsTupleSchemeFactory implements SchemeFactory {
      public findOrdersViewsByUid_argsTupleScheme getScheme() {
        return new findOrdersViewsByUid_argsTupleScheme();
      }
    }

    private static class findOrdersViewsByUid_argsTupleScheme extends TupleScheme<findOrdersViewsByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrdersViewsByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetPageCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter121 : struct.params.entrySet())
            {
              oprot.writeString(_iter121.getKey());
              oprot.writeString(_iter121.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetPageCount()) {
          oprot.writeI32(struct.pageCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrdersViewsByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map122.size);
            for (int _i123 = 0; _i123 < _map122.size; ++_i123)
            {
              String _key124; // required
              String _val125; // required
              _key124 = iprot.readString();
              _val125 = iprot.readString();
              struct.params.put(_key124, _val125);
            }
          }
          struct.setParamsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageCount = iprot.readI32();
          struct.setPageCountIsSet(true);
        }
      }
    }

  }

  public static class findOrdersViewsByUid_result implements org.apache.thrift.TBase<findOrdersViewsByUid_result, findOrdersViewsByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOrdersViewsByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOrdersViewsByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOrdersViewsByUid_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.OrdersView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.OrdersView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOrdersViewsByUid_result.class, metaDataMap);
    }

    public findOrdersViewsByUid_result() {
    }

    public findOrdersViewsByUid_result(
      List<one.show.pay.thrift.view.OrdersView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOrdersViewsByUid_result(findOrdersViewsByUid_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.OrdersView> __this__success = new ArrayList<one.show.pay.thrift.view.OrdersView>();
        for (one.show.pay.thrift.view.OrdersView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.OrdersView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findOrdersViewsByUid_result deepCopy() {
      return new findOrdersViewsByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.OrdersView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.OrdersView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.OrdersView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.OrdersView> getSuccess() {
      return this.success;
    }

    public findOrdersViewsByUid_result setSuccess(List<one.show.pay.thrift.view.OrdersView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.OrdersView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOrdersViewsByUid_result)
        return this.equals((findOrdersViewsByUid_result)that);
      return false;
    }

    public boolean equals(findOrdersViewsByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findOrdersViewsByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findOrdersViewsByUid_result typedOther = (findOrdersViewsByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOrdersViewsByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOrdersViewsByUid_resultStandardSchemeFactory implements SchemeFactory {
      public findOrdersViewsByUid_resultStandardScheme getScheme() {
        return new findOrdersViewsByUid_resultStandardScheme();
      }
    }

    private static class findOrdersViewsByUid_resultStandardScheme extends StandardScheme<findOrdersViewsByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOrdersViewsByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.OrdersView>(_list126.size);
                  for (int _i127 = 0; _i127 < _list126.size; ++_i127)
                  {
                    one.show.pay.thrift.view.OrdersView _elem128; // required
                    _elem128 = new one.show.pay.thrift.view.OrdersView();
                    _elem128.read(iprot);
                    struct.success.add(_elem128);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOrdersViewsByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.OrdersView _iter129 : struct.success)
            {
              _iter129.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOrdersViewsByUid_resultTupleSchemeFactory implements SchemeFactory {
      public findOrdersViewsByUid_resultTupleScheme getScheme() {
        return new findOrdersViewsByUid_resultTupleScheme();
      }
    }

    private static class findOrdersViewsByUid_resultTupleScheme extends TupleScheme<findOrdersViewsByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOrdersViewsByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.OrdersView _iter130 : struct.success)
            {
              _iter130.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOrdersViewsByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.OrdersView>(_list131.size);
            for (int _i132 = 0; _i132 < _list131.size; ++_i132)
            {
              one.show.pay.thrift.view.OrdersView _elem133; // required
              _elem133 = new one.show.pay.thrift.view.OrdersView();
              _elem133.read(iprot);
              struct.success.add(_elem133);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findTransactionFromViewListByParams_args implements org.apache.thrift.TBase<findTransactionFromViewListByParams_args, findTransactionFromViewListByParams_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTransactionFromViewListByParams_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTransactionFromViewListByParams_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTransactionFromViewListByParams_argsTupleSchemeFactory());
    }

    public long uid; // required
    public Map<String,String> params; // required
    public int start; // required
    public int pageCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAMS((short)2, "params"),
      START((short)3, "start"),
      PAGE_COUNT((short)4, "pageCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAMS
            return PARAMS;
          case 3: // START
            return START;
          case 4: // PAGE_COUNT
            return PAGE_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __PAGECOUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTransactionFromViewListByParams_args.class, metaDataMap);
    }

    public findTransactionFromViewListByParams_args() {
    }

    public findTransactionFromViewListByParams_args(
      long uid,
      Map<String,String> params,
      int start,
      int pageCount)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.params = params;
      this.start = start;
      setStartIsSet(true);
      this.pageCount = pageCount;
      setPageCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTransactionFromViewListByParams_args(findTransactionFromViewListByParams_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
      this.start = other.start;
      this.pageCount = other.pageCount;
    }

    public findTransactionFromViewListByParams_args deepCopy() {
      return new findTransactionFromViewListByParams_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.params = null;
      setStartIsSet(false);
      this.start = 0;
      setPageCountIsSet(false);
      this.pageCount = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findTransactionFromViewListByParams_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findTransactionFromViewListByParams_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public findTransactionFromViewListByParams_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getPageCount() {
      return this.pageCount;
    }

    public findTransactionFromViewListByParams_args setPageCount(int pageCount) {
      this.pageCount = pageCount;
      setPageCountIsSet(true);
      return this;
    }

    public void unsetPageCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
    public boolean isSetPageCount() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
    }

    public void setPageCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case PAGE_COUNT:
        if (value == null) {
          unsetPageCount();
        } else {
          setPageCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PARAMS:
        return getParams();

      case START:
        return Integer.valueOf(getStart());

      case PAGE_COUNT:
        return Integer.valueOf(getPageCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAMS:
        return isSetParams();
      case START:
        return isSetStart();
      case PAGE_COUNT:
        return isSetPageCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTransactionFromViewListByParams_args)
        return this.equals((findTransactionFromViewListByParams_args)that);
      return false;
    }

    public boolean equals(findTransactionFromViewListByParams_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_pageCount = true;
      boolean that_present_pageCount = true;
      if (this_present_pageCount || that_present_pageCount) {
        if (!(this_present_pageCount && that_present_pageCount))
          return false;
        if (this.pageCount != that.pageCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTransactionFromViewListByParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTransactionFromViewListByParams_args typedOther = (findTransactionFromViewListByParams_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(typedOther.isSetPageCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, typedOther.pageCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTransactionFromViewListByParams_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageCount:");
      sb.append(this.pageCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTransactionFromViewListByParams_argsStandardSchemeFactory implements SchemeFactory {
      public findTransactionFromViewListByParams_argsStandardScheme getScheme() {
        return new findTransactionFromViewListByParams_argsStandardScheme();
      }
    }

    private static class findTransactionFromViewListByParams_argsStandardScheme extends StandardScheme<findTransactionFromViewListByParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTransactionFromViewListByParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map134 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map134.size);
                  for (int _i135 = 0; _i135 < _map134.size; ++_i135)
                  {
                    String _key136; // required
                    String _val137; // required
                    _key136 = iprot.readString();
                    _val137 = iprot.readString();
                    struct.params.put(_key136, _val137);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageCount = iprot.readI32();
                struct.setPageCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTransactionFromViewListByParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter138 : struct.params.entrySet())
            {
              oprot.writeString(_iter138.getKey());
              oprot.writeString(_iter138.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.pageCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTransactionFromViewListByParams_argsTupleSchemeFactory implements SchemeFactory {
      public findTransactionFromViewListByParams_argsTupleScheme getScheme() {
        return new findTransactionFromViewListByParams_argsTupleScheme();
      }
    }

    private static class findTransactionFromViewListByParams_argsTupleScheme extends TupleScheme<findTransactionFromViewListByParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTransactionFromViewListByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetPageCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter139 : struct.params.entrySet())
            {
              oprot.writeString(_iter139.getKey());
              oprot.writeString(_iter139.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetPageCount()) {
          oprot.writeI32(struct.pageCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTransactionFromViewListByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map140 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map140.size);
            for (int _i141 = 0; _i141 < _map140.size; ++_i141)
            {
              String _key142; // required
              String _val143; // required
              _key142 = iprot.readString();
              _val143 = iprot.readString();
              struct.params.put(_key142, _val143);
            }
          }
          struct.setParamsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageCount = iprot.readI32();
          struct.setPageCountIsSet(true);
        }
      }
    }

  }

  public static class findTransactionFromViewListByParams_result implements org.apache.thrift.TBase<findTransactionFromViewListByParams_result, findTransactionFromViewListByParams_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTransactionFromViewListByParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTransactionFromViewListByParams_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTransactionFromViewListByParams_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.TransactionFromView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.TransactionFromView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTransactionFromViewListByParams_result.class, metaDataMap);
    }

    public findTransactionFromViewListByParams_result() {
    }

    public findTransactionFromViewListByParams_result(
      List<one.show.pay.thrift.view.TransactionFromView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTransactionFromViewListByParams_result(findTransactionFromViewListByParams_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.TransactionFromView> __this__success = new ArrayList<one.show.pay.thrift.view.TransactionFromView>();
        for (one.show.pay.thrift.view.TransactionFromView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.TransactionFromView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findTransactionFromViewListByParams_result deepCopy() {
      return new findTransactionFromViewListByParams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.TransactionFromView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.TransactionFromView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.TransactionFromView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.TransactionFromView> getSuccess() {
      return this.success;
    }

    public findTransactionFromViewListByParams_result setSuccess(List<one.show.pay.thrift.view.TransactionFromView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.TransactionFromView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTransactionFromViewListByParams_result)
        return this.equals((findTransactionFromViewListByParams_result)that);
      return false;
    }

    public boolean equals(findTransactionFromViewListByParams_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTransactionFromViewListByParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTransactionFromViewListByParams_result typedOther = (findTransactionFromViewListByParams_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTransactionFromViewListByParams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTransactionFromViewListByParams_resultStandardSchemeFactory implements SchemeFactory {
      public findTransactionFromViewListByParams_resultStandardScheme getScheme() {
        return new findTransactionFromViewListByParams_resultStandardScheme();
      }
    }

    private static class findTransactionFromViewListByParams_resultStandardScheme extends StandardScheme<findTransactionFromViewListByParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTransactionFromViewListByParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.TransactionFromView>(_list144.size);
                  for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                  {
                    one.show.pay.thrift.view.TransactionFromView _elem146; // required
                    _elem146 = new one.show.pay.thrift.view.TransactionFromView();
                    _elem146.read(iprot);
                    struct.success.add(_elem146);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTransactionFromViewListByParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.TransactionFromView _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTransactionFromViewListByParams_resultTupleSchemeFactory implements SchemeFactory {
      public findTransactionFromViewListByParams_resultTupleScheme getScheme() {
        return new findTransactionFromViewListByParams_resultTupleScheme();
      }
    }

    private static class findTransactionFromViewListByParams_resultTupleScheme extends TupleScheme<findTransactionFromViewListByParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTransactionFromViewListByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.TransactionFromView _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTransactionFromViewListByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.TransactionFromView>(_list149.size);
            for (int _i150 = 0; _i150 < _list149.size; ++_i150)
            {
              one.show.pay.thrift.view.TransactionFromView _elem151; // required
              _elem151 = new one.show.pay.thrift.view.TransactionFromView();
              _elem151.read(iprot);
              struct.success.add(_elem151);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findTransactionFromViewCountByParams_args implements org.apache.thrift.TBase<findTransactionFromViewCountByParams_args, findTransactionFromViewCountByParams_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTransactionFromViewCountByParams_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTransactionFromViewCountByParams_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTransactionFromViewCountByParams_argsTupleSchemeFactory());
    }

    public long uid; // required
    public Map<String,String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTransactionFromViewCountByParams_args.class, metaDataMap);
    }

    public findTransactionFromViewCountByParams_args() {
    }

    public findTransactionFromViewCountByParams_args(
      long uid,
      Map<String,String> params)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTransactionFromViewCountByParams_args(findTransactionFromViewCountByParams_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
    }

    public findTransactionFromViewCountByParams_args deepCopy() {
      return new findTransactionFromViewCountByParams_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.params = null;
    }

    public long getUid() {
      return this.uid;
    }

    public findTransactionFromViewCountByParams_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findTransactionFromViewCountByParams_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTransactionFromViewCountByParams_args)
        return this.equals((findTransactionFromViewCountByParams_args)that);
      return false;
    }

    public boolean equals(findTransactionFromViewCountByParams_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTransactionFromViewCountByParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTransactionFromViewCountByParams_args typedOther = (findTransactionFromViewCountByParams_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTransactionFromViewCountByParams_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTransactionFromViewCountByParams_argsStandardSchemeFactory implements SchemeFactory {
      public findTransactionFromViewCountByParams_argsStandardScheme getScheme() {
        return new findTransactionFromViewCountByParams_argsStandardScheme();
      }
    }

    private static class findTransactionFromViewCountByParams_argsStandardScheme extends StandardScheme<findTransactionFromViewCountByParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTransactionFromViewCountByParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map152 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map152.size);
                  for (int _i153 = 0; _i153 < _map152.size; ++_i153)
                  {
                    String _key154; // required
                    String _val155; // required
                    _key154 = iprot.readString();
                    _val155 = iprot.readString();
                    struct.params.put(_key154, _val155);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTransactionFromViewCountByParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter156 : struct.params.entrySet())
            {
              oprot.writeString(_iter156.getKey());
              oprot.writeString(_iter156.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTransactionFromViewCountByParams_argsTupleSchemeFactory implements SchemeFactory {
      public findTransactionFromViewCountByParams_argsTupleScheme getScheme() {
        return new findTransactionFromViewCountByParams_argsTupleScheme();
      }
    }

    private static class findTransactionFromViewCountByParams_argsTupleScheme extends TupleScheme<findTransactionFromViewCountByParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTransactionFromViewCountByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter157 : struct.params.entrySet())
            {
              oprot.writeString(_iter157.getKey());
              oprot.writeString(_iter157.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTransactionFromViewCountByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map158 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map158.size);
            for (int _i159 = 0; _i159 < _map158.size; ++_i159)
            {
              String _key160; // required
              String _val161; // required
              _key160 = iprot.readString();
              _val161 = iprot.readString();
              struct.params.put(_key160, _val161);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findTransactionFromViewCountByParams_result implements org.apache.thrift.TBase<findTransactionFromViewCountByParams_result, findTransactionFromViewCountByParams_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTransactionFromViewCountByParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTransactionFromViewCountByParams_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTransactionFromViewCountByParams_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTransactionFromViewCountByParams_result.class, metaDataMap);
    }

    public findTransactionFromViewCountByParams_result() {
    }

    public findTransactionFromViewCountByParams_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTransactionFromViewCountByParams_result(findTransactionFromViewCountByParams_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public findTransactionFromViewCountByParams_result deepCopy() {
      return new findTransactionFromViewCountByParams_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public findTransactionFromViewCountByParams_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTransactionFromViewCountByParams_result)
        return this.equals((findTransactionFromViewCountByParams_result)that);
      return false;
    }

    public boolean equals(findTransactionFromViewCountByParams_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTransactionFromViewCountByParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTransactionFromViewCountByParams_result typedOther = (findTransactionFromViewCountByParams_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTransactionFromViewCountByParams_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTransactionFromViewCountByParams_resultStandardSchemeFactory implements SchemeFactory {
      public findTransactionFromViewCountByParams_resultStandardScheme getScheme() {
        return new findTransactionFromViewCountByParams_resultStandardScheme();
      }
    }

    private static class findTransactionFromViewCountByParams_resultStandardScheme extends StandardScheme<findTransactionFromViewCountByParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTransactionFromViewCountByParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTransactionFromViewCountByParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTransactionFromViewCountByParams_resultTupleSchemeFactory implements SchemeFactory {
      public findTransactionFromViewCountByParams_resultTupleScheme getScheme() {
        return new findTransactionFromViewCountByParams_resultTupleScheme();
      }
    }

    private static class findTransactionFromViewCountByParams_resultTupleScheme extends TupleScheme<findTransactionFromViewCountByParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTransactionFromViewCountByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTransactionFromViewCountByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class systemSend_args implements org.apache.thrift.TBase<systemSend_args, systemSend_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("systemSend_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("itemView", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new systemSend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new systemSend_argsTupleSchemeFactory());
    }

    public long uid; // required
    public one.show.pay.thrift.view.ItemView itemView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM_VIEW((short)2, "itemView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM_VIEW
            return ITEM_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_VIEW, new org.apache.thrift.meta_data.FieldMetaData("itemView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ItemView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(systemSend_args.class, metaDataMap);
    }

    public systemSend_args() {
    }

    public systemSend_args(
      long uid,
      one.show.pay.thrift.view.ItemView itemView)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.itemView = itemView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public systemSend_args(systemSend_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetItemView()) {
        this.itemView = new one.show.pay.thrift.view.ItemView(other.itemView);
      }
    }

    public systemSend_args deepCopy() {
      return new systemSend_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.itemView = null;
    }

    public long getUid() {
      return this.uid;
    }

    public systemSend_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public one.show.pay.thrift.view.ItemView getItemView() {
      return this.itemView;
    }

    public systemSend_args setItemView(one.show.pay.thrift.view.ItemView itemView) {
      this.itemView = itemView;
      return this;
    }

    public void unsetItemView() {
      this.itemView = null;
    }

    /** Returns true if field itemView is set (has been assigned a value) and false otherwise */
    public boolean isSetItemView() {
      return this.itemView != null;
    }

    public void setItemViewIsSet(boolean value) {
      if (!value) {
        this.itemView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM_VIEW:
        if (value == null) {
          unsetItemView();
        } else {
          setItemView((one.show.pay.thrift.view.ItemView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM_VIEW:
        return getItemView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM_VIEW:
        return isSetItemView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof systemSend_args)
        return this.equals((systemSend_args)that);
      return false;
    }

    public boolean equals(systemSend_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_itemView = true && this.isSetItemView();
      boolean that_present_itemView = true && that.isSetItemView();
      if (this_present_itemView || that_present_itemView) {
        if (!(this_present_itemView && that_present_itemView))
          return false;
        if (!this.itemView.equals(that.itemView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(systemSend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      systemSend_args typedOther = (systemSend_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemView()).compareTo(typedOther.isSetItemView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemView, typedOther.itemView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("systemSend_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemView:");
      if (this.itemView == null) {
        sb.append("null");
      } else {
        sb.append(this.itemView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (itemView != null) {
        itemView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class systemSend_argsStandardSchemeFactory implements SchemeFactory {
      public systemSend_argsStandardScheme getScheme() {
        return new systemSend_argsStandardScheme();
      }
    }

    private static class systemSend_argsStandardScheme extends StandardScheme<systemSend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, systemSend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemView = new one.show.pay.thrift.view.ItemView();
                struct.itemView.read(iprot);
                struct.setItemViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, systemSend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.itemView != null) {
          oprot.writeFieldBegin(ITEM_VIEW_FIELD_DESC);
          struct.itemView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class systemSend_argsTupleSchemeFactory implements SchemeFactory {
      public systemSend_argsTupleScheme getScheme() {
        return new systemSend_argsTupleScheme();
      }
    }

    private static class systemSend_argsTupleScheme extends TupleScheme<systemSend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, systemSend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItemView()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItemView()) {
          struct.itemView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, systemSend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemView = new one.show.pay.thrift.view.ItemView();
          struct.itemView.read(iprot);
          struct.setItemViewIsSet(true);
        }
      }
    }

  }

  public static class systemSend_result implements org.apache.thrift.TBase<systemSend_result, systemSend_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("systemSend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new systemSend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new systemSend_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(systemSend_result.class, metaDataMap);
    }

    public systemSend_result() {
    }

    public systemSend_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public systemSend_result(systemSend_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public systemSend_result deepCopy() {
      return new systemSend_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public systemSend_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof systemSend_result)
        return this.equals((systemSend_result)that);
      return false;
    }

    public boolean equals(systemSend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(systemSend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      systemSend_result typedOther = (systemSend_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("systemSend_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class systemSend_resultStandardSchemeFactory implements SchemeFactory {
      public systemSend_resultStandardScheme getScheme() {
        return new systemSend_resultStandardScheme();
      }
    }

    private static class systemSend_resultStandardScheme extends StandardScheme<systemSend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, systemSend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, systemSend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class systemSend_resultTupleSchemeFactory implements SchemeFactory {
      public systemSend_resultTupleScheme getScheme() {
        return new systemSend_resultTupleScheme();
      }
    }

    private static class systemSend_resultTupleScheme extends TupleScheme<systemSend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, systemSend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, systemSend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class send_args implements org.apache.thrift.TBase<send_args, send_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("itemView", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("liveId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_argsTupleSchemeFactory());
    }

    public long uid; // required
    public one.show.pay.thrift.view.ItemView itemView; // required
    public long liveId; // required
    public long tid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM_VIEW((short)2, "itemView"),
      LIVE_ID((short)3, "liveId"),
      TID((short)4, "tid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM_VIEW
            return ITEM_VIEW;
          case 3: // LIVE_ID
            return LIVE_ID;
          case 4: // TID
            return TID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __LIVEID_ISSET_ID = 1;
    private static final int __TID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_VIEW, new org.apache.thrift.meta_data.FieldMetaData("itemView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ItemView.class)));
      tmpMap.put(_Fields.LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("liveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_args.class, metaDataMap);
    }

    public send_args() {
    }

    public send_args(
      long uid,
      one.show.pay.thrift.view.ItemView itemView,
      long liveId,
      long tid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.itemView = itemView;
      this.liveId = liveId;
      setLiveIdIsSet(true);
      this.tid = tid;
      setTidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_args(send_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetItemView()) {
        this.itemView = new one.show.pay.thrift.view.ItemView(other.itemView);
      }
      this.liveId = other.liveId;
      this.tid = other.tid;
    }

    public send_args deepCopy() {
      return new send_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.itemView = null;
      setLiveIdIsSet(false);
      this.liveId = 0;
      setTidIsSet(false);
      this.tid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public send_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public one.show.pay.thrift.view.ItemView getItemView() {
      return this.itemView;
    }

    public send_args setItemView(one.show.pay.thrift.view.ItemView itemView) {
      this.itemView = itemView;
      return this;
    }

    public void unsetItemView() {
      this.itemView = null;
    }

    /** Returns true if field itemView is set (has been assigned a value) and false otherwise */
    public boolean isSetItemView() {
      return this.itemView != null;
    }

    public void setItemViewIsSet(boolean value) {
      if (!value) {
        this.itemView = null;
      }
    }

    public long getLiveId() {
      return this.liveId;
    }

    public send_args setLiveId(long liveId) {
      this.liveId = liveId;
      setLiveIdIsSet(true);
      return this;
    }

    public void unsetLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVEID_ISSET_ID);
    }

    /** Returns true if field liveId is set (has been assigned a value) and false otherwise */
    public boolean isSetLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __LIVEID_ISSET_ID);
    }

    public void setLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVEID_ISSET_ID, value);
    }

    public long getTid() {
      return this.tid;
    }

    public send_args setTid(long tid) {
      this.tid = tid;
      setTidIsSet(true);
      return this;
    }

    public void unsetTid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
    }

    /** Returns true if field tid is set (has been assigned a value) and false otherwise */
    public boolean isSetTid() {
      return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
    }

    public void setTidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM_VIEW:
        if (value == null) {
          unsetItemView();
        } else {
          setItemView((one.show.pay.thrift.view.ItemView)value);
        }
        break;

      case LIVE_ID:
        if (value == null) {
          unsetLiveId();
        } else {
          setLiveId((Long)value);
        }
        break;

      case TID:
        if (value == null) {
          unsetTid();
        } else {
          setTid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM_VIEW:
        return getItemView();

      case LIVE_ID:
        return Long.valueOf(getLiveId());

      case TID:
        return Long.valueOf(getTid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM_VIEW:
        return isSetItemView();
      case LIVE_ID:
        return isSetLiveId();
      case TID:
        return isSetTid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_args)
        return this.equals((send_args)that);
      return false;
    }

    public boolean equals(send_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_itemView = true && this.isSetItemView();
      boolean that_present_itemView = true && that.isSetItemView();
      if (this_present_itemView || that_present_itemView) {
        if (!(this_present_itemView && that_present_itemView))
          return false;
        if (!this.itemView.equals(that.itemView))
          return false;
      }

      boolean this_present_liveId = true;
      boolean that_present_liveId = true;
      if (this_present_liveId || that_present_liveId) {
        if (!(this_present_liveId && that_present_liveId))
          return false;
        if (this.liveId != that.liveId)
          return false;
      }

      boolean this_present_tid = true;
      boolean that_present_tid = true;
      if (this_present_tid || that_present_tid) {
        if (!(this_present_tid && that_present_tid))
          return false;
        if (this.tid != that.tid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(send_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      send_args typedOther = (send_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemView()).compareTo(typedOther.isSetItemView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemView, typedOther.itemView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLiveId()).compareTo(typedOther.isSetLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveId, typedOther.liveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemView:");
      if (this.itemView == null) {
        sb.append("null");
      } else {
        sb.append(this.itemView);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("liveId:");
      sb.append(this.liveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tid:");
      sb.append(this.tid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (itemView != null) {
        itemView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_argsStandardSchemeFactory implements SchemeFactory {
      public send_argsStandardScheme getScheme() {
        return new send_argsStandardScheme();
      }
    }

    private static class send_argsStandardScheme extends StandardScheme<send_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemView = new one.show.pay.thrift.view.ItemView();
                struct.itemView.read(iprot);
                struct.setItemViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.liveId = iprot.readI64();
                struct.setLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tid = iprot.readI64();
                struct.setTidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.itemView != null) {
          oprot.writeFieldBegin(ITEM_VIEW_FIELD_DESC);
          struct.itemView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.liveId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TID_FIELD_DESC);
        oprot.writeI64(struct.tid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_argsTupleSchemeFactory implements SchemeFactory {
      public send_argsTupleScheme getScheme() {
        return new send_argsTupleScheme();
      }
    }

    private static class send_argsTupleScheme extends TupleScheme<send_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItemView()) {
          optionals.set(1);
        }
        if (struct.isSetLiveId()) {
          optionals.set(2);
        }
        if (struct.isSetTid()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItemView()) {
          struct.itemView.write(oprot);
        }
        if (struct.isSetLiveId()) {
          oprot.writeI64(struct.liveId);
        }
        if (struct.isSetTid()) {
          oprot.writeI64(struct.tid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemView = new one.show.pay.thrift.view.ItemView();
          struct.itemView.read(iprot);
          struct.setItemViewIsSet(true);
        }
        if (incoming.get(2)) {
          struct.liveId = iprot.readI64();
          struct.setLiveIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tid = iprot.readI64();
          struct.setTidIsSet(true);
        }
      }
    }

  }

  public static class send_result implements org.apache.thrift.TBase<send_result, send_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_result.class, metaDataMap);
    }

    public send_result() {
    }

    public send_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_result(send_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public send_result deepCopy() {
      return new send_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public send_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_result)
        return this.equals((send_result)that);
      return false;
    }

    public boolean equals(send_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(send_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      send_result typedOther = (send_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_resultStandardSchemeFactory implements SchemeFactory {
      public send_resultStandardScheme getScheme() {
        return new send_resultStandardScheme();
      }
    }

    private static class send_resultStandardScheme extends StandardScheme<send_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_resultTupleSchemeFactory implements SchemeFactory {
      public send_resultTupleScheme getScheme() {
        return new send_resultTupleScheme();
      }
    }

    private static class send_resultTupleScheme extends TupleScheme<send_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consume_args implements org.apache.thrift.TBase<consume_args, consume_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consume_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("itemView", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consume_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consume_argsTupleSchemeFactory());
    }

    public long uid; // required
    public one.show.pay.thrift.view.ItemView itemView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM_VIEW((short)2, "itemView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM_VIEW
            return ITEM_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_VIEW, new org.apache.thrift.meta_data.FieldMetaData("itemView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ItemView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consume_args.class, metaDataMap);
    }

    public consume_args() {
    }

    public consume_args(
      long uid,
      one.show.pay.thrift.view.ItemView itemView)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.itemView = itemView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consume_args(consume_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetItemView()) {
        this.itemView = new one.show.pay.thrift.view.ItemView(other.itemView);
      }
    }

    public consume_args deepCopy() {
      return new consume_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.itemView = null;
    }

    public long getUid() {
      return this.uid;
    }

    public consume_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public one.show.pay.thrift.view.ItemView getItemView() {
      return this.itemView;
    }

    public consume_args setItemView(one.show.pay.thrift.view.ItemView itemView) {
      this.itemView = itemView;
      return this;
    }

    public void unsetItemView() {
      this.itemView = null;
    }

    /** Returns true if field itemView is set (has been assigned a value) and false otherwise */
    public boolean isSetItemView() {
      return this.itemView != null;
    }

    public void setItemViewIsSet(boolean value) {
      if (!value) {
        this.itemView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM_VIEW:
        if (value == null) {
          unsetItemView();
        } else {
          setItemView((one.show.pay.thrift.view.ItemView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM_VIEW:
        return getItemView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM_VIEW:
        return isSetItemView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consume_args)
        return this.equals((consume_args)that);
      return false;
    }

    public boolean equals(consume_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_itemView = true && this.isSetItemView();
      boolean that_present_itemView = true && that.isSetItemView();
      if (this_present_itemView || that_present_itemView) {
        if (!(this_present_itemView && that_present_itemView))
          return false;
        if (!this.itemView.equals(that.itemView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(consume_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      consume_args typedOther = (consume_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemView()).compareTo(typedOther.isSetItemView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemView, typedOther.itemView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consume_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemView:");
      if (this.itemView == null) {
        sb.append("null");
      } else {
        sb.append(this.itemView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (itemView != null) {
        itemView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consume_argsStandardSchemeFactory implements SchemeFactory {
      public consume_argsStandardScheme getScheme() {
        return new consume_argsStandardScheme();
      }
    }

    private static class consume_argsStandardScheme extends StandardScheme<consume_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consume_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemView = new one.show.pay.thrift.view.ItemView();
                struct.itemView.read(iprot);
                struct.setItemViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consume_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.itemView != null) {
          oprot.writeFieldBegin(ITEM_VIEW_FIELD_DESC);
          struct.itemView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consume_argsTupleSchemeFactory implements SchemeFactory {
      public consume_argsTupleScheme getScheme() {
        return new consume_argsTupleScheme();
      }
    }

    private static class consume_argsTupleScheme extends TupleScheme<consume_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItemView()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItemView()) {
          struct.itemView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemView = new one.show.pay.thrift.view.ItemView();
          struct.itemView.read(iprot);
          struct.setItemViewIsSet(true);
        }
      }
    }

  }

  public static class consume_result implements org.apache.thrift.TBase<consume_result, consume_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consume_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consume_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consume_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consume_result.class, metaDataMap);
    }

    public consume_result() {
    }

    public consume_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consume_result(consume_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public consume_result deepCopy() {
      return new consume_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public consume_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consume_result)
        return this.equals((consume_result)that);
      return false;
    }

    public boolean equals(consume_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(consume_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      consume_result typedOther = (consume_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consume_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consume_resultStandardSchemeFactory implements SchemeFactory {
      public consume_resultStandardScheme getScheme() {
        return new consume_resultStandardScheme();
      }
    }

    private static class consume_resultStandardScheme extends StandardScheme<consume_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consume_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consume_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consume_resultTupleSchemeFactory implements SchemeFactory {
      public consume_resultTupleScheme getScheme() {
        return new consume_resultTupleScheme();
      }
    }

    private static class consume_resultTupleScheme extends TupleScheme<consume_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consume_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consume_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class buy_args implements org.apache.thrift.TBase<buy_args, buy_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buy_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("itemView", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buy_argsTupleSchemeFactory());
    }

    public long uid; // required
    public one.show.pay.thrift.view.ItemView itemView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM_VIEW((short)2, "itemView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM_VIEW
            return ITEM_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_VIEW, new org.apache.thrift.meta_data.FieldMetaData("itemView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ItemView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buy_args.class, metaDataMap);
    }

    public buy_args() {
    }

    public buy_args(
      long uid,
      one.show.pay.thrift.view.ItemView itemView)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.itemView = itemView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buy_args(buy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetItemView()) {
        this.itemView = new one.show.pay.thrift.view.ItemView(other.itemView);
      }
    }

    public buy_args deepCopy() {
      return new buy_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.itemView = null;
    }

    public long getUid() {
      return this.uid;
    }

    public buy_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public one.show.pay.thrift.view.ItemView getItemView() {
      return this.itemView;
    }

    public buy_args setItemView(one.show.pay.thrift.view.ItemView itemView) {
      this.itemView = itemView;
      return this;
    }

    public void unsetItemView() {
      this.itemView = null;
    }

    /** Returns true if field itemView is set (has been assigned a value) and false otherwise */
    public boolean isSetItemView() {
      return this.itemView != null;
    }

    public void setItemViewIsSet(boolean value) {
      if (!value) {
        this.itemView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM_VIEW:
        if (value == null) {
          unsetItemView();
        } else {
          setItemView((one.show.pay.thrift.view.ItemView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM_VIEW:
        return getItemView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM_VIEW:
        return isSetItemView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buy_args)
        return this.equals((buy_args)that);
      return false;
    }

    public boolean equals(buy_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_itemView = true && this.isSetItemView();
      boolean that_present_itemView = true && that.isSetItemView();
      if (this_present_itemView || that_present_itemView) {
        if (!(this_present_itemView && that_present_itemView))
          return false;
        if (!this.itemView.equals(that.itemView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(buy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      buy_args typedOther = (buy_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemView()).compareTo(typedOther.isSetItemView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemView, typedOther.itemView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buy_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemView:");
      if (this.itemView == null) {
        sb.append("null");
      } else {
        sb.append(this.itemView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (itemView != null) {
        itemView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buy_argsStandardSchemeFactory implements SchemeFactory {
      public buy_argsStandardScheme getScheme() {
        return new buy_argsStandardScheme();
      }
    }

    private static class buy_argsStandardScheme extends StandardScheme<buy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemView = new one.show.pay.thrift.view.ItemView();
                struct.itemView.read(iprot);
                struct.setItemViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.itemView != null) {
          oprot.writeFieldBegin(ITEM_VIEW_FIELD_DESC);
          struct.itemView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buy_argsTupleSchemeFactory implements SchemeFactory {
      public buy_argsTupleScheme getScheme() {
        return new buy_argsTupleScheme();
      }
    }

    private static class buy_argsTupleScheme extends TupleScheme<buy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItemView()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItemView()) {
          struct.itemView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemView = new one.show.pay.thrift.view.ItemView();
          struct.itemView.read(iprot);
          struct.setItemViewIsSet(true);
        }
      }
    }

  }

  public static class buy_result implements org.apache.thrift.TBase<buy_result, buy_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buy_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buy_result.class, metaDataMap);
    }

    public buy_result() {
    }

    public buy_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buy_result(buy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public buy_result deepCopy() {
      return new buy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public buy_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buy_result)
        return this.equals((buy_result)that);
      return false;
    }

    public boolean equals(buy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(buy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      buy_result typedOther = (buy_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buy_resultStandardSchemeFactory implements SchemeFactory {
      public buy_resultStandardScheme getScheme() {
        return new buy_resultStandardScheme();
      }
    }

    private static class buy_resultStandardScheme extends StandardScheme<buy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buy_resultTupleSchemeFactory implements SchemeFactory {
      public buy_resultTupleScheme getScheme() {
        return new buy_resultTupleScheme();
      }
    }

    private static class buy_resultTupleScheme extends TupleScheme<buy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbViewById_args implements org.apache.thrift.TBase<getExtractRmbViewById_args, getExtractRmbViewById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbViewById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbViewById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbViewById_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbViewById_args.class, metaDataMap);
    }

    public getExtractRmbViewById_args() {
    }

    public getExtractRmbViewById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbViewById_args(getExtractRmbViewById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getExtractRmbViewById_args deepCopy() {
      return new getExtractRmbViewById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public getExtractRmbViewById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbViewById_args)
        return this.equals((getExtractRmbViewById_args)that);
      return false;
    }

    public boolean equals(getExtractRmbViewById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbViewById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbViewById_args typedOther = (getExtractRmbViewById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbViewById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbViewById_argsStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbViewById_argsStandardScheme getScheme() {
        return new getExtractRmbViewById_argsStandardScheme();
      }
    }

    private static class getExtractRmbViewById_argsStandardScheme extends StandardScheme<getExtractRmbViewById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbViewById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbViewById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbViewById_argsTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbViewById_argsTupleScheme getScheme() {
        return new getExtractRmbViewById_argsTupleScheme();
      }
    }

    private static class getExtractRmbViewById_argsTupleScheme extends TupleScheme<getExtractRmbViewById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbViewById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbViewById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbViewById_result implements org.apache.thrift.TBase<getExtractRmbViewById_result, getExtractRmbViewById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbViewById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbViewById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbViewById_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.ExtractRmbView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ExtractRmbView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbViewById_result.class, metaDataMap);
    }

    public getExtractRmbViewById_result() {
    }

    public getExtractRmbViewById_result(
      one.show.pay.thrift.view.ExtractRmbView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbViewById_result(getExtractRmbViewById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.ExtractRmbView(other.success);
      }
    }

    public getExtractRmbViewById_result deepCopy() {
      return new getExtractRmbViewById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.ExtractRmbView getSuccess() {
      return this.success;
    }

    public getExtractRmbViewById_result setSuccess(one.show.pay.thrift.view.ExtractRmbView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.ExtractRmbView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbViewById_result)
        return this.equals((getExtractRmbViewById_result)that);
      return false;
    }

    public boolean equals(getExtractRmbViewById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbViewById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbViewById_result typedOther = (getExtractRmbViewById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbViewById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbViewById_resultStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbViewById_resultStandardScheme getScheme() {
        return new getExtractRmbViewById_resultStandardScheme();
      }
    }

    private static class getExtractRmbViewById_resultStandardScheme extends StandardScheme<getExtractRmbViewById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbViewById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.ExtractRmbView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbViewById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbViewById_resultTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbViewById_resultTupleScheme getScheme() {
        return new getExtractRmbViewById_resultTupleScheme();
      }
    }

    private static class getExtractRmbViewById_resultTupleScheme extends TupleScheme<getExtractRmbViewById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbViewById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbViewById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.ExtractRmbView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbListByBatchNo_args implements org.apache.thrift.TBase<getExtractRmbListByBatchNo_args, getExtractRmbListByBatchNo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbListByBatchNo_args");

    private static final org.apache.thrift.protocol.TField BATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("batchNo", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbListByBatchNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbListByBatchNo_argsTupleSchemeFactory());
    }

    public long batchNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_NO((short)1, "batchNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BATCH_NO
            return BATCH_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BATCHNO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("batchNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbListByBatchNo_args.class, metaDataMap);
    }

    public getExtractRmbListByBatchNo_args() {
    }

    public getExtractRmbListByBatchNo_args(
      long batchNo)
    {
      this();
      this.batchNo = batchNo;
      setBatchNoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbListByBatchNo_args(getExtractRmbListByBatchNo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.batchNo = other.batchNo;
    }

    public getExtractRmbListByBatchNo_args deepCopy() {
      return new getExtractRmbListByBatchNo_args(this);
    }

    @Override
    public void clear() {
      setBatchNoIsSet(false);
      this.batchNo = 0;
    }

    public long getBatchNo() {
      return this.batchNo;
    }

    public getExtractRmbListByBatchNo_args setBatchNo(long batchNo) {
      this.batchNo = batchNo;
      setBatchNoIsSet(true);
      return this;
    }

    public void unsetBatchNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHNO_ISSET_ID);
    }

    /** Returns true if field batchNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchNo() {
      return EncodingUtils.testBit(__isset_bitfield, __BATCHNO_ISSET_ID);
    }

    public void setBatchNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHNO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_NO:
        if (value == null) {
          unsetBatchNo();
        } else {
          setBatchNo((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_NO:
        return Long.valueOf(getBatchNo());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_NO:
        return isSetBatchNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbListByBatchNo_args)
        return this.equals((getExtractRmbListByBatchNo_args)that);
      return false;
    }

    public boolean equals(getExtractRmbListByBatchNo_args that) {
      if (that == null)
        return false;

      boolean this_present_batchNo = true;
      boolean that_present_batchNo = true;
      if (this_present_batchNo || that_present_batchNo) {
        if (!(this_present_batchNo && that_present_batchNo))
          return false;
        if (this.batchNo != that.batchNo)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbListByBatchNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbListByBatchNo_args typedOther = (getExtractRmbListByBatchNo_args)other;

      lastComparison = Boolean.valueOf(isSetBatchNo()).compareTo(typedOther.isSetBatchNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchNo, typedOther.batchNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbListByBatchNo_args(");
      boolean first = true;

      sb.append("batchNo:");
      sb.append(this.batchNo);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbListByBatchNo_argsStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbListByBatchNo_argsStandardScheme getScheme() {
        return new getExtractRmbListByBatchNo_argsStandardScheme();
      }
    }

    private static class getExtractRmbListByBatchNo_argsStandardScheme extends StandardScheme<getExtractRmbListByBatchNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbListByBatchNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BATCH_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.batchNo = iprot.readI64();
                struct.setBatchNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbListByBatchNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BATCH_NO_FIELD_DESC);
        oprot.writeI64(struct.batchNo);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbListByBatchNo_argsTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbListByBatchNo_argsTupleScheme getScheme() {
        return new getExtractRmbListByBatchNo_argsTupleScheme();
      }
    }

    private static class getExtractRmbListByBatchNo_argsTupleScheme extends TupleScheme<getExtractRmbListByBatchNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByBatchNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBatchNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBatchNo()) {
          oprot.writeI64(struct.batchNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByBatchNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.batchNo = iprot.readI64();
          struct.setBatchNoIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbListByBatchNo_result implements org.apache.thrift.TBase<getExtractRmbListByBatchNo_result, getExtractRmbListByBatchNo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbListByBatchNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbListByBatchNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbListByBatchNo_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.ExtractRmbView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ExtractRmbView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbListByBatchNo_result.class, metaDataMap);
    }

    public getExtractRmbListByBatchNo_result() {
    }

    public getExtractRmbListByBatchNo_result(
      List<one.show.pay.thrift.view.ExtractRmbView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbListByBatchNo_result(getExtractRmbListByBatchNo_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.ExtractRmbView> __this__success = new ArrayList<one.show.pay.thrift.view.ExtractRmbView>();
        for (one.show.pay.thrift.view.ExtractRmbView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.ExtractRmbView(other_element));
        }
        this.success = __this__success;
      }
    }

    public getExtractRmbListByBatchNo_result deepCopy() {
      return new getExtractRmbListByBatchNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.ExtractRmbView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.ExtractRmbView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.ExtractRmbView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.ExtractRmbView> getSuccess() {
      return this.success;
    }

    public getExtractRmbListByBatchNo_result setSuccess(List<one.show.pay.thrift.view.ExtractRmbView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.ExtractRmbView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbListByBatchNo_result)
        return this.equals((getExtractRmbListByBatchNo_result)that);
      return false;
    }

    public boolean equals(getExtractRmbListByBatchNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbListByBatchNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbListByBatchNo_result typedOther = (getExtractRmbListByBatchNo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbListByBatchNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbListByBatchNo_resultStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbListByBatchNo_resultStandardScheme getScheme() {
        return new getExtractRmbListByBatchNo_resultStandardScheme();
      }
    }

    private static class getExtractRmbListByBatchNo_resultStandardScheme extends StandardScheme<getExtractRmbListByBatchNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbListByBatchNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.ExtractRmbView>(_list162.size);
                  for (int _i163 = 0; _i163 < _list162.size; ++_i163)
                  {
                    one.show.pay.thrift.view.ExtractRmbView _elem164; // required
                    _elem164 = new one.show.pay.thrift.view.ExtractRmbView();
                    _elem164.read(iprot);
                    struct.success.add(_elem164);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbListByBatchNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.ExtractRmbView _iter165 : struct.success)
            {
              _iter165.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbListByBatchNo_resultTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbListByBatchNo_resultTupleScheme getScheme() {
        return new getExtractRmbListByBatchNo_resultTupleScheme();
      }
    }

    private static class getExtractRmbListByBatchNo_resultTupleScheme extends TupleScheme<getExtractRmbListByBatchNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByBatchNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.ExtractRmbView _iter166 : struct.success)
            {
              _iter166.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByBatchNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.ExtractRmbView>(_list167.size);
            for (int _i168 = 0; _i168 < _list167.size; ++_i168)
            {
              one.show.pay.thrift.view.ExtractRmbView _elem169; // required
              _elem169 = new one.show.pay.thrift.view.ExtractRmbView();
              _elem169.read(iprot);
              struct.success.add(_elem169);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbListByStatus_args implements org.apache.thrift.TBase<getExtractRmbListByStatus_args, getExtractRmbListByStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbListByStatus_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbListByStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbListByStatus_argsTupleSchemeFactory());
    }

    public int status; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status"),
      COUNT((short)2, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          case 2: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbListByStatus_args.class, metaDataMap);
    }

    public getExtractRmbListByStatus_args() {
    }

    public getExtractRmbListByStatus_args(
      int status,
      int count)
    {
      this();
      this.status = status;
      setStatusIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbListByStatus_args(getExtractRmbListByStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.status = other.status;
      this.count = other.count;
    }

    public getExtractRmbListByStatus_args deepCopy() {
      return new getExtractRmbListByStatus_args(this);
    }

    @Override
    public void clear() {
      setStatusIsSet(false);
      this.status = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getStatus() {
      return this.status;
    }

    public getExtractRmbListByStatus_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getExtractRmbListByStatus_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return Integer.valueOf(getStatus());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbListByStatus_args)
        return this.equals((getExtractRmbListByStatus_args)that);
      return false;
    }

    public boolean equals(getExtractRmbListByStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbListByStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbListByStatus_args typedOther = (getExtractRmbListByStatus_args)other;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbListByStatus_args(");
      boolean first = true;

      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbListByStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbListByStatus_argsStandardScheme getScheme() {
        return new getExtractRmbListByStatus_argsStandardScheme();
      }
    }

    private static class getExtractRmbListByStatus_argsStandardScheme extends StandardScheme<getExtractRmbListByStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbListByStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbListByStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbListByStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbListByStatus_argsTupleScheme getScheme() {
        return new getExtractRmbListByStatus_argsTupleScheme();
      }
    }

    private static class getExtractRmbListByStatus_argsTupleScheme extends TupleScheme<getExtractRmbListByStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbListByStatus_result implements org.apache.thrift.TBase<getExtractRmbListByStatus_result, getExtractRmbListByStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbListByStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbListByStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbListByStatus_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.ExtractRmbView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ExtractRmbView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbListByStatus_result.class, metaDataMap);
    }

    public getExtractRmbListByStatus_result() {
    }

    public getExtractRmbListByStatus_result(
      List<one.show.pay.thrift.view.ExtractRmbView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbListByStatus_result(getExtractRmbListByStatus_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.ExtractRmbView> __this__success = new ArrayList<one.show.pay.thrift.view.ExtractRmbView>();
        for (one.show.pay.thrift.view.ExtractRmbView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.ExtractRmbView(other_element));
        }
        this.success = __this__success;
      }
    }

    public getExtractRmbListByStatus_result deepCopy() {
      return new getExtractRmbListByStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.ExtractRmbView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.ExtractRmbView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.ExtractRmbView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.ExtractRmbView> getSuccess() {
      return this.success;
    }

    public getExtractRmbListByStatus_result setSuccess(List<one.show.pay.thrift.view.ExtractRmbView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.ExtractRmbView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbListByStatus_result)
        return this.equals((getExtractRmbListByStatus_result)that);
      return false;
    }

    public boolean equals(getExtractRmbListByStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbListByStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbListByStatus_result typedOther = (getExtractRmbListByStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbListByStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbListByStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbListByStatus_resultStandardScheme getScheme() {
        return new getExtractRmbListByStatus_resultStandardScheme();
      }
    }

    private static class getExtractRmbListByStatus_resultStandardScheme extends StandardScheme<getExtractRmbListByStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbListByStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list170 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.ExtractRmbView>(_list170.size);
                  for (int _i171 = 0; _i171 < _list170.size; ++_i171)
                  {
                    one.show.pay.thrift.view.ExtractRmbView _elem172; // required
                    _elem172 = new one.show.pay.thrift.view.ExtractRmbView();
                    _elem172.read(iprot);
                    struct.success.add(_elem172);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbListByStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.ExtractRmbView _iter173 : struct.success)
            {
              _iter173.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbListByStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbListByStatus_resultTupleScheme getScheme() {
        return new getExtractRmbListByStatus_resultTupleScheme();
      }
    }

    private static class getExtractRmbListByStatus_resultTupleScheme extends TupleScheme<getExtractRmbListByStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.ExtractRmbView _iter174 : struct.success)
            {
              _iter174.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.ExtractRmbView>(_list175.size);
            for (int _i176 = 0; _i176 < _list175.size; ++_i176)
            {
              one.show.pay.thrift.view.ExtractRmbView _elem177; // required
              _elem177 = new one.show.pay.thrift.view.ExtractRmbView();
              _elem177.read(iprot);
              struct.success.add(_elem177);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbListByUid_args implements org.apache.thrift.TBase<getExtractRmbListByUid_args, getExtractRmbListByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbListByUid_args");

    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbListByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbListByUid_argsTupleSchemeFactory());
    }

    public Map<String,String> paramMap; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_MAP((short)1, "paramMap"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_MAP
            return PARAM_MAP;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbListByUid_args.class, metaDataMap);
    }

    public getExtractRmbListByUid_args() {
    }

    public getExtractRmbListByUid_args(
      Map<String,String> paramMap,
      int start,
      int count)
    {
      this();
      this.paramMap = paramMap;
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbListByUid_args(getExtractRmbListByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
      this.start = other.start;
      this.count = other.count;
    }

    public getExtractRmbListByUid_args deepCopy() {
      return new getExtractRmbListByUid_args(this);
    }

    @Override
    public void clear() {
      this.paramMap = null;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getExtractRmbListByUid_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public getExtractRmbListByUid_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getExtractRmbListByUid_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_MAP:
        return getParamMap();

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM_MAP:
        return isSetParamMap();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbListByUid_args)
        return this.equals((getExtractRmbListByUid_args)that);
      return false;
    }

    public boolean equals(getExtractRmbListByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbListByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbListByUid_args typedOther = (getExtractRmbListByUid_args)other;

      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbListByUid_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbListByUid_argsStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbListByUid_argsStandardScheme getScheme() {
        return new getExtractRmbListByUid_argsStandardScheme();
      }
    }

    private static class getExtractRmbListByUid_argsStandardScheme extends StandardScheme<getExtractRmbListByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbListByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map178 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map178.size);
                  for (int _i179 = 0; _i179 < _map178.size; ++_i179)
                  {
                    String _key180; // required
                    String _val181; // required
                    _key180 = iprot.readString();
                    _val181 = iprot.readString();
                    struct.paramMap.put(_key180, _val181);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbListByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter182 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter182.getKey());
              oprot.writeString(_iter182.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbListByUid_argsTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbListByUid_argsTupleScheme getScheme() {
        return new getExtractRmbListByUid_argsTupleScheme();
      }
    }

    private static class getExtractRmbListByUid_argsTupleScheme extends TupleScheme<getExtractRmbListByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParamMap()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter183 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter183.getKey());
              oprot.writeString(_iter183.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map184 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map184.size);
            for (int _i185 = 0; _i185 < _map184.size; ++_i185)
            {
              String _key186; // required
              String _val187; // required
              _key186 = iprot.readString();
              _val187 = iprot.readString();
              struct.paramMap.put(_key186, _val187);
            }
          }
          struct.setParamMapIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbListByUid_result implements org.apache.thrift.TBase<getExtractRmbListByUid_result, getExtractRmbListByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbListByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbListByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbListByUid_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.ExtractRmbListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ExtractRmbListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbListByUid_result.class, metaDataMap);
    }

    public getExtractRmbListByUid_result() {
    }

    public getExtractRmbListByUid_result(
      one.show.pay.thrift.view.ExtractRmbListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbListByUid_result(getExtractRmbListByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.ExtractRmbListView(other.success);
      }
    }

    public getExtractRmbListByUid_result deepCopy() {
      return new getExtractRmbListByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.ExtractRmbListView getSuccess() {
      return this.success;
    }

    public getExtractRmbListByUid_result setSuccess(one.show.pay.thrift.view.ExtractRmbListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.ExtractRmbListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbListByUid_result)
        return this.equals((getExtractRmbListByUid_result)that);
      return false;
    }

    public boolean equals(getExtractRmbListByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbListByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbListByUid_result typedOther = (getExtractRmbListByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbListByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbListByUid_resultStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbListByUid_resultStandardScheme getScheme() {
        return new getExtractRmbListByUid_resultStandardScheme();
      }
    }

    private static class getExtractRmbListByUid_resultStandardScheme extends StandardScheme<getExtractRmbListByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbListByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.ExtractRmbListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbListByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbListByUid_resultTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbListByUid_resultTupleScheme getScheme() {
        return new getExtractRmbListByUid_resultTupleScheme();
      }
    }

    private static class getExtractRmbListByUid_resultTupleScheme extends TupleScheme<getExtractRmbListByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbListByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.ExtractRmbListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbTotalByUid_args implements org.apache.thrift.TBase<getExtractRmbTotalByUid_args, getExtractRmbTotalByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbTotalByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbTotalByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbTotalByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public String key; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      KEY((short)2, "key"),
      PARAM_MAP((short)3, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // KEY
            return KEY;
          case 3: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbTotalByUid_args.class, metaDataMap);
    }

    public getExtractRmbTotalByUid_args() {
    }

    public getExtractRmbTotalByUid_args(
      long uid,
      String key,
      Map<String,String> paramMap)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.key = key;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbTotalByUid_args(getExtractRmbTotalByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public getExtractRmbTotalByUid_args deepCopy() {
      return new getExtractRmbTotalByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.key = null;
      this.paramMap = null;
    }

    public long getUid() {
      return this.uid;
    }

    public getExtractRmbTotalByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public String getKey() {
      return this.key;
    }

    public getExtractRmbTotalByUid_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public getExtractRmbTotalByUid_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case KEY:
        return getKey();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case KEY:
        return isSetKey();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbTotalByUid_args)
        return this.equals((getExtractRmbTotalByUid_args)that);
      return false;
    }

    public boolean equals(getExtractRmbTotalByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbTotalByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbTotalByUid_args typedOther = (getExtractRmbTotalByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbTotalByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbTotalByUid_argsStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbTotalByUid_argsStandardScheme getScheme() {
        return new getExtractRmbTotalByUid_argsStandardScheme();
      }
    }

    private static class getExtractRmbTotalByUid_argsStandardScheme extends StandardScheme<getExtractRmbTotalByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbTotalByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map188 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map188.size);
                  for (int _i189 = 0; _i189 < _map188.size; ++_i189)
                  {
                    String _key190; // required
                    String _val191; // required
                    _key190 = iprot.readString();
                    _val191 = iprot.readString();
                    struct.paramMap.put(_key190, _val191);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbTotalByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter192 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter192.getKey());
              oprot.writeString(_iter192.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbTotalByUid_argsTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbTotalByUid_argsTupleScheme getScheme() {
        return new getExtractRmbTotalByUid_argsTupleScheme();
      }
    }

    private static class getExtractRmbTotalByUid_argsTupleScheme extends TupleScheme<getExtractRmbTotalByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbTotalByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetParamMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter193 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter193.getKey());
              oprot.writeString(_iter193.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbTotalByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map194 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map194.size);
            for (int _i195 = 0; _i195 < _map194.size; ++_i195)
            {
              String _key196; // required
              String _val197; // required
              _key196 = iprot.readString();
              _val197 = iprot.readString();
              struct.paramMap.put(_key196, _val197);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class getExtractRmbTotalByUid_result implements org.apache.thrift.TBase<getExtractRmbTotalByUid_result, getExtractRmbTotalByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbTotalByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbTotalByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbTotalByUid_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbTotalByUid_result.class, metaDataMap);
    }

    public getExtractRmbTotalByUid_result() {
    }

    public getExtractRmbTotalByUid_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbTotalByUid_result(getExtractRmbTotalByUid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getExtractRmbTotalByUid_result deepCopy() {
      return new getExtractRmbTotalByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getExtractRmbTotalByUid_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbTotalByUid_result)
        return this.equals((getExtractRmbTotalByUid_result)that);
      return false;
    }

    public boolean equals(getExtractRmbTotalByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbTotalByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbTotalByUid_result typedOther = (getExtractRmbTotalByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbTotalByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbTotalByUid_resultStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbTotalByUid_resultStandardScheme getScheme() {
        return new getExtractRmbTotalByUid_resultStandardScheme();
      }
    }

    private static class getExtractRmbTotalByUid_resultStandardScheme extends StandardScheme<getExtractRmbTotalByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbTotalByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbTotalByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbTotalByUid_resultTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbTotalByUid_resultTupleScheme getScheme() {
        return new getExtractRmbTotalByUid_resultTupleScheme();
      }
    }

    private static class getExtractRmbTotalByUid_resultTupleScheme extends TupleScheme<getExtractRmbTotalByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbTotalByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbTotalByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateExtractRmbById_args implements org.apache.thrift.TBase<updateExtractRmbById_args, updateExtractRmbById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExtractRmbById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExtractRmbById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExtractRmbById_argsTupleSchemeFactory());
    }

    public long id; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PARAM_MAP((short)2, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExtractRmbById_args.class, metaDataMap);
    }

    public updateExtractRmbById_args() {
    }

    public updateExtractRmbById_args(
      long id,
      Map<String,String> paramMap)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExtractRmbById_args(updateExtractRmbById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paramMap.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateExtractRmbById_args deepCopy() {
      return new updateExtractRmbById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.paramMap = null;
    }

    public long getId() {
      return this.id;
    }

    public updateExtractRmbById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public updateExtractRmbById_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExtractRmbById_args)
        return this.equals((updateExtractRmbById_args)that);
      return false;
    }

    public boolean equals(updateExtractRmbById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateExtractRmbById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateExtractRmbById_args typedOther = (updateExtractRmbById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(typedOther.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, typedOther.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExtractRmbById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExtractRmbById_argsStandardSchemeFactory implements SchemeFactory {
      public updateExtractRmbById_argsStandardScheme getScheme() {
        return new updateExtractRmbById_argsStandardScheme();
      }
    }

    private static class updateExtractRmbById_argsStandardScheme extends StandardScheme<updateExtractRmbById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExtractRmbById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map198 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map198.size);
                  for (int _i199 = 0; _i199 < _map198.size; ++_i199)
                  {
                    String _key200; // required
                    String _val201; // required
                    _key200 = iprot.readString();
                    _val201 = iprot.readString();
                    struct.paramMap.put(_key200, _val201);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExtractRmbById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter202 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter202.getKey());
              oprot.writeString(_iter202.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExtractRmbById_argsTupleSchemeFactory implements SchemeFactory {
      public updateExtractRmbById_argsTupleScheme getScheme() {
        return new updateExtractRmbById_argsTupleScheme();
      }
    }

    private static class updateExtractRmbById_argsTupleScheme extends TupleScheme<updateExtractRmbById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExtractRmbById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetParamMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter203 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter203.getKey());
              oprot.writeString(_iter203.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExtractRmbById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map204 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map204.size);
            for (int _i205 = 0; _i205 < _map204.size; ++_i205)
            {
              String _key206; // required
              String _val207; // required
              _key206 = iprot.readString();
              _val207 = iprot.readString();
              struct.paramMap.put(_key206, _val207);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class updateExtractRmbById_result implements org.apache.thrift.TBase<updateExtractRmbById_result, updateExtractRmbById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExtractRmbById_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExtractRmbById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExtractRmbById_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExtractRmbById_result.class, metaDataMap);
    }

    public updateExtractRmbById_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExtractRmbById_result(updateExtractRmbById_result other) {
    }

    public updateExtractRmbById_result deepCopy() {
      return new updateExtractRmbById_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExtractRmbById_result)
        return this.equals((updateExtractRmbById_result)that);
      return false;
    }

    public boolean equals(updateExtractRmbById_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateExtractRmbById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateExtractRmbById_result typedOther = (updateExtractRmbById_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExtractRmbById_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExtractRmbById_resultStandardSchemeFactory implements SchemeFactory {
      public updateExtractRmbById_resultStandardScheme getScheme() {
        return new updateExtractRmbById_resultStandardScheme();
      }
    }

    private static class updateExtractRmbById_resultStandardScheme extends StandardScheme<updateExtractRmbById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExtractRmbById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExtractRmbById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExtractRmbById_resultTupleSchemeFactory implements SchemeFactory {
      public updateExtractRmbById_resultTupleScheme getScheme() {
        return new updateExtractRmbById_resultTupleScheme();
      }
    }

    private static class updateExtractRmbById_resultTupleScheme extends TupleScheme<updateExtractRmbById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExtractRmbById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExtractRmbById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveExtractRmb_args implements org.apache.thrift.TBase<saveExtractRmb_args, saveExtractRmb_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveExtractRmb_args");

    private static final org.apache.thrift.protocol.TField EXTRACT_RMB_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("extractRmbView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveExtractRmb_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveExtractRmb_argsTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.ExtractRmbView extractRmbView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXTRACT_RMB_VIEW((short)1, "extractRmbView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXTRACT_RMB_VIEW
            return EXTRACT_RMB_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXTRACT_RMB_VIEW, new org.apache.thrift.meta_data.FieldMetaData("extractRmbView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ExtractRmbView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveExtractRmb_args.class, metaDataMap);
    }

    public saveExtractRmb_args() {
    }

    public saveExtractRmb_args(
      one.show.pay.thrift.view.ExtractRmbView extractRmbView)
    {
      this();
      this.extractRmbView = extractRmbView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveExtractRmb_args(saveExtractRmb_args other) {
      if (other.isSetExtractRmbView()) {
        this.extractRmbView = new one.show.pay.thrift.view.ExtractRmbView(other.extractRmbView);
      }
    }

    public saveExtractRmb_args deepCopy() {
      return new saveExtractRmb_args(this);
    }

    @Override
    public void clear() {
      this.extractRmbView = null;
    }

    public one.show.pay.thrift.view.ExtractRmbView getExtractRmbView() {
      return this.extractRmbView;
    }

    public saveExtractRmb_args setExtractRmbView(one.show.pay.thrift.view.ExtractRmbView extractRmbView) {
      this.extractRmbView = extractRmbView;
      return this;
    }

    public void unsetExtractRmbView() {
      this.extractRmbView = null;
    }

    /** Returns true if field extractRmbView is set (has been assigned a value) and false otherwise */
    public boolean isSetExtractRmbView() {
      return this.extractRmbView != null;
    }

    public void setExtractRmbViewIsSet(boolean value) {
      if (!value) {
        this.extractRmbView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXTRACT_RMB_VIEW:
        if (value == null) {
          unsetExtractRmbView();
        } else {
          setExtractRmbView((one.show.pay.thrift.view.ExtractRmbView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXTRACT_RMB_VIEW:
        return getExtractRmbView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXTRACT_RMB_VIEW:
        return isSetExtractRmbView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveExtractRmb_args)
        return this.equals((saveExtractRmb_args)that);
      return false;
    }

    public boolean equals(saveExtractRmb_args that) {
      if (that == null)
        return false;

      boolean this_present_extractRmbView = true && this.isSetExtractRmbView();
      boolean that_present_extractRmbView = true && that.isSetExtractRmbView();
      if (this_present_extractRmbView || that_present_extractRmbView) {
        if (!(this_present_extractRmbView && that_present_extractRmbView))
          return false;
        if (!this.extractRmbView.equals(that.extractRmbView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveExtractRmb_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveExtractRmb_args typedOther = (saveExtractRmb_args)other;

      lastComparison = Boolean.valueOf(isSetExtractRmbView()).compareTo(typedOther.isSetExtractRmbView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtractRmbView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extractRmbView, typedOther.extractRmbView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveExtractRmb_args(");
      boolean first = true;

      sb.append("extractRmbView:");
      if (this.extractRmbView == null) {
        sb.append("null");
      } else {
        sb.append(this.extractRmbView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (extractRmbView != null) {
        extractRmbView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveExtractRmb_argsStandardSchemeFactory implements SchemeFactory {
      public saveExtractRmb_argsStandardScheme getScheme() {
        return new saveExtractRmb_argsStandardScheme();
      }
    }

    private static class saveExtractRmb_argsStandardScheme extends StandardScheme<saveExtractRmb_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveExtractRmb_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXTRACT_RMB_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.extractRmbView = new one.show.pay.thrift.view.ExtractRmbView();
                struct.extractRmbView.read(iprot);
                struct.setExtractRmbViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveExtractRmb_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.extractRmbView != null) {
          oprot.writeFieldBegin(EXTRACT_RMB_VIEW_FIELD_DESC);
          struct.extractRmbView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveExtractRmb_argsTupleSchemeFactory implements SchemeFactory {
      public saveExtractRmb_argsTupleScheme getScheme() {
        return new saveExtractRmb_argsTupleScheme();
      }
    }

    private static class saveExtractRmb_argsTupleScheme extends TupleScheme<saveExtractRmb_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveExtractRmb_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExtractRmbView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExtractRmbView()) {
          struct.extractRmbView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveExtractRmb_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.extractRmbView = new one.show.pay.thrift.view.ExtractRmbView();
          struct.extractRmbView.read(iprot);
          struct.setExtractRmbViewIsSet(true);
        }
      }
    }

  }

  public static class saveExtractRmb_result implements org.apache.thrift.TBase<saveExtractRmb_result, saveExtractRmb_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveExtractRmb_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveExtractRmb_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveExtractRmb_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveExtractRmb_result.class, metaDataMap);
    }

    public saveExtractRmb_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveExtractRmb_result(saveExtractRmb_result other) {
    }

    public saveExtractRmb_result deepCopy() {
      return new saveExtractRmb_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveExtractRmb_result)
        return this.equals((saveExtractRmb_result)that);
      return false;
    }

    public boolean equals(saveExtractRmb_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveExtractRmb_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveExtractRmb_result typedOther = (saveExtractRmb_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveExtractRmb_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveExtractRmb_resultStandardSchemeFactory implements SchemeFactory {
      public saveExtractRmb_resultStandardScheme getScheme() {
        return new saveExtractRmb_resultStandardScheme();
      }
    }

    private static class saveExtractRmb_resultStandardScheme extends StandardScheme<saveExtractRmb_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveExtractRmb_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveExtractRmb_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveExtractRmb_resultTupleSchemeFactory implements SchemeFactory {
      public saveExtractRmb_resultTupleScheme getScheme() {
        return new saveExtractRmb_resultTupleScheme();
      }
    }

    private static class saveExtractRmb_resultTupleScheme extends TupleScheme<saveExtractRmb_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveExtractRmb_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveExtractRmb_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class redeemRmb_args implements org.apache.thrift.TBase<redeemRmb_args, redeemRmb_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("redeemRmb_args");

    private static final org.apache.thrift.protocol.TField EXTRACT_RMB_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("extractRmbView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new redeemRmb_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new redeemRmb_argsTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.ExtractRmbView extractRmbView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXTRACT_RMB_VIEW((short)1, "extractRmbView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXTRACT_RMB_VIEW
            return EXTRACT_RMB_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXTRACT_RMB_VIEW, new org.apache.thrift.meta_data.FieldMetaData("extractRmbView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ExtractRmbView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(redeemRmb_args.class, metaDataMap);
    }

    public redeemRmb_args() {
    }

    public redeemRmb_args(
      one.show.pay.thrift.view.ExtractRmbView extractRmbView)
    {
      this();
      this.extractRmbView = extractRmbView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public redeemRmb_args(redeemRmb_args other) {
      if (other.isSetExtractRmbView()) {
        this.extractRmbView = new one.show.pay.thrift.view.ExtractRmbView(other.extractRmbView);
      }
    }

    public redeemRmb_args deepCopy() {
      return new redeemRmb_args(this);
    }

    @Override
    public void clear() {
      this.extractRmbView = null;
    }

    public one.show.pay.thrift.view.ExtractRmbView getExtractRmbView() {
      return this.extractRmbView;
    }

    public redeemRmb_args setExtractRmbView(one.show.pay.thrift.view.ExtractRmbView extractRmbView) {
      this.extractRmbView = extractRmbView;
      return this;
    }

    public void unsetExtractRmbView() {
      this.extractRmbView = null;
    }

    /** Returns true if field extractRmbView is set (has been assigned a value) and false otherwise */
    public boolean isSetExtractRmbView() {
      return this.extractRmbView != null;
    }

    public void setExtractRmbViewIsSet(boolean value) {
      if (!value) {
        this.extractRmbView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXTRACT_RMB_VIEW:
        if (value == null) {
          unsetExtractRmbView();
        } else {
          setExtractRmbView((one.show.pay.thrift.view.ExtractRmbView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXTRACT_RMB_VIEW:
        return getExtractRmbView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXTRACT_RMB_VIEW:
        return isSetExtractRmbView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof redeemRmb_args)
        return this.equals((redeemRmb_args)that);
      return false;
    }

    public boolean equals(redeemRmb_args that) {
      if (that == null)
        return false;

      boolean this_present_extractRmbView = true && this.isSetExtractRmbView();
      boolean that_present_extractRmbView = true && that.isSetExtractRmbView();
      if (this_present_extractRmbView || that_present_extractRmbView) {
        if (!(this_present_extractRmbView && that_present_extractRmbView))
          return false;
        if (!this.extractRmbView.equals(that.extractRmbView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(redeemRmb_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      redeemRmb_args typedOther = (redeemRmb_args)other;

      lastComparison = Boolean.valueOf(isSetExtractRmbView()).compareTo(typedOther.isSetExtractRmbView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtractRmbView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extractRmbView, typedOther.extractRmbView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("redeemRmb_args(");
      boolean first = true;

      sb.append("extractRmbView:");
      if (this.extractRmbView == null) {
        sb.append("null");
      } else {
        sb.append(this.extractRmbView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (extractRmbView != null) {
        extractRmbView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class redeemRmb_argsStandardSchemeFactory implements SchemeFactory {
      public redeemRmb_argsStandardScheme getScheme() {
        return new redeemRmb_argsStandardScheme();
      }
    }

    private static class redeemRmb_argsStandardScheme extends StandardScheme<redeemRmb_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, redeemRmb_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXTRACT_RMB_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.extractRmbView = new one.show.pay.thrift.view.ExtractRmbView();
                struct.extractRmbView.read(iprot);
                struct.setExtractRmbViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, redeemRmb_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.extractRmbView != null) {
          oprot.writeFieldBegin(EXTRACT_RMB_VIEW_FIELD_DESC);
          struct.extractRmbView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class redeemRmb_argsTupleSchemeFactory implements SchemeFactory {
      public redeemRmb_argsTupleScheme getScheme() {
        return new redeemRmb_argsTupleScheme();
      }
    }

    private static class redeemRmb_argsTupleScheme extends TupleScheme<redeemRmb_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, redeemRmb_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExtractRmbView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExtractRmbView()) {
          struct.extractRmbView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, redeemRmb_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.extractRmbView = new one.show.pay.thrift.view.ExtractRmbView();
          struct.extractRmbView.read(iprot);
          struct.setExtractRmbViewIsSet(true);
        }
      }
    }

  }

  public static class redeemRmb_result implements org.apache.thrift.TBase<redeemRmb_result, redeemRmb_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("redeemRmb_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new redeemRmb_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new redeemRmb_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(redeemRmb_result.class, metaDataMap);
    }

    public redeemRmb_result() {
    }

    public redeemRmb_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public redeemRmb_result(redeemRmb_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public redeemRmb_result deepCopy() {
      return new redeemRmb_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public redeemRmb_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof redeemRmb_result)
        return this.equals((redeemRmb_result)that);
      return false;
    }

    public boolean equals(redeemRmb_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(redeemRmb_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      redeemRmb_result typedOther = (redeemRmb_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("redeemRmb_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class redeemRmb_resultStandardSchemeFactory implements SchemeFactory {
      public redeemRmb_resultStandardScheme getScheme() {
        return new redeemRmb_resultStandardScheme();
      }
    }

    private static class redeemRmb_resultStandardScheme extends StandardScheme<redeemRmb_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, redeemRmb_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, redeemRmb_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class redeemRmb_resultTupleSchemeFactory implements SchemeFactory {
      public redeemRmb_resultTupleScheme getScheme() {
        return new redeemRmb_resultTupleScheme();
      }
    }

    private static class redeemRmb_resultTupleScheme extends TupleScheme<redeemRmb_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, redeemRmb_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, redeemRmb_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class charge_args implements org.apache.thrift.TBase<charge_args, charge_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("charge_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("itemView", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new charge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new charge_argsTupleSchemeFactory());
    }

    public long uid; // required
    public one.show.pay.thrift.view.ItemView itemView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM_VIEW((short)2, "itemView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM_VIEW
            return ITEM_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_VIEW, new org.apache.thrift.meta_data.FieldMetaData("itemView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ItemView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(charge_args.class, metaDataMap);
    }

    public charge_args() {
    }

    public charge_args(
      long uid,
      one.show.pay.thrift.view.ItemView itemView)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.itemView = itemView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public charge_args(charge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetItemView()) {
        this.itemView = new one.show.pay.thrift.view.ItemView(other.itemView);
      }
    }

    public charge_args deepCopy() {
      return new charge_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.itemView = null;
    }

    public long getUid() {
      return this.uid;
    }

    public charge_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public one.show.pay.thrift.view.ItemView getItemView() {
      return this.itemView;
    }

    public charge_args setItemView(one.show.pay.thrift.view.ItemView itemView) {
      this.itemView = itemView;
      return this;
    }

    public void unsetItemView() {
      this.itemView = null;
    }

    /** Returns true if field itemView is set (has been assigned a value) and false otherwise */
    public boolean isSetItemView() {
      return this.itemView != null;
    }

    public void setItemViewIsSet(boolean value) {
      if (!value) {
        this.itemView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM_VIEW:
        if (value == null) {
          unsetItemView();
        } else {
          setItemView((one.show.pay.thrift.view.ItemView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM_VIEW:
        return getItemView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM_VIEW:
        return isSetItemView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof charge_args)
        return this.equals((charge_args)that);
      return false;
    }

    public boolean equals(charge_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_itemView = true && this.isSetItemView();
      boolean that_present_itemView = true && that.isSetItemView();
      if (this_present_itemView || that_present_itemView) {
        if (!(this_present_itemView && that_present_itemView))
          return false;
        if (!this.itemView.equals(that.itemView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(charge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      charge_args typedOther = (charge_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemView()).compareTo(typedOther.isSetItemView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemView, typedOther.itemView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("charge_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemView:");
      if (this.itemView == null) {
        sb.append("null");
      } else {
        sb.append(this.itemView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (itemView != null) {
        itemView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class charge_argsStandardSchemeFactory implements SchemeFactory {
      public charge_argsStandardScheme getScheme() {
        return new charge_argsStandardScheme();
      }
    }

    private static class charge_argsStandardScheme extends StandardScheme<charge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, charge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemView = new one.show.pay.thrift.view.ItemView();
                struct.itemView.read(iprot);
                struct.setItemViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, charge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.itemView != null) {
          oprot.writeFieldBegin(ITEM_VIEW_FIELD_DESC);
          struct.itemView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class charge_argsTupleSchemeFactory implements SchemeFactory {
      public charge_argsTupleScheme getScheme() {
        return new charge_argsTupleScheme();
      }
    }

    private static class charge_argsTupleScheme extends TupleScheme<charge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, charge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItemView()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItemView()) {
          struct.itemView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, charge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemView = new one.show.pay.thrift.view.ItemView();
          struct.itemView.read(iprot);
          struct.setItemViewIsSet(true);
        }
      }
    }

  }

  public static class charge_result implements org.apache.thrift.TBase<charge_result, charge_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("charge_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new charge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new charge_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(charge_result.class, metaDataMap);
    }

    public charge_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public charge_result(charge_result other) {
    }

    public charge_result deepCopy() {
      return new charge_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof charge_result)
        return this.equals((charge_result)that);
      return false;
    }

    public boolean equals(charge_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(charge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      charge_result typedOther = (charge_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("charge_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class charge_resultStandardSchemeFactory implements SchemeFactory {
      public charge_resultStandardScheme getScheme() {
        return new charge_resultStandardScheme();
      }
    }

    private static class charge_resultStandardScheme extends StandardScheme<charge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, charge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, charge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class charge_resultTupleSchemeFactory implements SchemeFactory {
      public charge_resultTupleScheme getScheme() {
        return new charge_resultTupleScheme();
      }
    }

    private static class charge_resultTupleScheme extends TupleScheme<charge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, charge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, charge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findGiftRanksByUid_args implements org.apache.thrift.TBase<findGiftRanksByUid_args, findGiftRanksByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftRanksByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftRanksByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftRanksByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftRanksByUid_args.class, metaDataMap);
    }

    public findGiftRanksByUid_args() {
    }

    public findGiftRanksByUid_args(
      long uid,
      int start,
      int count)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftRanksByUid_args(findGiftRanksByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.start = other.start;
      this.count = other.count;
    }

    public findGiftRanksByUid_args deepCopy() {
      return new findGiftRanksByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public findGiftRanksByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findGiftRanksByUid_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findGiftRanksByUid_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftRanksByUid_args)
        return this.equals((findGiftRanksByUid_args)that);
      return false;
    }

    public boolean equals(findGiftRanksByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftRanksByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftRanksByUid_args typedOther = (findGiftRanksByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftRanksByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftRanksByUid_argsStandardSchemeFactory implements SchemeFactory {
      public findGiftRanksByUid_argsStandardScheme getScheme() {
        return new findGiftRanksByUid_argsStandardScheme();
      }
    }

    private static class findGiftRanksByUid_argsStandardScheme extends StandardScheme<findGiftRanksByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftRanksByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftRanksByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftRanksByUid_argsTupleSchemeFactory implements SchemeFactory {
      public findGiftRanksByUid_argsTupleScheme getScheme() {
        return new findGiftRanksByUid_argsTupleScheme();
      }
    }

    private static class findGiftRanksByUid_argsTupleScheme extends TupleScheme<findGiftRanksByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftRanksByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftRanksByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findGiftRanksByUid_result implements org.apache.thrift.TBase<findGiftRanksByUid_result, findGiftRanksByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftRanksByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftRanksByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftRanksByUid_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.GiftRankView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.GiftRankView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftRanksByUid_result.class, metaDataMap);
    }

    public findGiftRanksByUid_result() {
    }

    public findGiftRanksByUid_result(
      List<one.show.pay.thrift.view.GiftRankView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftRanksByUid_result(findGiftRanksByUid_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.GiftRankView> __this__success = new ArrayList<one.show.pay.thrift.view.GiftRankView>();
        for (one.show.pay.thrift.view.GiftRankView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.GiftRankView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findGiftRanksByUid_result deepCopy() {
      return new findGiftRanksByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.GiftRankView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.GiftRankView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.GiftRankView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.GiftRankView> getSuccess() {
      return this.success;
    }

    public findGiftRanksByUid_result setSuccess(List<one.show.pay.thrift.view.GiftRankView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.GiftRankView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftRanksByUid_result)
        return this.equals((findGiftRanksByUid_result)that);
      return false;
    }

    public boolean equals(findGiftRanksByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftRanksByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftRanksByUid_result typedOther = (findGiftRanksByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftRanksByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftRanksByUid_resultStandardSchemeFactory implements SchemeFactory {
      public findGiftRanksByUid_resultStandardScheme getScheme() {
        return new findGiftRanksByUid_resultStandardScheme();
      }
    }

    private static class findGiftRanksByUid_resultStandardScheme extends StandardScheme<findGiftRanksByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftRanksByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.GiftRankView>(_list208.size);
                  for (int _i209 = 0; _i209 < _list208.size; ++_i209)
                  {
                    one.show.pay.thrift.view.GiftRankView _elem210; // required
                    _elem210 = new one.show.pay.thrift.view.GiftRankView();
                    _elem210.read(iprot);
                    struct.success.add(_elem210);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftRanksByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.GiftRankView _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftRanksByUid_resultTupleSchemeFactory implements SchemeFactory {
      public findGiftRanksByUid_resultTupleScheme getScheme() {
        return new findGiftRanksByUid_resultTupleScheme();
      }
    }

    private static class findGiftRanksByUid_resultTupleScheme extends TupleScheme<findGiftRanksByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftRanksByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.GiftRankView _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftRanksByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.GiftRankView>(_list213.size);
            for (int _i214 = 0; _i214 < _list213.size; ++_i214)
            {
              one.show.pay.thrift.view.GiftRankView _elem215; // required
              _elem215 = new one.show.pay.thrift.view.GiftRankView();
              _elem215.read(iprot);
              struct.success.add(_elem215);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findGiftRanksByVid_args implements org.apache.thrift.TBase<findGiftRanksByVid_args, findGiftRanksByVid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftRanksByVid_args");

    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftRanksByVid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftRanksByVid_argsTupleSchemeFactory());
    }

    public long vid; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VID((short)1, "vid"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VID
            return VID;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftRanksByVid_args.class, metaDataMap);
    }

    public findGiftRanksByVid_args() {
    }

    public findGiftRanksByVid_args(
      long vid,
      int start,
      int count)
    {
      this();
      this.vid = vid;
      setVidIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftRanksByVid_args(findGiftRanksByVid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vid = other.vid;
      this.start = other.start;
      this.count = other.count;
    }

    public findGiftRanksByVid_args deepCopy() {
      return new findGiftRanksByVid_args(this);
    }

    @Override
    public void clear() {
      setVidIsSet(false);
      this.vid = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getVid() {
      return this.vid;
    }

    public findGiftRanksByVid_args setVid(long vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findGiftRanksByVid_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findGiftRanksByVid_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Long)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VID:
        return Long.valueOf(getVid());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VID:
        return isSetVid();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftRanksByVid_args)
        return this.equals((findGiftRanksByVid_args)that);
      return false;
    }

    public boolean equals(findGiftRanksByVid_args that) {
      if (that == null)
        return false;

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftRanksByVid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftRanksByVid_args typedOther = (findGiftRanksByVid_args)other;

      lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftRanksByVid_args(");
      boolean first = true;

      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftRanksByVid_argsStandardSchemeFactory implements SchemeFactory {
      public findGiftRanksByVid_argsStandardScheme getScheme() {
        return new findGiftRanksByVid_argsStandardScheme();
      }
    }

    private static class findGiftRanksByVid_argsStandardScheme extends StandardScheme<findGiftRanksByVid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftRanksByVid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.vid = iprot.readI64();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftRanksByVid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI64(struct.vid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftRanksByVid_argsTupleSchemeFactory implements SchemeFactory {
      public findGiftRanksByVid_argsTupleScheme getScheme() {
        return new findGiftRanksByVid_argsTupleScheme();
      }
    }

    private static class findGiftRanksByVid_argsTupleScheme extends TupleScheme<findGiftRanksByVid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftRanksByVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVid()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVid()) {
          oprot.writeI64(struct.vid);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftRanksByVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vid = iprot.readI64();
          struct.setVidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findGiftRanksByVid_result implements org.apache.thrift.TBase<findGiftRanksByVid_result, findGiftRanksByVid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGiftRanksByVid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGiftRanksByVid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGiftRanksByVid_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.GiftRankView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.GiftRankView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGiftRanksByVid_result.class, metaDataMap);
    }

    public findGiftRanksByVid_result() {
    }

    public findGiftRanksByVid_result(
      List<one.show.pay.thrift.view.GiftRankView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGiftRanksByVid_result(findGiftRanksByVid_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.GiftRankView> __this__success = new ArrayList<one.show.pay.thrift.view.GiftRankView>();
        for (one.show.pay.thrift.view.GiftRankView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.GiftRankView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findGiftRanksByVid_result deepCopy() {
      return new findGiftRanksByVid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.GiftRankView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.GiftRankView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.GiftRankView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.GiftRankView> getSuccess() {
      return this.success;
    }

    public findGiftRanksByVid_result setSuccess(List<one.show.pay.thrift.view.GiftRankView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.GiftRankView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGiftRanksByVid_result)
        return this.equals((findGiftRanksByVid_result)that);
      return false;
    }

    public boolean equals(findGiftRanksByVid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findGiftRanksByVid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findGiftRanksByVid_result typedOther = (findGiftRanksByVid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGiftRanksByVid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGiftRanksByVid_resultStandardSchemeFactory implements SchemeFactory {
      public findGiftRanksByVid_resultStandardScheme getScheme() {
        return new findGiftRanksByVid_resultStandardScheme();
      }
    }

    private static class findGiftRanksByVid_resultStandardScheme extends StandardScheme<findGiftRanksByVid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGiftRanksByVid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.GiftRankView>(_list216.size);
                  for (int _i217 = 0; _i217 < _list216.size; ++_i217)
                  {
                    one.show.pay.thrift.view.GiftRankView _elem218; // required
                    _elem218 = new one.show.pay.thrift.view.GiftRankView();
                    _elem218.read(iprot);
                    struct.success.add(_elem218);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGiftRanksByVid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.GiftRankView _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGiftRanksByVid_resultTupleSchemeFactory implements SchemeFactory {
      public findGiftRanksByVid_resultTupleScheme getScheme() {
        return new findGiftRanksByVid_resultTupleScheme();
      }
    }

    private static class findGiftRanksByVid_resultTupleScheme extends TupleScheme<findGiftRanksByVid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGiftRanksByVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.GiftRankView _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGiftRanksByVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.GiftRankView>(_list221.size);
            for (int _i222 = 0; _i222 < _list221.size; ++_i222)
            {
              one.show.pay.thrift.view.GiftRankView _elem223; // required
              _elem223 = new one.show.pay.thrift.view.GiftRankView();
              _elem223.read(iprot);
              struct.success.add(_elem223);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findTotalReceiveByVid_args implements org.apache.thrift.TBase<findTotalReceiveByVid_args, findTotalReceiveByVid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTotalReceiveByVid_args");

    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTotalReceiveByVid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTotalReceiveByVid_argsTupleSchemeFactory());
    }

    public long vid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VID((short)1, "vid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VID
            return VID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTotalReceiveByVid_args.class, metaDataMap);
    }

    public findTotalReceiveByVid_args() {
    }

    public findTotalReceiveByVid_args(
      long vid)
    {
      this();
      this.vid = vid;
      setVidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTotalReceiveByVid_args(findTotalReceiveByVid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vid = other.vid;
    }

    public findTotalReceiveByVid_args deepCopy() {
      return new findTotalReceiveByVid_args(this);
    }

    @Override
    public void clear() {
      setVidIsSet(false);
      this.vid = 0;
    }

    public long getVid() {
      return this.vid;
    }

    public findTotalReceiveByVid_args setVid(long vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VID:
        return Long.valueOf(getVid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VID:
        return isSetVid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTotalReceiveByVid_args)
        return this.equals((findTotalReceiveByVid_args)that);
      return false;
    }

    public boolean equals(findTotalReceiveByVid_args that) {
      if (that == null)
        return false;

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTotalReceiveByVid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTotalReceiveByVid_args typedOther = (findTotalReceiveByVid_args)other;

      lastComparison = Boolean.valueOf(isSetVid()).compareTo(typedOther.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, typedOther.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTotalReceiveByVid_args(");
      boolean first = true;

      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTotalReceiveByVid_argsStandardSchemeFactory implements SchemeFactory {
      public findTotalReceiveByVid_argsStandardScheme getScheme() {
        return new findTotalReceiveByVid_argsStandardScheme();
      }
    }

    private static class findTotalReceiveByVid_argsStandardScheme extends StandardScheme<findTotalReceiveByVid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTotalReceiveByVid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.vid = iprot.readI64();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTotalReceiveByVid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI64(struct.vid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTotalReceiveByVid_argsTupleSchemeFactory implements SchemeFactory {
      public findTotalReceiveByVid_argsTupleScheme getScheme() {
        return new findTotalReceiveByVid_argsTupleScheme();
      }
    }

    private static class findTotalReceiveByVid_argsTupleScheme extends TupleScheme<findTotalReceiveByVid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTotalReceiveByVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVid()) {
          oprot.writeI64(struct.vid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTotalReceiveByVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vid = iprot.readI64();
          struct.setVidIsSet(true);
        }
      }
    }

  }

  public static class findTotalReceiveByVid_result implements org.apache.thrift.TBase<findTotalReceiveByVid_result, findTotalReceiveByVid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTotalReceiveByVid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTotalReceiveByVid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTotalReceiveByVid_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTotalReceiveByVid_result.class, metaDataMap);
    }

    public findTotalReceiveByVid_result() {
    }

    public findTotalReceiveByVid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTotalReceiveByVid_result(findTotalReceiveByVid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public findTotalReceiveByVid_result deepCopy() {
      return new findTotalReceiveByVid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public findTotalReceiveByVid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTotalReceiveByVid_result)
        return this.equals((findTotalReceiveByVid_result)that);
      return false;
    }

    public boolean equals(findTotalReceiveByVid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findTotalReceiveByVid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findTotalReceiveByVid_result typedOther = (findTotalReceiveByVid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTotalReceiveByVid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTotalReceiveByVid_resultStandardSchemeFactory implements SchemeFactory {
      public findTotalReceiveByVid_resultStandardScheme getScheme() {
        return new findTotalReceiveByVid_resultStandardScheme();
      }
    }

    private static class findTotalReceiveByVid_resultStandardScheme extends StandardScheme<findTotalReceiveByVid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTotalReceiveByVid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTotalReceiveByVid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTotalReceiveByVid_resultTupleSchemeFactory implements SchemeFactory {
      public findTotalReceiveByVid_resultTupleScheme getScheme() {
        return new findTotalReceiveByVid_resultTupleScheme();
      }
    }

    private static class findTotalReceiveByVid_resultTupleScheme extends TupleScheme<findTotalReceiveByVid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTotalReceiveByVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTotalReceiveByVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllPayConfigs_args implements org.apache.thrift.TBase<findAllPayConfigs_args, findAllPayConfigs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllPayConfigs_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllPayConfigs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllPayConfigs_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllPayConfigs_args.class, metaDataMap);
    }

    public findAllPayConfigs_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllPayConfigs_args(findAllPayConfigs_args other) {
    }

    public findAllPayConfigs_args deepCopy() {
      return new findAllPayConfigs_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllPayConfigs_args)
        return this.equals((findAllPayConfigs_args)that);
      return false;
    }

    public boolean equals(findAllPayConfigs_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllPayConfigs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllPayConfigs_args typedOther = (findAllPayConfigs_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllPayConfigs_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllPayConfigs_argsStandardSchemeFactory implements SchemeFactory {
      public findAllPayConfigs_argsStandardScheme getScheme() {
        return new findAllPayConfigs_argsStandardScheme();
      }
    }

    private static class findAllPayConfigs_argsStandardScheme extends StandardScheme<findAllPayConfigs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllPayConfigs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllPayConfigs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllPayConfigs_argsTupleSchemeFactory implements SchemeFactory {
      public findAllPayConfigs_argsTupleScheme getScheme() {
        return new findAllPayConfigs_argsTupleScheme();
      }
    }

    private static class findAllPayConfigs_argsTupleScheme extends TupleScheme<findAllPayConfigs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllPayConfigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllPayConfigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAllPayConfigs_result implements org.apache.thrift.TBase<findAllPayConfigs_result, findAllPayConfigs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllPayConfigs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllPayConfigs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllPayConfigs_resultTupleSchemeFactory());
    }

    public List<one.show.pay.thrift.view.PayConfigView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.PayConfigView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllPayConfigs_result.class, metaDataMap);
    }

    public findAllPayConfigs_result() {
    }

    public findAllPayConfigs_result(
      List<one.show.pay.thrift.view.PayConfigView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllPayConfigs_result(findAllPayConfigs_result other) {
      if (other.isSetSuccess()) {
        List<one.show.pay.thrift.view.PayConfigView> __this__success = new ArrayList<one.show.pay.thrift.view.PayConfigView>();
        for (one.show.pay.thrift.view.PayConfigView other_element : other.success) {
          __this__success.add(new one.show.pay.thrift.view.PayConfigView(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllPayConfigs_result deepCopy() {
      return new findAllPayConfigs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.pay.thrift.view.PayConfigView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.pay.thrift.view.PayConfigView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.pay.thrift.view.PayConfigView>();
      }
      this.success.add(elem);
    }

    public List<one.show.pay.thrift.view.PayConfigView> getSuccess() {
      return this.success;
    }

    public findAllPayConfigs_result setSuccess(List<one.show.pay.thrift.view.PayConfigView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.pay.thrift.view.PayConfigView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllPayConfigs_result)
        return this.equals((findAllPayConfigs_result)that);
      return false;
    }

    public boolean equals(findAllPayConfigs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllPayConfigs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllPayConfigs_result typedOther = (findAllPayConfigs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllPayConfigs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllPayConfigs_resultStandardSchemeFactory implements SchemeFactory {
      public findAllPayConfigs_resultStandardScheme getScheme() {
        return new findAllPayConfigs_resultStandardScheme();
      }
    }

    private static class findAllPayConfigs_resultStandardScheme extends StandardScheme<findAllPayConfigs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllPayConfigs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.pay.thrift.view.PayConfigView>(_list224.size);
                  for (int _i225 = 0; _i225 < _list224.size; ++_i225)
                  {
                    one.show.pay.thrift.view.PayConfigView _elem226; // required
                    _elem226 = new one.show.pay.thrift.view.PayConfigView();
                    _elem226.read(iprot);
                    struct.success.add(_elem226);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllPayConfigs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.pay.thrift.view.PayConfigView _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllPayConfigs_resultTupleSchemeFactory implements SchemeFactory {
      public findAllPayConfigs_resultTupleScheme getScheme() {
        return new findAllPayConfigs_resultTupleScheme();
      }
    }

    private static class findAllPayConfigs_resultTupleScheme extends TupleScheme<findAllPayConfigs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllPayConfigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.pay.thrift.view.PayConfigView _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllPayConfigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.pay.thrift.view.PayConfigView>(_list229.size);
            for (int _i230 = 0; _i230 < _list229.size; ++_i230)
            {
              one.show.pay.thrift.view.PayConfigView _elem231; // required
              _elem231 = new one.show.pay.thrift.view.PayConfigView();
              _elem231.read(iprot);
              struct.success.add(_elem231);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveExtractBind_args implements org.apache.thrift.TBase<saveExtractBind_args, saveExtractBind_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveExtractBind_args");

    private static final org.apache.thrift.protocol.TField EXTRACT_BIND_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("extractBindView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveExtractBind_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveExtractBind_argsTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.ExtractBindView extractBindView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXTRACT_BIND_VIEW((short)1, "extractBindView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXTRACT_BIND_VIEW
            return EXTRACT_BIND_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXTRACT_BIND_VIEW, new org.apache.thrift.meta_data.FieldMetaData("extractBindView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ExtractBindView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveExtractBind_args.class, metaDataMap);
    }

    public saveExtractBind_args() {
    }

    public saveExtractBind_args(
      one.show.pay.thrift.view.ExtractBindView extractBindView)
    {
      this();
      this.extractBindView = extractBindView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveExtractBind_args(saveExtractBind_args other) {
      if (other.isSetExtractBindView()) {
        this.extractBindView = new one.show.pay.thrift.view.ExtractBindView(other.extractBindView);
      }
    }

    public saveExtractBind_args deepCopy() {
      return new saveExtractBind_args(this);
    }

    @Override
    public void clear() {
      this.extractBindView = null;
    }

    public one.show.pay.thrift.view.ExtractBindView getExtractBindView() {
      return this.extractBindView;
    }

    public saveExtractBind_args setExtractBindView(one.show.pay.thrift.view.ExtractBindView extractBindView) {
      this.extractBindView = extractBindView;
      return this;
    }

    public void unsetExtractBindView() {
      this.extractBindView = null;
    }

    /** Returns true if field extractBindView is set (has been assigned a value) and false otherwise */
    public boolean isSetExtractBindView() {
      return this.extractBindView != null;
    }

    public void setExtractBindViewIsSet(boolean value) {
      if (!value) {
        this.extractBindView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXTRACT_BIND_VIEW:
        if (value == null) {
          unsetExtractBindView();
        } else {
          setExtractBindView((one.show.pay.thrift.view.ExtractBindView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXTRACT_BIND_VIEW:
        return getExtractBindView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXTRACT_BIND_VIEW:
        return isSetExtractBindView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveExtractBind_args)
        return this.equals((saveExtractBind_args)that);
      return false;
    }

    public boolean equals(saveExtractBind_args that) {
      if (that == null)
        return false;

      boolean this_present_extractBindView = true && this.isSetExtractBindView();
      boolean that_present_extractBindView = true && that.isSetExtractBindView();
      if (this_present_extractBindView || that_present_extractBindView) {
        if (!(this_present_extractBindView && that_present_extractBindView))
          return false;
        if (!this.extractBindView.equals(that.extractBindView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveExtractBind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveExtractBind_args typedOther = (saveExtractBind_args)other;

      lastComparison = Boolean.valueOf(isSetExtractBindView()).compareTo(typedOther.isSetExtractBindView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtractBindView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extractBindView, typedOther.extractBindView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveExtractBind_args(");
      boolean first = true;

      sb.append("extractBindView:");
      if (this.extractBindView == null) {
        sb.append("null");
      } else {
        sb.append(this.extractBindView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (extractBindView != null) {
        extractBindView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveExtractBind_argsStandardSchemeFactory implements SchemeFactory {
      public saveExtractBind_argsStandardScheme getScheme() {
        return new saveExtractBind_argsStandardScheme();
      }
    }

    private static class saveExtractBind_argsStandardScheme extends StandardScheme<saveExtractBind_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveExtractBind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXTRACT_BIND_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.extractBindView = new one.show.pay.thrift.view.ExtractBindView();
                struct.extractBindView.read(iprot);
                struct.setExtractBindViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveExtractBind_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.extractBindView != null) {
          oprot.writeFieldBegin(EXTRACT_BIND_VIEW_FIELD_DESC);
          struct.extractBindView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveExtractBind_argsTupleSchemeFactory implements SchemeFactory {
      public saveExtractBind_argsTupleScheme getScheme() {
        return new saveExtractBind_argsTupleScheme();
      }
    }

    private static class saveExtractBind_argsTupleScheme extends TupleScheme<saveExtractBind_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveExtractBind_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExtractBindView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExtractBindView()) {
          struct.extractBindView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveExtractBind_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.extractBindView = new one.show.pay.thrift.view.ExtractBindView();
          struct.extractBindView.read(iprot);
          struct.setExtractBindViewIsSet(true);
        }
      }
    }

  }

  public static class saveExtractBind_result implements org.apache.thrift.TBase<saveExtractBind_result, saveExtractBind_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveExtractBind_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveExtractBind_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveExtractBind_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveExtractBind_result.class, metaDataMap);
    }

    public saveExtractBind_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveExtractBind_result(saveExtractBind_result other) {
    }

    public saveExtractBind_result deepCopy() {
      return new saveExtractBind_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveExtractBind_result)
        return this.equals((saveExtractBind_result)that);
      return false;
    }

    public boolean equals(saveExtractBind_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveExtractBind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveExtractBind_result typedOther = (saveExtractBind_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveExtractBind_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveExtractBind_resultStandardSchemeFactory implements SchemeFactory {
      public saveExtractBind_resultStandardScheme getScheme() {
        return new saveExtractBind_resultStandardScheme();
      }
    }

    private static class saveExtractBind_resultStandardScheme extends StandardScheme<saveExtractBind_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveExtractBind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveExtractBind_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveExtractBind_resultTupleSchemeFactory implements SchemeFactory {
      public saveExtractBind_resultTupleScheme getScheme() {
        return new saveExtractBind_resultTupleScheme();
      }
    }

    private static class saveExtractBind_resultTupleScheme extends TupleScheme<saveExtractBind_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveExtractBind_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveExtractBind_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getExtractBindByUid_args implements org.apache.thrift.TBase<getExtractBindByUid_args, getExtractBindByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractBindByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractBindByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractBindByUid_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractBindByUid_args.class, metaDataMap);
    }

    public getExtractBindByUid_args() {
    }

    public getExtractBindByUid_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractBindByUid_args(getExtractBindByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public getExtractBindByUid_args deepCopy() {
      return new getExtractBindByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public getExtractBindByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractBindByUid_args)
        return this.equals((getExtractBindByUid_args)that);
      return false;
    }

    public boolean equals(getExtractBindByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractBindByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractBindByUid_args typedOther = (getExtractBindByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractBindByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractBindByUid_argsStandardSchemeFactory implements SchemeFactory {
      public getExtractBindByUid_argsStandardScheme getScheme() {
        return new getExtractBindByUid_argsStandardScheme();
      }
    }

    private static class getExtractBindByUid_argsStandardScheme extends StandardScheme<getExtractBindByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractBindByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractBindByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractBindByUid_argsTupleSchemeFactory implements SchemeFactory {
      public getExtractBindByUid_argsTupleScheme getScheme() {
        return new getExtractBindByUid_argsTupleScheme();
      }
    }

    private static class getExtractBindByUid_argsTupleScheme extends TupleScheme<getExtractBindByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractBindByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractBindByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getExtractBindByUid_result implements org.apache.thrift.TBase<getExtractBindByUid_result, getExtractBindByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractBindByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractBindByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractBindByUid_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.ExtractBindView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ExtractBindView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractBindByUid_result.class, metaDataMap);
    }

    public getExtractBindByUid_result() {
    }

    public getExtractBindByUid_result(
      one.show.pay.thrift.view.ExtractBindView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractBindByUid_result(getExtractBindByUid_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.ExtractBindView(other.success);
      }
    }

    public getExtractBindByUid_result deepCopy() {
      return new getExtractBindByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.ExtractBindView getSuccess() {
      return this.success;
    }

    public getExtractBindByUid_result setSuccess(one.show.pay.thrift.view.ExtractBindView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.ExtractBindView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractBindByUid_result)
        return this.equals((getExtractBindByUid_result)that);
      return false;
    }

    public boolean equals(getExtractBindByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractBindByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractBindByUid_result typedOther = (getExtractBindByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractBindByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractBindByUid_resultStandardSchemeFactory implements SchemeFactory {
      public getExtractBindByUid_resultStandardScheme getScheme() {
        return new getExtractBindByUid_resultStandardScheme();
      }
    }

    private static class getExtractBindByUid_resultStandardScheme extends StandardScheme<getExtractBindByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractBindByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.ExtractBindView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractBindByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractBindByUid_resultTupleSchemeFactory implements SchemeFactory {
      public getExtractBindByUid_resultTupleScheme getScheme() {
        return new getExtractBindByUid_resultTupleScheme();
      }
    }

    private static class getExtractBindByUid_resultTupleScheme extends TupleScheme<getExtractBindByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractBindByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractBindByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.ExtractBindView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateExtractBindByUid_args implements org.apache.thrift.TBase<updateExtractBindByUid_args, updateExtractBindByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExtractBindByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ALIPAY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayAccount", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ALIPAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExtractBindByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExtractBindByUid_argsTupleSchemeFactory());
    }

    public long uid; // required
    public String alipayAccount; // required
    public String alipayName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ALIPAY_ACCOUNT((short)2, "alipayAccount"),
      ALIPAY_NAME((short)3, "alipayName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ALIPAY_ACCOUNT
            return ALIPAY_ACCOUNT;
          case 3: // ALIPAY_NAME
            return ALIPAY_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ALIPAY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("alipayAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ALIPAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("alipayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExtractBindByUid_args.class, metaDataMap);
    }

    public updateExtractBindByUid_args() {
    }

    public updateExtractBindByUid_args(
      long uid,
      String alipayAccount,
      String alipayName)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.alipayAccount = alipayAccount;
      this.alipayName = alipayName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExtractBindByUid_args(updateExtractBindByUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetAlipayAccount()) {
        this.alipayAccount = other.alipayAccount;
      }
      if (other.isSetAlipayName()) {
        this.alipayName = other.alipayName;
      }
    }

    public updateExtractBindByUid_args deepCopy() {
      return new updateExtractBindByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.alipayAccount = null;
      this.alipayName = null;
    }

    public long getUid() {
      return this.uid;
    }

    public updateExtractBindByUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public String getAlipayAccount() {
      return this.alipayAccount;
    }

    public updateExtractBindByUid_args setAlipayAccount(String alipayAccount) {
      this.alipayAccount = alipayAccount;
      return this;
    }

    public void unsetAlipayAccount() {
      this.alipayAccount = null;
    }

    /** Returns true if field alipayAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetAlipayAccount() {
      return this.alipayAccount != null;
    }

    public void setAlipayAccountIsSet(boolean value) {
      if (!value) {
        this.alipayAccount = null;
      }
    }

    public String getAlipayName() {
      return this.alipayName;
    }

    public updateExtractBindByUid_args setAlipayName(String alipayName) {
      this.alipayName = alipayName;
      return this;
    }

    public void unsetAlipayName() {
      this.alipayName = null;
    }

    /** Returns true if field alipayName is set (has been assigned a value) and false otherwise */
    public boolean isSetAlipayName() {
      return this.alipayName != null;
    }

    public void setAlipayNameIsSet(boolean value) {
      if (!value) {
        this.alipayName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ALIPAY_ACCOUNT:
        if (value == null) {
          unsetAlipayAccount();
        } else {
          setAlipayAccount((String)value);
        }
        break;

      case ALIPAY_NAME:
        if (value == null) {
          unsetAlipayName();
        } else {
          setAlipayName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ALIPAY_ACCOUNT:
        return getAlipayAccount();

      case ALIPAY_NAME:
        return getAlipayName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ALIPAY_ACCOUNT:
        return isSetAlipayAccount();
      case ALIPAY_NAME:
        return isSetAlipayName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExtractBindByUid_args)
        return this.equals((updateExtractBindByUid_args)that);
      return false;
    }

    public boolean equals(updateExtractBindByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_alipayAccount = true && this.isSetAlipayAccount();
      boolean that_present_alipayAccount = true && that.isSetAlipayAccount();
      if (this_present_alipayAccount || that_present_alipayAccount) {
        if (!(this_present_alipayAccount && that_present_alipayAccount))
          return false;
        if (!this.alipayAccount.equals(that.alipayAccount))
          return false;
      }

      boolean this_present_alipayName = true && this.isSetAlipayName();
      boolean that_present_alipayName = true && that.isSetAlipayName();
      if (this_present_alipayName || that_present_alipayName) {
        if (!(this_present_alipayName && that_present_alipayName))
          return false;
        if (!this.alipayName.equals(that.alipayName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateExtractBindByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateExtractBindByUid_args typedOther = (updateExtractBindByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlipayAccount()).compareTo(typedOther.isSetAlipayAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlipayAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayAccount, typedOther.alipayAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlipayName()).compareTo(typedOther.isSetAlipayName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlipayName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayName, typedOther.alipayName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExtractBindByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("alipayAccount:");
      if (this.alipayAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.alipayAccount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("alipayName:");
      if (this.alipayName == null) {
        sb.append("null");
      } else {
        sb.append(this.alipayName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExtractBindByUid_argsStandardSchemeFactory implements SchemeFactory {
      public updateExtractBindByUid_argsStandardScheme getScheme() {
        return new updateExtractBindByUid_argsStandardScheme();
      }
    }

    private static class updateExtractBindByUid_argsStandardScheme extends StandardScheme<updateExtractBindByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExtractBindByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ALIPAY_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.alipayAccount = iprot.readString();
                struct.setAlipayAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALIPAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.alipayName = iprot.readString();
                struct.setAlipayNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExtractBindByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.alipayAccount != null) {
          oprot.writeFieldBegin(ALIPAY_ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.alipayAccount);
          oprot.writeFieldEnd();
        }
        if (struct.alipayName != null) {
          oprot.writeFieldBegin(ALIPAY_NAME_FIELD_DESC);
          oprot.writeString(struct.alipayName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExtractBindByUid_argsTupleSchemeFactory implements SchemeFactory {
      public updateExtractBindByUid_argsTupleScheme getScheme() {
        return new updateExtractBindByUid_argsTupleScheme();
      }
    }

    private static class updateExtractBindByUid_argsTupleScheme extends TupleScheme<updateExtractBindByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExtractBindByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetAlipayAccount()) {
          optionals.set(1);
        }
        if (struct.isSetAlipayName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetAlipayAccount()) {
          oprot.writeString(struct.alipayAccount);
        }
        if (struct.isSetAlipayName()) {
          oprot.writeString(struct.alipayName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExtractBindByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.alipayAccount = iprot.readString();
          struct.setAlipayAccountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.alipayName = iprot.readString();
          struct.setAlipayNameIsSet(true);
        }
      }
    }

  }

  public static class updateExtractBindByUid_result implements org.apache.thrift.TBase<updateExtractBindByUid_result, updateExtractBindByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExtractBindByUid_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExtractBindByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExtractBindByUid_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExtractBindByUid_result.class, metaDataMap);
    }

    public updateExtractBindByUid_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExtractBindByUid_result(updateExtractBindByUid_result other) {
    }

    public updateExtractBindByUid_result deepCopy() {
      return new updateExtractBindByUid_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExtractBindByUid_result)
        return this.equals((updateExtractBindByUid_result)that);
      return false;
    }

    public boolean equals(updateExtractBindByUid_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateExtractBindByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateExtractBindByUid_result typedOther = (updateExtractBindByUid_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExtractBindByUid_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExtractBindByUid_resultStandardSchemeFactory implements SchemeFactory {
      public updateExtractBindByUid_resultStandardScheme getScheme() {
        return new updateExtractBindByUid_resultStandardScheme();
      }
    }

    private static class updateExtractBindByUid_resultStandardScheme extends StandardScheme<updateExtractBindByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExtractBindByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExtractBindByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExtractBindByUid_resultTupleSchemeFactory implements SchemeFactory {
      public updateExtractBindByUid_resultTupleScheme getScheme() {
        return new updateExtractBindByUid_resultTupleScheme();
      }
    }

    private static class updateExtractBindByUid_resultTupleScheme extends TupleScheme<updateExtractBindByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExtractBindByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExtractBindByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class freeze_args implements org.apache.thrift.TBase<freeze_args, freeze_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("freeze_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("itemView", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionValue", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDesc", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new freeze_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new freeze_argsTupleSchemeFactory());
    }

    public long uid; // required
    public one.show.pay.thrift.view.ItemView itemView; // required
    public int actionValue; // required
    public String actionDesc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM_VIEW((short)2, "itemView"),
      ACTION_VALUE((short)3, "actionValue"),
      ACTION_DESC((short)4, "actionDesc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM_VIEW
            return ITEM_VIEW;
          case 3: // ACTION_VALUE
            return ACTION_VALUE;
          case 4: // ACTION_DESC
            return ACTION_DESC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __ACTIONVALUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_VIEW, new org.apache.thrift.meta_data.FieldMetaData("itemView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ItemView.class)));
      tmpMap.put(_Fields.ACTION_VALUE, new org.apache.thrift.meta_data.FieldMetaData("actionValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACTION_DESC, new org.apache.thrift.meta_data.FieldMetaData("actionDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freeze_args.class, metaDataMap);
    }

    public freeze_args() {
    }

    public freeze_args(
      long uid,
      one.show.pay.thrift.view.ItemView itemView,
      int actionValue,
      String actionDesc)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.itemView = itemView;
      this.actionValue = actionValue;
      setActionValueIsSet(true);
      this.actionDesc = actionDesc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public freeze_args(freeze_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetItemView()) {
        this.itemView = new one.show.pay.thrift.view.ItemView(other.itemView);
      }
      this.actionValue = other.actionValue;
      if (other.isSetActionDesc()) {
        this.actionDesc = other.actionDesc;
      }
    }

    public freeze_args deepCopy() {
      return new freeze_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.itemView = null;
      setActionValueIsSet(false);
      this.actionValue = 0;
      this.actionDesc = null;
    }

    public long getUid() {
      return this.uid;
    }

    public freeze_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public one.show.pay.thrift.view.ItemView getItemView() {
      return this.itemView;
    }

    public freeze_args setItemView(one.show.pay.thrift.view.ItemView itemView) {
      this.itemView = itemView;
      return this;
    }

    public void unsetItemView() {
      this.itemView = null;
    }

    /** Returns true if field itemView is set (has been assigned a value) and false otherwise */
    public boolean isSetItemView() {
      return this.itemView != null;
    }

    public void setItemViewIsSet(boolean value) {
      if (!value) {
        this.itemView = null;
      }
    }

    public int getActionValue() {
      return this.actionValue;
    }

    public freeze_args setActionValue(int actionValue) {
      this.actionValue = actionValue;
      setActionValueIsSet(true);
      return this;
    }

    public void unsetActionValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONVALUE_ISSET_ID);
    }

    /** Returns true if field actionValue is set (has been assigned a value) and false otherwise */
    public boolean isSetActionValue() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTIONVALUE_ISSET_ID);
    }

    public void setActionValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONVALUE_ISSET_ID, value);
    }

    public String getActionDesc() {
      return this.actionDesc;
    }

    public freeze_args setActionDesc(String actionDesc) {
      this.actionDesc = actionDesc;
      return this;
    }

    public void unsetActionDesc() {
      this.actionDesc = null;
    }

    /** Returns true if field actionDesc is set (has been assigned a value) and false otherwise */
    public boolean isSetActionDesc() {
      return this.actionDesc != null;
    }

    public void setActionDescIsSet(boolean value) {
      if (!value) {
        this.actionDesc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM_VIEW:
        if (value == null) {
          unsetItemView();
        } else {
          setItemView((one.show.pay.thrift.view.ItemView)value);
        }
        break;

      case ACTION_VALUE:
        if (value == null) {
          unsetActionValue();
        } else {
          setActionValue((Integer)value);
        }
        break;

      case ACTION_DESC:
        if (value == null) {
          unsetActionDesc();
        } else {
          setActionDesc((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM_VIEW:
        return getItemView();

      case ACTION_VALUE:
        return Integer.valueOf(getActionValue());

      case ACTION_DESC:
        return getActionDesc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM_VIEW:
        return isSetItemView();
      case ACTION_VALUE:
        return isSetActionValue();
      case ACTION_DESC:
        return isSetActionDesc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof freeze_args)
        return this.equals((freeze_args)that);
      return false;
    }

    public boolean equals(freeze_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_itemView = true && this.isSetItemView();
      boolean that_present_itemView = true && that.isSetItemView();
      if (this_present_itemView || that_present_itemView) {
        if (!(this_present_itemView && that_present_itemView))
          return false;
        if (!this.itemView.equals(that.itemView))
          return false;
      }

      boolean this_present_actionValue = true;
      boolean that_present_actionValue = true;
      if (this_present_actionValue || that_present_actionValue) {
        if (!(this_present_actionValue && that_present_actionValue))
          return false;
        if (this.actionValue != that.actionValue)
          return false;
      }

      boolean this_present_actionDesc = true && this.isSetActionDesc();
      boolean that_present_actionDesc = true && that.isSetActionDesc();
      if (this_present_actionDesc || that_present_actionDesc) {
        if (!(this_present_actionDesc && that_present_actionDesc))
          return false;
        if (!this.actionDesc.equals(that.actionDesc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(freeze_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      freeze_args typedOther = (freeze_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemView()).compareTo(typedOther.isSetItemView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemView, typedOther.itemView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionValue()).compareTo(typedOther.isSetActionValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionValue, typedOther.actionValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionDesc()).compareTo(typedOther.isSetActionDesc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionDesc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDesc, typedOther.actionDesc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("freeze_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemView:");
      if (this.itemView == null) {
        sb.append("null");
      } else {
        sb.append(this.itemView);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionValue:");
      sb.append(this.actionValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionDesc:");
      if (this.actionDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.actionDesc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (itemView != null) {
        itemView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class freeze_argsStandardSchemeFactory implements SchemeFactory {
      public freeze_argsStandardScheme getScheme() {
        return new freeze_argsStandardScheme();
      }
    }

    private static class freeze_argsStandardScheme extends StandardScheme<freeze_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, freeze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemView = new one.show.pay.thrift.view.ItemView();
                struct.itemView.read(iprot);
                struct.setItemViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.actionValue = iprot.readI32();
                struct.setActionValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION_DESC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actionDesc = iprot.readString();
                struct.setActionDescIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, freeze_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.itemView != null) {
          oprot.writeFieldBegin(ITEM_VIEW_FIELD_DESC);
          struct.itemView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACTION_VALUE_FIELD_DESC);
        oprot.writeI32(struct.actionValue);
        oprot.writeFieldEnd();
        if (struct.actionDesc != null) {
          oprot.writeFieldBegin(ACTION_DESC_FIELD_DESC);
          oprot.writeString(struct.actionDesc);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class freeze_argsTupleSchemeFactory implements SchemeFactory {
      public freeze_argsTupleScheme getScheme() {
        return new freeze_argsTupleScheme();
      }
    }

    private static class freeze_argsTupleScheme extends TupleScheme<freeze_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, freeze_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItemView()) {
          optionals.set(1);
        }
        if (struct.isSetActionValue()) {
          optionals.set(2);
        }
        if (struct.isSetActionDesc()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItemView()) {
          struct.itemView.write(oprot);
        }
        if (struct.isSetActionValue()) {
          oprot.writeI32(struct.actionValue);
        }
        if (struct.isSetActionDesc()) {
          oprot.writeString(struct.actionDesc);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, freeze_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemView = new one.show.pay.thrift.view.ItemView();
          struct.itemView.read(iprot);
          struct.setItemViewIsSet(true);
        }
        if (incoming.get(2)) {
          struct.actionValue = iprot.readI32();
          struct.setActionValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.actionDesc = iprot.readString();
          struct.setActionDescIsSet(true);
        }
      }
    }

  }

  public static class freeze_result implements org.apache.thrift.TBase<freeze_result, freeze_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("freeze_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new freeze_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new freeze_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freeze_result.class, metaDataMap);
    }

    public freeze_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public freeze_result(freeze_result other) {
    }

    public freeze_result deepCopy() {
      return new freeze_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof freeze_result)
        return this.equals((freeze_result)that);
      return false;
    }

    public boolean equals(freeze_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(freeze_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      freeze_result typedOther = (freeze_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("freeze_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class freeze_resultStandardSchemeFactory implements SchemeFactory {
      public freeze_resultStandardScheme getScheme() {
        return new freeze_resultStandardScheme();
      }
    }

    private static class freeze_resultStandardScheme extends StandardScheme<freeze_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, freeze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, freeze_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class freeze_resultTupleSchemeFactory implements SchemeFactory {
      public freeze_resultTupleScheme getScheme() {
        return new freeze_resultTupleScheme();
      }
    }

    private static class freeze_resultTupleScheme extends TupleScheme<freeze_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, freeze_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, freeze_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class unfreeze_args implements org.apache.thrift.TBase<unfreeze_args, unfreeze_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unfreeze_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("itemView", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionValue", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDesc", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unfreeze_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unfreeze_argsTupleSchemeFactory());
    }

    public long uid; // required
    public one.show.pay.thrift.view.ItemView itemView; // required
    public int actionValue; // required
    public String actionDesc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM_VIEW((short)2, "itemView"),
      ACTION_VALUE((short)3, "actionValue"),
      ACTION_DESC((short)4, "actionDesc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM_VIEW
            return ITEM_VIEW;
          case 3: // ACTION_VALUE
            return ACTION_VALUE;
          case 4: // ACTION_DESC
            return ACTION_DESC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __ACTIONVALUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_VIEW, new org.apache.thrift.meta_data.FieldMetaData("itemView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ItemView.class)));
      tmpMap.put(_Fields.ACTION_VALUE, new org.apache.thrift.meta_data.FieldMetaData("actionValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACTION_DESC, new org.apache.thrift.meta_data.FieldMetaData("actionDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unfreeze_args.class, metaDataMap);
    }

    public unfreeze_args() {
    }

    public unfreeze_args(
      long uid,
      one.show.pay.thrift.view.ItemView itemView,
      int actionValue,
      String actionDesc)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.itemView = itemView;
      this.actionValue = actionValue;
      setActionValueIsSet(true);
      this.actionDesc = actionDesc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unfreeze_args(unfreeze_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetItemView()) {
        this.itemView = new one.show.pay.thrift.view.ItemView(other.itemView);
      }
      this.actionValue = other.actionValue;
      if (other.isSetActionDesc()) {
        this.actionDesc = other.actionDesc;
      }
    }

    public unfreeze_args deepCopy() {
      return new unfreeze_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.itemView = null;
      setActionValueIsSet(false);
      this.actionValue = 0;
      this.actionDesc = null;
    }

    public long getUid() {
      return this.uid;
    }

    public unfreeze_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public one.show.pay.thrift.view.ItemView getItemView() {
      return this.itemView;
    }

    public unfreeze_args setItemView(one.show.pay.thrift.view.ItemView itemView) {
      this.itemView = itemView;
      return this;
    }

    public void unsetItemView() {
      this.itemView = null;
    }

    /** Returns true if field itemView is set (has been assigned a value) and false otherwise */
    public boolean isSetItemView() {
      return this.itemView != null;
    }

    public void setItemViewIsSet(boolean value) {
      if (!value) {
        this.itemView = null;
      }
    }

    public int getActionValue() {
      return this.actionValue;
    }

    public unfreeze_args setActionValue(int actionValue) {
      this.actionValue = actionValue;
      setActionValueIsSet(true);
      return this;
    }

    public void unsetActionValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONVALUE_ISSET_ID);
    }

    /** Returns true if field actionValue is set (has been assigned a value) and false otherwise */
    public boolean isSetActionValue() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTIONVALUE_ISSET_ID);
    }

    public void setActionValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONVALUE_ISSET_ID, value);
    }

    public String getActionDesc() {
      return this.actionDesc;
    }

    public unfreeze_args setActionDesc(String actionDesc) {
      this.actionDesc = actionDesc;
      return this;
    }

    public void unsetActionDesc() {
      this.actionDesc = null;
    }

    /** Returns true if field actionDesc is set (has been assigned a value) and false otherwise */
    public boolean isSetActionDesc() {
      return this.actionDesc != null;
    }

    public void setActionDescIsSet(boolean value) {
      if (!value) {
        this.actionDesc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM_VIEW:
        if (value == null) {
          unsetItemView();
        } else {
          setItemView((one.show.pay.thrift.view.ItemView)value);
        }
        break;

      case ACTION_VALUE:
        if (value == null) {
          unsetActionValue();
        } else {
          setActionValue((Integer)value);
        }
        break;

      case ACTION_DESC:
        if (value == null) {
          unsetActionDesc();
        } else {
          setActionDesc((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM_VIEW:
        return getItemView();

      case ACTION_VALUE:
        return Integer.valueOf(getActionValue());

      case ACTION_DESC:
        return getActionDesc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM_VIEW:
        return isSetItemView();
      case ACTION_VALUE:
        return isSetActionValue();
      case ACTION_DESC:
        return isSetActionDesc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unfreeze_args)
        return this.equals((unfreeze_args)that);
      return false;
    }

    public boolean equals(unfreeze_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_itemView = true && this.isSetItemView();
      boolean that_present_itemView = true && that.isSetItemView();
      if (this_present_itemView || that_present_itemView) {
        if (!(this_present_itemView && that_present_itemView))
          return false;
        if (!this.itemView.equals(that.itemView))
          return false;
      }

      boolean this_present_actionValue = true;
      boolean that_present_actionValue = true;
      if (this_present_actionValue || that_present_actionValue) {
        if (!(this_present_actionValue && that_present_actionValue))
          return false;
        if (this.actionValue != that.actionValue)
          return false;
      }

      boolean this_present_actionDesc = true && this.isSetActionDesc();
      boolean that_present_actionDesc = true && that.isSetActionDesc();
      if (this_present_actionDesc || that_present_actionDesc) {
        if (!(this_present_actionDesc && that_present_actionDesc))
          return false;
        if (!this.actionDesc.equals(that.actionDesc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unfreeze_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unfreeze_args typedOther = (unfreeze_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemView()).compareTo(typedOther.isSetItemView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemView, typedOther.itemView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionValue()).compareTo(typedOther.isSetActionValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionValue, typedOther.actionValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionDesc()).compareTo(typedOther.isSetActionDesc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionDesc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDesc, typedOther.actionDesc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unfreeze_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemView:");
      if (this.itemView == null) {
        sb.append("null");
      } else {
        sb.append(this.itemView);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionValue:");
      sb.append(this.actionValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionDesc:");
      if (this.actionDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.actionDesc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (itemView != null) {
        itemView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unfreeze_argsStandardSchemeFactory implements SchemeFactory {
      public unfreeze_argsStandardScheme getScheme() {
        return new unfreeze_argsStandardScheme();
      }
    }

    private static class unfreeze_argsStandardScheme extends StandardScheme<unfreeze_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unfreeze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemView = new one.show.pay.thrift.view.ItemView();
                struct.itemView.read(iprot);
                struct.setItemViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.actionValue = iprot.readI32();
                struct.setActionValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION_DESC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actionDesc = iprot.readString();
                struct.setActionDescIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unfreeze_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.itemView != null) {
          oprot.writeFieldBegin(ITEM_VIEW_FIELD_DESC);
          struct.itemView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACTION_VALUE_FIELD_DESC);
        oprot.writeI32(struct.actionValue);
        oprot.writeFieldEnd();
        if (struct.actionDesc != null) {
          oprot.writeFieldBegin(ACTION_DESC_FIELD_DESC);
          oprot.writeString(struct.actionDesc);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unfreeze_argsTupleSchemeFactory implements SchemeFactory {
      public unfreeze_argsTupleScheme getScheme() {
        return new unfreeze_argsTupleScheme();
      }
    }

    private static class unfreeze_argsTupleScheme extends TupleScheme<unfreeze_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unfreeze_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItemView()) {
          optionals.set(1);
        }
        if (struct.isSetActionValue()) {
          optionals.set(2);
        }
        if (struct.isSetActionDesc()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItemView()) {
          struct.itemView.write(oprot);
        }
        if (struct.isSetActionValue()) {
          oprot.writeI32(struct.actionValue);
        }
        if (struct.isSetActionDesc()) {
          oprot.writeString(struct.actionDesc);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unfreeze_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemView = new one.show.pay.thrift.view.ItemView();
          struct.itemView.read(iprot);
          struct.setItemViewIsSet(true);
        }
        if (incoming.get(2)) {
          struct.actionValue = iprot.readI32();
          struct.setActionValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.actionDesc = iprot.readString();
          struct.setActionDescIsSet(true);
        }
      }
    }

  }

  public static class unfreeze_result implements org.apache.thrift.TBase<unfreeze_result, unfreeze_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unfreeze_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unfreeze_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unfreeze_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unfreeze_result.class, metaDataMap);
    }

    public unfreeze_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unfreeze_result(unfreeze_result other) {
    }

    public unfreeze_result deepCopy() {
      return new unfreeze_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unfreeze_result)
        return this.equals((unfreeze_result)that);
      return false;
    }

    public boolean equals(unfreeze_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unfreeze_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unfreeze_result typedOther = (unfreeze_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unfreeze_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unfreeze_resultStandardSchemeFactory implements SchemeFactory {
      public unfreeze_resultStandardScheme getScheme() {
        return new unfreeze_resultStandardScheme();
      }
    }

    private static class unfreeze_resultStandardScheme extends StandardScheme<unfreeze_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unfreeze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unfreeze_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unfreeze_resultTupleSchemeFactory implements SchemeFactory {
      public unfreeze_resultTupleScheme getScheme() {
        return new unfreeze_resultTupleScheme();
      }
    }

    private static class unfreeze_resultTupleScheme extends TupleScheme<unfreeze_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unfreeze_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unfreeze_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class reduce_args implements org.apache.thrift.TBase<reduce_args, reduce_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduce_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDesc", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reduce_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reduce_argsTupleSchemeFactory());
    }

    public long uid; // required
    public one.show.pay.thrift.view.ItemView item; // required
    public int actionId; // required
    public String actionDesc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      ITEM((short)2, "item"),
      ACTION_ID((short)3, "actionId"),
      ACTION_DESC((short)5, "actionDesc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // ITEM
            return ITEM;
          case 3: // ACTION_ID
            return ACTION_ID;
          case 5: // ACTION_DESC
            return ACTION_DESC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __ACTIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.ItemView.class)));
      tmpMap.put(_Fields.ACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("actionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACTION_DESC, new org.apache.thrift.meta_data.FieldMetaData("actionDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduce_args.class, metaDataMap);
    }

    public reduce_args() {
    }

    public reduce_args(
      long uid,
      one.show.pay.thrift.view.ItemView item,
      int actionId,
      String actionDesc)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.item = item;
      this.actionId = actionId;
      setActionIdIsSet(true);
      this.actionDesc = actionDesc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reduce_args(reduce_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetItem()) {
        this.item = new one.show.pay.thrift.view.ItemView(other.item);
      }
      this.actionId = other.actionId;
      if (other.isSetActionDesc()) {
        this.actionDesc = other.actionDesc;
      }
    }

    public reduce_args deepCopy() {
      return new reduce_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.item = null;
      setActionIdIsSet(false);
      this.actionId = 0;
      this.actionDesc = null;
    }

    public long getUid() {
      return this.uid;
    }

    public reduce_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public one.show.pay.thrift.view.ItemView getItem() {
      return this.item;
    }

    public reduce_args setItem(one.show.pay.thrift.view.ItemView item) {
      this.item = item;
      return this;
    }

    public void unsetItem() {
      this.item = null;
    }

    /** Returns true if field item is set (has been assigned a value) and false otherwise */
    public boolean isSetItem() {
      return this.item != null;
    }

    public void setItemIsSet(boolean value) {
      if (!value) {
        this.item = null;
      }
    }

    public int getActionId() {
      return this.actionId;
    }

    public reduce_args setActionId(int actionId) {
      this.actionId = actionId;
      setActionIdIsSet(true);
      return this;
    }

    public void unsetActionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONID_ISSET_ID);
    }

    /** Returns true if field actionId is set (has been assigned a value) and false otherwise */
    public boolean isSetActionId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTIONID_ISSET_ID);
    }

    public void setActionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONID_ISSET_ID, value);
    }

    public String getActionDesc() {
      return this.actionDesc;
    }

    public reduce_args setActionDesc(String actionDesc) {
      this.actionDesc = actionDesc;
      return this;
    }

    public void unsetActionDesc() {
      this.actionDesc = null;
    }

    /** Returns true if field actionDesc is set (has been assigned a value) and false otherwise */
    public boolean isSetActionDesc() {
      return this.actionDesc != null;
    }

    public void setActionDescIsSet(boolean value) {
      if (!value) {
        this.actionDesc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case ITEM:
        if (value == null) {
          unsetItem();
        } else {
          setItem((one.show.pay.thrift.view.ItemView)value);
        }
        break;

      case ACTION_ID:
        if (value == null) {
          unsetActionId();
        } else {
          setActionId((Integer)value);
        }
        break;

      case ACTION_DESC:
        if (value == null) {
          unsetActionDesc();
        } else {
          setActionDesc((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Long.valueOf(getUid());

      case ITEM:
        return getItem();

      case ACTION_ID:
        return Integer.valueOf(getActionId());

      case ACTION_DESC:
        return getActionDesc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case ITEM:
        return isSetItem();
      case ACTION_ID:
        return isSetActionId();
      case ACTION_DESC:
        return isSetActionDesc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reduce_args)
        return this.equals((reduce_args)that);
      return false;
    }

    public boolean equals(reduce_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_item = true && this.isSetItem();
      boolean that_present_item = true && that.isSetItem();
      if (this_present_item || that_present_item) {
        if (!(this_present_item && that_present_item))
          return false;
        if (!this.item.equals(that.item))
          return false;
      }

      boolean this_present_actionId = true;
      boolean that_present_actionId = true;
      if (this_present_actionId || that_present_actionId) {
        if (!(this_present_actionId && that_present_actionId))
          return false;
        if (this.actionId != that.actionId)
          return false;
      }

      boolean this_present_actionDesc = true && this.isSetActionDesc();
      boolean that_present_actionDesc = true && that.isSetActionDesc();
      if (this_present_actionDesc || that_present_actionDesc) {
        if (!(this_present_actionDesc && that_present_actionDesc))
          return false;
        if (!this.actionDesc.equals(that.actionDesc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reduce_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reduce_args typedOther = (reduce_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem()).compareTo(typedOther.isSetItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, typedOther.item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionId()).compareTo(typedOther.isSetActionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionId, typedOther.actionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActionDesc()).compareTo(typedOther.isSetActionDesc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionDesc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDesc, typedOther.actionDesc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reduce_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("item:");
      if (this.item == null) {
        sb.append("null");
      } else {
        sb.append(this.item);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionId:");
      sb.append(this.actionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionDesc:");
      if (this.actionDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.actionDesc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (item != null) {
        item.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reduce_argsStandardSchemeFactory implements SchemeFactory {
      public reduce_argsStandardScheme getScheme() {
        return new reduce_argsStandardScheme();
      }
    }

    private static class reduce_argsStandardScheme extends StandardScheme<reduce_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reduce_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.item = new one.show.pay.thrift.view.ItemView();
                struct.item.read(iprot);
                struct.setItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.actionId = iprot.readI32();
                struct.setActionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ACTION_DESC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.actionDesc = iprot.readString();
                struct.setActionDescIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reduce_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.item != null) {
          oprot.writeFieldBegin(ITEM_FIELD_DESC);
          struct.item.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACTION_ID_FIELD_DESC);
        oprot.writeI32(struct.actionId);
        oprot.writeFieldEnd();
        if (struct.actionDesc != null) {
          oprot.writeFieldBegin(ACTION_DESC_FIELD_DESC);
          oprot.writeString(struct.actionDesc);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reduce_argsTupleSchemeFactory implements SchemeFactory {
      public reduce_argsTupleScheme getScheme() {
        return new reduce_argsTupleScheme();
      }
    }

    private static class reduce_argsTupleScheme extends TupleScheme<reduce_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reduce_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetItem()) {
          optionals.set(1);
        }
        if (struct.isSetActionId()) {
          optionals.set(2);
        }
        if (struct.isSetActionDesc()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetItem()) {
          struct.item.write(oprot);
        }
        if (struct.isSetActionId()) {
          oprot.writeI32(struct.actionId);
        }
        if (struct.isSetActionDesc()) {
          oprot.writeString(struct.actionDesc);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reduce_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item = new one.show.pay.thrift.view.ItemView();
          struct.item.read(iprot);
          struct.setItemIsSet(true);
        }
        if (incoming.get(2)) {
          struct.actionId = iprot.readI32();
          struct.setActionIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.actionDesc = iprot.readString();
          struct.setActionDescIsSet(true);
        }
      }
    }

  }

  public static class reduce_result implements org.apache.thrift.TBase<reduce_result, reduce_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reduce_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reduce_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reduce_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reduce_result.class, metaDataMap);
    }

    public reduce_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reduce_result(reduce_result other) {
    }

    public reduce_result deepCopy() {
      return new reduce_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reduce_result)
        return this.equals((reduce_result)that);
      return false;
    }

    public boolean equals(reduce_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reduce_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reduce_result typedOther = (reduce_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reduce_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reduce_resultStandardSchemeFactory implements SchemeFactory {
      public reduce_resultStandardScheme getScheme() {
        return new reduce_resultStandardScheme();
      }
    }

    private static class reduce_resultStandardScheme extends StandardScheme<reduce_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reduce_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reduce_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reduce_resultTupleSchemeFactory implements SchemeFactory {
      public reduce_resultTupleScheme getScheme() {
        return new reduce_resultTupleScheme();
      }
    }

    private static class reduce_resultTupleScheme extends TupleScheme<reduce_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reduce_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reduce_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getExtractRmbTotalCount_args implements org.apache.thrift.TBase<getExtractRmbTotalCount_args, getExtractRmbTotalCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbTotalCount_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbTotalCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbTotalCount_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbTotalCount_args.class, metaDataMap);
    }

    public getExtractRmbTotalCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbTotalCount_args(getExtractRmbTotalCount_args other) {
    }

    public getExtractRmbTotalCount_args deepCopy() {
      return new getExtractRmbTotalCount_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbTotalCount_args)
        return this.equals((getExtractRmbTotalCount_args)that);
      return false;
    }

    public boolean equals(getExtractRmbTotalCount_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbTotalCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbTotalCount_args typedOther = (getExtractRmbTotalCount_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbTotalCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbTotalCount_argsStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbTotalCount_argsStandardScheme getScheme() {
        return new getExtractRmbTotalCount_argsStandardScheme();
      }
    }

    private static class getExtractRmbTotalCount_argsStandardScheme extends StandardScheme<getExtractRmbTotalCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbTotalCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbTotalCount_argsTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbTotalCount_argsTupleScheme getScheme() {
        return new getExtractRmbTotalCount_argsTupleScheme();
      }
    }

    private static class getExtractRmbTotalCount_argsTupleScheme extends TupleScheme<getExtractRmbTotalCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbTotalCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbTotalCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getExtractRmbTotalCount_result implements org.apache.thrift.TBase<getExtractRmbTotalCount_result, getExtractRmbTotalCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtractRmbTotalCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtractRmbTotalCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtractRmbTotalCount_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtractRmbTotalCount_result.class, metaDataMap);
    }

    public getExtractRmbTotalCount_result() {
    }

    public getExtractRmbTotalCount_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtractRmbTotalCount_result(getExtractRmbTotalCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getExtractRmbTotalCount_result deepCopy() {
      return new getExtractRmbTotalCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getExtractRmbTotalCount_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtractRmbTotalCount_result)
        return this.equals((getExtractRmbTotalCount_result)that);
      return false;
    }

    public boolean equals(getExtractRmbTotalCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtractRmbTotalCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtractRmbTotalCount_result typedOther = (getExtractRmbTotalCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtractRmbTotalCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtractRmbTotalCount_resultStandardSchemeFactory implements SchemeFactory {
      public getExtractRmbTotalCount_resultStandardScheme getScheme() {
        return new getExtractRmbTotalCount_resultStandardScheme();
      }
    }

    private static class getExtractRmbTotalCount_resultStandardScheme extends StandardScheme<getExtractRmbTotalCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtractRmbTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtractRmbTotalCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtractRmbTotalCount_resultTupleSchemeFactory implements SchemeFactory {
      public getExtractRmbTotalCount_resultTupleScheme getScheme() {
        return new getExtractRmbTotalCount_resultTupleScheme();
      }
    }

    private static class getExtractRmbTotalCount_resultTupleScheme extends TupleScheme<getExtractRmbTotalCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtractRmbTotalCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtractRmbTotalCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveFamilyClearing_args implements org.apache.thrift.TBase<saveFamilyClearing_args, saveFamilyClearing_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFamilyClearing_args");

    private static final org.apache.thrift.protocol.TField FAMILY_CLEARING_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("familyClearingView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFamilyClearing_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFamilyClearing_argsTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.FamilyClearingView familyClearingView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_CLEARING_VIEW((short)1, "familyClearingView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_CLEARING_VIEW
            return FAMILY_CLEARING_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_CLEARING_VIEW, new org.apache.thrift.meta_data.FieldMetaData("familyClearingView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.FamilyClearingView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFamilyClearing_args.class, metaDataMap);
    }

    public saveFamilyClearing_args() {
    }

    public saveFamilyClearing_args(
      one.show.pay.thrift.view.FamilyClearingView familyClearingView)
    {
      this();
      this.familyClearingView = familyClearingView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFamilyClearing_args(saveFamilyClearing_args other) {
      if (other.isSetFamilyClearingView()) {
        this.familyClearingView = new one.show.pay.thrift.view.FamilyClearingView(other.familyClearingView);
      }
    }

    public saveFamilyClearing_args deepCopy() {
      return new saveFamilyClearing_args(this);
    }

    @Override
    public void clear() {
      this.familyClearingView = null;
    }

    public one.show.pay.thrift.view.FamilyClearingView getFamilyClearingView() {
      return this.familyClearingView;
    }

    public saveFamilyClearing_args setFamilyClearingView(one.show.pay.thrift.view.FamilyClearingView familyClearingView) {
      this.familyClearingView = familyClearingView;
      return this;
    }

    public void unsetFamilyClearingView() {
      this.familyClearingView = null;
    }

    /** Returns true if field familyClearingView is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyClearingView() {
      return this.familyClearingView != null;
    }

    public void setFamilyClearingViewIsSet(boolean value) {
      if (!value) {
        this.familyClearingView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_CLEARING_VIEW:
        if (value == null) {
          unsetFamilyClearingView();
        } else {
          setFamilyClearingView((one.show.pay.thrift.view.FamilyClearingView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_CLEARING_VIEW:
        return getFamilyClearingView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_CLEARING_VIEW:
        return isSetFamilyClearingView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFamilyClearing_args)
        return this.equals((saveFamilyClearing_args)that);
      return false;
    }

    public boolean equals(saveFamilyClearing_args that) {
      if (that == null)
        return false;

      boolean this_present_familyClearingView = true && this.isSetFamilyClearingView();
      boolean that_present_familyClearingView = true && that.isSetFamilyClearingView();
      if (this_present_familyClearingView || that_present_familyClearingView) {
        if (!(this_present_familyClearingView && that_present_familyClearingView))
          return false;
        if (!this.familyClearingView.equals(that.familyClearingView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFamilyClearing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFamilyClearing_args typedOther = (saveFamilyClearing_args)other;

      lastComparison = Boolean.valueOf(isSetFamilyClearingView()).compareTo(typedOther.isSetFamilyClearingView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyClearingView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyClearingView, typedOther.familyClearingView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFamilyClearing_args(");
      boolean first = true;

      sb.append("familyClearingView:");
      if (this.familyClearingView == null) {
        sb.append("null");
      } else {
        sb.append(this.familyClearingView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (familyClearingView != null) {
        familyClearingView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFamilyClearing_argsStandardSchemeFactory implements SchemeFactory {
      public saveFamilyClearing_argsStandardScheme getScheme() {
        return new saveFamilyClearing_argsStandardScheme();
      }
    }

    private static class saveFamilyClearing_argsStandardScheme extends StandardScheme<saveFamilyClearing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFamilyClearing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_CLEARING_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.familyClearingView = new one.show.pay.thrift.view.FamilyClearingView();
                struct.familyClearingView.read(iprot);
                struct.setFamilyClearingViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFamilyClearing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.familyClearingView != null) {
          oprot.writeFieldBegin(FAMILY_CLEARING_VIEW_FIELD_DESC);
          struct.familyClearingView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFamilyClearing_argsTupleSchemeFactory implements SchemeFactory {
      public saveFamilyClearing_argsTupleScheme getScheme() {
        return new saveFamilyClearing_argsTupleScheme();
      }
    }

    private static class saveFamilyClearing_argsTupleScheme extends TupleScheme<saveFamilyClearing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFamilyClearing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFamilyClearingView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFamilyClearingView()) {
          struct.familyClearingView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFamilyClearing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.familyClearingView = new one.show.pay.thrift.view.FamilyClearingView();
          struct.familyClearingView.read(iprot);
          struct.setFamilyClearingViewIsSet(true);
        }
      }
    }

  }

  public static class saveFamilyClearing_result implements org.apache.thrift.TBase<saveFamilyClearing_result, saveFamilyClearing_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFamilyClearing_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFamilyClearing_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFamilyClearing_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFamilyClearing_result.class, metaDataMap);
    }

    public saveFamilyClearing_result() {
    }

    public saveFamilyClearing_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFamilyClearing_result(saveFamilyClearing_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveFamilyClearing_result deepCopy() {
      return new saveFamilyClearing_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveFamilyClearing_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFamilyClearing_result)
        return this.equals((saveFamilyClearing_result)that);
      return false;
    }

    public boolean equals(saveFamilyClearing_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFamilyClearing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFamilyClearing_result typedOther = (saveFamilyClearing_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFamilyClearing_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFamilyClearing_resultStandardSchemeFactory implements SchemeFactory {
      public saveFamilyClearing_resultStandardScheme getScheme() {
        return new saveFamilyClearing_resultStandardScheme();
      }
    }

    private static class saveFamilyClearing_resultStandardScheme extends StandardScheme<saveFamilyClearing_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFamilyClearing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFamilyClearing_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFamilyClearing_resultTupleSchemeFactory implements SchemeFactory {
      public saveFamilyClearing_resultTupleScheme getScheme() {
        return new saveFamilyClearing_resultTupleScheme();
      }
    }

    private static class saveFamilyClearing_resultTupleScheme extends TupleScheme<saveFamilyClearing_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFamilyClearing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFamilyClearing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveFamilyMemberClearing_args implements org.apache.thrift.TBase<saveFamilyMemberClearing_args, saveFamilyMemberClearing_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFamilyMemberClearing_args");

    private static final org.apache.thrift.protocol.TField FAMILY_MEMBER_CLEARING_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("familyMemberClearingView", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFamilyMemberClearing_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFamilyMemberClearing_argsTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAMILY_MEMBER_CLEARING_VIEW((short)1, "familyMemberClearingView");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAMILY_MEMBER_CLEARING_VIEW
            return FAMILY_MEMBER_CLEARING_VIEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAMILY_MEMBER_CLEARING_VIEW, new org.apache.thrift.meta_data.FieldMetaData("familyMemberClearingView", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.FamilyMemberClearingView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFamilyMemberClearing_args.class, metaDataMap);
    }

    public saveFamilyMemberClearing_args() {
    }

    public saveFamilyMemberClearing_args(
      one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView)
    {
      this();
      this.familyMemberClearingView = familyMemberClearingView;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFamilyMemberClearing_args(saveFamilyMemberClearing_args other) {
      if (other.isSetFamilyMemberClearingView()) {
        this.familyMemberClearingView = new one.show.pay.thrift.view.FamilyMemberClearingView(other.familyMemberClearingView);
      }
    }

    public saveFamilyMemberClearing_args deepCopy() {
      return new saveFamilyMemberClearing_args(this);
    }

    @Override
    public void clear() {
      this.familyMemberClearingView = null;
    }

    public one.show.pay.thrift.view.FamilyMemberClearingView getFamilyMemberClearingView() {
      return this.familyMemberClearingView;
    }

    public saveFamilyMemberClearing_args setFamilyMemberClearingView(one.show.pay.thrift.view.FamilyMemberClearingView familyMemberClearingView) {
      this.familyMemberClearingView = familyMemberClearingView;
      return this;
    }

    public void unsetFamilyMemberClearingView() {
      this.familyMemberClearingView = null;
    }

    /** Returns true if field familyMemberClearingView is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyMemberClearingView() {
      return this.familyMemberClearingView != null;
    }

    public void setFamilyMemberClearingViewIsSet(boolean value) {
      if (!value) {
        this.familyMemberClearingView = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAMILY_MEMBER_CLEARING_VIEW:
        if (value == null) {
          unsetFamilyMemberClearingView();
        } else {
          setFamilyMemberClearingView((one.show.pay.thrift.view.FamilyMemberClearingView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAMILY_MEMBER_CLEARING_VIEW:
        return getFamilyMemberClearingView();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAMILY_MEMBER_CLEARING_VIEW:
        return isSetFamilyMemberClearingView();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFamilyMemberClearing_args)
        return this.equals((saveFamilyMemberClearing_args)that);
      return false;
    }

    public boolean equals(saveFamilyMemberClearing_args that) {
      if (that == null)
        return false;

      boolean this_present_familyMemberClearingView = true && this.isSetFamilyMemberClearingView();
      boolean that_present_familyMemberClearingView = true && that.isSetFamilyMemberClearingView();
      if (this_present_familyMemberClearingView || that_present_familyMemberClearingView) {
        if (!(this_present_familyMemberClearingView && that_present_familyMemberClearingView))
          return false;
        if (!this.familyMemberClearingView.equals(that.familyMemberClearingView))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFamilyMemberClearing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFamilyMemberClearing_args typedOther = (saveFamilyMemberClearing_args)other;

      lastComparison = Boolean.valueOf(isSetFamilyMemberClearingView()).compareTo(typedOther.isSetFamilyMemberClearingView());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyMemberClearingView()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyMemberClearingView, typedOther.familyMemberClearingView);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFamilyMemberClearing_args(");
      boolean first = true;

      sb.append("familyMemberClearingView:");
      if (this.familyMemberClearingView == null) {
        sb.append("null");
      } else {
        sb.append(this.familyMemberClearingView);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (familyMemberClearingView != null) {
        familyMemberClearingView.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFamilyMemberClearing_argsStandardSchemeFactory implements SchemeFactory {
      public saveFamilyMemberClearing_argsStandardScheme getScheme() {
        return new saveFamilyMemberClearing_argsStandardScheme();
      }
    }

    private static class saveFamilyMemberClearing_argsStandardScheme extends StandardScheme<saveFamilyMemberClearing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFamilyMemberClearing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAMILY_MEMBER_CLEARING_VIEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.familyMemberClearingView = new one.show.pay.thrift.view.FamilyMemberClearingView();
                struct.familyMemberClearingView.read(iprot);
                struct.setFamilyMemberClearingViewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFamilyMemberClearing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.familyMemberClearingView != null) {
          oprot.writeFieldBegin(FAMILY_MEMBER_CLEARING_VIEW_FIELD_DESC);
          struct.familyMemberClearingView.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFamilyMemberClearing_argsTupleSchemeFactory implements SchemeFactory {
      public saveFamilyMemberClearing_argsTupleScheme getScheme() {
        return new saveFamilyMemberClearing_argsTupleScheme();
      }
    }

    private static class saveFamilyMemberClearing_argsTupleScheme extends TupleScheme<saveFamilyMemberClearing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFamilyMemberClearing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFamilyMemberClearingView()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFamilyMemberClearingView()) {
          struct.familyMemberClearingView.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFamilyMemberClearing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.familyMemberClearingView = new one.show.pay.thrift.view.FamilyMemberClearingView();
          struct.familyMemberClearingView.read(iprot);
          struct.setFamilyMemberClearingViewIsSet(true);
        }
      }
    }

  }

  public static class saveFamilyMemberClearing_result implements org.apache.thrift.TBase<saveFamilyMemberClearing_result, saveFamilyMemberClearing_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFamilyMemberClearing_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFamilyMemberClearing_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFamilyMemberClearing_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFamilyMemberClearing_result.class, metaDataMap);
    }

    public saveFamilyMemberClearing_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFamilyMemberClearing_result(saveFamilyMemberClearing_result other) {
    }

    public saveFamilyMemberClearing_result deepCopy() {
      return new saveFamilyMemberClearing_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFamilyMemberClearing_result)
        return this.equals((saveFamilyMemberClearing_result)that);
      return false;
    }

    public boolean equals(saveFamilyMemberClearing_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveFamilyMemberClearing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveFamilyMemberClearing_result typedOther = (saveFamilyMemberClearing_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFamilyMemberClearing_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFamilyMemberClearing_resultStandardSchemeFactory implements SchemeFactory {
      public saveFamilyMemberClearing_resultStandardScheme getScheme() {
        return new saveFamilyMemberClearing_resultStandardScheme();
      }
    }

    private static class saveFamilyMemberClearing_resultStandardScheme extends StandardScheme<saveFamilyMemberClearing_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFamilyMemberClearing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFamilyMemberClearing_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFamilyMemberClearing_resultTupleSchemeFactory implements SchemeFactory {
      public saveFamilyMemberClearing_resultTupleScheme getScheme() {
        return new saveFamilyMemberClearing_resultTupleScheme();
      }
    }

    private static class saveFamilyMemberClearing_resultTupleScheme extends TupleScheme<saveFamilyMemberClearing_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFamilyMemberClearing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFamilyMemberClearing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findFamilyClearingList_args implements org.apache.thrift.TBase<findFamilyClearingList_args, findFamilyClearingList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyClearingList_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyClearingList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyClearingList_argsTupleSchemeFactory());
    }

    public Map<String,String> params; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      START((short)2, "start"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // START
            return START;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyClearingList_args.class, metaDataMap);
    }

    public findFamilyClearingList_args() {
    }

    public findFamilyClearingList_args(
      Map<String,String> params,
      int start,
      int count)
    {
      this();
      this.params = params;
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyClearingList_args(findFamilyClearingList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetParams()) {
        Map<String,String> __this__params = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.params.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__params_copy_key = other_element_key;

          String __this__params_copy_value = other_element_value;

          __this__params.put(__this__params_copy_key, __this__params_copy_value);
        }
        this.params = __this__params;
      }
      this.start = other.start;
      this.count = other.count;
    }

    public findFamilyClearingList_args deepCopy() {
      return new findFamilyClearingList_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
      if (this.params == null) {
        this.params = new HashMap<String,String>();
      }
      this.params.put(key, val);
    }

    public Map<String,String> getParams() {
      return this.params;
    }

    public findFamilyClearingList_args setParams(Map<String,String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public findFamilyClearingList_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findFamilyClearingList_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((Map<String,String>)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyClearingList_args)
        return this.equals((findFamilyClearingList_args)that);
      return false;
    }

    public boolean equals(findFamilyClearingList_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyClearingList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyClearingList_args typedOther = (findFamilyClearingList_args)other;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyClearingList_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyClearingList_argsStandardSchemeFactory implements SchemeFactory {
      public findFamilyClearingList_argsStandardScheme getScheme() {
        return new findFamilyClearingList_argsStandardScheme();
      }
    }

    private static class findFamilyClearingList_argsStandardScheme extends StandardScheme<findFamilyClearingList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyClearingList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map232 = iprot.readMapBegin();
                  struct.params = new HashMap<String,String>(2*_map232.size);
                  for (int _i233 = 0; _i233 < _map232.size; ++_i233)
                  {
                    String _key234; // required
                    String _val235; // required
                    _key234 = iprot.readString();
                    _val235 = iprot.readString();
                    struct.params.put(_key234, _val235);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyClearingList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter236 : struct.params.entrySet())
            {
              oprot.writeString(_iter236.getKey());
              oprot.writeString(_iter236.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyClearingList_argsTupleSchemeFactory implements SchemeFactory {
      public findFamilyClearingList_argsTupleScheme getScheme() {
        return new findFamilyClearingList_argsTupleScheme();
      }
    }

    private static class findFamilyClearingList_argsTupleScheme extends TupleScheme<findFamilyClearingList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyClearingList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (Map.Entry<String, String> _iter237 : struct.params.entrySet())
            {
              oprot.writeString(_iter237.getKey());
              oprot.writeString(_iter237.getValue());
            }
          }
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyClearingList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map238 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new HashMap<String,String>(2*_map238.size);
            for (int _i239 = 0; _i239 < _map238.size; ++_i239)
            {
              String _key240; // required
              String _val241; // required
              _key240 = iprot.readString();
              _val241 = iprot.readString();
              struct.params.put(_key240, _val241);
            }
          }
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findFamilyClearingList_result implements org.apache.thrift.TBase<findFamilyClearingList_result, findFamilyClearingList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyClearingList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyClearingList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyClearingList_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.FamilyClearingListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.FamilyClearingListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyClearingList_result.class, metaDataMap);
    }

    public findFamilyClearingList_result() {
    }

    public findFamilyClearingList_result(
      one.show.pay.thrift.view.FamilyClearingListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyClearingList_result(findFamilyClearingList_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.FamilyClearingListView(other.success);
      }
    }

    public findFamilyClearingList_result deepCopy() {
      return new findFamilyClearingList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.FamilyClearingListView getSuccess() {
      return this.success;
    }

    public findFamilyClearingList_result setSuccess(one.show.pay.thrift.view.FamilyClearingListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.FamilyClearingListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyClearingList_result)
        return this.equals((findFamilyClearingList_result)that);
      return false;
    }

    public boolean equals(findFamilyClearingList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyClearingList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyClearingList_result typedOther = (findFamilyClearingList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyClearingList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyClearingList_resultStandardSchemeFactory implements SchemeFactory {
      public findFamilyClearingList_resultStandardScheme getScheme() {
        return new findFamilyClearingList_resultStandardScheme();
      }
    }

    private static class findFamilyClearingList_resultStandardScheme extends StandardScheme<findFamilyClearingList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyClearingList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.FamilyClearingListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyClearingList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyClearingList_resultTupleSchemeFactory implements SchemeFactory {
      public findFamilyClearingList_resultTupleScheme getScheme() {
        return new findFamilyClearingList_resultTupleScheme();
      }
    }

    private static class findFamilyClearingList_resultTupleScheme extends TupleScheme<findFamilyClearingList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyClearingList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyClearingList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.FamilyClearingListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findFamilyMemberClearingListByCidAndFamilyId_args implements org.apache.thrift.TBase<findFamilyMemberClearingListByCidAndFamilyId_args, findFamilyMemberClearingListByCidAndFamilyId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyMemberClearingListByCidAndFamilyId_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyMemberClearingListByCidAndFamilyId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyMemberClearingListByCidAndFamilyId_argsTupleSchemeFactory());
    }

    public int cid; // required
    public long familyId; // required
    public int start; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      FAMILY_ID((short)2, "familyId"),
      START((short)3, "start"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // FAMILY_ID
            return FAMILY_ID;
          case 3: // START
            return START;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private static final int __FAMILYID_ISSET_ID = 1;
    private static final int __START_ISSET_ID = 2;
    private static final int __COUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyMemberClearingListByCidAndFamilyId_args.class, metaDataMap);
    }

    public findFamilyMemberClearingListByCidAndFamilyId_args() {
    }

    public findFamilyMemberClearingListByCidAndFamilyId_args(
      int cid,
      long familyId,
      int start,
      int count)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyMemberClearingListByCidAndFamilyId_args(findFamilyMemberClearingListByCidAndFamilyId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      this.familyId = other.familyId;
      this.start = other.start;
      this.count = other.count;
    }

    public findFamilyMemberClearingListByCidAndFamilyId_args deepCopy() {
      return new findFamilyMemberClearingListByCidAndFamilyId_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      setFamilyIdIsSet(false);
      this.familyId = 0;
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getCid() {
      return this.cid;
    }

    public findFamilyMemberClearingListByCidAndFamilyId_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public long getFamilyId() {
      return this.familyId;
    }

    public findFamilyMemberClearingListByCidAndFamilyId_args setFamilyId(long familyId) {
      this.familyId = familyId;
      setFamilyIdIsSet(true);
      return this;
    }

    public void unsetFamilyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
    public boolean isSetFamilyId() {
      return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
    }

    public void setFamilyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public findFamilyMemberClearingListByCidAndFamilyId_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public findFamilyMemberClearingListByCidAndFamilyId_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Integer)value);
        }
        break;

      case FAMILY_ID:
        if (value == null) {
          unsetFamilyId();
        } else {
          setFamilyId((Long)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Integer.valueOf(getCid());

      case FAMILY_ID:
        return Long.valueOf(getFamilyId());

      case START:
        return Integer.valueOf(getStart());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case FAMILY_ID:
        return isSetFamilyId();
      case START:
        return isSetStart();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyMemberClearingListByCidAndFamilyId_args)
        return this.equals((findFamilyMemberClearingListByCidAndFamilyId_args)that);
      return false;
    }

    public boolean equals(findFamilyMemberClearingListByCidAndFamilyId_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_familyId = true;
      boolean that_present_familyId = true;
      if (this_present_familyId || that_present_familyId) {
        if (!(this_present_familyId && that_present_familyId))
          return false;
        if (this.familyId != that.familyId)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyMemberClearingListByCidAndFamilyId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyMemberClearingListByCidAndFamilyId_args typedOther = (findFamilyMemberClearingListByCidAndFamilyId_args)other;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamilyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyMemberClearingListByCidAndFamilyId_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("familyId:");
      sb.append(this.familyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyMemberClearingListByCidAndFamilyId_argsStandardSchemeFactory implements SchemeFactory {
      public findFamilyMemberClearingListByCidAndFamilyId_argsStandardScheme getScheme() {
        return new findFamilyMemberClearingListByCidAndFamilyId_argsStandardScheme();
      }
    }

    private static class findFamilyMemberClearingListByCidAndFamilyId_argsStandardScheme extends StandardScheme<findFamilyMemberClearingListByCidAndFamilyId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyMemberClearingListByCidAndFamilyId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FAMILY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.familyId = iprot.readI64();
                struct.setFamilyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyMemberClearingListByCidAndFamilyId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
        oprot.writeI64(struct.familyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyMemberClearingListByCidAndFamilyId_argsTupleSchemeFactory implements SchemeFactory {
      public findFamilyMemberClearingListByCidAndFamilyId_argsTupleScheme getScheme() {
        return new findFamilyMemberClearingListByCidAndFamilyId_argsTupleScheme();
      }
    }

    private static class findFamilyMemberClearingListByCidAndFamilyId_argsTupleScheme extends TupleScheme<findFamilyMemberClearingListByCidAndFamilyId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyMemberClearingListByCidAndFamilyId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetFamilyId()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
        if (struct.isSetFamilyId()) {
          oprot.writeI64(struct.familyId);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyMemberClearingListByCidAndFamilyId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.familyId = iprot.readI64();
          struct.setFamilyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class findFamilyMemberClearingListByCidAndFamilyId_result implements org.apache.thrift.TBase<findFamilyMemberClearingListByCidAndFamilyId_result, findFamilyMemberClearingListByCidAndFamilyId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFamilyMemberClearingListByCidAndFamilyId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFamilyMemberClearingListByCidAndFamilyId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFamilyMemberClearingListByCidAndFamilyId_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.FamilyMemberClearingListView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.FamilyMemberClearingListView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFamilyMemberClearingListByCidAndFamilyId_result.class, metaDataMap);
    }

    public findFamilyMemberClearingListByCidAndFamilyId_result() {
    }

    public findFamilyMemberClearingListByCidAndFamilyId_result(
      one.show.pay.thrift.view.FamilyMemberClearingListView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFamilyMemberClearingListByCidAndFamilyId_result(findFamilyMemberClearingListByCidAndFamilyId_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.FamilyMemberClearingListView(other.success);
      }
    }

    public findFamilyMemberClearingListByCidAndFamilyId_result deepCopy() {
      return new findFamilyMemberClearingListByCidAndFamilyId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.FamilyMemberClearingListView getSuccess() {
      return this.success;
    }

    public findFamilyMemberClearingListByCidAndFamilyId_result setSuccess(one.show.pay.thrift.view.FamilyMemberClearingListView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.FamilyMemberClearingListView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFamilyMemberClearingListByCidAndFamilyId_result)
        return this.equals((findFamilyMemberClearingListByCidAndFamilyId_result)that);
      return false;
    }

    public boolean equals(findFamilyMemberClearingListByCidAndFamilyId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findFamilyMemberClearingListByCidAndFamilyId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findFamilyMemberClearingListByCidAndFamilyId_result typedOther = (findFamilyMemberClearingListByCidAndFamilyId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFamilyMemberClearingListByCidAndFamilyId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFamilyMemberClearingListByCidAndFamilyId_resultStandardSchemeFactory implements SchemeFactory {
      public findFamilyMemberClearingListByCidAndFamilyId_resultStandardScheme getScheme() {
        return new findFamilyMemberClearingListByCidAndFamilyId_resultStandardScheme();
      }
    }

    private static class findFamilyMemberClearingListByCidAndFamilyId_resultStandardScheme extends StandardScheme<findFamilyMemberClearingListByCidAndFamilyId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFamilyMemberClearingListByCidAndFamilyId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.FamilyMemberClearingListView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFamilyMemberClearingListByCidAndFamilyId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFamilyMemberClearingListByCidAndFamilyId_resultTupleSchemeFactory implements SchemeFactory {
      public findFamilyMemberClearingListByCidAndFamilyId_resultTupleScheme getScheme() {
        return new findFamilyMemberClearingListByCidAndFamilyId_resultTupleScheme();
      }
    }

    private static class findFamilyMemberClearingListByCidAndFamilyId_resultTupleScheme extends TupleScheme<findFamilyMemberClearingListByCidAndFamilyId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFamilyMemberClearingListByCidAndFamilyId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFamilyMemberClearingListByCidAndFamilyId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.FamilyMemberClearingListView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFamilyClearingViewById_args implements org.apache.thrift.TBase<getFamilyClearingViewById_args, getFamilyClearingViewById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFamilyClearingViewById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFamilyClearingViewById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFamilyClearingViewById_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFamilyClearingViewById_args.class, metaDataMap);
    }

    public getFamilyClearingViewById_args() {
    }

    public getFamilyClearingViewById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFamilyClearingViewById_args(getFamilyClearingViewById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getFamilyClearingViewById_args deepCopy() {
      return new getFamilyClearingViewById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public getFamilyClearingViewById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFamilyClearingViewById_args)
        return this.equals((getFamilyClearingViewById_args)that);
      return false;
    }

    public boolean equals(getFamilyClearingViewById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFamilyClearingViewById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFamilyClearingViewById_args typedOther = (getFamilyClearingViewById_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFamilyClearingViewById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFamilyClearingViewById_argsStandardSchemeFactory implements SchemeFactory {
      public getFamilyClearingViewById_argsStandardScheme getScheme() {
        return new getFamilyClearingViewById_argsStandardScheme();
      }
    }

    private static class getFamilyClearingViewById_argsStandardScheme extends StandardScheme<getFamilyClearingViewById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFamilyClearingViewById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFamilyClearingViewById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFamilyClearingViewById_argsTupleSchemeFactory implements SchemeFactory {
      public getFamilyClearingViewById_argsTupleScheme getScheme() {
        return new getFamilyClearingViewById_argsTupleScheme();
      }
    }

    private static class getFamilyClearingViewById_argsTupleScheme extends TupleScheme<getFamilyClearingViewById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFamilyClearingViewById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFamilyClearingViewById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getFamilyClearingViewById_result implements org.apache.thrift.TBase<getFamilyClearingViewById_result, getFamilyClearingViewById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFamilyClearingViewById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFamilyClearingViewById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFamilyClearingViewById_resultTupleSchemeFactory());
    }

    public one.show.pay.thrift.view.FamilyClearingView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.pay.thrift.view.FamilyClearingView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFamilyClearingViewById_result.class, metaDataMap);
    }

    public getFamilyClearingViewById_result() {
    }

    public getFamilyClearingViewById_result(
      one.show.pay.thrift.view.FamilyClearingView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFamilyClearingViewById_result(getFamilyClearingViewById_result other) {
      if (other.isSetSuccess()) {
        this.success = new one.show.pay.thrift.view.FamilyClearingView(other.success);
      }
    }

    public getFamilyClearingViewById_result deepCopy() {
      return new getFamilyClearingViewById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public one.show.pay.thrift.view.FamilyClearingView getSuccess() {
      return this.success;
    }

    public getFamilyClearingViewById_result setSuccess(one.show.pay.thrift.view.FamilyClearingView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((one.show.pay.thrift.view.FamilyClearingView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFamilyClearingViewById_result)
        return this.equals((getFamilyClearingViewById_result)that);
      return false;
    }

    public boolean equals(getFamilyClearingViewById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFamilyClearingViewById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFamilyClearingViewById_result typedOther = (getFamilyClearingViewById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFamilyClearingViewById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFamilyClearingViewById_resultStandardSchemeFactory implements SchemeFactory {
      public getFamilyClearingViewById_resultStandardScheme getScheme() {
        return new getFamilyClearingViewById_resultStandardScheme();
      }
    }

    private static class getFamilyClearingViewById_resultStandardScheme extends StandardScheme<getFamilyClearingViewById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFamilyClearingViewById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new one.show.pay.thrift.view.FamilyClearingView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFamilyClearingViewById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFamilyClearingViewById_resultTupleSchemeFactory implements SchemeFactory {
      public getFamilyClearingViewById_resultTupleScheme getScheme() {
        return new getFamilyClearingViewById_resultTupleScheme();
      }
    }

    private static class getFamilyClearingViewById_resultTupleScheme extends TupleScheme<getFamilyClearingViewById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFamilyClearingViewById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFamilyClearingViewById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new one.show.pay.thrift.view.FamilyClearingView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFamilyClearingView_args implements org.apache.thrift.TBase<updateFamilyClearingView_args, updateFamilyClearingView_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFamilyClearingView_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateContent", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFamilyClearingView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFamilyClearingView_argsTupleSchemeFactory());
    }

    public long id; // required
    public Map<String,String> updateContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      UPDATE_CONTENT((short)2, "updateContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // UPDATE_CONTENT
            return UPDATE_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UPDATE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("updateContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFamilyClearingView_args.class, metaDataMap);
    }

    public updateFamilyClearingView_args() {
    }

    public updateFamilyClearingView_args(
      long id,
      Map<String,String> updateContent)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.updateContent = updateContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFamilyClearingView_args(updateFamilyClearingView_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetUpdateContent()) {
        Map<String,String> __this__updateContent = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.updateContent.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__updateContent_copy_key = other_element_key;

          String __this__updateContent_copy_value = other_element_value;

          __this__updateContent.put(__this__updateContent_copy_key, __this__updateContent_copy_value);
        }
        this.updateContent = __this__updateContent;
      }
    }

    public updateFamilyClearingView_args deepCopy() {
      return new updateFamilyClearingView_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.updateContent = null;
    }

    public long getId() {
      return this.id;
    }

    public updateFamilyClearingView_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getUpdateContentSize() {
      return (this.updateContent == null) ? 0 : this.updateContent.size();
    }

    public void putToUpdateContent(String key, String val) {
      if (this.updateContent == null) {
        this.updateContent = new HashMap<String,String>();
      }
      this.updateContent.put(key, val);
    }

    public Map<String,String> getUpdateContent() {
      return this.updateContent;
    }

    public updateFamilyClearingView_args setUpdateContent(Map<String,String> updateContent) {
      this.updateContent = updateContent;
      return this;
    }

    public void unsetUpdateContent() {
      this.updateContent = null;
    }

    /** Returns true if field updateContent is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateContent() {
      return this.updateContent != null;
    }

    public void setUpdateContentIsSet(boolean value) {
      if (!value) {
        this.updateContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case UPDATE_CONTENT:
        if (value == null) {
          unsetUpdateContent();
        } else {
          setUpdateContent((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case UPDATE_CONTENT:
        return getUpdateContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case UPDATE_CONTENT:
        return isSetUpdateContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFamilyClearingView_args)
        return this.equals((updateFamilyClearingView_args)that);
      return false;
    }

    public boolean equals(updateFamilyClearingView_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_updateContent = true && this.isSetUpdateContent();
      boolean that_present_updateContent = true && that.isSetUpdateContent();
      if (this_present_updateContent || that_present_updateContent) {
        if (!(this_present_updateContent && that_present_updateContent))
          return false;
        if (!this.updateContent.equals(that.updateContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFamilyClearingView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFamilyClearingView_args typedOther = (updateFamilyClearingView_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateContent()).compareTo(typedOther.isSetUpdateContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateContent, typedOther.updateContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFamilyClearingView_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateContent:");
      if (this.updateContent == null) {
        sb.append("null");
      } else {
        sb.append(this.updateContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFamilyClearingView_argsStandardSchemeFactory implements SchemeFactory {
      public updateFamilyClearingView_argsStandardScheme getScheme() {
        return new updateFamilyClearingView_argsStandardScheme();
      }
    }

    private static class updateFamilyClearingView_argsStandardScheme extends StandardScheme<updateFamilyClearingView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFamilyClearingView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATE_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map242 = iprot.readMapBegin();
                  struct.updateContent = new HashMap<String,String>(2*_map242.size);
                  for (int _i243 = 0; _i243 < _map242.size; ++_i243)
                  {
                    String _key244; // required
                    String _val245; // required
                    _key244 = iprot.readString();
                    _val245 = iprot.readString();
                    struct.updateContent.put(_key244, _val245);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpdateContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFamilyClearingView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.updateContent != null) {
          oprot.writeFieldBegin(UPDATE_CONTENT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.updateContent.size()));
            for (Map.Entry<String, String> _iter246 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter246.getKey());
              oprot.writeString(_iter246.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFamilyClearingView_argsTupleSchemeFactory implements SchemeFactory {
      public updateFamilyClearingView_argsTupleScheme getScheme() {
        return new updateFamilyClearingView_argsTupleScheme();
      }
    }

    private static class updateFamilyClearingView_argsTupleScheme extends TupleScheme<updateFamilyClearingView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFamilyClearingView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetUpdateContent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetUpdateContent()) {
          {
            oprot.writeI32(struct.updateContent.size());
            for (Map.Entry<String, String> _iter247 : struct.updateContent.entrySet())
            {
              oprot.writeString(_iter247.getKey());
              oprot.writeString(_iter247.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFamilyClearingView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map248 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.updateContent = new HashMap<String,String>(2*_map248.size);
            for (int _i249 = 0; _i249 < _map248.size; ++_i249)
            {
              String _key250; // required
              String _val251; // required
              _key250 = iprot.readString();
              _val251 = iprot.readString();
              struct.updateContent.put(_key250, _val251);
            }
          }
          struct.setUpdateContentIsSet(true);
        }
      }
    }

  }

  public static class updateFamilyClearingView_result implements org.apache.thrift.TBase<updateFamilyClearingView_result, updateFamilyClearingView_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFamilyClearingView_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFamilyClearingView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFamilyClearingView_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFamilyClearingView_result.class, metaDataMap);
    }

    public updateFamilyClearingView_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFamilyClearingView_result(updateFamilyClearingView_result other) {
    }

    public updateFamilyClearingView_result deepCopy() {
      return new updateFamilyClearingView_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFamilyClearingView_result)
        return this.equals((updateFamilyClearingView_result)that);
      return false;
    }

    public boolean equals(updateFamilyClearingView_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFamilyClearingView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFamilyClearingView_result typedOther = (updateFamilyClearingView_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFamilyClearingView_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFamilyClearingView_resultStandardSchemeFactory implements SchemeFactory {
      public updateFamilyClearingView_resultStandardScheme getScheme() {
        return new updateFamilyClearingView_resultStandardScheme();
      }
    }

    private static class updateFamilyClearingView_resultStandardScheme extends StandardScheme<updateFamilyClearingView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFamilyClearingView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFamilyClearingView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFamilyClearingView_resultTupleSchemeFactory implements SchemeFactory {
      public updateFamilyClearingView_resultTupleScheme getScheme() {
        return new updateFamilyClearingView_resultTupleScheme();
      }
    }

    private static class updateFamilyClearingView_resultTupleScheme extends TupleScheme<updateFamilyClearingView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFamilyClearingView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFamilyClearingView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
