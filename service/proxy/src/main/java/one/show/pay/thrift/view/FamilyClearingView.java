/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FamilyClearingView implements org.apache.thrift.TBase<FamilyClearingView, FamilyClearingView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FamilyClearingView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USER_SHOW_COIN_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("userShowCoinTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField USER_INCOME_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("userIncomeTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField USER_LIVE_DURATION_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("userLiveDurationTotal", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EFFECTIVE_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("effectiveUsers", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FAMILY_CLEARING_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("familyClearingRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField FAMILY_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("familyIncome", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField FAMILY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("familyName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TOTAL_PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPayment", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FamilyClearingViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FamilyClearingViewTupleSchemeFactory());
  }

  public int id; // required
  public long familyId; // required
  public double userShowCoinTotal; // required
  public double userIncomeTotal; // required
  public int userLiveDurationTotal; // required
  public int effectiveUsers; // required
  public double familyClearingRatio; // required
  public double familyIncome; // required
  public long ownerId; // required
  public int status; // required
  public int createTime; // required
  public int finishTime; // required
  public String familyName; // required
  public double totalPayment; // required
  public String orderId; // required
  public String reason; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FAMILY_ID((short)2, "familyId"),
    USER_SHOW_COIN_TOTAL((short)3, "userShowCoinTotal"),
    USER_INCOME_TOTAL((short)4, "userIncomeTotal"),
    USER_LIVE_DURATION_TOTAL((short)5, "userLiveDurationTotal"),
    EFFECTIVE_USERS((short)6, "effectiveUsers"),
    FAMILY_CLEARING_RATIO((short)7, "familyClearingRatio"),
    FAMILY_INCOME((short)8, "familyIncome"),
    OWNER_ID((short)9, "ownerId"),
    STATUS((short)10, "status"),
    CREATE_TIME((short)11, "createTime"),
    FINISH_TIME((short)12, "finishTime"),
    FAMILY_NAME((short)13, "familyName"),
    TOTAL_PAYMENT((short)14, "totalPayment"),
    ORDER_ID((short)15, "orderId"),
    REASON((short)16, "reason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FAMILY_ID
          return FAMILY_ID;
        case 3: // USER_SHOW_COIN_TOTAL
          return USER_SHOW_COIN_TOTAL;
        case 4: // USER_INCOME_TOTAL
          return USER_INCOME_TOTAL;
        case 5: // USER_LIVE_DURATION_TOTAL
          return USER_LIVE_DURATION_TOTAL;
        case 6: // EFFECTIVE_USERS
          return EFFECTIVE_USERS;
        case 7: // FAMILY_CLEARING_RATIO
          return FAMILY_CLEARING_RATIO;
        case 8: // FAMILY_INCOME
          return FAMILY_INCOME;
        case 9: // OWNER_ID
          return OWNER_ID;
        case 10: // STATUS
          return STATUS;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // FINISH_TIME
          return FINISH_TIME;
        case 13: // FAMILY_NAME
          return FAMILY_NAME;
        case 14: // TOTAL_PAYMENT
          return TOTAL_PAYMENT;
        case 15: // ORDER_ID
          return ORDER_ID;
        case 16: // REASON
          return REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FAMILYID_ISSET_ID = 1;
  private static final int __USERSHOWCOINTOTAL_ISSET_ID = 2;
  private static final int __USERINCOMETOTAL_ISSET_ID = 3;
  private static final int __USERLIVEDURATIONTOTAL_ISSET_ID = 4;
  private static final int __EFFECTIVEUSERS_ISSET_ID = 5;
  private static final int __FAMILYCLEARINGRATIO_ISSET_ID = 6;
  private static final int __FAMILYINCOME_ISSET_ID = 7;
  private static final int __OWNERID_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private static final int __CREATETIME_ISSET_ID = 10;
  private static final int __FINISHTIME_ISSET_ID = 11;
  private static final int __TOTALPAYMENT_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_SHOW_COIN_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("userShowCoinTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_INCOME_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("userIncomeTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_LIVE_DURATION_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("userLiveDurationTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EFFECTIVE_USERS, new org.apache.thrift.meta_data.FieldMetaData("effectiveUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAMILY_CLEARING_RATIO, new org.apache.thrift.meta_data.FieldMetaData("familyClearingRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAMILY_INCOME, new org.apache.thrift.meta_data.FieldMetaData("familyIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAMILY_NAME, new org.apache.thrift.meta_data.FieldMetaData("familyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("totalPayment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FamilyClearingView.class, metaDataMap);
  }

  public FamilyClearingView() {
  }

  public FamilyClearingView(
    int id,
    long familyId,
    double userShowCoinTotal,
    double userIncomeTotal,
    int userLiveDurationTotal,
    int effectiveUsers,
    double familyClearingRatio,
    double familyIncome,
    long ownerId,
    int status,
    int createTime,
    int finishTime,
    String familyName,
    double totalPayment,
    String orderId,
    String reason)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.familyId = familyId;
    setFamilyIdIsSet(true);
    this.userShowCoinTotal = userShowCoinTotal;
    setUserShowCoinTotalIsSet(true);
    this.userIncomeTotal = userIncomeTotal;
    setUserIncomeTotalIsSet(true);
    this.userLiveDurationTotal = userLiveDurationTotal;
    setUserLiveDurationTotalIsSet(true);
    this.effectiveUsers = effectiveUsers;
    setEffectiveUsersIsSet(true);
    this.familyClearingRatio = familyClearingRatio;
    setFamilyClearingRatioIsSet(true);
    this.familyIncome = familyIncome;
    setFamilyIncomeIsSet(true);
    this.ownerId = ownerId;
    setOwnerIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    this.familyName = familyName;
    this.totalPayment = totalPayment;
    setTotalPaymentIsSet(true);
    this.orderId = orderId;
    this.reason = reason;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FamilyClearingView(FamilyClearingView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.familyId = other.familyId;
    this.userShowCoinTotal = other.userShowCoinTotal;
    this.userIncomeTotal = other.userIncomeTotal;
    this.userLiveDurationTotal = other.userLiveDurationTotal;
    this.effectiveUsers = other.effectiveUsers;
    this.familyClearingRatio = other.familyClearingRatio;
    this.familyIncome = other.familyIncome;
    this.ownerId = other.ownerId;
    this.status = other.status;
    this.createTime = other.createTime;
    this.finishTime = other.finishTime;
    if (other.isSetFamilyName()) {
      this.familyName = other.familyName;
    }
    this.totalPayment = other.totalPayment;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
  }

  public FamilyClearingView deepCopy() {
    return new FamilyClearingView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setFamilyIdIsSet(false);
    this.familyId = 0;
    setUserShowCoinTotalIsSet(false);
    this.userShowCoinTotal = 0.0;
    setUserIncomeTotalIsSet(false);
    this.userIncomeTotal = 0.0;
    setUserLiveDurationTotalIsSet(false);
    this.userLiveDurationTotal = 0;
    setEffectiveUsersIsSet(false);
    this.effectiveUsers = 0;
    setFamilyClearingRatioIsSet(false);
    this.familyClearingRatio = 0.0;
    setFamilyIncomeIsSet(false);
    this.familyIncome = 0.0;
    setOwnerIdIsSet(false);
    this.ownerId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setFinishTimeIsSet(false);
    this.finishTime = 0;
    this.familyName = null;
    setTotalPaymentIsSet(false);
    this.totalPayment = 0.0;
    this.orderId = null;
    this.reason = null;
  }

  public int getId() {
    return this.id;
  }

  public FamilyClearingView setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getFamilyId() {
    return this.familyId;
  }

  public FamilyClearingView setFamilyId(long familyId) {
    this.familyId = familyId;
    setFamilyIdIsSet(true);
    return this;
  }

  public void unsetFamilyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
  }

  /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyId() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
  }

  public void setFamilyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
  }

  public double getUserShowCoinTotal() {
    return this.userShowCoinTotal;
  }

  public FamilyClearingView setUserShowCoinTotal(double userShowCoinTotal) {
    this.userShowCoinTotal = userShowCoinTotal;
    setUserShowCoinTotalIsSet(true);
    return this;
  }

  public void unsetUserShowCoinTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERSHOWCOINTOTAL_ISSET_ID);
  }

  /** Returns true if field userShowCoinTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetUserShowCoinTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __USERSHOWCOINTOTAL_ISSET_ID);
  }

  public void setUserShowCoinTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERSHOWCOINTOTAL_ISSET_ID, value);
  }

  public double getUserIncomeTotal() {
    return this.userIncomeTotal;
  }

  public FamilyClearingView setUserIncomeTotal(double userIncomeTotal) {
    this.userIncomeTotal = userIncomeTotal;
    setUserIncomeTotalIsSet(true);
    return this;
  }

  public void unsetUserIncomeTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERINCOMETOTAL_ISSET_ID);
  }

  /** Returns true if field userIncomeTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIncomeTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __USERINCOMETOTAL_ISSET_ID);
  }

  public void setUserIncomeTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERINCOMETOTAL_ISSET_ID, value);
  }

  public int getUserLiveDurationTotal() {
    return this.userLiveDurationTotal;
  }

  public FamilyClearingView setUserLiveDurationTotal(int userLiveDurationTotal) {
    this.userLiveDurationTotal = userLiveDurationTotal;
    setUserLiveDurationTotalIsSet(true);
    return this;
  }

  public void unsetUserLiveDurationTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERLIVEDURATIONTOTAL_ISSET_ID);
  }

  /** Returns true if field userLiveDurationTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLiveDurationTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __USERLIVEDURATIONTOTAL_ISSET_ID);
  }

  public void setUserLiveDurationTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERLIVEDURATIONTOTAL_ISSET_ID, value);
  }

  public int getEffectiveUsers() {
    return this.effectiveUsers;
  }

  public FamilyClearingView setEffectiveUsers(int effectiveUsers) {
    this.effectiveUsers = effectiveUsers;
    setEffectiveUsersIsSet(true);
    return this;
  }

  public void unsetEffectiveUsers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EFFECTIVEUSERS_ISSET_ID);
  }

  /** Returns true if field effectiveUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectiveUsers() {
    return EncodingUtils.testBit(__isset_bitfield, __EFFECTIVEUSERS_ISSET_ID);
  }

  public void setEffectiveUsersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EFFECTIVEUSERS_ISSET_ID, value);
  }

  public double getFamilyClearingRatio() {
    return this.familyClearingRatio;
  }

  public FamilyClearingView setFamilyClearingRatio(double familyClearingRatio) {
    this.familyClearingRatio = familyClearingRatio;
    setFamilyClearingRatioIsSet(true);
    return this;
  }

  public void unsetFamilyClearingRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYCLEARINGRATIO_ISSET_ID);
  }

  /** Returns true if field familyClearingRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyClearingRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYCLEARINGRATIO_ISSET_ID);
  }

  public void setFamilyClearingRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYCLEARINGRATIO_ISSET_ID, value);
  }

  public double getFamilyIncome() {
    return this.familyIncome;
  }

  public FamilyClearingView setFamilyIncome(double familyIncome) {
    this.familyIncome = familyIncome;
    setFamilyIncomeIsSet(true);
    return this;
  }

  public void unsetFamilyIncome() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYINCOME_ISSET_ID);
  }

  /** Returns true if field familyIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyIncome() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYINCOME_ISSET_ID);
  }

  public void setFamilyIncomeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYINCOME_ISSET_ID, value);
  }

  public long getOwnerId() {
    return this.ownerId;
  }

  public FamilyClearingView setOwnerId(long ownerId) {
    this.ownerId = ownerId;
    setOwnerIdIsSet(true);
    return this;
  }

  public void unsetOwnerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWNERID_ISSET_ID);
  }

  /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerId() {
    return EncodingUtils.testBit(__isset_bitfield, __OWNERID_ISSET_ID);
  }

  public void setOwnerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWNERID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public FamilyClearingView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public FamilyClearingView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getFinishTime() {
    return this.finishTime;
  }

  public FamilyClearingView setFinishTime(int finishTime) {
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHTIME_ISSET_ID, value);
  }

  public String getFamilyName() {
    return this.familyName;
  }

  public FamilyClearingView setFamilyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

  public void unsetFamilyName() {
    this.familyName = null;
  }

  /** Returns true if field familyName is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyName() {
    return this.familyName != null;
  }

  public void setFamilyNameIsSet(boolean value) {
    if (!value) {
      this.familyName = null;
    }
  }

  public double getTotalPayment() {
    return this.totalPayment;
  }

  public FamilyClearingView setTotalPayment(double totalPayment) {
    this.totalPayment = totalPayment;
    setTotalPaymentIsSet(true);
    return this;
  }

  public void unsetTotalPayment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPAYMENT_ISSET_ID);
  }

  /** Returns true if field totalPayment is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPayment() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPAYMENT_ISSET_ID);
  }

  public void setTotalPaymentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPAYMENT_ISSET_ID, value);
  }

  public String getOrderId() {
    return this.orderId;
  }

  public FamilyClearingView setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getReason() {
    return this.reason;
  }

  public FamilyClearingView setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case FAMILY_ID:
      if (value == null) {
        unsetFamilyId();
      } else {
        setFamilyId((Long)value);
      }
      break;

    case USER_SHOW_COIN_TOTAL:
      if (value == null) {
        unsetUserShowCoinTotal();
      } else {
        setUserShowCoinTotal((Double)value);
      }
      break;

    case USER_INCOME_TOTAL:
      if (value == null) {
        unsetUserIncomeTotal();
      } else {
        setUserIncomeTotal((Double)value);
      }
      break;

    case USER_LIVE_DURATION_TOTAL:
      if (value == null) {
        unsetUserLiveDurationTotal();
      } else {
        setUserLiveDurationTotal((Integer)value);
      }
      break;

    case EFFECTIVE_USERS:
      if (value == null) {
        unsetEffectiveUsers();
      } else {
        setEffectiveUsers((Integer)value);
      }
      break;

    case FAMILY_CLEARING_RATIO:
      if (value == null) {
        unsetFamilyClearingRatio();
      } else {
        setFamilyClearingRatio((Double)value);
      }
      break;

    case FAMILY_INCOME:
      if (value == null) {
        unsetFamilyIncome();
      } else {
        setFamilyIncome((Double)value);
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerId();
      } else {
        setOwnerId((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((Integer)value);
      }
      break;

    case FAMILY_NAME:
      if (value == null) {
        unsetFamilyName();
      } else {
        setFamilyName((String)value);
      }
      break;

    case TOTAL_PAYMENT:
      if (value == null) {
        unsetTotalPayment();
      } else {
        setTotalPayment((Double)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case FAMILY_ID:
      return Long.valueOf(getFamilyId());

    case USER_SHOW_COIN_TOTAL:
      return Double.valueOf(getUserShowCoinTotal());

    case USER_INCOME_TOTAL:
      return Double.valueOf(getUserIncomeTotal());

    case USER_LIVE_DURATION_TOTAL:
      return Integer.valueOf(getUserLiveDurationTotal());

    case EFFECTIVE_USERS:
      return Integer.valueOf(getEffectiveUsers());

    case FAMILY_CLEARING_RATIO:
      return Double.valueOf(getFamilyClearingRatio());

    case FAMILY_INCOME:
      return Double.valueOf(getFamilyIncome());

    case OWNER_ID:
      return Long.valueOf(getOwnerId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case FINISH_TIME:
      return Integer.valueOf(getFinishTime());

    case FAMILY_NAME:
      return getFamilyName();

    case TOTAL_PAYMENT:
      return Double.valueOf(getTotalPayment());

    case ORDER_ID:
      return getOrderId();

    case REASON:
      return getReason();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FAMILY_ID:
      return isSetFamilyId();
    case USER_SHOW_COIN_TOTAL:
      return isSetUserShowCoinTotal();
    case USER_INCOME_TOTAL:
      return isSetUserIncomeTotal();
    case USER_LIVE_DURATION_TOTAL:
      return isSetUserLiveDurationTotal();
    case EFFECTIVE_USERS:
      return isSetEffectiveUsers();
    case FAMILY_CLEARING_RATIO:
      return isSetFamilyClearingRatio();
    case FAMILY_INCOME:
      return isSetFamilyIncome();
    case OWNER_ID:
      return isSetOwnerId();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case FINISH_TIME:
      return isSetFinishTime();
    case FAMILY_NAME:
      return isSetFamilyName();
    case TOTAL_PAYMENT:
      return isSetTotalPayment();
    case ORDER_ID:
      return isSetOrderId();
    case REASON:
      return isSetReason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FamilyClearingView)
      return this.equals((FamilyClearingView)that);
    return false;
  }

  public boolean equals(FamilyClearingView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_familyId = true;
    boolean that_present_familyId = true;
    if (this_present_familyId || that_present_familyId) {
      if (!(this_present_familyId && that_present_familyId))
        return false;
      if (this.familyId != that.familyId)
        return false;
    }

    boolean this_present_userShowCoinTotal = true;
    boolean that_present_userShowCoinTotal = true;
    if (this_present_userShowCoinTotal || that_present_userShowCoinTotal) {
      if (!(this_present_userShowCoinTotal && that_present_userShowCoinTotal))
        return false;
      if (this.userShowCoinTotal != that.userShowCoinTotal)
        return false;
    }

    boolean this_present_userIncomeTotal = true;
    boolean that_present_userIncomeTotal = true;
    if (this_present_userIncomeTotal || that_present_userIncomeTotal) {
      if (!(this_present_userIncomeTotal && that_present_userIncomeTotal))
        return false;
      if (this.userIncomeTotal != that.userIncomeTotal)
        return false;
    }

    boolean this_present_userLiveDurationTotal = true;
    boolean that_present_userLiveDurationTotal = true;
    if (this_present_userLiveDurationTotal || that_present_userLiveDurationTotal) {
      if (!(this_present_userLiveDurationTotal && that_present_userLiveDurationTotal))
        return false;
      if (this.userLiveDurationTotal != that.userLiveDurationTotal)
        return false;
    }

    boolean this_present_effectiveUsers = true;
    boolean that_present_effectiveUsers = true;
    if (this_present_effectiveUsers || that_present_effectiveUsers) {
      if (!(this_present_effectiveUsers && that_present_effectiveUsers))
        return false;
      if (this.effectiveUsers != that.effectiveUsers)
        return false;
    }

    boolean this_present_familyClearingRatio = true;
    boolean that_present_familyClearingRatio = true;
    if (this_present_familyClearingRatio || that_present_familyClearingRatio) {
      if (!(this_present_familyClearingRatio && that_present_familyClearingRatio))
        return false;
      if (this.familyClearingRatio != that.familyClearingRatio)
        return false;
    }

    boolean this_present_familyIncome = true;
    boolean that_present_familyIncome = true;
    if (this_present_familyIncome || that_present_familyIncome) {
      if (!(this_present_familyIncome && that_present_familyIncome))
        return false;
      if (this.familyIncome != that.familyIncome)
        return false;
    }

    boolean this_present_ownerId = true;
    boolean that_present_ownerId = true;
    if (this_present_ownerId || that_present_ownerId) {
      if (!(this_present_ownerId && that_present_ownerId))
        return false;
      if (this.ownerId != that.ownerId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_finishTime = true;
    boolean that_present_finishTime = true;
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (this.finishTime != that.finishTime)
        return false;
    }

    boolean this_present_familyName = true && this.isSetFamilyName();
    boolean that_present_familyName = true && that.isSetFamilyName();
    if (this_present_familyName || that_present_familyName) {
      if (!(this_present_familyName && that_present_familyName))
        return false;
      if (!this.familyName.equals(that.familyName))
        return false;
    }

    boolean this_present_totalPayment = true;
    boolean that_present_totalPayment = true;
    if (this_present_totalPayment || that_present_totalPayment) {
      if (!(this_present_totalPayment && that_present_totalPayment))
        return false;
      if (this.totalPayment != that.totalPayment)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FamilyClearingView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FamilyClearingView typedOther = (FamilyClearingView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserShowCoinTotal()).compareTo(typedOther.isSetUserShowCoinTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserShowCoinTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userShowCoinTotal, typedOther.userShowCoinTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIncomeTotal()).compareTo(typedOther.isSetUserIncomeTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIncomeTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIncomeTotal, typedOther.userIncomeTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLiveDurationTotal()).compareTo(typedOther.isSetUserLiveDurationTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLiveDurationTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLiveDurationTotal, typedOther.userLiveDurationTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectiveUsers()).compareTo(typedOther.isSetEffectiveUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectiveUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectiveUsers, typedOther.effectiveUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyClearingRatio()).compareTo(typedOther.isSetFamilyClearingRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyClearingRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyClearingRatio, typedOther.familyClearingRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyIncome()).compareTo(typedOther.isSetFamilyIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyIncome, typedOther.familyIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerId()).compareTo(typedOther.isSetOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, typedOther.ownerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(typedOther.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, typedOther.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyName()).compareTo(typedOther.isSetFamilyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyName, typedOther.familyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPayment()).compareTo(typedOther.isSetTotalPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPayment, typedOther.totalPayment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FamilyClearingView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyId:");
    sb.append(this.familyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userShowCoinTotal:");
    sb.append(this.userShowCoinTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIncomeTotal:");
    sb.append(this.userIncomeTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLiveDurationTotal:");
    sb.append(this.userLiveDurationTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("effectiveUsers:");
    sb.append(this.effectiveUsers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyClearingRatio:");
    sb.append(this.familyClearingRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyIncome:");
    sb.append(this.familyIncome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerId:");
    sb.append(this.ownerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    sb.append(this.finishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyName:");
    if (this.familyName == null) {
      sb.append("null");
    } else {
      sb.append(this.familyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPayment:");
    sb.append(this.totalPayment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FamilyClearingViewStandardSchemeFactory implements SchemeFactory {
    public FamilyClearingViewStandardScheme getScheme() {
      return new FamilyClearingViewStandardScheme();
    }
  }

  private static class FamilyClearingViewStandardScheme extends StandardScheme<FamilyClearingView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FamilyClearingView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAMILY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.familyId = iprot.readI64();
              struct.setFamilyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_SHOW_COIN_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.userShowCoinTotal = iprot.readDouble();
              struct.setUserShowCoinTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_INCOME_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.userIncomeTotal = iprot.readDouble();
              struct.setUserIncomeTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_LIVE_DURATION_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userLiveDurationTotal = iprot.readI32();
              struct.setUserLiveDurationTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EFFECTIVE_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.effectiveUsers = iprot.readI32();
              struct.setEffectiveUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FAMILY_CLEARING_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.familyClearingRatio = iprot.readDouble();
              struct.setFamilyClearingRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FAMILY_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.familyIncome = iprot.readDouble();
              struct.setFamilyIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ownerId = iprot.readI64();
              struct.setOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.finishTime = iprot.readI32();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FAMILY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.familyName = iprot.readString();
              struct.setFamilyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TOTAL_PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPayment = iprot.readDouble();
              struct.setTotalPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FamilyClearingView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
      oprot.writeI64(struct.familyId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_SHOW_COIN_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.userShowCoinTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_INCOME_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.userIncomeTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_LIVE_DURATION_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.userLiveDurationTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EFFECTIVE_USERS_FIELD_DESC);
      oprot.writeI32(struct.effectiveUsers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAMILY_CLEARING_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.familyClearingRatio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAMILY_INCOME_FIELD_DESC);
      oprot.writeDouble(struct.familyIncome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
      oprot.writeI64(struct.ownerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
      oprot.writeI32(struct.finishTime);
      oprot.writeFieldEnd();
      if (struct.familyName != null) {
        oprot.writeFieldBegin(FAMILY_NAME_FIELD_DESC);
        oprot.writeString(struct.familyName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PAYMENT_FIELD_DESC);
      oprot.writeDouble(struct.totalPayment);
      oprot.writeFieldEnd();
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FamilyClearingViewTupleSchemeFactory implements SchemeFactory {
    public FamilyClearingViewTupleScheme getScheme() {
      return new FamilyClearingViewTupleScheme();
    }
  }

  private static class FamilyClearingViewTupleScheme extends TupleScheme<FamilyClearingView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FamilyClearingView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFamilyId()) {
        optionals.set(1);
      }
      if (struct.isSetUserShowCoinTotal()) {
        optionals.set(2);
      }
      if (struct.isSetUserIncomeTotal()) {
        optionals.set(3);
      }
      if (struct.isSetUserLiveDurationTotal()) {
        optionals.set(4);
      }
      if (struct.isSetEffectiveUsers()) {
        optionals.set(5);
      }
      if (struct.isSetFamilyClearingRatio()) {
        optionals.set(6);
      }
      if (struct.isSetFamilyIncome()) {
        optionals.set(7);
      }
      if (struct.isSetOwnerId()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(11);
      }
      if (struct.isSetFamilyName()) {
        optionals.set(12);
      }
      if (struct.isSetTotalPayment()) {
        optionals.set(13);
      }
      if (struct.isSetOrderId()) {
        optionals.set(14);
      }
      if (struct.isSetReason()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetFamilyId()) {
        oprot.writeI64(struct.familyId);
      }
      if (struct.isSetUserShowCoinTotal()) {
        oprot.writeDouble(struct.userShowCoinTotal);
      }
      if (struct.isSetUserIncomeTotal()) {
        oprot.writeDouble(struct.userIncomeTotal);
      }
      if (struct.isSetUserLiveDurationTotal()) {
        oprot.writeI32(struct.userLiveDurationTotal);
      }
      if (struct.isSetEffectiveUsers()) {
        oprot.writeI32(struct.effectiveUsers);
      }
      if (struct.isSetFamilyClearingRatio()) {
        oprot.writeDouble(struct.familyClearingRatio);
      }
      if (struct.isSetFamilyIncome()) {
        oprot.writeDouble(struct.familyIncome);
      }
      if (struct.isSetOwnerId()) {
        oprot.writeI64(struct.ownerId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeI32(struct.finishTime);
      }
      if (struct.isSetFamilyName()) {
        oprot.writeString(struct.familyName);
      }
      if (struct.isSetTotalPayment()) {
        oprot.writeDouble(struct.totalPayment);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FamilyClearingView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.familyId = iprot.readI64();
        struct.setFamilyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userShowCoinTotal = iprot.readDouble();
        struct.setUserShowCoinTotalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userIncomeTotal = iprot.readDouble();
        struct.setUserIncomeTotalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userLiveDurationTotal = iprot.readI32();
        struct.setUserLiveDurationTotalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.effectiveUsers = iprot.readI32();
        struct.setEffectiveUsersIsSet(true);
      }
      if (incoming.get(6)) {
        struct.familyClearingRatio = iprot.readDouble();
        struct.setFamilyClearingRatioIsSet(true);
      }
      if (incoming.get(7)) {
        struct.familyIncome = iprot.readDouble();
        struct.setFamilyIncomeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ownerId = iprot.readI64();
        struct.setOwnerIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.finishTime = iprot.readI32();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.familyName = iprot.readString();
        struct.setFamilyNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.totalPayment = iprot.readDouble();
        struct.setTotalPaymentIsSet(true);
      }
      if (incoming.get(14)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
    }
  }

}

