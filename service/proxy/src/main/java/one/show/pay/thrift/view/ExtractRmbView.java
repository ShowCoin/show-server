/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExtractRmbView implements org.apache.thrift.TBase<ExtractRmbView, ExtractRmbView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExtractRmbView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNumber", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField RMB_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("rmbNumber", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BEFORE_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("beforeChange", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField AFTER_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("afterChange", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ALIPAY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayAccount", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ALIPAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("alipayName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExtractRmbViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExtractRmbViewTupleSchemeFactory());
  }

  public long id; // required
  public long uid; // required
  public int status; // required
  public double itemNumber; // required
  public double rmbNumber; // required
  public int createTime; // required
  public int updateTime; // required
  public double beforeChange; // required
  public double afterChange; // required
  public String reason; // required
  public String orderId; // required
  public String alipayAccount; // required
  public String alipayName; // required
  public int finishTime; // required
  public String comment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    UID((short)2, "uid"),
    STATUS((short)3, "status"),
    ITEM_NUMBER((short)4, "itemNumber"),
    RMB_NUMBER((short)5, "rmbNumber"),
    CREATE_TIME((short)6, "createTime"),
    UPDATE_TIME((short)7, "updateTime"),
    BEFORE_CHANGE((short)8, "beforeChange"),
    AFTER_CHANGE((short)9, "afterChange"),
    REASON((short)10, "reason"),
    ORDER_ID((short)11, "orderId"),
    ALIPAY_ACCOUNT((short)12, "alipayAccount"),
    ALIPAY_NAME((short)13, "alipayName"),
    FINISH_TIME((short)14, "finishTime"),
    COMMENT((short)15, "comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // UID
          return UID;
        case 3: // STATUS
          return STATUS;
        case 4: // ITEM_NUMBER
          return ITEM_NUMBER;
        case 5: // RMB_NUMBER
          return RMB_NUMBER;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        case 8: // BEFORE_CHANGE
          return BEFORE_CHANGE;
        case 9: // AFTER_CHANGE
          return AFTER_CHANGE;
        case 10: // REASON
          return REASON;
        case 11: // ORDER_ID
          return ORDER_ID;
        case 12: // ALIPAY_ACCOUNT
          return ALIPAY_ACCOUNT;
        case 13: // ALIPAY_NAME
          return ALIPAY_NAME;
        case 14: // FINISH_TIME
          return FINISH_TIME;
        case 15: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __ITEMNUMBER_ISSET_ID = 3;
  private static final int __RMBNUMBER_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private static final int __UPDATETIME_ISSET_ID = 6;
  private static final int __BEFORECHANGE_ISSET_ID = 7;
  private static final int __AFTERCHANGE_ISSET_ID = 8;
  private static final int __FINISHTIME_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("itemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RMB_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("rmbNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEFORE_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("beforeChange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AFTER_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("afterChange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIPAY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("alipayAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIPAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("alipayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExtractRmbView.class, metaDataMap);
  }

  public ExtractRmbView() {
  }

  public ExtractRmbView(
    long id,
    long uid,
    int status,
    double itemNumber,
    double rmbNumber,
    int createTime,
    int updateTime,
    double beforeChange,
    double afterChange,
    String reason,
    String orderId,
    String alipayAccount,
    String alipayName,
    int finishTime,
    String comment)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.itemNumber = itemNumber;
    setItemNumberIsSet(true);
    this.rmbNumber = rmbNumber;
    setRmbNumberIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.beforeChange = beforeChange;
    setBeforeChangeIsSet(true);
    this.afterChange = afterChange;
    setAfterChangeIsSet(true);
    this.reason = reason;
    this.orderId = orderId;
    this.alipayAccount = alipayAccount;
    this.alipayName = alipayName;
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExtractRmbView(ExtractRmbView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.uid = other.uid;
    this.status = other.status;
    this.itemNumber = other.itemNumber;
    this.rmbNumber = other.rmbNumber;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.beforeChange = other.beforeChange;
    this.afterChange = other.afterChange;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetAlipayAccount()) {
      this.alipayAccount = other.alipayAccount;
    }
    if (other.isSetAlipayName()) {
      this.alipayName = other.alipayName;
    }
    this.finishTime = other.finishTime;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  public ExtractRmbView deepCopy() {
    return new ExtractRmbView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUidIsSet(false);
    this.uid = 0;
    setStatusIsSet(false);
    this.status = 0;
    setItemNumberIsSet(false);
    this.itemNumber = 0.0;
    setRmbNumberIsSet(false);
    this.rmbNumber = 0.0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setBeforeChangeIsSet(false);
    this.beforeChange = 0.0;
    setAfterChangeIsSet(false);
    this.afterChange = 0.0;
    this.reason = null;
    this.orderId = null;
    this.alipayAccount = null;
    this.alipayName = null;
    setFinishTimeIsSet(false);
    this.finishTime = 0;
    this.comment = null;
  }

  public long getId() {
    return this.id;
  }

  public ExtractRmbView setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public ExtractRmbView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public ExtractRmbView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getItemNumber() {
    return this.itemNumber;
  }

  public ExtractRmbView setItemNumber(double itemNumber) {
    this.itemNumber = itemNumber;
    setItemNumberIsSet(true);
    return this;
  }

  public void unsetItemNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID);
  }

  /** Returns true if field itemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetItemNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID);
  }

  public void setItemNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID, value);
  }

  public double getRmbNumber() {
    return this.rmbNumber;
  }

  public ExtractRmbView setRmbNumber(double rmbNumber) {
    this.rmbNumber = rmbNumber;
    setRmbNumberIsSet(true);
    return this;
  }

  public void unsetRmbNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RMBNUMBER_ISSET_ID);
  }

  /** Returns true if field rmbNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRmbNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __RMBNUMBER_ISSET_ID);
  }

  public void setRmbNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RMBNUMBER_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public ExtractRmbView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public ExtractRmbView setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public double getBeforeChange() {
    return this.beforeChange;
  }

  public ExtractRmbView setBeforeChange(double beforeChange) {
    this.beforeChange = beforeChange;
    setBeforeChangeIsSet(true);
    return this;
  }

  public void unsetBeforeChange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEFORECHANGE_ISSET_ID);
  }

  /** Returns true if field beforeChange is set (has been assigned a value) and false otherwise */
  public boolean isSetBeforeChange() {
    return EncodingUtils.testBit(__isset_bitfield, __BEFORECHANGE_ISSET_ID);
  }

  public void setBeforeChangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEFORECHANGE_ISSET_ID, value);
  }

  public double getAfterChange() {
    return this.afterChange;
  }

  public ExtractRmbView setAfterChange(double afterChange) {
    this.afterChange = afterChange;
    setAfterChangeIsSet(true);
    return this;
  }

  public void unsetAfterChange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTERCHANGE_ISSET_ID);
  }

  /** Returns true if field afterChange is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterChange() {
    return EncodingUtils.testBit(__isset_bitfield, __AFTERCHANGE_ISSET_ID);
  }

  public void setAfterChangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTERCHANGE_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public ExtractRmbView setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public String getOrderId() {
    return this.orderId;
  }

  public ExtractRmbView setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getAlipayAccount() {
    return this.alipayAccount;
  }

  public ExtractRmbView setAlipayAccount(String alipayAccount) {
    this.alipayAccount = alipayAccount;
    return this;
  }

  public void unsetAlipayAccount() {
    this.alipayAccount = null;
  }

  /** Returns true if field alipayAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipayAccount() {
    return this.alipayAccount != null;
  }

  public void setAlipayAccountIsSet(boolean value) {
    if (!value) {
      this.alipayAccount = null;
    }
  }

  public String getAlipayName() {
    return this.alipayName;
  }

  public ExtractRmbView setAlipayName(String alipayName) {
    this.alipayName = alipayName;
    return this;
  }

  public void unsetAlipayName() {
    this.alipayName = null;
  }

  /** Returns true if field alipayName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipayName() {
    return this.alipayName != null;
  }

  public void setAlipayNameIsSet(boolean value) {
    if (!value) {
      this.alipayName = null;
    }
  }

  public int getFinishTime() {
    return this.finishTime;
  }

  public ExtractRmbView setFinishTime(int finishTime) {
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHTIME_ISSET_ID, value);
  }

  public String getComment() {
    return this.comment;
  }

  public ExtractRmbView setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ITEM_NUMBER:
      if (value == null) {
        unsetItemNumber();
      } else {
        setItemNumber((Double)value);
      }
      break;

    case RMB_NUMBER:
      if (value == null) {
        unsetRmbNumber();
      } else {
        setRmbNumber((Double)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    case BEFORE_CHANGE:
      if (value == null) {
        unsetBeforeChange();
      } else {
        setBeforeChange((Double)value);
      }
      break;

    case AFTER_CHANGE:
      if (value == null) {
        unsetAfterChange();
      } else {
        setAfterChange((Double)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case ALIPAY_ACCOUNT:
      if (value == null) {
        unsetAlipayAccount();
      } else {
        setAlipayAccount((String)value);
      }
      break;

    case ALIPAY_NAME:
      if (value == null) {
        unsetAlipayName();
      } else {
        setAlipayName((String)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case UID:
      return Long.valueOf(getUid());

    case STATUS:
      return Integer.valueOf(getStatus());

    case ITEM_NUMBER:
      return Double.valueOf(getItemNumber());

    case RMB_NUMBER:
      return Double.valueOf(getRmbNumber());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    case BEFORE_CHANGE:
      return Double.valueOf(getBeforeChange());

    case AFTER_CHANGE:
      return Double.valueOf(getAfterChange());

    case REASON:
      return getReason();

    case ORDER_ID:
      return getOrderId();

    case ALIPAY_ACCOUNT:
      return getAlipayAccount();

    case ALIPAY_NAME:
      return getAlipayName();

    case FINISH_TIME:
      return Integer.valueOf(getFinishTime());

    case COMMENT:
      return getComment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case UID:
      return isSetUid();
    case STATUS:
      return isSetStatus();
    case ITEM_NUMBER:
      return isSetItemNumber();
    case RMB_NUMBER:
      return isSetRmbNumber();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case BEFORE_CHANGE:
      return isSetBeforeChange();
    case AFTER_CHANGE:
      return isSetAfterChange();
    case REASON:
      return isSetReason();
    case ORDER_ID:
      return isSetOrderId();
    case ALIPAY_ACCOUNT:
      return isSetAlipayAccount();
    case ALIPAY_NAME:
      return isSetAlipayName();
    case FINISH_TIME:
      return isSetFinishTime();
    case COMMENT:
      return isSetComment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExtractRmbView)
      return this.equals((ExtractRmbView)that);
    return false;
  }

  public boolean equals(ExtractRmbView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_itemNumber = true;
    boolean that_present_itemNumber = true;
    if (this_present_itemNumber || that_present_itemNumber) {
      if (!(this_present_itemNumber && that_present_itemNumber))
        return false;
      if (this.itemNumber != that.itemNumber)
        return false;
    }

    boolean this_present_rmbNumber = true;
    boolean that_present_rmbNumber = true;
    if (this_present_rmbNumber || that_present_rmbNumber) {
      if (!(this_present_rmbNumber && that_present_rmbNumber))
        return false;
      if (this.rmbNumber != that.rmbNumber)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_beforeChange = true;
    boolean that_present_beforeChange = true;
    if (this_present_beforeChange || that_present_beforeChange) {
      if (!(this_present_beforeChange && that_present_beforeChange))
        return false;
      if (this.beforeChange != that.beforeChange)
        return false;
    }

    boolean this_present_afterChange = true;
    boolean that_present_afterChange = true;
    if (this_present_afterChange || that_present_afterChange) {
      if (!(this_present_afterChange && that_present_afterChange))
        return false;
      if (this.afterChange != that.afterChange)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_alipayAccount = true && this.isSetAlipayAccount();
    boolean that_present_alipayAccount = true && that.isSetAlipayAccount();
    if (this_present_alipayAccount || that_present_alipayAccount) {
      if (!(this_present_alipayAccount && that_present_alipayAccount))
        return false;
      if (!this.alipayAccount.equals(that.alipayAccount))
        return false;
    }

    boolean this_present_alipayName = true && this.isSetAlipayName();
    boolean that_present_alipayName = true && that.isSetAlipayName();
    if (this_present_alipayName || that_present_alipayName) {
      if (!(this_present_alipayName && that_present_alipayName))
        return false;
      if (!this.alipayName.equals(that.alipayName))
        return false;
    }

    boolean this_present_finishTime = true;
    boolean that_present_finishTime = true;
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (this.finishTime != that.finishTime)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ExtractRmbView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExtractRmbView typedOther = (ExtractRmbView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemNumber()).compareTo(typedOther.isSetItemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNumber, typedOther.itemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRmbNumber()).compareTo(typedOther.isSetRmbNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRmbNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rmbNumber, typedOther.rmbNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeforeChange()).compareTo(typedOther.isSetBeforeChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeforeChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beforeChange, typedOther.beforeChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterChange()).compareTo(typedOther.isSetAfterChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterChange, typedOther.afterChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipayAccount()).compareTo(typedOther.isSetAlipayAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipayAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayAccount, typedOther.alipayAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipayName()).compareTo(typedOther.isSetAlipayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayName, typedOther.alipayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(typedOther.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, typedOther.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExtractRmbView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemNumber:");
    sb.append(this.itemNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rmbNumber:");
    sb.append(this.rmbNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beforeChange:");
    sb.append(this.beforeChange);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterChange:");
    sb.append(this.afterChange);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alipayAccount:");
    if (this.alipayAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.alipayAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alipayName:");
    if (this.alipayName == null) {
      sb.append("null");
    } else {
      sb.append(this.alipayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    sb.append(this.finishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExtractRmbViewStandardSchemeFactory implements SchemeFactory {
    public ExtractRmbViewStandardScheme getScheme() {
      return new ExtractRmbViewStandardScheme();
    }
  }

  private static class ExtractRmbViewStandardScheme extends StandardScheme<ExtractRmbView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExtractRmbView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemNumber = iprot.readDouble();
              struct.setItemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RMB_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rmbNumber = iprot.readDouble();
              struct.setRmbNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BEFORE_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.beforeChange = iprot.readDouble();
              struct.setBeforeChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AFTER_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.afterChange = iprot.readDouble();
              struct.setAfterChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ALIPAY_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alipayAccount = iprot.readString();
              struct.setAlipayAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ALIPAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alipayName = iprot.readString();
              struct.setAlipayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.finishTime = iprot.readI32();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExtractRmbView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.itemNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RMB_NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.rmbNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEFORE_CHANGE_FIELD_DESC);
      oprot.writeDouble(struct.beforeChange);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AFTER_CHANGE_FIELD_DESC);
      oprot.writeDouble(struct.afterChange);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.alipayAccount != null) {
        oprot.writeFieldBegin(ALIPAY_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.alipayAccount);
        oprot.writeFieldEnd();
      }
      if (struct.alipayName != null) {
        oprot.writeFieldBegin(ALIPAY_NAME_FIELD_DESC);
        oprot.writeString(struct.alipayName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
      oprot.writeI32(struct.finishTime);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(struct.comment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExtractRmbViewTupleSchemeFactory implements SchemeFactory {
    public ExtractRmbViewTupleScheme getScheme() {
      return new ExtractRmbViewTupleScheme();
    }
  }

  private static class ExtractRmbViewTupleScheme extends TupleScheme<ExtractRmbView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExtractRmbView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetItemNumber()) {
        optionals.set(3);
      }
      if (struct.isSetRmbNumber()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      if (struct.isSetBeforeChange()) {
        optionals.set(7);
      }
      if (struct.isSetAfterChange()) {
        optionals.set(8);
      }
      if (struct.isSetReason()) {
        optionals.set(9);
      }
      if (struct.isSetOrderId()) {
        optionals.set(10);
      }
      if (struct.isSetAlipayAccount()) {
        optionals.set(11);
      }
      if (struct.isSetAlipayName()) {
        optionals.set(12);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(13);
      }
      if (struct.isSetComment()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetItemNumber()) {
        oprot.writeDouble(struct.itemNumber);
      }
      if (struct.isSetRmbNumber()) {
        oprot.writeDouble(struct.rmbNumber);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
      if (struct.isSetBeforeChange()) {
        oprot.writeDouble(struct.beforeChange);
      }
      if (struct.isSetAfterChange()) {
        oprot.writeDouble(struct.afterChange);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetAlipayAccount()) {
        oprot.writeString(struct.alipayAccount);
      }
      if (struct.isSetAlipayName()) {
        oprot.writeString(struct.alipayName);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeI32(struct.finishTime);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExtractRmbView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemNumber = iprot.readDouble();
        struct.setItemNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rmbNumber = iprot.readDouble();
        struct.setRmbNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.beforeChange = iprot.readDouble();
        struct.setBeforeChangeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.afterChange = iprot.readDouble();
        struct.setAfterChangeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(10)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.alipayAccount = iprot.readString();
        struct.setAlipayAccountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.alipayName = iprot.readString();
        struct.setAlipayNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.finishTime = iprot.readI32();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
    }
  }

}

