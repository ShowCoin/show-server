/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StockLogView implements org.apache.thrift.TBase<StockLogView, StockLogView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StockLogView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ITEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNumber", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField OPERATE_FIELD_DESC = new org.apache.thrift.protocol.TField("operate", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ACTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actionTime", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ACTION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDesc", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BEFORE_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("beforeChange", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField AFTER_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("afterChange", org.apache.thrift.protocol.TType.DOUBLE, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StockLogViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StockLogViewTupleSchemeFactory());
  }

  public int id; // required
  public long uid; // required
  public int itemId; // required
  public String itemName; // required
  public int itemType; // required
  public double itemNumber; // required
  public int operate; // required
  public int actionTime; // required
  public int actionType; // required
  public String actionDesc; // required
  public double beforeChange; // required
  public double afterChange; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    UID((short)2, "uid"),
    ITEM_ID((short)3, "itemId"),
    ITEM_NAME((short)4, "itemName"),
    ITEM_TYPE((short)5, "itemType"),
    ITEM_NUMBER((short)6, "itemNumber"),
    OPERATE((short)7, "operate"),
    ACTION_TIME((short)8, "actionTime"),
    ACTION_TYPE((short)9, "actionType"),
    ACTION_DESC((short)10, "actionDesc"),
    BEFORE_CHANGE((short)11, "beforeChange"),
    AFTER_CHANGE((short)12, "afterChange");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // UID
          return UID;
        case 3: // ITEM_ID
          return ITEM_ID;
        case 4: // ITEM_NAME
          return ITEM_NAME;
        case 5: // ITEM_TYPE
          return ITEM_TYPE;
        case 6: // ITEM_NUMBER
          return ITEM_NUMBER;
        case 7: // OPERATE
          return OPERATE;
        case 8: // ACTION_TIME
          return ACTION_TIME;
        case 9: // ACTION_TYPE
          return ACTION_TYPE;
        case 10: // ACTION_DESC
          return ACTION_DESC;
        case 11: // BEFORE_CHANGE
          return BEFORE_CHANGE;
        case 12: // AFTER_CHANGE
          return AFTER_CHANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __ITEMID_ISSET_ID = 2;
  private static final int __ITEMTYPE_ISSET_ID = 3;
  private static final int __ITEMNUMBER_ISSET_ID = 4;
  private static final int __OPERATE_ISSET_ID = 5;
  private static final int __ACTIONTIME_ISSET_ID = 6;
  private static final int __ACTIONTYPE_ISSET_ID = 7;
  private static final int __BEFORECHANGE_ISSET_ID = 8;
  private static final int __AFTERCHANGE_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("itemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPERATE, new org.apache.thrift.meta_data.FieldMetaData("operate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("actionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_DESC, new org.apache.thrift.meta_data.FieldMetaData("actionDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEFORE_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("beforeChange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AFTER_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("afterChange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StockLogView.class, metaDataMap);
  }

  public StockLogView() {
  }

  public StockLogView(
    int id,
    long uid,
    int itemId,
    String itemName,
    int itemType,
    double itemNumber,
    int operate,
    int actionTime,
    int actionType,
    String actionDesc,
    double beforeChange,
    double afterChange)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.itemName = itemName;
    this.itemType = itemType;
    setItemTypeIsSet(true);
    this.itemNumber = itemNumber;
    setItemNumberIsSet(true);
    this.operate = operate;
    setOperateIsSet(true);
    this.actionTime = actionTime;
    setActionTimeIsSet(true);
    this.actionType = actionType;
    setActionTypeIsSet(true);
    this.actionDesc = actionDesc;
    this.beforeChange = beforeChange;
    setBeforeChangeIsSet(true);
    this.afterChange = afterChange;
    setAfterChangeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StockLogView(StockLogView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.uid = other.uid;
    this.itemId = other.itemId;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    this.itemType = other.itemType;
    this.itemNumber = other.itemNumber;
    this.operate = other.operate;
    this.actionTime = other.actionTime;
    this.actionType = other.actionType;
    if (other.isSetActionDesc()) {
      this.actionDesc = other.actionDesc;
    }
    this.beforeChange = other.beforeChange;
    this.afterChange = other.afterChange;
  }

  public StockLogView deepCopy() {
    return new StockLogView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUidIsSet(false);
    this.uid = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
    this.itemName = null;
    setItemTypeIsSet(false);
    this.itemType = 0;
    setItemNumberIsSet(false);
    this.itemNumber = 0.0;
    setOperateIsSet(false);
    this.operate = 0;
    setActionTimeIsSet(false);
    this.actionTime = 0;
    setActionTypeIsSet(false);
    this.actionType = 0;
    this.actionDesc = null;
    setBeforeChangeIsSet(false);
    this.beforeChange = 0.0;
    setAfterChangeIsSet(false);
    this.afterChange = 0.0;
  }

  public int getId() {
    return this.id;
  }

  public StockLogView setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public StockLogView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getItemId() {
    return this.itemId;
  }

  public StockLogView setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public StockLogView setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public int getItemType() {
    return this.itemType;
  }

  public StockLogView setItemType(int itemType) {
    this.itemType = itemType;
    setItemTypeIsSet(true);
    return this;
  }

  public void unsetItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  /** Returns true if field itemType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  public void setItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
  }

  public double getItemNumber() {
    return this.itemNumber;
  }

  public StockLogView setItemNumber(double itemNumber) {
    this.itemNumber = itemNumber;
    setItemNumberIsSet(true);
    return this;
  }

  public void unsetItemNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID);
  }

  /** Returns true if field itemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetItemNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID);
  }

  public void setItemNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMNUMBER_ISSET_ID, value);
  }

  public int getOperate() {
    return this.operate;
  }

  public StockLogView setOperate(int operate) {
    this.operate = operate;
    setOperateIsSet(true);
    return this;
  }

  public void unsetOperate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATE_ISSET_ID);
  }

  /** Returns true if field operate is set (has been assigned a value) and false otherwise */
  public boolean isSetOperate() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATE_ISSET_ID);
  }

  public void setOperateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATE_ISSET_ID, value);
  }

  public int getActionTime() {
    return this.actionTime;
  }

  public StockLogView setActionTime(int actionTime) {
    this.actionTime = actionTime;
    setActionTimeIsSet(true);
    return this;
  }

  public void unsetActionTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONTIME_ISSET_ID);
  }

  /** Returns true if field actionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActionTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONTIME_ISSET_ID);
  }

  public void setActionTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONTIME_ISSET_ID, value);
  }

  public int getActionType() {
    return this.actionType;
  }

  public StockLogView setActionType(int actionType) {
    this.actionType = actionType;
    setActionTypeIsSet(true);
    return this;
  }

  public void unsetActionType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID);
  }

  /** Returns true if field actionType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID);
  }

  public void setActionTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID, value);
  }

  public String getActionDesc() {
    return this.actionDesc;
  }

  public StockLogView setActionDesc(String actionDesc) {
    this.actionDesc = actionDesc;
    return this;
  }

  public void unsetActionDesc() {
    this.actionDesc = null;
  }

  /** Returns true if field actionDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetActionDesc() {
    return this.actionDesc != null;
  }

  public void setActionDescIsSet(boolean value) {
    if (!value) {
      this.actionDesc = null;
    }
  }

  public double getBeforeChange() {
    return this.beforeChange;
  }

  public StockLogView setBeforeChange(double beforeChange) {
    this.beforeChange = beforeChange;
    setBeforeChangeIsSet(true);
    return this;
  }

  public void unsetBeforeChange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEFORECHANGE_ISSET_ID);
  }

  /** Returns true if field beforeChange is set (has been assigned a value) and false otherwise */
  public boolean isSetBeforeChange() {
    return EncodingUtils.testBit(__isset_bitfield, __BEFORECHANGE_ISSET_ID);
  }

  public void setBeforeChangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEFORECHANGE_ISSET_ID, value);
  }

  public double getAfterChange() {
    return this.afterChange;
  }

  public StockLogView setAfterChange(double afterChange) {
    this.afterChange = afterChange;
    setAfterChangeIsSet(true);
    return this;
  }

  public void unsetAfterChange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTERCHANGE_ISSET_ID);
  }

  /** Returns true if field afterChange is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterChange() {
    return EncodingUtils.testBit(__isset_bitfield, __AFTERCHANGE_ISSET_ID);
  }

  public void setAfterChangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTERCHANGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItemType();
      } else {
        setItemType((Integer)value);
      }
      break;

    case ITEM_NUMBER:
      if (value == null) {
        unsetItemNumber();
      } else {
        setItemNumber((Double)value);
      }
      break;

    case OPERATE:
      if (value == null) {
        unsetOperate();
      } else {
        setOperate((Integer)value);
      }
      break;

    case ACTION_TIME:
      if (value == null) {
        unsetActionTime();
      } else {
        setActionTime((Integer)value);
      }
      break;

    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((Integer)value);
      }
      break;

    case ACTION_DESC:
      if (value == null) {
        unsetActionDesc();
      } else {
        setActionDesc((String)value);
      }
      break;

    case BEFORE_CHANGE:
      if (value == null) {
        unsetBeforeChange();
      } else {
        setBeforeChange((Double)value);
      }
      break;

    case AFTER_CHANGE:
      if (value == null) {
        unsetAfterChange();
      } else {
        setAfterChange((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case UID:
      return Long.valueOf(getUid());

    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case ITEM_NAME:
      return getItemName();

    case ITEM_TYPE:
      return Integer.valueOf(getItemType());

    case ITEM_NUMBER:
      return Double.valueOf(getItemNumber());

    case OPERATE:
      return Integer.valueOf(getOperate());

    case ACTION_TIME:
      return Integer.valueOf(getActionTime());

    case ACTION_TYPE:
      return Integer.valueOf(getActionType());

    case ACTION_DESC:
      return getActionDesc();

    case BEFORE_CHANGE:
      return Double.valueOf(getBeforeChange());

    case AFTER_CHANGE:
      return Double.valueOf(getAfterChange());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case UID:
      return isSetUid();
    case ITEM_ID:
      return isSetItemId();
    case ITEM_NAME:
      return isSetItemName();
    case ITEM_TYPE:
      return isSetItemType();
    case ITEM_NUMBER:
      return isSetItemNumber();
    case OPERATE:
      return isSetOperate();
    case ACTION_TIME:
      return isSetActionTime();
    case ACTION_TYPE:
      return isSetActionType();
    case ACTION_DESC:
      return isSetActionDesc();
    case BEFORE_CHANGE:
      return isSetBeforeChange();
    case AFTER_CHANGE:
      return isSetAfterChange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StockLogView)
      return this.equals((StockLogView)that);
    return false;
  }

  public boolean equals(StockLogView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_itemType = true;
    boolean that_present_itemType = true;
    if (this_present_itemType || that_present_itemType) {
      if (!(this_present_itemType && that_present_itemType))
        return false;
      if (this.itemType != that.itemType)
        return false;
    }

    boolean this_present_itemNumber = true;
    boolean that_present_itemNumber = true;
    if (this_present_itemNumber || that_present_itemNumber) {
      if (!(this_present_itemNumber && that_present_itemNumber))
        return false;
      if (this.itemNumber != that.itemNumber)
        return false;
    }

    boolean this_present_operate = true;
    boolean that_present_operate = true;
    if (this_present_operate || that_present_operate) {
      if (!(this_present_operate && that_present_operate))
        return false;
      if (this.operate != that.operate)
        return false;
    }

    boolean this_present_actionTime = true;
    boolean that_present_actionTime = true;
    if (this_present_actionTime || that_present_actionTime) {
      if (!(this_present_actionTime && that_present_actionTime))
        return false;
      if (this.actionTime != that.actionTime)
        return false;
    }

    boolean this_present_actionType = true;
    boolean that_present_actionType = true;
    if (this_present_actionType || that_present_actionType) {
      if (!(this_present_actionType && that_present_actionType))
        return false;
      if (this.actionType != that.actionType)
        return false;
    }

    boolean this_present_actionDesc = true && this.isSetActionDesc();
    boolean that_present_actionDesc = true && that.isSetActionDesc();
    if (this_present_actionDesc || that_present_actionDesc) {
      if (!(this_present_actionDesc && that_present_actionDesc))
        return false;
      if (!this.actionDesc.equals(that.actionDesc))
        return false;
    }

    boolean this_present_beforeChange = true;
    boolean that_present_beforeChange = true;
    if (this_present_beforeChange || that_present_beforeChange) {
      if (!(this_present_beforeChange && that_present_beforeChange))
        return false;
      if (this.beforeChange != that.beforeChange)
        return false;
    }

    boolean this_present_afterChange = true;
    boolean that_present_afterChange = true;
    if (this_present_afterChange || that_present_afterChange) {
      if (!(this_present_afterChange && that_present_afterChange))
        return false;
      if (this.afterChange != that.afterChange)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StockLogView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StockLogView typedOther = (StockLogView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(typedOther.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, typedOther.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemType()).compareTo(typedOther.isSetItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemType, typedOther.itemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemNumber()).compareTo(typedOther.isSetItemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNumber, typedOther.itemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperate()).compareTo(typedOther.isSetOperate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operate, typedOther.operate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionTime()).compareTo(typedOther.isSetActionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionTime, typedOther.actionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionType()).compareTo(typedOther.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionType, typedOther.actionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDesc()).compareTo(typedOther.isSetActionDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDesc, typedOther.actionDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeforeChange()).compareTo(typedOther.isSetBeforeChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeforeChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beforeChange, typedOther.beforeChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterChange()).compareTo(typedOther.isSetAfterChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterChange, typedOther.afterChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StockLogView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemType:");
    sb.append(this.itemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemNumber:");
    sb.append(this.itemNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operate:");
    sb.append(this.operate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionTime:");
    sb.append(this.actionTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionType:");
    sb.append(this.actionType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionDesc:");
    if (this.actionDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.actionDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beforeChange:");
    sb.append(this.beforeChange);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterChange:");
    sb.append(this.afterChange);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StockLogViewStandardSchemeFactory implements SchemeFactory {
    public StockLogViewStandardScheme getScheme() {
      return new StockLogViewStandardScheme();
    }
  }

  private static class StockLogViewStandardScheme extends StandardScheme<StockLogView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StockLogView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemType = iprot.readI32();
              struct.setItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ITEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemNumber = iprot.readDouble();
              struct.setItemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPERATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operate = iprot.readI32();
              struct.setOperateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionTime = iprot.readI32();
              struct.setActionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionType = iprot.readI32();
              struct.setActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTION_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionDesc = iprot.readString();
              struct.setActionDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BEFORE_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.beforeChange = iprot.readDouble();
              struct.setBeforeChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AFTER_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.afterChange = iprot.readDouble();
              struct.setAfterChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StockLogView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.itemType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.itemNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPERATE_FIELD_DESC);
      oprot.writeI32(struct.operate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_TIME_FIELD_DESC);
      oprot.writeI32(struct.actionTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.actionType);
      oprot.writeFieldEnd();
      if (struct.actionDesc != null) {
        oprot.writeFieldBegin(ACTION_DESC_FIELD_DESC);
        oprot.writeString(struct.actionDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BEFORE_CHANGE_FIELD_DESC);
      oprot.writeDouble(struct.beforeChange);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AFTER_CHANGE_FIELD_DESC);
      oprot.writeDouble(struct.afterChange);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StockLogViewTupleSchemeFactory implements SchemeFactory {
    public StockLogViewTupleScheme getScheme() {
      return new StockLogViewTupleScheme();
    }
  }

  private static class StockLogViewTupleScheme extends TupleScheme<StockLogView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StockLogView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetItemId()) {
        optionals.set(2);
      }
      if (struct.isSetItemName()) {
        optionals.set(3);
      }
      if (struct.isSetItemType()) {
        optionals.set(4);
      }
      if (struct.isSetItemNumber()) {
        optionals.set(5);
      }
      if (struct.isSetOperate()) {
        optionals.set(6);
      }
      if (struct.isSetActionTime()) {
        optionals.set(7);
      }
      if (struct.isSetActionType()) {
        optionals.set(8);
      }
      if (struct.isSetActionDesc()) {
        optionals.set(9);
      }
      if (struct.isSetBeforeChange()) {
        optionals.set(10);
      }
      if (struct.isSetAfterChange()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetItemType()) {
        oprot.writeI32(struct.itemType);
      }
      if (struct.isSetItemNumber()) {
        oprot.writeDouble(struct.itemNumber);
      }
      if (struct.isSetOperate()) {
        oprot.writeI32(struct.operate);
      }
      if (struct.isSetActionTime()) {
        oprot.writeI32(struct.actionTime);
      }
      if (struct.isSetActionType()) {
        oprot.writeI32(struct.actionType);
      }
      if (struct.isSetActionDesc()) {
        oprot.writeString(struct.actionDesc);
      }
      if (struct.isSetBeforeChange()) {
        oprot.writeDouble(struct.beforeChange);
      }
      if (struct.isSetAfterChange()) {
        oprot.writeDouble(struct.afterChange);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StockLogView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.itemType = iprot.readI32();
        struct.setItemTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.itemNumber = iprot.readDouble();
        struct.setItemNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.operate = iprot.readI32();
        struct.setOperateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.actionTime = iprot.readI32();
        struct.setActionTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.actionType = iprot.readI32();
        struct.setActionTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.actionDesc = iprot.readString();
        struct.setActionDescIsSet(true);
      }
      if (incoming.get(10)) {
        struct.beforeChange = iprot.readDouble();
        struct.setBeforeChangeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.afterChange = iprot.readDouble();
        struct.setAfterChangeIsSet(true);
      }
    }
  }

}

