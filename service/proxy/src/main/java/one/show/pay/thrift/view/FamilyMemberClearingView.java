/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FamilyMemberClearingView implements org.apache.thrift.TBase<FamilyMemberClearingView, FamilyMemberClearingView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FamilyMemberClearingView");

  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FAMILY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("familyId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ZZ_FIELD_DESC = new org.apache.thrift.protocol.TField("userZz", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USER_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("userIncome", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField USER_LIVE_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("userLiveDuration", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField USER_LIVE_EFFECTIVE_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("userLiveEffectiveDays", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField USER_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userNickName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField USER_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("userPid", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FamilyMemberClearingViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FamilyMemberClearingViewTupleSchemeFactory());
  }

  public int cid; // required
  public long familyId; // required
  public long userId; // required
  public int role; // required
  public int userZz; // required
  public double userIncome; // required
  public int userLiveDuration; // required
  public int userLiveEffectiveDays; // required
  public int createTime; // required
  public String userNickName; // required
  public long userPid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CID((short)1, "cid"),
    FAMILY_ID((short)2, "familyId"),
    USER_ID((short)3, "userId"),
    ROLE((short)4, "role"),
    USER_ZZ((short)5, "userZz"),
    USER_INCOME((short)6, "userIncome"),
    USER_LIVE_DURATION((short)7, "userLiveDuration"),
    USER_LIVE_EFFECTIVE_DAYS((short)8, "userLiveEffectiveDays"),
    CREATE_TIME((short)9, "createTime"),
    USER_NICK_NAME((short)10, "userNickName"),
    USER_PID((short)11, "userPid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CID
          return CID;
        case 2: // FAMILY_ID
          return FAMILY_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // ROLE
          return ROLE;
        case 5: // USER_ZZ
          return USER_ZZ;
        case 6: // USER_INCOME
          return USER_INCOME;
        case 7: // USER_LIVE_DURATION
          return USER_LIVE_DURATION;
        case 8: // USER_LIVE_EFFECTIVE_DAYS
          return USER_LIVE_EFFECTIVE_DAYS;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // USER_NICK_NAME
          return USER_NICK_NAME;
        case 11: // USER_PID
          return USER_PID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CID_ISSET_ID = 0;
  private static final int __FAMILYID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __ROLE_ISSET_ID = 3;
  private static final int __USERZZ_ISSET_ID = 4;
  private static final int __USERINCOME_ISSET_ID = 5;
  private static final int __USERLIVEDURATION_ISSET_ID = 6;
  private static final int __USERLIVEEFFECTIVEDAYS_ISSET_ID = 7;
  private static final int __CREATETIME_ISSET_ID = 8;
  private static final int __USERPID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAMILY_ID, new org.apache.thrift.meta_data.FieldMetaData("familyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ZZ, new org.apache.thrift.meta_data.FieldMetaData("userZz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_INCOME, new org.apache.thrift.meta_data.FieldMetaData("userIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USER_LIVE_DURATION, new org.apache.thrift.meta_data.FieldMetaData("userLiveDuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_LIVE_EFFECTIVE_DAYS, new org.apache.thrift.meta_data.FieldMetaData("userLiveEffectiveDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("userNickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_PID, new org.apache.thrift.meta_data.FieldMetaData("userPid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FamilyMemberClearingView.class, metaDataMap);
  }

  public FamilyMemberClearingView() {
  }

  public FamilyMemberClearingView(
    int cid,
    long familyId,
    long userId,
    int role,
    int userZz,
    double userIncome,
    int userLiveDuration,
    int userLiveEffectiveDays,
    int createTime,
    String userNickName,
    long userPid)
  {
    this();
    this.cid = cid;
    setCidIsSet(true);
    this.familyId = familyId;
    setFamilyIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.role = role;
    setRoleIsSet(true);
    this.userZz = userZz;
    setUserZzIsSet(true);
    this.userIncome = userIncome;
    setUserIncomeIsSet(true);
    this.userLiveDuration = userLiveDuration;
    setUserLiveDurationIsSet(true);
    this.userLiveEffectiveDays = userLiveEffectiveDays;
    setUserLiveEffectiveDaysIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.userNickName = userNickName;
    this.userPid = userPid;
    setUserPidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FamilyMemberClearingView(FamilyMemberClearingView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cid = other.cid;
    this.familyId = other.familyId;
    this.userId = other.userId;
    this.role = other.role;
    this.userZz = other.userZz;
    this.userIncome = other.userIncome;
    this.userLiveDuration = other.userLiveDuration;
    this.userLiveEffectiveDays = other.userLiveEffectiveDays;
    this.createTime = other.createTime;
    if (other.isSetUserNickName()) {
      this.userNickName = other.userNickName;
    }
    this.userPid = other.userPid;
  }

  public FamilyMemberClearingView deepCopy() {
    return new FamilyMemberClearingView(this);
  }

  @Override
  public void clear() {
    setCidIsSet(false);
    this.cid = 0;
    setFamilyIdIsSet(false);
    this.familyId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setRoleIsSet(false);
    this.role = 0;
    setUserZzIsSet(false);
    this.userZz = 0;
    setUserIncomeIsSet(false);
    this.userIncome = 0.0;
    setUserLiveDurationIsSet(false);
    this.userLiveDuration = 0;
    setUserLiveEffectiveDaysIsSet(false);
    this.userLiveEffectiveDays = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.userNickName = null;
    setUserPidIsSet(false);
    this.userPid = 0;
  }

  public int getCid() {
    return this.cid;
  }

  public FamilyMemberClearingView setCid(int cid) {
    this.cid = cid;
    setCidIsSet(true);
    return this;
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getFamilyId() {
    return this.familyId;
  }

  public FamilyMemberClearingView setFamilyId(long familyId) {
    this.familyId = familyId;
    setFamilyIdIsSet(true);
    return this;
  }

  public void unsetFamilyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAMILYID_ISSET_ID);
  }

  /** Returns true if field familyId is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyId() {
    return EncodingUtils.testBit(__isset_bitfield, __FAMILYID_ISSET_ID);
  }

  public void setFamilyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAMILYID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public FamilyMemberClearingView setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getRole() {
    return this.role;
  }

  public FamilyMemberClearingView setRole(int role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ISSET_ID, value);
  }

  public int getUserZz() {
    return this.userZz;
  }

  public FamilyMemberClearingView setUserZz(int userZz) {
    this.userZz = userZz;
    setUserZzIsSet(true);
    return this;
  }

  public void unsetUserZz() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERZZ_ISSET_ID);
  }

  /** Returns true if field userZz is set (has been assigned a value) and false otherwise */
  public boolean isSetUserZz() {
    return EncodingUtils.testBit(__isset_bitfield, __USERZZ_ISSET_ID);
  }

  public void setUserZzIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERZZ_ISSET_ID, value);
  }

  public double getUserIncome() {
    return this.userIncome;
  }

  public FamilyMemberClearingView setUserIncome(double userIncome) {
    this.userIncome = userIncome;
    setUserIncomeIsSet(true);
    return this;
  }

  public void unsetUserIncome() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERINCOME_ISSET_ID);
  }

  /** Returns true if field userIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIncome() {
    return EncodingUtils.testBit(__isset_bitfield, __USERINCOME_ISSET_ID);
  }

  public void setUserIncomeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERINCOME_ISSET_ID, value);
  }

  public int getUserLiveDuration() {
    return this.userLiveDuration;
  }

  public FamilyMemberClearingView setUserLiveDuration(int userLiveDuration) {
    this.userLiveDuration = userLiveDuration;
    setUserLiveDurationIsSet(true);
    return this;
  }

  public void unsetUserLiveDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERLIVEDURATION_ISSET_ID);
  }

  /** Returns true if field userLiveDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLiveDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __USERLIVEDURATION_ISSET_ID);
  }

  public void setUserLiveDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERLIVEDURATION_ISSET_ID, value);
  }

  public int getUserLiveEffectiveDays() {
    return this.userLiveEffectiveDays;
  }

  public FamilyMemberClearingView setUserLiveEffectiveDays(int userLiveEffectiveDays) {
    this.userLiveEffectiveDays = userLiveEffectiveDays;
    setUserLiveEffectiveDaysIsSet(true);
    return this;
  }

  public void unsetUserLiveEffectiveDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERLIVEEFFECTIVEDAYS_ISSET_ID);
  }

  /** Returns true if field userLiveEffectiveDays is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLiveEffectiveDays() {
    return EncodingUtils.testBit(__isset_bitfield, __USERLIVEEFFECTIVEDAYS_ISSET_ID);
  }

  public void setUserLiveEffectiveDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERLIVEEFFECTIVEDAYS_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public FamilyMemberClearingView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getUserNickName() {
    return this.userNickName;
  }

  public FamilyMemberClearingView setUserNickName(String userNickName) {
    this.userNickName = userNickName;
    return this;
  }

  public void unsetUserNickName() {
    this.userNickName = null;
  }

  /** Returns true if field userNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserNickName() {
    return this.userNickName != null;
  }

  public void setUserNickNameIsSet(boolean value) {
    if (!value) {
      this.userNickName = null;
    }
  }

  public long getUserPid() {
    return this.userPid;
  }

  public FamilyMemberClearingView setUserPid(long userPid) {
    this.userPid = userPid;
    setUserPidIsSet(true);
    return this;
  }

  public void unsetUserPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERPID_ISSET_ID);
  }

  /** Returns true if field userPid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPid() {
    return EncodingUtils.testBit(__isset_bitfield, __USERPID_ISSET_ID);
  }

  public void setUserPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Integer)value);
      }
      break;

    case FAMILY_ID:
      if (value == null) {
        unsetFamilyId();
      } else {
        setFamilyId((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Integer)value);
      }
      break;

    case USER_ZZ:
      if (value == null) {
        unsetUserZz();
      } else {
        setUserZz((Integer)value);
      }
      break;

    case USER_INCOME:
      if (value == null) {
        unsetUserIncome();
      } else {
        setUserIncome((Double)value);
      }
      break;

    case USER_LIVE_DURATION:
      if (value == null) {
        unsetUserLiveDuration();
      } else {
        setUserLiveDuration((Integer)value);
      }
      break;

    case USER_LIVE_EFFECTIVE_DAYS:
      if (value == null) {
        unsetUserLiveEffectiveDays();
      } else {
        setUserLiveEffectiveDays((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case USER_NICK_NAME:
      if (value == null) {
        unsetUserNickName();
      } else {
        setUserNickName((String)value);
      }
      break;

    case USER_PID:
      if (value == null) {
        unsetUserPid();
      } else {
        setUserPid((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CID:
      return Integer.valueOf(getCid());

    case FAMILY_ID:
      return Long.valueOf(getFamilyId());

    case USER_ID:
      return Long.valueOf(getUserId());

    case ROLE:
      return Integer.valueOf(getRole());

    case USER_ZZ:
      return Integer.valueOf(getUserZz());

    case USER_INCOME:
      return Double.valueOf(getUserIncome());

    case USER_LIVE_DURATION:
      return Integer.valueOf(getUserLiveDuration());

    case USER_LIVE_EFFECTIVE_DAYS:
      return Integer.valueOf(getUserLiveEffectiveDays());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case USER_NICK_NAME:
      return getUserNickName();

    case USER_PID:
      return Long.valueOf(getUserPid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CID:
      return isSetCid();
    case FAMILY_ID:
      return isSetFamilyId();
    case USER_ID:
      return isSetUserId();
    case ROLE:
      return isSetRole();
    case USER_ZZ:
      return isSetUserZz();
    case USER_INCOME:
      return isSetUserIncome();
    case USER_LIVE_DURATION:
      return isSetUserLiveDuration();
    case USER_LIVE_EFFECTIVE_DAYS:
      return isSetUserLiveEffectiveDays();
    case CREATE_TIME:
      return isSetCreateTime();
    case USER_NICK_NAME:
      return isSetUserNickName();
    case USER_PID:
      return isSetUserPid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FamilyMemberClearingView)
      return this.equals((FamilyMemberClearingView)that);
    return false;
  }

  public boolean equals(FamilyMemberClearingView that) {
    if (that == null)
      return false;

    boolean this_present_cid = true;
    boolean that_present_cid = true;
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_familyId = true;
    boolean that_present_familyId = true;
    if (this_present_familyId || that_present_familyId) {
      if (!(this_present_familyId && that_present_familyId))
        return false;
      if (this.familyId != that.familyId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (this.role != that.role)
        return false;
    }

    boolean this_present_userZz = true;
    boolean that_present_userZz = true;
    if (this_present_userZz || that_present_userZz) {
      if (!(this_present_userZz && that_present_userZz))
        return false;
      if (this.userZz != that.userZz)
        return false;
    }

    boolean this_present_userIncome = true;
    boolean that_present_userIncome = true;
    if (this_present_userIncome || that_present_userIncome) {
      if (!(this_present_userIncome && that_present_userIncome))
        return false;
      if (this.userIncome != that.userIncome)
        return false;
    }

    boolean this_present_userLiveDuration = true;
    boolean that_present_userLiveDuration = true;
    if (this_present_userLiveDuration || that_present_userLiveDuration) {
      if (!(this_present_userLiveDuration && that_present_userLiveDuration))
        return false;
      if (this.userLiveDuration != that.userLiveDuration)
        return false;
    }

    boolean this_present_userLiveEffectiveDays = true;
    boolean that_present_userLiveEffectiveDays = true;
    if (this_present_userLiveEffectiveDays || that_present_userLiveEffectiveDays) {
      if (!(this_present_userLiveEffectiveDays && that_present_userLiveEffectiveDays))
        return false;
      if (this.userLiveEffectiveDays != that.userLiveEffectiveDays)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_userNickName = true && this.isSetUserNickName();
    boolean that_present_userNickName = true && that.isSetUserNickName();
    if (this_present_userNickName || that_present_userNickName) {
      if (!(this_present_userNickName && that_present_userNickName))
        return false;
      if (!this.userNickName.equals(that.userNickName))
        return false;
    }

    boolean this_present_userPid = true;
    boolean that_present_userPid = true;
    if (this_present_userPid || that_present_userPid) {
      if (!(this_present_userPid && that_present_userPid))
        return false;
      if (this.userPid != that.userPid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FamilyMemberClearingView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FamilyMemberClearingView typedOther = (FamilyMemberClearingView)other;

    lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyId()).compareTo(typedOther.isSetFamilyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyId, typedOther.familyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(typedOther.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, typedOther.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserZz()).compareTo(typedOther.isSetUserZz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserZz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userZz, typedOther.userZz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIncome()).compareTo(typedOther.isSetUserIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIncome, typedOther.userIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLiveDuration()).compareTo(typedOther.isSetUserLiveDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLiveDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLiveDuration, typedOther.userLiveDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLiveEffectiveDays()).compareTo(typedOther.isSetUserLiveEffectiveDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLiveEffectiveDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLiveEffectiveDays, typedOther.userLiveEffectiveDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserNickName()).compareTo(typedOther.isSetUserNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNickName, typedOther.userNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPid()).compareTo(typedOther.isSetUserPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPid, typedOther.userPid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FamilyMemberClearingView(");
    boolean first = true;

    sb.append("cid:");
    sb.append(this.cid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyId:");
    sb.append(this.familyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    sb.append(this.role);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userZz:");
    sb.append(this.userZz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIncome:");
    sb.append(this.userIncome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLiveDuration:");
    sb.append(this.userLiveDuration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLiveEffectiveDays:");
    sb.append(this.userLiveEffectiveDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userNickName:");
    if (this.userNickName == null) {
      sb.append("null");
    } else {
      sb.append(this.userNickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userPid:");
    sb.append(this.userPid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FamilyMemberClearingViewStandardSchemeFactory implements SchemeFactory {
    public FamilyMemberClearingViewStandardScheme getScheme() {
      return new FamilyMemberClearingViewStandardScheme();
    }
  }

  private static class FamilyMemberClearingViewStandardScheme extends StandardScheme<FamilyMemberClearingView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FamilyMemberClearingView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cid = iprot.readI32();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAMILY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.familyId = iprot.readI64();
              struct.setFamilyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role = iprot.readI32();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ZZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userZz = iprot.readI32();
              struct.setUserZzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.userIncome = iprot.readDouble();
              struct.setUserIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_LIVE_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userLiveDuration = iprot.readI32();
              struct.setUserLiveDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_LIVE_EFFECTIVE_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userLiveEffectiveDays = iprot.readI32();
              struct.setUserLiveEffectiveDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userNickName = iprot.readString();
              struct.setUserNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userPid = iprot.readI64();
              struct.setUserPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FamilyMemberClearingView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CID_FIELD_DESC);
      oprot.writeI32(struct.cid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAMILY_ID_FIELD_DESC);
      oprot.writeI64(struct.familyId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(struct.role);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ZZ_FIELD_DESC);
      oprot.writeI32(struct.userZz);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_INCOME_FIELD_DESC);
      oprot.writeDouble(struct.userIncome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_LIVE_DURATION_FIELD_DESC);
      oprot.writeI32(struct.userLiveDuration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_LIVE_EFFECTIVE_DAYS_FIELD_DESC);
      oprot.writeI32(struct.userLiveEffectiveDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.userNickName != null) {
        oprot.writeFieldBegin(USER_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.userNickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_PID_FIELD_DESC);
      oprot.writeI64(struct.userPid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FamilyMemberClearingViewTupleSchemeFactory implements SchemeFactory {
    public FamilyMemberClearingViewTupleScheme getScheme() {
      return new FamilyMemberClearingViewTupleScheme();
    }
  }

  private static class FamilyMemberClearingViewTupleScheme extends TupleScheme<FamilyMemberClearingView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FamilyMemberClearingView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCid()) {
        optionals.set(0);
      }
      if (struct.isSetFamilyId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetRole()) {
        optionals.set(3);
      }
      if (struct.isSetUserZz()) {
        optionals.set(4);
      }
      if (struct.isSetUserIncome()) {
        optionals.set(5);
      }
      if (struct.isSetUserLiveDuration()) {
        optionals.set(6);
      }
      if (struct.isSetUserLiveEffectiveDays()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetUserNickName()) {
        optionals.set(9);
      }
      if (struct.isSetUserPid()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetCid()) {
        oprot.writeI32(struct.cid);
      }
      if (struct.isSetFamilyId()) {
        oprot.writeI64(struct.familyId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRole()) {
        oprot.writeI32(struct.role);
      }
      if (struct.isSetUserZz()) {
        oprot.writeI32(struct.userZz);
      }
      if (struct.isSetUserIncome()) {
        oprot.writeDouble(struct.userIncome);
      }
      if (struct.isSetUserLiveDuration()) {
        oprot.writeI32(struct.userLiveDuration);
      }
      if (struct.isSetUserLiveEffectiveDays()) {
        oprot.writeI32(struct.userLiveEffectiveDays);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetUserNickName()) {
        oprot.writeString(struct.userNickName);
      }
      if (struct.isSetUserPid()) {
        oprot.writeI64(struct.userPid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FamilyMemberClearingView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.cid = iprot.readI32();
        struct.setCidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.familyId = iprot.readI64();
        struct.setFamilyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.role = iprot.readI32();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userZz = iprot.readI32();
        struct.setUserZzIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userIncome = iprot.readDouble();
        struct.setUserIncomeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userLiveDuration = iprot.readI32();
        struct.setUserLiveDurationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userLiveEffectiveDays = iprot.readI32();
        struct.setUserLiveEffectiveDaysIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.userNickName = iprot.readString();
        struct.setUserNickNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userPid = iprot.readI64();
        struct.setUserPidIsSet(true);
      }
    }
  }

}

