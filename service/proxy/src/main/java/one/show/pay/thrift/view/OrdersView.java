/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrdersView implements org.apache.thrift.TBase<OrdersView, OrdersView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrdersView");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PAY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("payStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PAY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("payMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("payTime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ITEM_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNum", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField RECEIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("receipt", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionId", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrdersViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrdersViewTupleSchemeFactory());
  }

  public long orderId; // required
  public long uid; // required
  public int payStatus; // required
  public int payType; // required
  public double payMoney; // required
  public int payTime; // required
  public int createTime; // required
  public String nickName; // required
  public double itemNum; // required
  public int itemId; // required
  public int itemType; // required
  public String did; // required
  public String receipt; // required
  public int platform; // required
  public String transactionId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    UID((short)2, "uid"),
    PAY_STATUS((short)3, "payStatus"),
    PAY_TYPE((short)4, "payType"),
    PAY_MONEY((short)5, "payMoney"),
    PAY_TIME((short)6, "payTime"),
    CREATE_TIME((short)7, "createTime"),
    NICK_NAME((short)8, "nickName"),
    ITEM_NUM((short)9, "itemNum"),
    ITEM_ID((short)10, "itemId"),
    ITEM_TYPE((short)11, "itemType"),
    DID((short)12, "did"),
    RECEIPT((short)13, "receipt"),
    PLATFORM((short)14, "platform"),
    TRANSACTION_ID((short)15, "transactionId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // UID
          return UID;
        case 3: // PAY_STATUS
          return PAY_STATUS;
        case 4: // PAY_TYPE
          return PAY_TYPE;
        case 5: // PAY_MONEY
          return PAY_MONEY;
        case 6: // PAY_TIME
          return PAY_TIME;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // NICK_NAME
          return NICK_NAME;
        case 9: // ITEM_NUM
          return ITEM_NUM;
        case 10: // ITEM_ID
          return ITEM_ID;
        case 11: // ITEM_TYPE
          return ITEM_TYPE;
        case 12: // DID
          return DID;
        case 13: // RECEIPT
          return RECEIPT;
        case 14: // PLATFORM
          return PLATFORM;
        case 15: // TRANSACTION_ID
          return TRANSACTION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __PAYSTATUS_ISSET_ID = 2;
  private static final int __PAYTYPE_ISSET_ID = 3;
  private static final int __PAYMONEY_ISSET_ID = 4;
  private static final int __PAYTIME_ISSET_ID = 5;
  private static final int __CREATETIME_ISSET_ID = 6;
  private static final int __ITEMNUM_ISSET_ID = 7;
  private static final int __ITEMID_ISSET_ID = 8;
  private static final int __ITEMTYPE_ISSET_ID = 9;
  private static final int __PLATFORM_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("payStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("payMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("payTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_NUM, new org.apache.thrift.meta_data.FieldMetaData("itemNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIPT, new org.apache.thrift.meta_data.FieldMetaData("receipt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transactionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrdersView.class, metaDataMap);
  }

  public OrdersView() {
  }

  public OrdersView(
    long orderId,
    long uid,
    int payStatus,
    int payType,
    double payMoney,
    int payTime,
    int createTime,
    String nickName,
    double itemNum,
    int itemId,
    int itemType,
    String did,
    String receipt,
    int platform,
    String transactionId)
  {
    this();
    this.orderId = orderId;
    setOrderIdIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.payStatus = payStatus;
    setPayStatusIsSet(true);
    this.payType = payType;
    setPayTypeIsSet(true);
    this.payMoney = payMoney;
    setPayMoneyIsSet(true);
    this.payTime = payTime;
    setPayTimeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.nickName = nickName;
    this.itemNum = itemNum;
    setItemNumIsSet(true);
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.itemType = itemType;
    setItemTypeIsSet(true);
    this.did = did;
    this.receipt = receipt;
    this.platform = platform;
    setPlatformIsSet(true);
    this.transactionId = transactionId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrdersView(OrdersView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderId = other.orderId;
    this.uid = other.uid;
    this.payStatus = other.payStatus;
    this.payType = other.payType;
    this.payMoney = other.payMoney;
    this.payTime = other.payTime;
    this.createTime = other.createTime;
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    this.itemNum = other.itemNum;
    this.itemId = other.itemId;
    this.itemType = other.itemType;
    if (other.isSetDid()) {
      this.did = other.did;
    }
    if (other.isSetReceipt()) {
      this.receipt = other.receipt;
    }
    this.platform = other.platform;
    if (other.isSetTransactionId()) {
      this.transactionId = other.transactionId;
    }
  }

  public OrdersView deepCopy() {
    return new OrdersView(this);
  }

  @Override
  public void clear() {
    setOrderIdIsSet(false);
    this.orderId = 0;
    setUidIsSet(false);
    this.uid = 0;
    setPayStatusIsSet(false);
    this.payStatus = 0;
    setPayTypeIsSet(false);
    this.payType = 0;
    setPayMoneyIsSet(false);
    this.payMoney = 0.0;
    setPayTimeIsSet(false);
    this.payTime = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.nickName = null;
    setItemNumIsSet(false);
    this.itemNum = 0.0;
    setItemIdIsSet(false);
    this.itemId = 0;
    setItemTypeIsSet(false);
    this.itemType = 0;
    this.did = null;
    this.receipt = null;
    setPlatformIsSet(false);
    this.platform = 0;
    this.transactionId = null;
  }

  public long getOrderId() {
    return this.orderId;
  }

  public OrdersView setOrderId(long orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public OrdersView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getPayStatus() {
    return this.payStatus;
  }

  public OrdersView setPayStatus(int payStatus) {
    this.payStatus = payStatus;
    setPayStatusIsSet(true);
    return this;
  }

  public void unsetPayStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYSTATUS_ISSET_ID);
  }

  /** Returns true if field payStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPayStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYSTATUS_ISSET_ID);
  }

  public void setPayStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYSTATUS_ISSET_ID, value);
  }

  public int getPayType() {
    return this.payType;
  }

  public OrdersView setPayType(int payType) {
    this.payType = payType;
    setPayTypeIsSet(true);
    return this;
  }

  public void unsetPayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  public void setPayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYTYPE_ISSET_ID, value);
  }

  public double getPayMoney() {
    return this.payMoney;
  }

  public OrdersView setPayMoney(double payMoney) {
    this.payMoney = payMoney;
    setPayMoneyIsSet(true);
    return this;
  }

  public void unsetPayMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMONEY_ISSET_ID);
  }

  /** Returns true if field payMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPayMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMONEY_ISSET_ID);
  }

  public void setPayMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMONEY_ISSET_ID, value);
  }

  public int getPayTime() {
    return this.payTime;
  }

  public OrdersView setPayTime(int payTime) {
    this.payTime = payTime;
    setPayTimeIsSet(true);
    return this;
  }

  public void unsetPayTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYTIME_ISSET_ID);
  }

  /** Returns true if field payTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPayTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYTIME_ISSET_ID);
  }

  public void setPayTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYTIME_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public OrdersView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getNickName() {
    return this.nickName;
  }

  public OrdersView setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public double getItemNum() {
    return this.itemNum;
  }

  public OrdersView setItemNum(double itemNum) {
    this.itemNum = itemNum;
    setItemNumIsSet(true);
    return this;
  }

  public void unsetItemNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMNUM_ISSET_ID);
  }

  /** Returns true if field itemNum is set (has been assigned a value) and false otherwise */
  public boolean isSetItemNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMNUM_ISSET_ID);
  }

  public void setItemNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMNUM_ISSET_ID, value);
  }

  public int getItemId() {
    return this.itemId;
  }

  public OrdersView setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public int getItemType() {
    return this.itemType;
  }

  public OrdersView setItemType(int itemType) {
    this.itemType = itemType;
    setItemTypeIsSet(true);
    return this;
  }

  public void unsetItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  /** Returns true if field itemType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  public void setItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
  }

  public String getDid() {
    return this.did;
  }

  public OrdersView setDid(String did) {
    this.did = did;
    return this;
  }

  public void unsetDid() {
    this.did = null;
  }

  /** Returns true if field did is set (has been assigned a value) and false otherwise */
  public boolean isSetDid() {
    return this.did != null;
  }

  public void setDidIsSet(boolean value) {
    if (!value) {
      this.did = null;
    }
  }

  public String getReceipt() {
    return this.receipt;
  }

  public OrdersView setReceipt(String receipt) {
    this.receipt = receipt;
    return this;
  }

  public void unsetReceipt() {
    this.receipt = null;
  }

  /** Returns true if field receipt is set (has been assigned a value) and false otherwise */
  public boolean isSetReceipt() {
    return this.receipt != null;
  }

  public void setReceiptIsSet(boolean value) {
    if (!value) {
      this.receipt = null;
    }
  }

  public int getPlatform() {
    return this.platform;
  }

  public OrdersView setPlatform(int platform) {
    this.platform = platform;
    setPlatformIsSet(true);
    return this;
  }

  public void unsetPlatform() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  public void setPlatformIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATFORM_ISSET_ID, value);
  }

  public String getTransactionId() {
    return this.transactionId;
  }

  public OrdersView setTransactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  public void unsetTransactionId() {
    this.transactionId = null;
  }

  /** Returns true if field transactionId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionId() {
    return this.transactionId != null;
  }

  public void setTransactionIdIsSet(boolean value) {
    if (!value) {
      this.transactionId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Long)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case PAY_STATUS:
      if (value == null) {
        unsetPayStatus();
      } else {
        setPayStatus((Integer)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((Integer)value);
      }
      break;

    case PAY_MONEY:
      if (value == null) {
        unsetPayMoney();
      } else {
        setPayMoney((Double)value);
      }
      break;

    case PAY_TIME:
      if (value == null) {
        unsetPayTime();
      } else {
        setPayTime((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case ITEM_NUM:
      if (value == null) {
        unsetItemNum();
      } else {
        setItemNum((Double)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItemType();
      } else {
        setItemType((Integer)value);
      }
      break;

    case DID:
      if (value == null) {
        unsetDid();
      } else {
        setDid((String)value);
      }
      break;

    case RECEIPT:
      if (value == null) {
        unsetReceipt();
      } else {
        setReceipt((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((Integer)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransactionId();
      } else {
        setTransactionId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return Long.valueOf(getOrderId());

    case UID:
      return Long.valueOf(getUid());

    case PAY_STATUS:
      return Integer.valueOf(getPayStatus());

    case PAY_TYPE:
      return Integer.valueOf(getPayType());

    case PAY_MONEY:
      return Double.valueOf(getPayMoney());

    case PAY_TIME:
      return Integer.valueOf(getPayTime());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case NICK_NAME:
      return getNickName();

    case ITEM_NUM:
      return Double.valueOf(getItemNum());

    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case ITEM_TYPE:
      return Integer.valueOf(getItemType());

    case DID:
      return getDid();

    case RECEIPT:
      return getReceipt();

    case PLATFORM:
      return Integer.valueOf(getPlatform());

    case TRANSACTION_ID:
      return getTransactionId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case UID:
      return isSetUid();
    case PAY_STATUS:
      return isSetPayStatus();
    case PAY_TYPE:
      return isSetPayType();
    case PAY_MONEY:
      return isSetPayMoney();
    case PAY_TIME:
      return isSetPayTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case NICK_NAME:
      return isSetNickName();
    case ITEM_NUM:
      return isSetItemNum();
    case ITEM_ID:
      return isSetItemId();
    case ITEM_TYPE:
      return isSetItemType();
    case DID:
      return isSetDid();
    case RECEIPT:
      return isSetReceipt();
    case PLATFORM:
      return isSetPlatform();
    case TRANSACTION_ID:
      return isSetTransactionId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrdersView)
      return this.equals((OrdersView)that);
    return false;
  }

  public boolean equals(OrdersView that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true;
    boolean that_present_orderId = true;
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_payStatus = true;
    boolean that_present_payStatus = true;
    if (this_present_payStatus || that_present_payStatus) {
      if (!(this_present_payStatus && that_present_payStatus))
        return false;
      if (this.payStatus != that.payStatus)
        return false;
    }

    boolean this_present_payType = true;
    boolean that_present_payType = true;
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (this.payType != that.payType)
        return false;
    }

    boolean this_present_payMoney = true;
    boolean that_present_payMoney = true;
    if (this_present_payMoney || that_present_payMoney) {
      if (!(this_present_payMoney && that_present_payMoney))
        return false;
      if (this.payMoney != that.payMoney)
        return false;
    }

    boolean this_present_payTime = true;
    boolean that_present_payTime = true;
    if (this_present_payTime || that_present_payTime) {
      if (!(this_present_payTime && that_present_payTime))
        return false;
      if (this.payTime != that.payTime)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_itemNum = true;
    boolean that_present_itemNum = true;
    if (this_present_itemNum || that_present_itemNum) {
      if (!(this_present_itemNum && that_present_itemNum))
        return false;
      if (this.itemNum != that.itemNum)
        return false;
    }

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_itemType = true;
    boolean that_present_itemType = true;
    if (this_present_itemType || that_present_itemType) {
      if (!(this_present_itemType && that_present_itemType))
        return false;
      if (this.itemType != that.itemType)
        return false;
    }

    boolean this_present_did = true && this.isSetDid();
    boolean that_present_did = true && that.isSetDid();
    if (this_present_did || that_present_did) {
      if (!(this_present_did && that_present_did))
        return false;
      if (!this.did.equals(that.did))
        return false;
    }

    boolean this_present_receipt = true && this.isSetReceipt();
    boolean that_present_receipt = true && that.isSetReceipt();
    if (this_present_receipt || that_present_receipt) {
      if (!(this_present_receipt && that_present_receipt))
        return false;
      if (!this.receipt.equals(that.receipt))
        return false;
    }

    boolean this_present_platform = true;
    boolean that_present_platform = true;
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (this.platform != that.platform)
        return false;
    }

    boolean this_present_transactionId = true && this.isSetTransactionId();
    boolean that_present_transactionId = true && that.isSetTransactionId();
    if (this_present_transactionId || that_present_transactionId) {
      if (!(this_present_transactionId && that_present_transactionId))
        return false;
      if (!this.transactionId.equals(that.transactionId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(OrdersView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OrdersView typedOther = (OrdersView)other;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayStatus()).compareTo(typedOther.isSetPayStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payStatus, typedOther.payStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(typedOther.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, typedOther.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayMoney()).compareTo(typedOther.isSetPayMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMoney, typedOther.payMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(typedOther.isSetPayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTime, typedOther.payTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(typedOther.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, typedOther.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemNum()).compareTo(typedOther.isSetItemNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNum, typedOther.itemNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemType()).compareTo(typedOther.isSetItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemType, typedOther.itemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceipt()).compareTo(typedOther.isSetReceipt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceipt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receipt, typedOther.receipt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionId()).compareTo(typedOther.isSetTransactionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionId, typedOther.transactionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrdersView(");
    boolean first = true;

    sb.append("orderId:");
    sb.append(this.orderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payStatus:");
    sb.append(this.payStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payType:");
    sb.append(this.payType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payMoney:");
    sb.append(this.payMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payTime:");
    sb.append(this.payTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemNum:");
    sb.append(this.itemNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemType:");
    sb.append(this.itemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("did:");
    if (this.did == null) {
      sb.append("null");
    } else {
      sb.append(this.did);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receipt:");
    if (this.receipt == null) {
      sb.append("null");
    } else {
      sb.append(this.receipt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platform:");
    sb.append(this.platform);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactionId:");
    if (this.transactionId == null) {
      sb.append("null");
    } else {
      sb.append(this.transactionId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrdersViewStandardSchemeFactory implements SchemeFactory {
    public OrdersViewStandardScheme getScheme() {
      return new OrdersViewStandardScheme();
    }
  }

  private static class OrdersViewStandardScheme extends StandardScheme<OrdersView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrdersView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderId = iprot.readI64();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payStatus = iprot.readI32();
              struct.setPayStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payType = iprot.readI32();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payMoney = iprot.readDouble();
              struct.setPayMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payTime = iprot.readI32();
              struct.setPayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ITEM_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemNum = iprot.readDouble();
              struct.setItemNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemType = iprot.readI32();
              struct.setItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.did = iprot.readString();
              struct.setDidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RECEIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receipt = iprot.readString();
              struct.setReceiptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platform = iprot.readI32();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactionId = iprot.readString();
              struct.setTransactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrdersView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeI64(struct.orderId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.payStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.payType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.payMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
      oprot.writeI32(struct.payTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEM_NUM_FIELD_DESC);
      oprot.writeDouble(struct.itemNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.itemType);
      oprot.writeFieldEnd();
      if (struct.did != null) {
        oprot.writeFieldBegin(DID_FIELD_DESC);
        oprot.writeString(struct.did);
        oprot.writeFieldEnd();
      }
      if (struct.receipt != null) {
        oprot.writeFieldBegin(RECEIPT_FIELD_DESC);
        oprot.writeString(struct.receipt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
      oprot.writeI32(struct.platform);
      oprot.writeFieldEnd();
      if (struct.transactionId != null) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeString(struct.transactionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrdersViewTupleSchemeFactory implements SchemeFactory {
    public OrdersViewTupleScheme getScheme() {
      return new OrdersViewTupleScheme();
    }
  }

  private static class OrdersViewTupleScheme extends TupleScheme<OrdersView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrdersView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetPayStatus()) {
        optionals.set(2);
      }
      if (struct.isSetPayType()) {
        optionals.set(3);
      }
      if (struct.isSetPayMoney()) {
        optionals.set(4);
      }
      if (struct.isSetPayTime()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetNickName()) {
        optionals.set(7);
      }
      if (struct.isSetItemNum()) {
        optionals.set(8);
      }
      if (struct.isSetItemId()) {
        optionals.set(9);
      }
      if (struct.isSetItemType()) {
        optionals.set(10);
      }
      if (struct.isSetDid()) {
        optionals.set(11);
      }
      if (struct.isSetReceipt()) {
        optionals.set(12);
      }
      if (struct.isSetPlatform()) {
        optionals.set(13);
      }
      if (struct.isSetTransactionId()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetOrderId()) {
        oprot.writeI64(struct.orderId);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetPayStatus()) {
        oprot.writeI32(struct.payStatus);
      }
      if (struct.isSetPayType()) {
        oprot.writeI32(struct.payType);
      }
      if (struct.isSetPayMoney()) {
        oprot.writeDouble(struct.payMoney);
      }
      if (struct.isSetPayTime()) {
        oprot.writeI32(struct.payTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetItemNum()) {
        oprot.writeDouble(struct.itemNum);
      }
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetItemType()) {
        oprot.writeI32(struct.itemType);
      }
      if (struct.isSetDid()) {
        oprot.writeString(struct.did);
      }
      if (struct.isSetReceipt()) {
        oprot.writeString(struct.receipt);
      }
      if (struct.isSetPlatform()) {
        oprot.writeI32(struct.platform);
      }
      if (struct.isSetTransactionId()) {
        oprot.writeString(struct.transactionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrdersView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.orderId = iprot.readI64();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.payStatus = iprot.readI32();
        struct.setPayStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.payType = iprot.readI32();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.payMoney = iprot.readDouble();
        struct.setPayMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.payTime = iprot.readI32();
        struct.setPayTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.itemNum = iprot.readDouble();
        struct.setItemNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.itemType = iprot.readI32();
        struct.setItemTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.did = iprot.readString();
        struct.setDidIsSet(true);
      }
      if (incoming.get(12)) {
        struct.receipt = iprot.readString();
        struct.setReceiptIsSet(true);
      }
      if (incoming.get(13)) {
        struct.platform = iprot.readI32();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(14)) {
        struct.transactionId = iprot.readString();
        struct.setTransactionIdIsSet(true);
      }
    }
  }

}

