/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransactionFromView implements org.apache.thrift.TBase<TransactionFromView, TransactionFromView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionFromView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GIVE_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giveItemId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GIVE_ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("giveItemName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GIVE_ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("giveItemType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField GIVE_ITEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("giveItemNumber", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemNumber", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ACTUALLY_ITEM_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("actuallyItemPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TO_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("toUid", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField TO_PROFILE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("toProfileImg", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField TO_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toNickName", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionFromViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionFromViewTupleSchemeFactory());
  }

  public String id; // required
  public int giveItemId; // required
  public String giveItemName; // required
  public int giveItemType; // required
  public double giveItemNumber; // required
  public int actuallyItemId; // required
  public String actuallyItemName; // required
  public int actuallyItemType; // required
  public double actuallyItemNumber; // required
  public double actuallyItemPrice; // required
  public int actionType; // required
  public String reason; // required
  public long uid; // required
  public int createTime; // required
  public long toUid; // required
  public String toProfileImg; // required
  public String toNickName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    GIVE_ITEM_ID((short)2, "giveItemId"),
    GIVE_ITEM_NAME((short)3, "giveItemName"),
    GIVE_ITEM_TYPE((short)4, "giveItemType"),
    GIVE_ITEM_NUMBER((short)5, "giveItemNumber"),
    ACTUALLY_ITEM_ID((short)6, "actuallyItemId"),
    ACTUALLY_ITEM_NAME((short)7, "actuallyItemName"),
    ACTUALLY_ITEM_TYPE((short)8, "actuallyItemType"),
    ACTUALLY_ITEM_NUMBER((short)9, "actuallyItemNumber"),
    ACTUALLY_ITEM_PRICE((short)10, "actuallyItemPrice"),
    ACTION_TYPE((short)11, "actionType"),
    REASON((short)12, "reason"),
    UID((short)13, "uid"),
    CREATE_TIME((short)14, "createTime"),
    TO_UID((short)15, "toUid"),
    TO_PROFILE_IMG((short)16, "toProfileImg"),
    TO_NICK_NAME((short)17, "toNickName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GIVE_ITEM_ID
          return GIVE_ITEM_ID;
        case 3: // GIVE_ITEM_NAME
          return GIVE_ITEM_NAME;
        case 4: // GIVE_ITEM_TYPE
          return GIVE_ITEM_TYPE;
        case 5: // GIVE_ITEM_NUMBER
          return GIVE_ITEM_NUMBER;
        case 6: // ACTUALLY_ITEM_ID
          return ACTUALLY_ITEM_ID;
        case 7: // ACTUALLY_ITEM_NAME
          return ACTUALLY_ITEM_NAME;
        case 8: // ACTUALLY_ITEM_TYPE
          return ACTUALLY_ITEM_TYPE;
        case 9: // ACTUALLY_ITEM_NUMBER
          return ACTUALLY_ITEM_NUMBER;
        case 10: // ACTUALLY_ITEM_PRICE
          return ACTUALLY_ITEM_PRICE;
        case 11: // ACTION_TYPE
          return ACTION_TYPE;
        case 12: // REASON
          return REASON;
        case 13: // UID
          return UID;
        case 14: // CREATE_TIME
          return CREATE_TIME;
        case 15: // TO_UID
          return TO_UID;
        case 16: // TO_PROFILE_IMG
          return TO_PROFILE_IMG;
        case 17: // TO_NICK_NAME
          return TO_NICK_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GIVEITEMID_ISSET_ID = 0;
  private static final int __GIVEITEMTYPE_ISSET_ID = 1;
  private static final int __GIVEITEMNUMBER_ISSET_ID = 2;
  private static final int __ACTUALLYITEMID_ISSET_ID = 3;
  private static final int __ACTUALLYITEMTYPE_ISSET_ID = 4;
  private static final int __ACTUALLYITEMNUMBER_ISSET_ID = 5;
  private static final int __ACTUALLYITEMPRICE_ISSET_ID = 6;
  private static final int __ACTIONTYPE_ISSET_ID = 7;
  private static final int __UID_ISSET_ID = 8;
  private static final int __CREATETIME_ISSET_ID = 9;
  private static final int __TOUID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("giveItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIVE_ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("giveItemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVE_ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("giveItemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIVE_ITEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("giveItemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUALLY_ITEM_PRICE, new org.apache.thrift.meta_data.FieldMetaData("actuallyItemPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TO_UID, new org.apache.thrift.meta_data.FieldMetaData("toUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_PROFILE_IMG, new org.apache.thrift.meta_data.FieldMetaData("toProfileImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("toNickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionFromView.class, metaDataMap);
  }

  public TransactionFromView() {
  }

  public TransactionFromView(
    String id,
    int giveItemId,
    String giveItemName,
    int giveItemType,
    double giveItemNumber,
    int actuallyItemId,
    String actuallyItemName,
    int actuallyItemType,
    double actuallyItemNumber,
    double actuallyItemPrice,
    int actionType,
    String reason,
    long uid,
    int createTime,
    long toUid,
    String toProfileImg,
    String toNickName)
  {
    this();
    this.id = id;
    this.giveItemId = giveItemId;
    setGiveItemIdIsSet(true);
    this.giveItemName = giveItemName;
    this.giveItemType = giveItemType;
    setGiveItemTypeIsSet(true);
    this.giveItemNumber = giveItemNumber;
    setGiveItemNumberIsSet(true);
    this.actuallyItemId = actuallyItemId;
    setActuallyItemIdIsSet(true);
    this.actuallyItemName = actuallyItemName;
    this.actuallyItemType = actuallyItemType;
    setActuallyItemTypeIsSet(true);
    this.actuallyItemNumber = actuallyItemNumber;
    setActuallyItemNumberIsSet(true);
    this.actuallyItemPrice = actuallyItemPrice;
    setActuallyItemPriceIsSet(true);
    this.actionType = actionType;
    setActionTypeIsSet(true);
    this.reason = reason;
    this.uid = uid;
    setUidIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.toUid = toUid;
    setToUidIsSet(true);
    this.toProfileImg = toProfileImg;
    this.toNickName = toNickName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionFromView(TransactionFromView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.giveItemId = other.giveItemId;
    if (other.isSetGiveItemName()) {
      this.giveItemName = other.giveItemName;
    }
    this.giveItemType = other.giveItemType;
    this.giveItemNumber = other.giveItemNumber;
    this.actuallyItemId = other.actuallyItemId;
    if (other.isSetActuallyItemName()) {
      this.actuallyItemName = other.actuallyItemName;
    }
    this.actuallyItemType = other.actuallyItemType;
    this.actuallyItemNumber = other.actuallyItemNumber;
    this.actuallyItemPrice = other.actuallyItemPrice;
    this.actionType = other.actionType;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.uid = other.uid;
    this.createTime = other.createTime;
    this.toUid = other.toUid;
    if (other.isSetToProfileImg()) {
      this.toProfileImg = other.toProfileImg;
    }
    if (other.isSetToNickName()) {
      this.toNickName = other.toNickName;
    }
  }

  public TransactionFromView deepCopy() {
    return new TransactionFromView(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setGiveItemIdIsSet(false);
    this.giveItemId = 0;
    this.giveItemName = null;
    setGiveItemTypeIsSet(false);
    this.giveItemType = 0;
    setGiveItemNumberIsSet(false);
    this.giveItemNumber = 0.0;
    setActuallyItemIdIsSet(false);
    this.actuallyItemId = 0;
    this.actuallyItemName = null;
    setActuallyItemTypeIsSet(false);
    this.actuallyItemType = 0;
    setActuallyItemNumberIsSet(false);
    this.actuallyItemNumber = 0.0;
    setActuallyItemPriceIsSet(false);
    this.actuallyItemPrice = 0.0;
    setActionTypeIsSet(false);
    this.actionType = 0;
    this.reason = null;
    setUidIsSet(false);
    this.uid = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setToUidIsSet(false);
    this.toUid = 0;
    this.toProfileImg = null;
    this.toNickName = null;
  }

  public String getId() {
    return this.id;
  }

  public TransactionFromView setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getGiveItemId() {
    return this.giveItemId;
  }

  public TransactionFromView setGiveItemId(int giveItemId) {
    this.giveItemId = giveItemId;
    setGiveItemIdIsSet(true);
    return this;
  }

  public void unsetGiveItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEITEMID_ISSET_ID);
  }

  /** Returns true if field giveItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __GIVEITEMID_ISSET_ID);
  }

  public void setGiveItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEITEMID_ISSET_ID, value);
  }

  public String getGiveItemName() {
    return this.giveItemName;
  }

  public TransactionFromView setGiveItemName(String giveItemName) {
    this.giveItemName = giveItemName;
    return this;
  }

  public void unsetGiveItemName() {
    this.giveItemName = null;
  }

  /** Returns true if field giveItemName is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveItemName() {
    return this.giveItemName != null;
  }

  public void setGiveItemNameIsSet(boolean value) {
    if (!value) {
      this.giveItemName = null;
    }
  }

  public int getGiveItemType() {
    return this.giveItemType;
  }

  public TransactionFromView setGiveItemType(int giveItemType) {
    this.giveItemType = giveItemType;
    setGiveItemTypeIsSet(true);
    return this;
  }

  public void unsetGiveItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEITEMTYPE_ISSET_ID);
  }

  /** Returns true if field giveItemType is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __GIVEITEMTYPE_ISSET_ID);
  }

  public void setGiveItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEITEMTYPE_ISSET_ID, value);
  }

  public double getGiveItemNumber() {
    return this.giveItemNumber;
  }

  public TransactionFromView setGiveItemNumber(double giveItemNumber) {
    this.giveItemNumber = giveItemNumber;
    setGiveItemNumberIsSet(true);
    return this;
  }

  public void unsetGiveItemNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEITEMNUMBER_ISSET_ID);
  }

  /** Returns true if field giveItemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveItemNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __GIVEITEMNUMBER_ISSET_ID);
  }

  public void setGiveItemNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEITEMNUMBER_ISSET_ID, value);
  }

  public int getActuallyItemId() {
    return this.actuallyItemId;
  }

  public TransactionFromView setActuallyItemId(int actuallyItemId) {
    this.actuallyItemId = actuallyItemId;
    setActuallyItemIdIsSet(true);
    return this;
  }

  public void unsetActuallyItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYITEMID_ISSET_ID);
  }

  /** Returns true if field actuallyItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYITEMID_ISSET_ID);
  }

  public void setActuallyItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYITEMID_ISSET_ID, value);
  }

  public String getActuallyItemName() {
    return this.actuallyItemName;
  }

  public TransactionFromView setActuallyItemName(String actuallyItemName) {
    this.actuallyItemName = actuallyItemName;
    return this;
  }

  public void unsetActuallyItemName() {
    this.actuallyItemName = null;
  }

  /** Returns true if field actuallyItemName is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemName() {
    return this.actuallyItemName != null;
  }

  public void setActuallyItemNameIsSet(boolean value) {
    if (!value) {
      this.actuallyItemName = null;
    }
  }

  public int getActuallyItemType() {
    return this.actuallyItemType;
  }

  public TransactionFromView setActuallyItemType(int actuallyItemType) {
    this.actuallyItemType = actuallyItemType;
    setActuallyItemTypeIsSet(true);
    return this;
  }

  public void unsetActuallyItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYITEMTYPE_ISSET_ID);
  }

  /** Returns true if field actuallyItemType is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYITEMTYPE_ISSET_ID);
  }

  public void setActuallyItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYITEMTYPE_ISSET_ID, value);
  }

  public double getActuallyItemNumber() {
    return this.actuallyItemNumber;
  }

  public TransactionFromView setActuallyItemNumber(double actuallyItemNumber) {
    this.actuallyItemNumber = actuallyItemNumber;
    setActuallyItemNumberIsSet(true);
    return this;
  }

  public void unsetActuallyItemNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYITEMNUMBER_ISSET_ID);
  }

  /** Returns true if field actuallyItemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYITEMNUMBER_ISSET_ID);
  }

  public void setActuallyItemNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYITEMNUMBER_ISSET_ID, value);
  }

  public double getActuallyItemPrice() {
    return this.actuallyItemPrice;
  }

  public TransactionFromView setActuallyItemPrice(double actuallyItemPrice) {
    this.actuallyItemPrice = actuallyItemPrice;
    setActuallyItemPriceIsSet(true);
    return this;
  }

  public void unsetActuallyItemPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALLYITEMPRICE_ISSET_ID);
  }

  /** Returns true if field actuallyItemPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetActuallyItemPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALLYITEMPRICE_ISSET_ID);
  }

  public void setActuallyItemPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALLYITEMPRICE_ISSET_ID, value);
  }

  public int getActionType() {
    return this.actionType;
  }

  public TransactionFromView setActionType(int actionType) {
    this.actionType = actionType;
    setActionTypeIsSet(true);
    return this;
  }

  public void unsetActionType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID);
  }

  /** Returns true if field actionType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID);
  }

  public void setActionTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONTYPE_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public TransactionFromView setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public long getUid() {
    return this.uid;
  }

  public TransactionFromView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public TransactionFromView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getToUid() {
    return this.toUid;
  }

  public TransactionFromView setToUid(long toUid) {
    this.toUid = toUid;
    setToUidIsSet(true);
    return this;
  }

  public void unsetToUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOUID_ISSET_ID);
  }

  /** Returns true if field toUid is set (has been assigned a value) and false otherwise */
  public boolean isSetToUid() {
    return EncodingUtils.testBit(__isset_bitfield, __TOUID_ISSET_ID);
  }

  public void setToUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOUID_ISSET_ID, value);
  }

  public String getToProfileImg() {
    return this.toProfileImg;
  }

  public TransactionFromView setToProfileImg(String toProfileImg) {
    this.toProfileImg = toProfileImg;
    return this;
  }

  public void unsetToProfileImg() {
    this.toProfileImg = null;
  }

  /** Returns true if field toProfileImg is set (has been assigned a value) and false otherwise */
  public boolean isSetToProfileImg() {
    return this.toProfileImg != null;
  }

  public void setToProfileImgIsSet(boolean value) {
    if (!value) {
      this.toProfileImg = null;
    }
  }

  public String getToNickName() {
    return this.toNickName;
  }

  public TransactionFromView setToNickName(String toNickName) {
    this.toNickName = toNickName;
    return this;
  }

  public void unsetToNickName() {
    this.toNickName = null;
  }

  /** Returns true if field toNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetToNickName() {
    return this.toNickName != null;
  }

  public void setToNickNameIsSet(boolean value) {
    if (!value) {
      this.toNickName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case GIVE_ITEM_ID:
      if (value == null) {
        unsetGiveItemId();
      } else {
        setGiveItemId((Integer)value);
      }
      break;

    case GIVE_ITEM_NAME:
      if (value == null) {
        unsetGiveItemName();
      } else {
        setGiveItemName((String)value);
      }
      break;

    case GIVE_ITEM_TYPE:
      if (value == null) {
        unsetGiveItemType();
      } else {
        setGiveItemType((Integer)value);
      }
      break;

    case GIVE_ITEM_NUMBER:
      if (value == null) {
        unsetGiveItemNumber();
      } else {
        setGiveItemNumber((Double)value);
      }
      break;

    case ACTUALLY_ITEM_ID:
      if (value == null) {
        unsetActuallyItemId();
      } else {
        setActuallyItemId((Integer)value);
      }
      break;

    case ACTUALLY_ITEM_NAME:
      if (value == null) {
        unsetActuallyItemName();
      } else {
        setActuallyItemName((String)value);
      }
      break;

    case ACTUALLY_ITEM_TYPE:
      if (value == null) {
        unsetActuallyItemType();
      } else {
        setActuallyItemType((Integer)value);
      }
      break;

    case ACTUALLY_ITEM_NUMBER:
      if (value == null) {
        unsetActuallyItemNumber();
      } else {
        setActuallyItemNumber((Double)value);
      }
      break;

    case ACTUALLY_ITEM_PRICE:
      if (value == null) {
        unsetActuallyItemPrice();
      } else {
        setActuallyItemPrice((Double)value);
      }
      break;

    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((Integer)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case TO_UID:
      if (value == null) {
        unsetToUid();
      } else {
        setToUid((Long)value);
      }
      break;

    case TO_PROFILE_IMG:
      if (value == null) {
        unsetToProfileImg();
      } else {
        setToProfileImg((String)value);
      }
      break;

    case TO_NICK_NAME:
      if (value == null) {
        unsetToNickName();
      } else {
        setToNickName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case GIVE_ITEM_ID:
      return Integer.valueOf(getGiveItemId());

    case GIVE_ITEM_NAME:
      return getGiveItemName();

    case GIVE_ITEM_TYPE:
      return Integer.valueOf(getGiveItemType());

    case GIVE_ITEM_NUMBER:
      return Double.valueOf(getGiveItemNumber());

    case ACTUALLY_ITEM_ID:
      return Integer.valueOf(getActuallyItemId());

    case ACTUALLY_ITEM_NAME:
      return getActuallyItemName();

    case ACTUALLY_ITEM_TYPE:
      return Integer.valueOf(getActuallyItemType());

    case ACTUALLY_ITEM_NUMBER:
      return Double.valueOf(getActuallyItemNumber());

    case ACTUALLY_ITEM_PRICE:
      return Double.valueOf(getActuallyItemPrice());

    case ACTION_TYPE:
      return Integer.valueOf(getActionType());

    case REASON:
      return getReason();

    case UID:
      return Long.valueOf(getUid());

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case TO_UID:
      return Long.valueOf(getToUid());

    case TO_PROFILE_IMG:
      return getToProfileImg();

    case TO_NICK_NAME:
      return getToNickName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case GIVE_ITEM_ID:
      return isSetGiveItemId();
    case GIVE_ITEM_NAME:
      return isSetGiveItemName();
    case GIVE_ITEM_TYPE:
      return isSetGiveItemType();
    case GIVE_ITEM_NUMBER:
      return isSetGiveItemNumber();
    case ACTUALLY_ITEM_ID:
      return isSetActuallyItemId();
    case ACTUALLY_ITEM_NAME:
      return isSetActuallyItemName();
    case ACTUALLY_ITEM_TYPE:
      return isSetActuallyItemType();
    case ACTUALLY_ITEM_NUMBER:
      return isSetActuallyItemNumber();
    case ACTUALLY_ITEM_PRICE:
      return isSetActuallyItemPrice();
    case ACTION_TYPE:
      return isSetActionType();
    case REASON:
      return isSetReason();
    case UID:
      return isSetUid();
    case CREATE_TIME:
      return isSetCreateTime();
    case TO_UID:
      return isSetToUid();
    case TO_PROFILE_IMG:
      return isSetToProfileImg();
    case TO_NICK_NAME:
      return isSetToNickName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionFromView)
      return this.equals((TransactionFromView)that);
    return false;
  }

  public boolean equals(TransactionFromView that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_giveItemId = true;
    boolean that_present_giveItemId = true;
    if (this_present_giveItemId || that_present_giveItemId) {
      if (!(this_present_giveItemId && that_present_giveItemId))
        return false;
      if (this.giveItemId != that.giveItemId)
        return false;
    }

    boolean this_present_giveItemName = true && this.isSetGiveItemName();
    boolean that_present_giveItemName = true && that.isSetGiveItemName();
    if (this_present_giveItemName || that_present_giveItemName) {
      if (!(this_present_giveItemName && that_present_giveItemName))
        return false;
      if (!this.giveItemName.equals(that.giveItemName))
        return false;
    }

    boolean this_present_giveItemType = true;
    boolean that_present_giveItemType = true;
    if (this_present_giveItemType || that_present_giveItemType) {
      if (!(this_present_giveItemType && that_present_giveItemType))
        return false;
      if (this.giveItemType != that.giveItemType)
        return false;
    }

    boolean this_present_giveItemNumber = true;
    boolean that_present_giveItemNumber = true;
    if (this_present_giveItemNumber || that_present_giveItemNumber) {
      if (!(this_present_giveItemNumber && that_present_giveItemNumber))
        return false;
      if (this.giveItemNumber != that.giveItemNumber)
        return false;
    }

    boolean this_present_actuallyItemId = true;
    boolean that_present_actuallyItemId = true;
    if (this_present_actuallyItemId || that_present_actuallyItemId) {
      if (!(this_present_actuallyItemId && that_present_actuallyItemId))
        return false;
      if (this.actuallyItemId != that.actuallyItemId)
        return false;
    }

    boolean this_present_actuallyItemName = true && this.isSetActuallyItemName();
    boolean that_present_actuallyItemName = true && that.isSetActuallyItemName();
    if (this_present_actuallyItemName || that_present_actuallyItemName) {
      if (!(this_present_actuallyItemName && that_present_actuallyItemName))
        return false;
      if (!this.actuallyItemName.equals(that.actuallyItemName))
        return false;
    }

    boolean this_present_actuallyItemType = true;
    boolean that_present_actuallyItemType = true;
    if (this_present_actuallyItemType || that_present_actuallyItemType) {
      if (!(this_present_actuallyItemType && that_present_actuallyItemType))
        return false;
      if (this.actuallyItemType != that.actuallyItemType)
        return false;
    }

    boolean this_present_actuallyItemNumber = true;
    boolean that_present_actuallyItemNumber = true;
    if (this_present_actuallyItemNumber || that_present_actuallyItemNumber) {
      if (!(this_present_actuallyItemNumber && that_present_actuallyItemNumber))
        return false;
      if (this.actuallyItemNumber != that.actuallyItemNumber)
        return false;
    }

    boolean this_present_actuallyItemPrice = true;
    boolean that_present_actuallyItemPrice = true;
    if (this_present_actuallyItemPrice || that_present_actuallyItemPrice) {
      if (!(this_present_actuallyItemPrice && that_present_actuallyItemPrice))
        return false;
      if (this.actuallyItemPrice != that.actuallyItemPrice)
        return false;
    }

    boolean this_present_actionType = true;
    boolean that_present_actionType = true;
    if (this_present_actionType || that_present_actionType) {
      if (!(this_present_actionType && that_present_actionType))
        return false;
      if (this.actionType != that.actionType)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_toUid = true;
    boolean that_present_toUid = true;
    if (this_present_toUid || that_present_toUid) {
      if (!(this_present_toUid && that_present_toUid))
        return false;
      if (this.toUid != that.toUid)
        return false;
    }

    boolean this_present_toProfileImg = true && this.isSetToProfileImg();
    boolean that_present_toProfileImg = true && that.isSetToProfileImg();
    if (this_present_toProfileImg || that_present_toProfileImg) {
      if (!(this_present_toProfileImg && that_present_toProfileImg))
        return false;
      if (!this.toProfileImg.equals(that.toProfileImg))
        return false;
    }

    boolean this_present_toNickName = true && this.isSetToNickName();
    boolean that_present_toNickName = true && that.isSetToNickName();
    if (this_present_toNickName || that_present_toNickName) {
      if (!(this_present_toNickName && that_present_toNickName))
        return false;
      if (!this.toNickName.equals(that.toNickName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TransactionFromView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TransactionFromView typedOther = (TransactionFromView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveItemId()).compareTo(typedOther.isSetGiveItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveItemId, typedOther.giveItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveItemName()).compareTo(typedOther.isSetGiveItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveItemName, typedOther.giveItemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveItemType()).compareTo(typedOther.isSetGiveItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveItemType, typedOther.giveItemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveItemNumber()).compareTo(typedOther.isSetGiveItemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveItemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveItemNumber, typedOther.giveItemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemId()).compareTo(typedOther.isSetActuallyItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemId, typedOther.actuallyItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemName()).compareTo(typedOther.isSetActuallyItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemName, typedOther.actuallyItemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemType()).compareTo(typedOther.isSetActuallyItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemType, typedOther.actuallyItemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemNumber()).compareTo(typedOther.isSetActuallyItemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemNumber, typedOther.actuallyItemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActuallyItemPrice()).compareTo(typedOther.isSetActuallyItemPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActuallyItemPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actuallyItemPrice, typedOther.actuallyItemPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionType()).compareTo(typedOther.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionType, typedOther.actionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUid()).compareTo(typedOther.isSetToUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUid, typedOther.toUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToProfileImg()).compareTo(typedOther.isSetToProfileImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToProfileImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toProfileImg, typedOther.toProfileImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToNickName()).compareTo(typedOther.isSetToNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toNickName, typedOther.toNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransactionFromView(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveItemId:");
    sb.append(this.giveItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveItemName:");
    if (this.giveItemName == null) {
      sb.append("null");
    } else {
      sb.append(this.giveItemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveItemType:");
    sb.append(this.giveItemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveItemNumber:");
    sb.append(this.giveItemNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemId:");
    sb.append(this.actuallyItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemName:");
    if (this.actuallyItemName == null) {
      sb.append("null");
    } else {
      sb.append(this.actuallyItemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemType:");
    sb.append(this.actuallyItemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemNumber:");
    sb.append(this.actuallyItemNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actuallyItemPrice:");
    sb.append(this.actuallyItemPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionType:");
    sb.append(this.actionType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("toUid:");
    sb.append(this.toUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("toProfileImg:");
    if (this.toProfileImg == null) {
      sb.append("null");
    } else {
      sb.append(this.toProfileImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toNickName:");
    if (this.toNickName == null) {
      sb.append("null");
    } else {
      sb.append(this.toNickName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionFromViewStandardSchemeFactory implements SchemeFactory {
    public TransactionFromViewStandardScheme getScheme() {
      return new TransactionFromViewStandardScheme();
    }
  }

  private static class TransactionFromViewStandardScheme extends StandardScheme<TransactionFromView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionFromView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GIVE_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giveItemId = iprot.readI32();
              struct.setGiveItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GIVE_ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giveItemName = iprot.readString();
              struct.setGiveItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GIVE_ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giveItemType = iprot.readI32();
              struct.setGiveItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GIVE_ITEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.giveItemNumber = iprot.readDouble();
              struct.setGiveItemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTUALLY_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actuallyItemId = iprot.readI32();
              struct.setActuallyItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTUALLY_ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actuallyItemName = iprot.readString();
              struct.setActuallyItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTUALLY_ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actuallyItemType = iprot.readI32();
              struct.setActuallyItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTUALLY_ITEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actuallyItemNumber = iprot.readDouble();
              struct.setActuallyItemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTUALLY_ITEM_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actuallyItemPrice = iprot.readDouble();
              struct.setActuallyItemPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionType = iprot.readI32();
              struct.setActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TO_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toUid = iprot.readI64();
              struct.setToUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TO_PROFILE_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toProfileImg = iprot.readString();
              struct.setToProfileImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TO_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toNickName = iprot.readString();
              struct.setToNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionFromView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIVE_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.giveItemId);
      oprot.writeFieldEnd();
      if (struct.giveItemName != null) {
        oprot.writeFieldBegin(GIVE_ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.giveItemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIVE_ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.giveItemType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIVE_ITEM_NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.giveItemNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUALLY_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.actuallyItemId);
      oprot.writeFieldEnd();
      if (struct.actuallyItemName != null) {
        oprot.writeFieldBegin(ACTUALLY_ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.actuallyItemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTUALLY_ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.actuallyItemType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUALLY_ITEM_NUMBER_FIELD_DESC);
      oprot.writeDouble(struct.actuallyItemNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUALLY_ITEM_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.actuallyItemPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.actionType);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TO_UID_FIELD_DESC);
      oprot.writeI64(struct.toUid);
      oprot.writeFieldEnd();
      if (struct.toProfileImg != null) {
        oprot.writeFieldBegin(TO_PROFILE_IMG_FIELD_DESC);
        oprot.writeString(struct.toProfileImg);
        oprot.writeFieldEnd();
      }
      if (struct.toNickName != null) {
        oprot.writeFieldBegin(TO_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.toNickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionFromViewTupleSchemeFactory implements SchemeFactory {
    public TransactionFromViewTupleScheme getScheme() {
      return new TransactionFromViewTupleScheme();
    }
  }

  private static class TransactionFromViewTupleScheme extends TupleScheme<TransactionFromView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionFromView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetGiveItemId()) {
        optionals.set(1);
      }
      if (struct.isSetGiveItemName()) {
        optionals.set(2);
      }
      if (struct.isSetGiveItemType()) {
        optionals.set(3);
      }
      if (struct.isSetGiveItemNumber()) {
        optionals.set(4);
      }
      if (struct.isSetActuallyItemId()) {
        optionals.set(5);
      }
      if (struct.isSetActuallyItemName()) {
        optionals.set(6);
      }
      if (struct.isSetActuallyItemType()) {
        optionals.set(7);
      }
      if (struct.isSetActuallyItemNumber()) {
        optionals.set(8);
      }
      if (struct.isSetActuallyItemPrice()) {
        optionals.set(9);
      }
      if (struct.isSetActionType()) {
        optionals.set(10);
      }
      if (struct.isSetReason()) {
        optionals.set(11);
      }
      if (struct.isSetUid()) {
        optionals.set(12);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(13);
      }
      if (struct.isSetToUid()) {
        optionals.set(14);
      }
      if (struct.isSetToProfileImg()) {
        optionals.set(15);
      }
      if (struct.isSetToNickName()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetGiveItemId()) {
        oprot.writeI32(struct.giveItemId);
      }
      if (struct.isSetGiveItemName()) {
        oprot.writeString(struct.giveItemName);
      }
      if (struct.isSetGiveItemType()) {
        oprot.writeI32(struct.giveItemType);
      }
      if (struct.isSetGiveItemNumber()) {
        oprot.writeDouble(struct.giveItemNumber);
      }
      if (struct.isSetActuallyItemId()) {
        oprot.writeI32(struct.actuallyItemId);
      }
      if (struct.isSetActuallyItemName()) {
        oprot.writeString(struct.actuallyItemName);
      }
      if (struct.isSetActuallyItemType()) {
        oprot.writeI32(struct.actuallyItemType);
      }
      if (struct.isSetActuallyItemNumber()) {
        oprot.writeDouble(struct.actuallyItemNumber);
      }
      if (struct.isSetActuallyItemPrice()) {
        oprot.writeDouble(struct.actuallyItemPrice);
      }
      if (struct.isSetActionType()) {
        oprot.writeI32(struct.actionType);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetToUid()) {
        oprot.writeI64(struct.toUid);
      }
      if (struct.isSetToProfileImg()) {
        oprot.writeString(struct.toProfileImg);
      }
      if (struct.isSetToNickName()) {
        oprot.writeString(struct.toNickName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionFromView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.giveItemId = iprot.readI32();
        struct.setGiveItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.giveItemName = iprot.readString();
        struct.setGiveItemNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.giveItemType = iprot.readI32();
        struct.setGiveItemTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.giveItemNumber = iprot.readDouble();
        struct.setGiveItemNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.actuallyItemId = iprot.readI32();
        struct.setActuallyItemIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.actuallyItemName = iprot.readString();
        struct.setActuallyItemNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.actuallyItemType = iprot.readI32();
        struct.setActuallyItemTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.actuallyItemNumber = iprot.readDouble();
        struct.setActuallyItemNumberIsSet(true);
      }
      if (incoming.get(9)) {
        struct.actuallyItemPrice = iprot.readDouble();
        struct.setActuallyItemPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.actionType = iprot.readI32();
        struct.setActionTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(12)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.toUid = iprot.readI64();
        struct.setToUidIsSet(true);
      }
      if (incoming.get(15)) {
        struct.toProfileImg = iprot.readString();
        struct.setToProfileImgIsSet(true);
      }
      if (incoming.get(16)) {
        struct.toNickName = iprot.readString();
        struct.setToNickNameIsSet(true);
      }
    }
  }

}

