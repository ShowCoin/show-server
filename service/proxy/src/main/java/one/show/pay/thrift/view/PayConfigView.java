/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.pay.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PayConfigView implements org.apache.thrift.TBase<PayConfigView, PayConfigView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PayConfigView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CHARGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeCount", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField SHOW_COIN_FIELD_DESC = new org.apache.thrift.protocol.TField("showCoin", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DISPLAY_SHOW_COIN_FIELD_DESC = new org.apache.thrift.protocol.TField("displayShowCoin", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VAR_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("varItem", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PayConfigViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PayConfigViewTupleSchemeFactory());
  }

  public int id; // required
  public double chargeCount; // required
  public double showCoin; // required
  public double displayShowCoin; // required
  public String productId; // required
  public String varItem; // required
  public int platform; // required
  public int itemType; // required
  public int itemId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CHARGE_COUNT((short)2, "chargeCount"),
    SHOW_COIN((short)3, "showCoin"),
    DISPLAY_SHOW_COIN((short)4, "displayShowCoin"),
    PRODUCT_ID((short)5, "productId"),
    VAR_ITEM((short)6, "varItem"),
    PLATFORM((short)7, "platform"),
    ITEM_TYPE((short)8, "itemType"),
    ITEM_ID((short)9, "itemId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CHARGE_COUNT
          return CHARGE_COUNT;
        case 3: // SHOW_COIN
          return SHOW_COIN;
        case 4: // DISPLAY_SHOW_COIN
          return DISPLAY_SHOW_COIN;
        case 5: // PRODUCT_ID
          return PRODUCT_ID;
        case 6: // VAR_ITEM
          return VAR_ITEM;
        case 7: // PLATFORM
          return PLATFORM;
        case 8: // ITEM_TYPE
          return ITEM_TYPE;
        case 9: // ITEM_ID
          return ITEM_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CHARGECOUNT_ISSET_ID = 1;
  private static final int __SHOWCOIN_ISSET_ID = 2;
  private static final int __DISPLAYSHOWCOIN_ISSET_ID = 3;
  private static final int __PLATFORM_ISSET_ID = 4;
  private static final int __ITEMTYPE_ISSET_ID = 5;
  private static final int __ITEMID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("chargeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOW_COIN, new org.apache.thrift.meta_data.FieldMetaData("showCoin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISPLAY_SHOW_COIN, new org.apache.thrift.meta_data.FieldMetaData("displayShowCoin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VAR_ITEM, new org.apache.thrift.meta_data.FieldMetaData("varItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PayConfigView.class, metaDataMap);
  }

  public PayConfigView() {
  }

  public PayConfigView(
    int id,
    double chargeCount,
    double showCoin,
    double displayShowCoin,
    String productId,
    String varItem,
    int platform,
    int itemType,
    int itemId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.chargeCount = chargeCount;
    setChargeCountIsSet(true);
    this.showCoin = showCoin;
    setShowCoinIsSet(true);
    this.displayShowCoin = displayShowCoin;
    setDisplayShowCoinIsSet(true);
    this.productId = productId;
    this.varItem = varItem;
    this.platform = platform;
    setPlatformIsSet(true);
    this.itemType = itemType;
    setItemTypeIsSet(true);
    this.itemId = itemId;
    setItemIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayConfigView(PayConfigView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.chargeCount = other.chargeCount;
    this.showCoin = other.showCoin;
    this.displayShowCoin = other.displayShowCoin;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetVarItem()) {
      this.varItem = other.varItem;
    }
    this.platform = other.platform;
    this.itemType = other.itemType;
    this.itemId = other.itemId;
  }

  public PayConfigView deepCopy() {
    return new PayConfigView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setChargeCountIsSet(false);
    this.chargeCount = 0.0;
    setShowCoinIsSet(false);
    this.showCoin = 0.0;
    setDisplayShowCoinIsSet(false);
    this.displayShowCoin = 0.0;
    this.productId = null;
    this.varItem = null;
    setPlatformIsSet(false);
    this.platform = 0;
    setItemTypeIsSet(false);
    this.itemType = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
  }

  public int getId() {
    return this.id;
  }

  public PayConfigView setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getChargeCount() {
    return this.chargeCount;
  }

  public PayConfigView setChargeCount(double chargeCount) {
    this.chargeCount = chargeCount;
    setChargeCountIsSet(true);
    return this;
  }

  public void unsetChargeCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGECOUNT_ISSET_ID);
  }

  /** Returns true if field chargeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGECOUNT_ISSET_ID);
  }

  public void setChargeCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGECOUNT_ISSET_ID, value);
  }

  public double getShowCoin() {
    return this.showCoin;
  }

  public PayConfigView setShowCoin(double showCoin) {
    this.showCoin = showCoin;
    setShowCoinIsSet(true);
    return this;
  }

  public void unsetShowCoin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWCOIN_ISSET_ID);
  }

  /** Returns true if field showCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetShowCoin() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWCOIN_ISSET_ID);
  }

  public void setShowCoinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWCOIN_ISSET_ID, value);
  }

  public double getDisplayShowCoin() {
    return this.displayShowCoin;
  }

  public PayConfigView setDisplayShowCoin(double displayShowCoin) {
    this.displayShowCoin = displayShowCoin;
    setDisplayShowCoinIsSet(true);
    return this;
  }

  public void unsetDisplayShowCoin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISPLAYSHOWCOIN_ISSET_ID);
  }

  /** Returns true if field displayShowCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayShowCoin() {
    return EncodingUtils.testBit(__isset_bitfield, __DISPLAYSHOWCOIN_ISSET_ID);
  }

  public void setDisplayShowCoinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISPLAYSHOWCOIN_ISSET_ID, value);
  }

  public String getProductId() {
    return this.productId;
  }

  public PayConfigView setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getVarItem() {
    return this.varItem;
  }

  public PayConfigView setVarItem(String varItem) {
    this.varItem = varItem;
    return this;
  }

  public void unsetVarItem() {
    this.varItem = null;
  }

  /** Returns true if field varItem is set (has been assigned a value) and false otherwise */
  public boolean isSetVarItem() {
    return this.varItem != null;
  }

  public void setVarItemIsSet(boolean value) {
    if (!value) {
      this.varItem = null;
    }
  }

  public int getPlatform() {
    return this.platform;
  }

  public PayConfigView setPlatform(int platform) {
    this.platform = platform;
    setPlatformIsSet(true);
    return this;
  }

  public void unsetPlatform() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  public void setPlatformIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATFORM_ISSET_ID, value);
  }

  public int getItemType() {
    return this.itemType;
  }

  public PayConfigView setItemType(int itemType) {
    this.itemType = itemType;
    setItemTypeIsSet(true);
    return this;
  }

  public void unsetItemType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  /** Returns true if field itemType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemType() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  public void setItemTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
  }

  public int getItemId() {
    return this.itemId;
  }

  public PayConfigView setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case CHARGE_COUNT:
      if (value == null) {
        unsetChargeCount();
      } else {
        setChargeCount((Double)value);
      }
      break;

    case SHOW_COIN:
      if (value == null) {
        unsetShowCoin();
      } else {
        setShowCoin((Double)value);
      }
      break;

    case DISPLAY_SHOW_COIN:
      if (value == null) {
        unsetDisplayShowCoin();
      } else {
        setDisplayShowCoin((Double)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case VAR_ITEM:
      if (value == null) {
        unsetVarItem();
      } else {
        setVarItem((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((Integer)value);
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItemType();
      } else {
        setItemType((Integer)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case CHARGE_COUNT:
      return Double.valueOf(getChargeCount());

    case SHOW_COIN:
      return Double.valueOf(getShowCoin());

    case DISPLAY_SHOW_COIN:
      return Double.valueOf(getDisplayShowCoin());

    case PRODUCT_ID:
      return getProductId();

    case VAR_ITEM:
      return getVarItem();

    case PLATFORM:
      return Integer.valueOf(getPlatform());

    case ITEM_TYPE:
      return Integer.valueOf(getItemType());

    case ITEM_ID:
      return Integer.valueOf(getItemId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CHARGE_COUNT:
      return isSetChargeCount();
    case SHOW_COIN:
      return isSetShowCoin();
    case DISPLAY_SHOW_COIN:
      return isSetDisplayShowCoin();
    case PRODUCT_ID:
      return isSetProductId();
    case VAR_ITEM:
      return isSetVarItem();
    case PLATFORM:
      return isSetPlatform();
    case ITEM_TYPE:
      return isSetItemType();
    case ITEM_ID:
      return isSetItemId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayConfigView)
      return this.equals((PayConfigView)that);
    return false;
  }

  public boolean equals(PayConfigView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_chargeCount = true;
    boolean that_present_chargeCount = true;
    if (this_present_chargeCount || that_present_chargeCount) {
      if (!(this_present_chargeCount && that_present_chargeCount))
        return false;
      if (this.chargeCount != that.chargeCount)
        return false;
    }

    boolean this_present_showCoin = true;
    boolean that_present_showCoin = true;
    if (this_present_showCoin || that_present_showCoin) {
      if (!(this_present_showCoin && that_present_showCoin))
        return false;
      if (this.showCoin != that.showCoin)
        return false;
    }

    boolean this_present_displayShowCoin = true;
    boolean that_present_displayShowCoin = true;
    if (this_present_displayShowCoin || that_present_displayShowCoin) {
      if (!(this_present_displayShowCoin && that_present_displayShowCoin))
        return false;
      if (this.displayShowCoin != that.displayShowCoin)
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_varItem = true && this.isSetVarItem();
    boolean that_present_varItem = true && that.isSetVarItem();
    if (this_present_varItem || that_present_varItem) {
      if (!(this_present_varItem && that_present_varItem))
        return false;
      if (!this.varItem.equals(that.varItem))
        return false;
    }

    boolean this_present_platform = true;
    boolean that_present_platform = true;
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (this.platform != that.platform)
        return false;
    }

    boolean this_present_itemType = true;
    boolean that_present_itemType = true;
    if (this_present_itemType || that_present_itemType) {
      if (!(this_present_itemType && that_present_itemType))
        return false;
      if (this.itemType != that.itemType)
        return false;
    }

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PayConfigView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PayConfigView typedOther = (PayConfigView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeCount()).compareTo(typedOther.isSetChargeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeCount, typedOther.chargeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowCoin()).compareTo(typedOther.isSetShowCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowCoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showCoin, typedOther.showCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayShowCoin()).compareTo(typedOther.isSetDisplayShowCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayShowCoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayShowCoin, typedOther.displayShowCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVarItem()).compareTo(typedOther.isSetVarItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVarItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.varItem, typedOther.varItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemType()).compareTo(typedOther.isSetItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemType, typedOther.itemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayConfigView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeCount:");
    sb.append(this.chargeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showCoin:");
    sb.append(this.showCoin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayShowCoin:");
    sb.append(this.displayShowCoin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("varItem:");
    if (this.varItem == null) {
      sb.append("null");
    } else {
      sb.append(this.varItem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platform:");
    sb.append(this.platform);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemType:");
    sb.append(this.itemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PayConfigViewStandardSchemeFactory implements SchemeFactory {
    public PayConfigViewStandardScheme getScheme() {
      return new PayConfigViewStandardScheme();
    }
  }

  private static class PayConfigViewStandardScheme extends StandardScheme<PayConfigView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PayConfigView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHARGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.chargeCount = iprot.readDouble();
              struct.setChargeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOW_COIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.showCoin = iprot.readDouble();
              struct.setShowCoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISPLAY_SHOW_COIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.displayShowCoin = iprot.readDouble();
              struct.setDisplayShowCoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VAR_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.varItem = iprot.readString();
              struct.setVarItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platform = iprot.readI32();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemType = iprot.readI32();
              struct.setItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PayConfigView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_COUNT_FIELD_DESC);
      oprot.writeDouble(struct.chargeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_COIN_FIELD_DESC);
      oprot.writeDouble(struct.showCoin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISPLAY_SHOW_COIN_FIELD_DESC);
      oprot.writeDouble(struct.displayShowCoin);
      oprot.writeFieldEnd();
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.varItem != null) {
        oprot.writeFieldBegin(VAR_ITEM_FIELD_DESC);
        oprot.writeString(struct.varItem);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
      oprot.writeI32(struct.platform);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.itemType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PayConfigViewTupleSchemeFactory implements SchemeFactory {
    public PayConfigViewTupleScheme getScheme() {
      return new PayConfigViewTupleScheme();
    }
  }

  private static class PayConfigViewTupleScheme extends TupleScheme<PayConfigView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PayConfigView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetChargeCount()) {
        optionals.set(1);
      }
      if (struct.isSetShowCoin()) {
        optionals.set(2);
      }
      if (struct.isSetDisplayShowCoin()) {
        optionals.set(3);
      }
      if (struct.isSetProductId()) {
        optionals.set(4);
      }
      if (struct.isSetVarItem()) {
        optionals.set(5);
      }
      if (struct.isSetPlatform()) {
        optionals.set(6);
      }
      if (struct.isSetItemType()) {
        optionals.set(7);
      }
      if (struct.isSetItemId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetChargeCount()) {
        oprot.writeDouble(struct.chargeCount);
      }
      if (struct.isSetShowCoin()) {
        oprot.writeDouble(struct.showCoin);
      }
      if (struct.isSetDisplayShowCoin()) {
        oprot.writeDouble(struct.displayShowCoin);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetVarItem()) {
        oprot.writeString(struct.varItem);
      }
      if (struct.isSetPlatform()) {
        oprot.writeI32(struct.platform);
      }
      if (struct.isSetItemType()) {
        oprot.writeI32(struct.itemType);
      }
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PayConfigView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chargeCount = iprot.readDouble();
        struct.setChargeCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.showCoin = iprot.readDouble();
        struct.setShowCoinIsSet(true);
      }
      if (incoming.get(3)) {
        struct.displayShowCoin = iprot.readDouble();
        struct.setDisplayShowCoinIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.varItem = iprot.readString();
        struct.setVarItemIsSet(true);
      }
      if (incoming.get(6)) {
        struct.platform = iprot.readI32();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(7)) {
        struct.itemType = iprot.readI32();
        struct.setItemTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
    }
  }

}

