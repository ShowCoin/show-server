/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.stream.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StreamServiceProxy {

  public interface Iface {

    public List<one.show.stream.thrift.view.StreamView> getAllStreamList() throws org.apache.thrift.TException;

    public void init(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException;

    public void close(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException;

    public void breakStream(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllStreamList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllStreamList_call> resultHandler) throws org.apache.thrift.TException;

    public void init(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.init_call> resultHandler) throws org.apache.thrift.TException;

    public void close(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.close_call> resultHandler) throws org.apache.thrift.TException;

    public void breakStream(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.breakStream_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<one.show.stream.thrift.view.StreamView> getAllStreamList() throws org.apache.thrift.TException
    {
      send_getAllStreamList();
      return recv_getAllStreamList();
    }

    public void send_getAllStreamList() throws org.apache.thrift.TException
    {
      getAllStreamList_args args = new getAllStreamList_args();
      sendBase("getAllStreamList", args);
    }

    public List<one.show.stream.thrift.view.StreamView> recv_getAllStreamList() throws org.apache.thrift.TException
    {
      getAllStreamList_result result = new getAllStreamList_result();
      receiveBase(result, "getAllStreamList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllStreamList failed: unknown result");
    }

    public void init(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException
    {
      send_init(streamName, cdnType, rtmp);
      recv_init();
    }

    public void send_init(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException
    {
      init_args args = new init_args();
      args.setStreamName(streamName);
      args.setCdnType(cdnType);
      args.setRtmp(rtmp);
      sendBase("init", args);
    }

    public void recv_init() throws org.apache.thrift.TException
    {
      init_result result = new init_result();
      receiveBase(result, "init");
      return;
    }

    public void close(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException
    {
      send_close(streamName, cdnType, rtmp);
      recv_close();
    }

    public void send_close(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException
    {
      close_args args = new close_args();
      args.setStreamName(streamName);
      args.setCdnType(cdnType);
      args.setRtmp(rtmp);
      sendBase("close", args);
    }

    public void recv_close() throws org.apache.thrift.TException
    {
      close_result result = new close_result();
      receiveBase(result, "close");
      return;
    }

    public void breakStream(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException
    {
      send_breakStream(streamName, cdnType, rtmp);
      recv_breakStream();
    }

    public void send_breakStream(String streamName, int cdnType, String rtmp) throws org.apache.thrift.TException
    {
      breakStream_args args = new breakStream_args();
      args.setStreamName(streamName);
      args.setCdnType(cdnType);
      args.setRtmp(rtmp);
      sendBase("breakStream", args);
    }

    public void recv_breakStream() throws org.apache.thrift.TException
    {
      breakStream_result result = new breakStream_result();
      receiveBase(result, "breakStream");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllStreamList(org.apache.thrift.async.AsyncMethodCallback<getAllStreamList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllStreamList_call method_call = new getAllStreamList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllStreamList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllStreamList_call(org.apache.thrift.async.AsyncMethodCallback<getAllStreamList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllStreamList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllStreamList_args args = new getAllStreamList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<one.show.stream.thrift.view.StreamView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllStreamList();
      }
    }

    public void init(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<init_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      init_call method_call = new init_call(streamName, cdnType, rtmp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class init_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String streamName;
      private int cdnType;
      private String rtmp;
      public init_call(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<init_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamName = streamName;
        this.cdnType = cdnType;
        this.rtmp = rtmp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("init", org.apache.thrift.protocol.TMessageType.CALL, 0));
        init_args args = new init_args();
        args.setStreamName(streamName);
        args.setCdnType(cdnType);
        args.setRtmp(rtmp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_init();
      }
    }

    public void close(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<close_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_call method_call = new close_call(streamName, cdnType, rtmp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String streamName;
      private int cdnType;
      private String rtmp;
      public close_call(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<close_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamName = streamName;
        this.cdnType = cdnType;
        this.rtmp = rtmp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_args args = new close_args();
        args.setStreamName(streamName);
        args.setCdnType(cdnType);
        args.setRtmp(rtmp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close();
      }
    }

    public void breakStream(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<breakStream_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      breakStream_call method_call = new breakStream_call(streamName, cdnType, rtmp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class breakStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String streamName;
      private int cdnType;
      private String rtmp;
      public breakStream_call(String streamName, int cdnType, String rtmp, org.apache.thrift.async.AsyncMethodCallback<breakStream_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamName = streamName;
        this.cdnType = cdnType;
        this.rtmp = rtmp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("breakStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        breakStream_args args = new breakStream_args();
        args.setStreamName(streamName);
        args.setCdnType(cdnType);
        args.setRtmp(rtmp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_breakStream();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllStreamList", new getAllStreamList());
      processMap.put("init", new init());
      processMap.put("close", new close());
      processMap.put("breakStream", new breakStream());
      return processMap;
    }

    public static class getAllStreamList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllStreamList_args> {
      public getAllStreamList() {
        super("getAllStreamList");
      }

      public getAllStreamList_args getEmptyArgsInstance() {
        return new getAllStreamList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllStreamList_result getResult(I iface, getAllStreamList_args args) throws org.apache.thrift.TException {
        getAllStreamList_result result = new getAllStreamList_result();
        result.success = iface.getAllStreamList();
        return result;
      }
    }

    public static class init<I extends Iface> extends org.apache.thrift.ProcessFunction<I, init_args> {
      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public init_result getResult(I iface, init_args args) throws org.apache.thrift.TException {
        init_result result = new init_result();
        iface.init(args.streamName, args.cdnType, args.rtmp);
        return result;
      }
    }

    public static class close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_args> {
      public close() {
        super("close");
      }

      public close_args getEmptyArgsInstance() {
        return new close_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public close_result getResult(I iface, close_args args) throws org.apache.thrift.TException {
        close_result result = new close_result();
        iface.close(args.streamName, args.cdnType, args.rtmp);
        return result;
      }
    }

    public static class breakStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, breakStream_args> {
      public breakStream() {
        super("breakStream");
      }

      public breakStream_args getEmptyArgsInstance() {
        return new breakStream_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public breakStream_result getResult(I iface, breakStream_args args) throws org.apache.thrift.TException {
        breakStream_result result = new breakStream_result();
        iface.breakStream(args.streamName, args.cdnType, args.rtmp);
        return result;
      }
    }

  }

  public static class getAllStreamList_args implements org.apache.thrift.TBase<getAllStreamList_args, getAllStreamList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllStreamList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllStreamList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllStreamList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllStreamList_args.class, metaDataMap);
    }

    public getAllStreamList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllStreamList_args(getAllStreamList_args other) {
    }

    public getAllStreamList_args deepCopy() {
      return new getAllStreamList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllStreamList_args)
        return this.equals((getAllStreamList_args)that);
      return false;
    }

    public boolean equals(getAllStreamList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllStreamList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllStreamList_args typedOther = (getAllStreamList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllStreamList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllStreamList_argsStandardSchemeFactory implements SchemeFactory {
      public getAllStreamList_argsStandardScheme getScheme() {
        return new getAllStreamList_argsStandardScheme();
      }
    }

    private static class getAllStreamList_argsStandardScheme extends StandardScheme<getAllStreamList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllStreamList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllStreamList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllStreamList_argsTupleSchemeFactory implements SchemeFactory {
      public getAllStreamList_argsTupleScheme getScheme() {
        return new getAllStreamList_argsTupleScheme();
      }
    }

    private static class getAllStreamList_argsTupleScheme extends TupleScheme<getAllStreamList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllStreamList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllStreamList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllStreamList_result implements org.apache.thrift.TBase<getAllStreamList_result, getAllStreamList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllStreamList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllStreamList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllStreamList_resultTupleSchemeFactory());
    }

    public List<one.show.stream.thrift.view.StreamView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, one.show.stream.thrift.view.StreamView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllStreamList_result.class, metaDataMap);
    }

    public getAllStreamList_result() {
    }

    public getAllStreamList_result(
      List<one.show.stream.thrift.view.StreamView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllStreamList_result(getAllStreamList_result other) {
      if (other.isSetSuccess()) {
        List<one.show.stream.thrift.view.StreamView> __this__success = new ArrayList<one.show.stream.thrift.view.StreamView>();
        for (one.show.stream.thrift.view.StreamView other_element : other.success) {
          __this__success.add(new one.show.stream.thrift.view.StreamView(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllStreamList_result deepCopy() {
      return new getAllStreamList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<one.show.stream.thrift.view.StreamView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(one.show.stream.thrift.view.StreamView elem) {
      if (this.success == null) {
        this.success = new ArrayList<one.show.stream.thrift.view.StreamView>();
      }
      this.success.add(elem);
    }

    public List<one.show.stream.thrift.view.StreamView> getSuccess() {
      return this.success;
    }

    public getAllStreamList_result setSuccess(List<one.show.stream.thrift.view.StreamView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<one.show.stream.thrift.view.StreamView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllStreamList_result)
        return this.equals((getAllStreamList_result)that);
      return false;
    }

    public boolean equals(getAllStreamList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllStreamList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllStreamList_result typedOther = (getAllStreamList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllStreamList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllStreamList_resultStandardSchemeFactory implements SchemeFactory {
      public getAllStreamList_resultStandardScheme getScheme() {
        return new getAllStreamList_resultStandardScheme();
      }
    }

    private static class getAllStreamList_resultStandardScheme extends StandardScheme<getAllStreamList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllStreamList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<one.show.stream.thrift.view.StreamView>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    one.show.stream.thrift.view.StreamView _elem2; // required
                    _elem2 = new one.show.stream.thrift.view.StreamView();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllStreamList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (one.show.stream.thrift.view.StreamView _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllStreamList_resultTupleSchemeFactory implements SchemeFactory {
      public getAllStreamList_resultTupleScheme getScheme() {
        return new getAllStreamList_resultTupleScheme();
      }
    }

    private static class getAllStreamList_resultTupleScheme extends TupleScheme<getAllStreamList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllStreamList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (one.show.stream.thrift.view.StreamView _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllStreamList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<one.show.stream.thrift.view.StreamView>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              one.show.stream.thrift.view.StreamView _elem7; // required
              _elem7 = new one.show.stream.thrift.view.StreamView();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class init_args implements org.apache.thrift.TBase<init_args, init_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_args");

    private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CDN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cdnType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField RTMP_FIELD_DESC = new org.apache.thrift.protocol.TField("rtmp", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_argsTupleSchemeFactory());
    }

    public String streamName; // required
    public int cdnType; // required
    public String rtmp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_NAME((short)1, "streamName"),
      CDN_TYPE((short)2, "cdnType"),
      RTMP((short)3, "rtmp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_NAME
            return STREAM_NAME;
          case 2: // CDN_TYPE
            return CDN_TYPE;
          case 3: // RTMP
            return RTMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CDNTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CDN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cdnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RTMP, new org.apache.thrift.meta_data.FieldMetaData("rtmp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_args.class, metaDataMap);
    }

    public init_args() {
    }

    public init_args(
      String streamName,
      int cdnType,
      String rtmp)
    {
      this();
      this.streamName = streamName;
      this.cdnType = cdnType;
      setCdnTypeIsSet(true);
      this.rtmp = rtmp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_args(init_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStreamName()) {
        this.streamName = other.streamName;
      }
      this.cdnType = other.cdnType;
      if (other.isSetRtmp()) {
        this.rtmp = other.rtmp;
      }
    }

    public init_args deepCopy() {
      return new init_args(this);
    }

    @Override
    public void clear() {
      this.streamName = null;
      setCdnTypeIsSet(false);
      this.cdnType = 0;
      this.rtmp = null;
    }

    public String getStreamName() {
      return this.streamName;
    }

    public init_args setStreamName(String streamName) {
      this.streamName = streamName;
      return this;
    }

    public void unsetStreamName() {
      this.streamName = null;
    }

    /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamName() {
      return this.streamName != null;
    }

    public void setStreamNameIsSet(boolean value) {
      if (!value) {
        this.streamName = null;
      }
    }

    public int getCdnType() {
      return this.cdnType;
    }

    public init_args setCdnType(int cdnType) {
      this.cdnType = cdnType;
      setCdnTypeIsSet(true);
      return this;
    }

    public void unsetCdnType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
    }

    /** Returns true if field cdnType is set (has been assigned a value) and false otherwise */
    public boolean isSetCdnType() {
      return EncodingUtils.testBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
    }

    public void setCdnTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CDNTYPE_ISSET_ID, value);
    }

    public String getRtmp() {
      return this.rtmp;
    }

    public init_args setRtmp(String rtmp) {
      this.rtmp = rtmp;
      return this;
    }

    public void unsetRtmp() {
      this.rtmp = null;
    }

    /** Returns true if field rtmp is set (has been assigned a value) and false otherwise */
    public boolean isSetRtmp() {
      return this.rtmp != null;
    }

    public void setRtmpIsSet(boolean value) {
      if (!value) {
        this.rtmp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM_NAME:
        if (value == null) {
          unsetStreamName();
        } else {
          setStreamName((String)value);
        }
        break;

      case CDN_TYPE:
        if (value == null) {
          unsetCdnType();
        } else {
          setCdnType((Integer)value);
        }
        break;

      case RTMP:
        if (value == null) {
          unsetRtmp();
        } else {
          setRtmp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_NAME:
        return getStreamName();

      case CDN_TYPE:
        return Integer.valueOf(getCdnType());

      case RTMP:
        return getRtmp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM_NAME:
        return isSetStreamName();
      case CDN_TYPE:
        return isSetCdnType();
      case RTMP:
        return isSetRtmp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_args)
        return this.equals((init_args)that);
      return false;
    }

    public boolean equals(init_args that) {
      if (that == null)
        return false;

      boolean this_present_streamName = true && this.isSetStreamName();
      boolean that_present_streamName = true && that.isSetStreamName();
      if (this_present_streamName || that_present_streamName) {
        if (!(this_present_streamName && that_present_streamName))
          return false;
        if (!this.streamName.equals(that.streamName))
          return false;
      }

      boolean this_present_cdnType = true;
      boolean that_present_cdnType = true;
      if (this_present_cdnType || that_present_cdnType) {
        if (!(this_present_cdnType && that_present_cdnType))
          return false;
        if (this.cdnType != that.cdnType)
          return false;
      }

      boolean this_present_rtmp = true && this.isSetRtmp();
      boolean that_present_rtmp = true && that.isSetRtmp();
      if (this_present_rtmp || that_present_rtmp) {
        if (!(this_present_rtmp && that_present_rtmp))
          return false;
        if (!this.rtmp.equals(that.rtmp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(init_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      init_args typedOther = (init_args)other;

      lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdnType()).compareTo(typedOther.isSetCdnType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdnType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdnType, typedOther.cdnType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRtmp()).compareTo(typedOther.isSetRtmp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRtmp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtmp, typedOther.rtmp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_args(");
      boolean first = true;

      sb.append("streamName:");
      if (this.streamName == null) {
        sb.append("null");
      } else {
        sb.append(this.streamName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdnType:");
      sb.append(this.cdnType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rtmp:");
      if (this.rtmp == null) {
        sb.append("null");
      } else {
        sb.append(this.rtmp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_argsStandardSchemeFactory implements SchemeFactory {
      public init_argsStandardScheme getScheme() {
        return new init_argsStandardScheme();
      }
    }

    private static class init_argsStandardScheme extends StandardScheme<init_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamName = iprot.readString();
                struct.setStreamNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDN_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cdnType = iprot.readI32();
                struct.setCdnTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RTMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rtmp = iprot.readString();
                struct.setRtmpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamName != null) {
          oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
          oprot.writeString(struct.streamName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CDN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cdnType);
        oprot.writeFieldEnd();
        if (struct.rtmp != null) {
          oprot.writeFieldBegin(RTMP_FIELD_DESC);
          oprot.writeString(struct.rtmp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_argsTupleSchemeFactory implements SchemeFactory {
      public init_argsTupleScheme getScheme() {
        return new init_argsTupleScheme();
      }
    }

    private static class init_argsTupleScheme extends TupleScheme<init_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamName()) {
          optionals.set(0);
        }
        if (struct.isSetCdnType()) {
          optionals.set(1);
        }
        if (struct.isSetRtmp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStreamName()) {
          oprot.writeString(struct.streamName);
        }
        if (struct.isSetCdnType()) {
          oprot.writeI32(struct.cdnType);
        }
        if (struct.isSetRtmp()) {
          oprot.writeString(struct.rtmp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.streamName = iprot.readString();
          struct.setStreamNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdnType = iprot.readI32();
          struct.setCdnTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rtmp = iprot.readString();
          struct.setRtmpIsSet(true);
        }
      }
    }

  }

  public static class init_result implements org.apache.thrift.TBase<init_result, init_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_result.class, metaDataMap);
    }

    public init_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_result(init_result other) {
    }

    public init_result deepCopy() {
      return new init_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_result)
        return this.equals((init_result)that);
      return false;
    }

    public boolean equals(init_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(init_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      init_result typedOther = (init_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_resultStandardSchemeFactory implements SchemeFactory {
      public init_resultStandardScheme getScheme() {
        return new init_resultStandardScheme();
      }
    }

    private static class init_resultStandardScheme extends StandardScheme<init_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_resultTupleSchemeFactory implements SchemeFactory {
      public init_resultTupleScheme getScheme() {
        return new init_resultTupleScheme();
      }
    }

    private static class init_resultTupleScheme extends TupleScheme<init_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class close_args implements org.apache.thrift.TBase<close_args, close_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_args");

    private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CDN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cdnType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField RTMP_FIELD_DESC = new org.apache.thrift.protocol.TField("rtmp", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new close_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new close_argsTupleSchemeFactory());
    }

    public String streamName; // required
    public int cdnType; // required
    public String rtmp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_NAME((short)1, "streamName"),
      CDN_TYPE((short)2, "cdnType"),
      RTMP((short)3, "rtmp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_NAME
            return STREAM_NAME;
          case 2: // CDN_TYPE
            return CDN_TYPE;
          case 3: // RTMP
            return RTMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CDNTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CDN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cdnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RTMP, new org.apache.thrift.meta_data.FieldMetaData("rtmp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_args.class, metaDataMap);
    }

    public close_args() {
    }

    public close_args(
      String streamName,
      int cdnType,
      String rtmp)
    {
      this();
      this.streamName = streamName;
      this.cdnType = cdnType;
      setCdnTypeIsSet(true);
      this.rtmp = rtmp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_args(close_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStreamName()) {
        this.streamName = other.streamName;
      }
      this.cdnType = other.cdnType;
      if (other.isSetRtmp()) {
        this.rtmp = other.rtmp;
      }
    }

    public close_args deepCopy() {
      return new close_args(this);
    }

    @Override
    public void clear() {
      this.streamName = null;
      setCdnTypeIsSet(false);
      this.cdnType = 0;
      this.rtmp = null;
    }

    public String getStreamName() {
      return this.streamName;
    }

    public close_args setStreamName(String streamName) {
      this.streamName = streamName;
      return this;
    }

    public void unsetStreamName() {
      this.streamName = null;
    }

    /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamName() {
      return this.streamName != null;
    }

    public void setStreamNameIsSet(boolean value) {
      if (!value) {
        this.streamName = null;
      }
    }

    public int getCdnType() {
      return this.cdnType;
    }

    public close_args setCdnType(int cdnType) {
      this.cdnType = cdnType;
      setCdnTypeIsSet(true);
      return this;
    }

    public void unsetCdnType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
    }

    /** Returns true if field cdnType is set (has been assigned a value) and false otherwise */
    public boolean isSetCdnType() {
      return EncodingUtils.testBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
    }

    public void setCdnTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CDNTYPE_ISSET_ID, value);
    }

    public String getRtmp() {
      return this.rtmp;
    }

    public close_args setRtmp(String rtmp) {
      this.rtmp = rtmp;
      return this;
    }

    public void unsetRtmp() {
      this.rtmp = null;
    }

    /** Returns true if field rtmp is set (has been assigned a value) and false otherwise */
    public boolean isSetRtmp() {
      return this.rtmp != null;
    }

    public void setRtmpIsSet(boolean value) {
      if (!value) {
        this.rtmp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM_NAME:
        if (value == null) {
          unsetStreamName();
        } else {
          setStreamName((String)value);
        }
        break;

      case CDN_TYPE:
        if (value == null) {
          unsetCdnType();
        } else {
          setCdnType((Integer)value);
        }
        break;

      case RTMP:
        if (value == null) {
          unsetRtmp();
        } else {
          setRtmp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_NAME:
        return getStreamName();

      case CDN_TYPE:
        return Integer.valueOf(getCdnType());

      case RTMP:
        return getRtmp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM_NAME:
        return isSetStreamName();
      case CDN_TYPE:
        return isSetCdnType();
      case RTMP:
        return isSetRtmp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_args)
        return this.equals((close_args)that);
      return false;
    }

    public boolean equals(close_args that) {
      if (that == null)
        return false;

      boolean this_present_streamName = true && this.isSetStreamName();
      boolean that_present_streamName = true && that.isSetStreamName();
      if (this_present_streamName || that_present_streamName) {
        if (!(this_present_streamName && that_present_streamName))
          return false;
        if (!this.streamName.equals(that.streamName))
          return false;
      }

      boolean this_present_cdnType = true;
      boolean that_present_cdnType = true;
      if (this_present_cdnType || that_present_cdnType) {
        if (!(this_present_cdnType && that_present_cdnType))
          return false;
        if (this.cdnType != that.cdnType)
          return false;
      }

      boolean this_present_rtmp = true && this.isSetRtmp();
      boolean that_present_rtmp = true && that.isSetRtmp();
      if (this_present_rtmp || that_present_rtmp) {
        if (!(this_present_rtmp && that_present_rtmp))
          return false;
        if (!this.rtmp.equals(that.rtmp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_args typedOther = (close_args)other;

      lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdnType()).compareTo(typedOther.isSetCdnType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdnType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdnType, typedOther.cdnType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRtmp()).compareTo(typedOther.isSetRtmp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRtmp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtmp, typedOther.rtmp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_args(");
      boolean first = true;

      sb.append("streamName:");
      if (this.streamName == null) {
        sb.append("null");
      } else {
        sb.append(this.streamName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdnType:");
      sb.append(this.cdnType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rtmp:");
      if (this.rtmp == null) {
        sb.append("null");
      } else {
        sb.append(this.rtmp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class close_argsStandardSchemeFactory implements SchemeFactory {
      public close_argsStandardScheme getScheme() {
        return new close_argsStandardScheme();
      }
    }

    private static class close_argsStandardScheme extends StandardScheme<close_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamName = iprot.readString();
                struct.setStreamNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDN_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cdnType = iprot.readI32();
                struct.setCdnTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RTMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rtmp = iprot.readString();
                struct.setRtmpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, close_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamName != null) {
          oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
          oprot.writeString(struct.streamName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CDN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cdnType);
        oprot.writeFieldEnd();
        if (struct.rtmp != null) {
          oprot.writeFieldBegin(RTMP_FIELD_DESC);
          oprot.writeString(struct.rtmp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class close_argsTupleSchemeFactory implements SchemeFactory {
      public close_argsTupleScheme getScheme() {
        return new close_argsTupleScheme();
      }
    }

    private static class close_argsTupleScheme extends TupleScheme<close_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, close_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamName()) {
          optionals.set(0);
        }
        if (struct.isSetCdnType()) {
          optionals.set(1);
        }
        if (struct.isSetRtmp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStreamName()) {
          oprot.writeString(struct.streamName);
        }
        if (struct.isSetCdnType()) {
          oprot.writeI32(struct.cdnType);
        }
        if (struct.isSetRtmp()) {
          oprot.writeString(struct.rtmp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, close_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.streamName = iprot.readString();
          struct.setStreamNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdnType = iprot.readI32();
          struct.setCdnTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rtmp = iprot.readString();
          struct.setRtmpIsSet(true);
        }
      }
    }

  }

  public static class close_result implements org.apache.thrift.TBase<close_result, close_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new close_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new close_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_result.class, metaDataMap);
    }

    public close_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_result(close_result other) {
    }

    public close_result deepCopy() {
      return new close_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_result)
        return this.equals((close_result)that);
      return false;
    }

    public boolean equals(close_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_result typedOther = (close_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class close_resultStandardSchemeFactory implements SchemeFactory {
      public close_resultStandardScheme getScheme() {
        return new close_resultStandardScheme();
      }
    }

    private static class close_resultStandardScheme extends StandardScheme<close_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, close_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, close_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class close_resultTupleSchemeFactory implements SchemeFactory {
      public close_resultTupleScheme getScheme() {
        return new close_resultTupleScheme();
      }
    }

    private static class close_resultTupleScheme extends TupleScheme<close_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, close_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, close_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class breakStream_args implements org.apache.thrift.TBase<breakStream_args, breakStream_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("breakStream_args");

    private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CDN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cdnType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField RTMP_FIELD_DESC = new org.apache.thrift.protocol.TField("rtmp", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new breakStream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new breakStream_argsTupleSchemeFactory());
    }

    public String streamName; // required
    public int cdnType; // required
    public String rtmp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_NAME((short)1, "streamName"),
      CDN_TYPE((short)2, "cdnType"),
      RTMP((short)3, "rtmp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_NAME
            return STREAM_NAME;
          case 2: // CDN_TYPE
            return CDN_TYPE;
          case 3: // RTMP
            return RTMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CDNTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CDN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cdnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RTMP, new org.apache.thrift.meta_data.FieldMetaData("rtmp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(breakStream_args.class, metaDataMap);
    }

    public breakStream_args() {
    }

    public breakStream_args(
      String streamName,
      int cdnType,
      String rtmp)
    {
      this();
      this.streamName = streamName;
      this.cdnType = cdnType;
      setCdnTypeIsSet(true);
      this.rtmp = rtmp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public breakStream_args(breakStream_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStreamName()) {
        this.streamName = other.streamName;
      }
      this.cdnType = other.cdnType;
      if (other.isSetRtmp()) {
        this.rtmp = other.rtmp;
      }
    }

    public breakStream_args deepCopy() {
      return new breakStream_args(this);
    }

    @Override
    public void clear() {
      this.streamName = null;
      setCdnTypeIsSet(false);
      this.cdnType = 0;
      this.rtmp = null;
    }

    public String getStreamName() {
      return this.streamName;
    }

    public breakStream_args setStreamName(String streamName) {
      this.streamName = streamName;
      return this;
    }

    public void unsetStreamName() {
      this.streamName = null;
    }

    /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamName() {
      return this.streamName != null;
    }

    public void setStreamNameIsSet(boolean value) {
      if (!value) {
        this.streamName = null;
      }
    }

    public int getCdnType() {
      return this.cdnType;
    }

    public breakStream_args setCdnType(int cdnType) {
      this.cdnType = cdnType;
      setCdnTypeIsSet(true);
      return this;
    }

    public void unsetCdnType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
    }

    /** Returns true if field cdnType is set (has been assigned a value) and false otherwise */
    public boolean isSetCdnType() {
      return EncodingUtils.testBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
    }

    public void setCdnTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CDNTYPE_ISSET_ID, value);
    }

    public String getRtmp() {
      return this.rtmp;
    }

    public breakStream_args setRtmp(String rtmp) {
      this.rtmp = rtmp;
      return this;
    }

    public void unsetRtmp() {
      this.rtmp = null;
    }

    /** Returns true if field rtmp is set (has been assigned a value) and false otherwise */
    public boolean isSetRtmp() {
      return this.rtmp != null;
    }

    public void setRtmpIsSet(boolean value) {
      if (!value) {
        this.rtmp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM_NAME:
        if (value == null) {
          unsetStreamName();
        } else {
          setStreamName((String)value);
        }
        break;

      case CDN_TYPE:
        if (value == null) {
          unsetCdnType();
        } else {
          setCdnType((Integer)value);
        }
        break;

      case RTMP:
        if (value == null) {
          unsetRtmp();
        } else {
          setRtmp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_NAME:
        return getStreamName();

      case CDN_TYPE:
        return Integer.valueOf(getCdnType());

      case RTMP:
        return getRtmp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM_NAME:
        return isSetStreamName();
      case CDN_TYPE:
        return isSetCdnType();
      case RTMP:
        return isSetRtmp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof breakStream_args)
        return this.equals((breakStream_args)that);
      return false;
    }

    public boolean equals(breakStream_args that) {
      if (that == null)
        return false;

      boolean this_present_streamName = true && this.isSetStreamName();
      boolean that_present_streamName = true && that.isSetStreamName();
      if (this_present_streamName || that_present_streamName) {
        if (!(this_present_streamName && that_present_streamName))
          return false;
        if (!this.streamName.equals(that.streamName))
          return false;
      }

      boolean this_present_cdnType = true;
      boolean that_present_cdnType = true;
      if (this_present_cdnType || that_present_cdnType) {
        if (!(this_present_cdnType && that_present_cdnType))
          return false;
        if (this.cdnType != that.cdnType)
          return false;
      }

      boolean this_present_rtmp = true && this.isSetRtmp();
      boolean that_present_rtmp = true && that.isSetRtmp();
      if (this_present_rtmp || that_present_rtmp) {
        if (!(this_present_rtmp && that_present_rtmp))
          return false;
        if (!this.rtmp.equals(that.rtmp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(breakStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      breakStream_args typedOther = (breakStream_args)other;

      lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdnType()).compareTo(typedOther.isSetCdnType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdnType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdnType, typedOther.cdnType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRtmp()).compareTo(typedOther.isSetRtmp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRtmp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtmp, typedOther.rtmp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("breakStream_args(");
      boolean first = true;

      sb.append("streamName:");
      if (this.streamName == null) {
        sb.append("null");
      } else {
        sb.append(this.streamName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdnType:");
      sb.append(this.cdnType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rtmp:");
      if (this.rtmp == null) {
        sb.append("null");
      } else {
        sb.append(this.rtmp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class breakStream_argsStandardSchemeFactory implements SchemeFactory {
      public breakStream_argsStandardScheme getScheme() {
        return new breakStream_argsStandardScheme();
      }
    }

    private static class breakStream_argsStandardScheme extends StandardScheme<breakStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, breakStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamName = iprot.readString();
                struct.setStreamNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDN_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cdnType = iprot.readI32();
                struct.setCdnTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RTMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rtmp = iprot.readString();
                struct.setRtmpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, breakStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamName != null) {
          oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
          oprot.writeString(struct.streamName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CDN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cdnType);
        oprot.writeFieldEnd();
        if (struct.rtmp != null) {
          oprot.writeFieldBegin(RTMP_FIELD_DESC);
          oprot.writeString(struct.rtmp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class breakStream_argsTupleSchemeFactory implements SchemeFactory {
      public breakStream_argsTupleScheme getScheme() {
        return new breakStream_argsTupleScheme();
      }
    }

    private static class breakStream_argsTupleScheme extends TupleScheme<breakStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, breakStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamName()) {
          optionals.set(0);
        }
        if (struct.isSetCdnType()) {
          optionals.set(1);
        }
        if (struct.isSetRtmp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStreamName()) {
          oprot.writeString(struct.streamName);
        }
        if (struct.isSetCdnType()) {
          oprot.writeI32(struct.cdnType);
        }
        if (struct.isSetRtmp()) {
          oprot.writeString(struct.rtmp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, breakStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.streamName = iprot.readString();
          struct.setStreamNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdnType = iprot.readI32();
          struct.setCdnTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rtmp = iprot.readString();
          struct.setRtmpIsSet(true);
        }
      }
    }

  }

  public static class breakStream_result implements org.apache.thrift.TBase<breakStream_result, breakStream_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("breakStream_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new breakStream_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new breakStream_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(breakStream_result.class, metaDataMap);
    }

    public breakStream_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public breakStream_result(breakStream_result other) {
    }

    public breakStream_result deepCopy() {
      return new breakStream_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof breakStream_result)
        return this.equals((breakStream_result)that);
      return false;
    }

    public boolean equals(breakStream_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(breakStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      breakStream_result typedOther = (breakStream_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("breakStream_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class breakStream_resultStandardSchemeFactory implements SchemeFactory {
      public breakStream_resultStandardScheme getScheme() {
        return new breakStream_resultStandardScheme();
      }
    }

    private static class breakStream_resultStandardScheme extends StandardScheme<breakStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, breakStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, breakStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class breakStream_resultTupleSchemeFactory implements SchemeFactory {
      public breakStream_resultTupleScheme getScheme() {
        return new breakStream_resultTupleScheme();
      }
    }

    private static class breakStream_resultTupleScheme extends TupleScheme<breakStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, breakStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, breakStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
