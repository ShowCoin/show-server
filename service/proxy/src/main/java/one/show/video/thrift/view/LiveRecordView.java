/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.video.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LiveRecordView implements org.apache.thrift.TBase<LiveRecordView, LiveRecordView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LiveRecordView");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CDN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cdnType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIVEID_FIELD_DESC = new org.apache.thrift.protocol.TField("liveid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPS_FIELD_DESC = new org.apache.thrift.protocol.TField("ops", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LiveRecordViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LiveRecordViewTupleSchemeFactory());
  }

  public long id; // required
  public int cdnType; // required
  public int status; // required
  public long liveid; // required
  public long uid; // required
  public String bucket; // required
  public int format; // required
  public String ops; // required
  public String keys; // required
  public String urls; // required
  public int createTime; // required
  public int updateTime; // required
  public double duration; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CDN_TYPE((short)2, "cdnType"),
    STATUS((short)3, "status"),
    LIVEID((short)4, "liveid"),
    UID((short)5, "uid"),
    BUCKET((short)6, "bucket"),
    FORMAT((short)7, "format"),
    OPS((short)8, "ops"),
    KEYS((short)9, "keys"),
    URLS((short)10, "urls"),
    CREATE_TIME((short)11, "createTime"),
    UPDATE_TIME((short)12, "updateTime"),
    DURATION((short)13, "duration");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CDN_TYPE
          return CDN_TYPE;
        case 3: // STATUS
          return STATUS;
        case 4: // LIVEID
          return LIVEID;
        case 5: // UID
          return UID;
        case 6: // BUCKET
          return BUCKET;
        case 7: // FORMAT
          return FORMAT;
        case 8: // OPS
          return OPS;
        case 9: // KEYS
          return KEYS;
        case 10: // URLS
          return URLS;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // UPDATE_TIME
          return UPDATE_TIME;
        case 13: // DURATION
          return DURATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CDNTYPE_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __LIVEID_ISSET_ID = 3;
  private static final int __UID_ISSET_ID = 4;
  private static final int __FORMAT_ISSET_ID = 5;
  private static final int __CREATETIME_ISSET_ID = 6;
  private static final int __UPDATETIME_ISSET_ID = 7;
  private static final int __DURATION_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CDN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cdnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIVEID, new org.apache.thrift.meta_data.FieldMetaData("liveid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUCKET, new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPS, new org.apache.thrift.meta_data.FieldMetaData("ops", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LiveRecordView.class, metaDataMap);
  }

  public LiveRecordView() {
  }

  public LiveRecordView(
    long id,
    int cdnType,
    int status,
    long liveid,
    long uid,
    String bucket,
    int format,
    String ops,
    String keys,
    String urls,
    int createTime,
    int updateTime,
    double duration)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.cdnType = cdnType;
    setCdnTypeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.liveid = liveid;
    setLiveidIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.bucket = bucket;
    this.format = format;
    setFormatIsSet(true);
    this.ops = ops;
    this.keys = keys;
    this.urls = urls;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LiveRecordView(LiveRecordView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.cdnType = other.cdnType;
    this.status = other.status;
    this.liveid = other.liveid;
    this.uid = other.uid;
    if (other.isSetBucket()) {
      this.bucket = other.bucket;
    }
    this.format = other.format;
    if (other.isSetOps()) {
      this.ops = other.ops;
    }
    if (other.isSetKeys()) {
      this.keys = other.keys;
    }
    if (other.isSetUrls()) {
      this.urls = other.urls;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.duration = other.duration;
  }

  public LiveRecordView deepCopy() {
    return new LiveRecordView(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCdnTypeIsSet(false);
    this.cdnType = 0;
    setStatusIsSet(false);
    this.status = 0;
    setLiveidIsSet(false);
    this.liveid = 0;
    setUidIsSet(false);
    this.uid = 0;
    this.bucket = null;
    setFormatIsSet(false);
    this.format = 0;
    this.ops = null;
    this.keys = null;
    this.urls = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setDurationIsSet(false);
    this.duration = 0.0;
  }

  public long getId() {
    return this.id;
  }

  public LiveRecordView setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCdnType() {
    return this.cdnType;
  }

  public LiveRecordView setCdnType(int cdnType) {
    this.cdnType = cdnType;
    setCdnTypeIsSet(true);
    return this;
  }

  public void unsetCdnType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
  }

  /** Returns true if field cdnType is set (has been assigned a value) and false otherwise */
  public boolean isSetCdnType() {
    return EncodingUtils.testBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
  }

  public void setCdnTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CDNTYPE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public LiveRecordView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getLiveid() {
    return this.liveid;
  }

  public LiveRecordView setLiveid(long liveid) {
    this.liveid = liveid;
    setLiveidIsSet(true);
    return this;
  }

  public void unsetLiveid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVEID_ISSET_ID);
  }

  /** Returns true if field liveid is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveid() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVEID_ISSET_ID);
  }

  public void setLiveidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVEID_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public LiveRecordView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public String getBucket() {
    return this.bucket;
  }

  public LiveRecordView setBucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  public void unsetBucket() {
    this.bucket = null;
  }

  /** Returns true if field bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket() {
    return this.bucket != null;
  }

  public void setBucketIsSet(boolean value) {
    if (!value) {
      this.bucket = null;
    }
  }

  public int getFormat() {
    return this.format;
  }

  public LiveRecordView setFormat(int format) {
    this.format = format;
    setFormatIsSet(true);
    return this;
  }

  public void unsetFormat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORMAT_ISSET_ID);
  }

  /** Returns true if field format is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat() {
    return EncodingUtils.testBit(__isset_bitfield, __FORMAT_ISSET_ID);
  }

  public void setFormatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORMAT_ISSET_ID, value);
  }

  public String getOps() {
    return this.ops;
  }

  public LiveRecordView setOps(String ops) {
    this.ops = ops;
    return this;
  }

  public void unsetOps() {
    this.ops = null;
  }

  /** Returns true if field ops is set (has been assigned a value) and false otherwise */
  public boolean isSetOps() {
    return this.ops != null;
  }

  public void setOpsIsSet(boolean value) {
    if (!value) {
      this.ops = null;
    }
  }

  public String getKeys() {
    return this.keys;
  }

  public LiveRecordView setKeys(String keys) {
    this.keys = keys;
    return this;
  }

  public void unsetKeys() {
    this.keys = null;
  }

  /** Returns true if field keys is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys() {
    return this.keys != null;
  }

  public void setKeysIsSet(boolean value) {
    if (!value) {
      this.keys = null;
    }
  }

  public String getUrls() {
    return this.urls;
  }

  public LiveRecordView setUrls(String urls) {
    this.urls = urls;
    return this;
  }

  public void unsetUrls() {
    this.urls = null;
  }

  /** Returns true if field urls is set (has been assigned a value) and false otherwise */
  public boolean isSetUrls() {
    return this.urls != null;
  }

  public void setUrlsIsSet(boolean value) {
    if (!value) {
      this.urls = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public LiveRecordView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public LiveRecordView setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public double getDuration() {
    return this.duration;
  }

  public LiveRecordView setDuration(double duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CDN_TYPE:
      if (value == null) {
        unsetCdnType();
      } else {
        setCdnType((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LIVEID:
      if (value == null) {
        unsetLiveid();
      } else {
        setLiveid((Long)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case BUCKET:
      if (value == null) {
        unsetBucket();
      } else {
        setBucket((String)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((Integer)value);
      }
      break;

    case OPS:
      if (value == null) {
        unsetOps();
      } else {
        setOps((String)value);
      }
      break;

    case KEYS:
      if (value == null) {
        unsetKeys();
      } else {
        setKeys((String)value);
      }
      break;

    case URLS:
      if (value == null) {
        unsetUrls();
      } else {
        setUrls((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CDN_TYPE:
      return Integer.valueOf(getCdnType());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LIVEID:
      return Long.valueOf(getLiveid());

    case UID:
      return Long.valueOf(getUid());

    case BUCKET:
      return getBucket();

    case FORMAT:
      return Integer.valueOf(getFormat());

    case OPS:
      return getOps();

    case KEYS:
      return getKeys();

    case URLS:
      return getUrls();

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    case DURATION:
      return Double.valueOf(getDuration());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CDN_TYPE:
      return isSetCdnType();
    case STATUS:
      return isSetStatus();
    case LIVEID:
      return isSetLiveid();
    case UID:
      return isSetUid();
    case BUCKET:
      return isSetBucket();
    case FORMAT:
      return isSetFormat();
    case OPS:
      return isSetOps();
    case KEYS:
      return isSetKeys();
    case URLS:
      return isSetUrls();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case DURATION:
      return isSetDuration();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LiveRecordView)
      return this.equals((LiveRecordView)that);
    return false;
  }

  public boolean equals(LiveRecordView that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_cdnType = true;
    boolean that_present_cdnType = true;
    if (this_present_cdnType || that_present_cdnType) {
      if (!(this_present_cdnType && that_present_cdnType))
        return false;
      if (this.cdnType != that.cdnType)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_liveid = true;
    boolean that_present_liveid = true;
    if (this_present_liveid || that_present_liveid) {
      if (!(this_present_liveid && that_present_liveid))
        return false;
      if (this.liveid != that.liveid)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_bucket = true && this.isSetBucket();
    boolean that_present_bucket = true && that.isSetBucket();
    if (this_present_bucket || that_present_bucket) {
      if (!(this_present_bucket && that_present_bucket))
        return false;
      if (!this.bucket.equals(that.bucket))
        return false;
    }

    boolean this_present_format = true;
    boolean that_present_format = true;
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (this.format != that.format)
        return false;
    }

    boolean this_present_ops = true && this.isSetOps();
    boolean that_present_ops = true && that.isSetOps();
    if (this_present_ops || that_present_ops) {
      if (!(this_present_ops && that_present_ops))
        return false;
      if (!this.ops.equals(that.ops))
        return false;
    }

    boolean this_present_keys = true && this.isSetKeys();
    boolean that_present_keys = true && that.isSetKeys();
    if (this_present_keys || that_present_keys) {
      if (!(this_present_keys && that_present_keys))
        return false;
      if (!this.keys.equals(that.keys))
        return false;
    }

    boolean this_present_urls = true && this.isSetUrls();
    boolean that_present_urls = true && that.isSetUrls();
    if (this_present_urls || that_present_urls) {
      if (!(this_present_urls && that_present_urls))
        return false;
      if (!this.urls.equals(that.urls))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LiveRecordView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LiveRecordView typedOther = (LiveRecordView)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCdnType()).compareTo(typedOther.isSetCdnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdnType, typedOther.cdnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveid()).compareTo(typedOther.isSetLiveid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveid, typedOther.liveid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucket()).compareTo(typedOther.isSetBucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, typedOther.bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormat()).compareTo(typedOther.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, typedOther.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOps()).compareTo(typedOther.isSetOps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ops, typedOther.ops);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeys()).compareTo(typedOther.isSetKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, typedOther.keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrls()).compareTo(typedOther.isSetUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, typedOther.urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LiveRecordView(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cdnType:");
    sb.append(this.cdnType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveid:");
    sb.append(this.liveid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucket:");
    if (this.bucket == null) {
      sb.append("null");
    } else {
      sb.append(this.bucket);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("format:");
    sb.append(this.format);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ops:");
    if (this.ops == null) {
      sb.append("null");
    } else {
      sb.append(this.ops);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keys:");
    if (this.keys == null) {
      sb.append("null");
    } else {
      sb.append(this.keys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urls:");
    if (this.urls == null) {
      sb.append("null");
    } else {
      sb.append(this.urls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LiveRecordViewStandardSchemeFactory implements SchemeFactory {
    public LiveRecordViewStandardScheme getScheme() {
      return new LiveRecordViewStandardScheme();
    }
  }

  private static class LiveRecordViewStandardScheme extends StandardScheme<LiveRecordView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LiveRecordView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CDN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cdnType = iprot.readI32();
              struct.setCdnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIVEID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.liveid = iprot.readI64();
              struct.setLiveidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bucket = iprot.readString();
              struct.setBucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format = iprot.readI32();
              struct.setFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ops = iprot.readString();
              struct.setOpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keys = iprot.readString();
              struct.setKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.urls = iprot.readString();
              struct.setUrlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.duration = iprot.readDouble();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LiveRecordView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CDN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cdnType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIVEID_FIELD_DESC);
      oprot.writeI64(struct.liveid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      if (struct.bucket != null) {
        oprot.writeFieldBegin(BUCKET_FIELD_DESC);
        oprot.writeString(struct.bucket);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORMAT_FIELD_DESC);
      oprot.writeI32(struct.format);
      oprot.writeFieldEnd();
      if (struct.ops != null) {
        oprot.writeFieldBegin(OPS_FIELD_DESC);
        oprot.writeString(struct.ops);
        oprot.writeFieldEnd();
      }
      if (struct.keys != null) {
        oprot.writeFieldBegin(KEYS_FIELD_DESC);
        oprot.writeString(struct.keys);
        oprot.writeFieldEnd();
      }
      if (struct.urls != null) {
        oprot.writeFieldBegin(URLS_FIELD_DESC);
        oprot.writeString(struct.urls);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeDouble(struct.duration);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LiveRecordViewTupleSchemeFactory implements SchemeFactory {
    public LiveRecordViewTupleScheme getScheme() {
      return new LiveRecordViewTupleScheme();
    }
  }

  private static class LiveRecordViewTupleScheme extends TupleScheme<LiveRecordView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LiveRecordView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCdnType()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetLiveid()) {
        optionals.set(3);
      }
      if (struct.isSetUid()) {
        optionals.set(4);
      }
      if (struct.isSetBucket()) {
        optionals.set(5);
      }
      if (struct.isSetFormat()) {
        optionals.set(6);
      }
      if (struct.isSetOps()) {
        optionals.set(7);
      }
      if (struct.isSetKeys()) {
        optionals.set(8);
      }
      if (struct.isSetUrls()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(11);
      }
      if (struct.isSetDuration()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCdnType()) {
        oprot.writeI32(struct.cdnType);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetLiveid()) {
        oprot.writeI64(struct.liveid);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetBucket()) {
        oprot.writeString(struct.bucket);
      }
      if (struct.isSetFormat()) {
        oprot.writeI32(struct.format);
      }
      if (struct.isSetOps()) {
        oprot.writeString(struct.ops);
      }
      if (struct.isSetKeys()) {
        oprot.writeString(struct.keys);
      }
      if (struct.isSetUrls()) {
        oprot.writeString(struct.urls);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
      if (struct.isSetDuration()) {
        oprot.writeDouble(struct.duration);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LiveRecordView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cdnType = iprot.readI32();
        struct.setCdnTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.liveid = iprot.readI64();
        struct.setLiveidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bucket = iprot.readString();
        struct.setBucketIsSet(true);
      }
      if (incoming.get(6)) {
        struct.format = iprot.readI32();
        struct.setFormatIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ops = iprot.readString();
        struct.setOpsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.keys = iprot.readString();
        struct.setKeysIsSet(true);
      }
      if (incoming.get(9)) {
        struct.urls = iprot.readString();
        struct.setUrlsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.duration = iprot.readDouble();
        struct.setDurationIsSet(true);
      }
    }
  }

}

