/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package one.show.video.thrift.view;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LiveHistoryView implements org.apache.thrift.TBase<LiveHistoryView, LiveHistoryView._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LiveHistoryView");

  private static final org.apache.thrift.protocol.TField LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("liveId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STREAM_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("streamStatus", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STREAM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamTime", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RTMP_FIELD_DESC = new org.apache.thrift.protocol.TField("rtmp", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CDN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cdnType", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frame", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField BITRATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bitrate", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField VIEWED_FIELD_DESC = new org.apache.thrift.protocol.TField("viewed", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField VOD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("vodStatus", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField RECORD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("recordUrl", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField MP4_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mp4Url", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.I32, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LiveHistoryViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LiveHistoryViewTupleSchemeFactory());
  }

  public long liveId; // required
  public long uid; // required
  public int startTime; // required
  public int endTime; // required
  public int status; // required
  public String snapshot; // required
  public int createTime; // required
  public int streamStatus; // required
  public int streamTime; // required
  public String streamName; // required
  public String ip; // required
  public String rtmp; // required
  public int cdnType; // required
  public int reason; // required
  public int frame; // required
  public int bitrate; // required
  public int width; // required
  public int height; // required
  public String did; // required
  public double latitude; // required
  public double longitude; // required
  public int city; // required
  public int province; // required
  public int viewed; // required
  public String title; // required
  public String topic; // required
  public String cityName; // required
  public int vodStatus; // required
  public String recordUrl; // required
  public String mp4Url; // required
  public int platform; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIVE_ID((short)1, "liveId"),
    UID((short)2, "uid"),
    START_TIME((short)3, "startTime"),
    END_TIME((short)4, "endTime"),
    STATUS((short)5, "status"),
    SNAPSHOT((short)6, "snapshot"),
    CREATE_TIME((short)7, "createTime"),
    STREAM_STATUS((short)8, "streamStatus"),
    STREAM_TIME((short)9, "streamTime"),
    STREAM_NAME((short)10, "streamName"),
    IP((short)11, "ip"),
    RTMP((short)12, "rtmp"),
    CDN_TYPE((short)13, "cdnType"),
    REASON((short)14, "reason"),
    FRAME((short)15, "frame"),
    BITRATE((short)16, "bitrate"),
    WIDTH((short)17, "width"),
    HEIGHT((short)18, "height"),
    DID((short)19, "did"),
    LATITUDE((short)20, "latitude"),
    LONGITUDE((short)21, "longitude"),
    CITY((short)22, "city"),
    PROVINCE((short)23, "province"),
    VIEWED((short)24, "viewed"),
    TITLE((short)25, "title"),
    TOPIC((short)26, "topic"),
    CITY_NAME((short)27, "cityName"),
    VOD_STATUS((short)28, "vodStatus"),
    RECORD_URL((short)29, "recordUrl"),
    MP4_URL((short)30, "mp4Url"),
    PLATFORM((short)31, "platform");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIVE_ID
          return LIVE_ID;
        case 2: // UID
          return UID;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        case 5: // STATUS
          return STATUS;
        case 6: // SNAPSHOT
          return SNAPSHOT;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // STREAM_STATUS
          return STREAM_STATUS;
        case 9: // STREAM_TIME
          return STREAM_TIME;
        case 10: // STREAM_NAME
          return STREAM_NAME;
        case 11: // IP
          return IP;
        case 12: // RTMP
          return RTMP;
        case 13: // CDN_TYPE
          return CDN_TYPE;
        case 14: // REASON
          return REASON;
        case 15: // FRAME
          return FRAME;
        case 16: // BITRATE
          return BITRATE;
        case 17: // WIDTH
          return WIDTH;
        case 18: // HEIGHT
          return HEIGHT;
        case 19: // DID
          return DID;
        case 20: // LATITUDE
          return LATITUDE;
        case 21: // LONGITUDE
          return LONGITUDE;
        case 22: // CITY
          return CITY;
        case 23: // PROVINCE
          return PROVINCE;
        case 24: // VIEWED
          return VIEWED;
        case 25: // TITLE
          return TITLE;
        case 26: // TOPIC
          return TOPIC;
        case 27: // CITY_NAME
          return CITY_NAME;
        case 28: // VOD_STATUS
          return VOD_STATUS;
        case 29: // RECORD_URL
          return RECORD_URL;
        case 30: // MP4_URL
          return MP4_URL;
        case 31: // PLATFORM
          return PLATFORM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIVEID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __STARTTIME_ISSET_ID = 2;
  private static final int __ENDTIME_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private static final int __STREAMSTATUS_ISSET_ID = 6;
  private static final int __STREAMTIME_ISSET_ID = 7;
  private static final int __CDNTYPE_ISSET_ID = 8;
  private static final int __REASON_ISSET_ID = 9;
  private static final int __FRAME_ISSET_ID = 10;
  private static final int __BITRATE_ISSET_ID = 11;
  private static final int __WIDTH_ISSET_ID = 12;
  private static final int __HEIGHT_ISSET_ID = 13;
  private static final int __LATITUDE_ISSET_ID = 14;
  private static final int __LONGITUDE_ISSET_ID = 15;
  private static final int __CITY_ISSET_ID = 16;
  private static final int __PROVINCE_ISSET_ID = 17;
  private static final int __VIEWED_ISSET_ID = 18;
  private static final int __VODSTATUS_ISSET_ID = 19;
  private static final int __PLATFORM_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("liveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("snapshot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STREAM_STATUS, new org.apache.thrift.meta_data.FieldMetaData("streamStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STREAM_TIME, new org.apache.thrift.meta_data.FieldMetaData("streamTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RTMP, new org.apache.thrift.meta_data.FieldMetaData("rtmp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CDN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cdnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAME, new org.apache.thrift.meta_data.FieldMetaData("frame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BITRATE, new org.apache.thrift.meta_data.FieldMetaData("bitrate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEWED, new org.apache.thrift.meta_data.FieldMetaData("viewed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("vodStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECORD_URL, new org.apache.thrift.meta_data.FieldMetaData("recordUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MP4_URL, new org.apache.thrift.meta_data.FieldMetaData("mp4Url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LiveHistoryView.class, metaDataMap);
  }

  public LiveHistoryView() {
  }

  public LiveHistoryView(
    long liveId,
    long uid,
    int startTime,
    int endTime,
    int status,
    String snapshot,
    int createTime,
    int streamStatus,
    int streamTime,
    String streamName,
    String ip,
    String rtmp,
    int cdnType,
    int reason,
    int frame,
    int bitrate,
    int width,
    int height,
    String did,
    double latitude,
    double longitude,
    int city,
    int province,
    int viewed,
    String title,
    String topic,
    String cityName,
    int vodStatus,
    String recordUrl,
    String mp4Url,
    int platform)
  {
    this();
    this.liveId = liveId;
    setLiveIdIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.snapshot = snapshot;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.streamStatus = streamStatus;
    setStreamStatusIsSet(true);
    this.streamTime = streamTime;
    setStreamTimeIsSet(true);
    this.streamName = streamName;
    this.ip = ip;
    this.rtmp = rtmp;
    this.cdnType = cdnType;
    setCdnTypeIsSet(true);
    this.reason = reason;
    setReasonIsSet(true);
    this.frame = frame;
    setFrameIsSet(true);
    this.bitrate = bitrate;
    setBitrateIsSet(true);
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.did = did;
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.longitude = longitude;
    setLongitudeIsSet(true);
    this.city = city;
    setCityIsSet(true);
    this.province = province;
    setProvinceIsSet(true);
    this.viewed = viewed;
    setViewedIsSet(true);
    this.title = title;
    this.topic = topic;
    this.cityName = cityName;
    this.vodStatus = vodStatus;
    setVodStatusIsSet(true);
    this.recordUrl = recordUrl;
    this.mp4Url = mp4Url;
    this.platform = platform;
    setPlatformIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LiveHistoryView(LiveHistoryView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.liveId = other.liveId;
    this.uid = other.uid;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.status = other.status;
    if (other.isSetSnapshot()) {
      this.snapshot = other.snapshot;
    }
    this.createTime = other.createTime;
    this.streamStatus = other.streamStatus;
    this.streamTime = other.streamTime;
    if (other.isSetStreamName()) {
      this.streamName = other.streamName;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetRtmp()) {
      this.rtmp = other.rtmp;
    }
    this.cdnType = other.cdnType;
    this.reason = other.reason;
    this.frame = other.frame;
    this.bitrate = other.bitrate;
    this.width = other.width;
    this.height = other.height;
    if (other.isSetDid()) {
      this.did = other.did;
    }
    this.latitude = other.latitude;
    this.longitude = other.longitude;
    this.city = other.city;
    this.province = other.province;
    this.viewed = other.viewed;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetTopic()) {
      this.topic = other.topic;
    }
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    this.vodStatus = other.vodStatus;
    if (other.isSetRecordUrl()) {
      this.recordUrl = other.recordUrl;
    }
    if (other.isSetMp4Url()) {
      this.mp4Url = other.mp4Url;
    }
    this.platform = other.platform;
  }

  public LiveHistoryView deepCopy() {
    return new LiveHistoryView(this);
  }

  @Override
  public void clear() {
    setLiveIdIsSet(false);
    this.liveId = 0;
    setUidIsSet(false);
    this.uid = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.snapshot = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setStreamStatusIsSet(false);
    this.streamStatus = 0;
    setStreamTimeIsSet(false);
    this.streamTime = 0;
    this.streamName = null;
    this.ip = null;
    this.rtmp = null;
    setCdnTypeIsSet(false);
    this.cdnType = 0;
    setReasonIsSet(false);
    this.reason = 0;
    setFrameIsSet(false);
    this.frame = 0;
    setBitrateIsSet(false);
    this.bitrate = 0;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.did = null;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setCityIsSet(false);
    this.city = 0;
    setProvinceIsSet(false);
    this.province = 0;
    setViewedIsSet(false);
    this.viewed = 0;
    this.title = null;
    this.topic = null;
    this.cityName = null;
    setVodStatusIsSet(false);
    this.vodStatus = 0;
    this.recordUrl = null;
    this.mp4Url = null;
    setPlatformIsSet(false);
    this.platform = 0;
  }

  public long getLiveId() {
    return this.liveId;
  }

  public LiveHistoryView setLiveId(long liveId) {
    this.liveId = liveId;
    setLiveIdIsSet(true);
    return this;
  }

  public void unsetLiveId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVEID_ISSET_ID);
  }

  /** Returns true if field liveId is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveId() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVEID_ISSET_ID);
  }

  public void setLiveIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVEID_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public LiveHistoryView setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getStartTime() {
    return this.startTime;
  }

  public LiveHistoryView setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public int getEndTime() {
    return this.endTime;
  }

  public LiveHistoryView setEndTime(int endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public LiveHistoryView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getSnapshot() {
    return this.snapshot;
  }

  public LiveHistoryView setSnapshot(String snapshot) {
    this.snapshot = snapshot;
    return this;
  }

  public void unsetSnapshot() {
    this.snapshot = null;
  }

  /** Returns true if field snapshot is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshot() {
    return this.snapshot != null;
  }

  public void setSnapshotIsSet(boolean value) {
    if (!value) {
      this.snapshot = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public LiveHistoryView setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getStreamStatus() {
    return this.streamStatus;
  }

  public LiveHistoryView setStreamStatus(int streamStatus) {
    this.streamStatus = streamStatus;
    setStreamStatusIsSet(true);
    return this;
  }

  public void unsetStreamStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STREAMSTATUS_ISSET_ID);
  }

  /** Returns true if field streamStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STREAMSTATUS_ISSET_ID);
  }

  public void setStreamStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STREAMSTATUS_ISSET_ID, value);
  }

  public int getStreamTime() {
    return this.streamTime;
  }

  public LiveHistoryView setStreamTime(int streamTime) {
    this.streamTime = streamTime;
    setStreamTimeIsSet(true);
    return this;
  }

  public void unsetStreamTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STREAMTIME_ISSET_ID);
  }

  /** Returns true if field streamTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STREAMTIME_ISSET_ID);
  }

  public void setStreamTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STREAMTIME_ISSET_ID, value);
  }

  public String getStreamName() {
    return this.streamName;
  }

  public LiveHistoryView setStreamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  public void unsetStreamName() {
    this.streamName = null;
  }

  /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamName() {
    return this.streamName != null;
  }

  public void setStreamNameIsSet(boolean value) {
    if (!value) {
      this.streamName = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public LiveHistoryView setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getRtmp() {
    return this.rtmp;
  }

  public LiveHistoryView setRtmp(String rtmp) {
    this.rtmp = rtmp;
    return this;
  }

  public void unsetRtmp() {
    this.rtmp = null;
  }

  /** Returns true if field rtmp is set (has been assigned a value) and false otherwise */
  public boolean isSetRtmp() {
    return this.rtmp != null;
  }

  public void setRtmpIsSet(boolean value) {
    if (!value) {
      this.rtmp = null;
    }
  }

  public int getCdnType() {
    return this.cdnType;
  }

  public LiveHistoryView setCdnType(int cdnType) {
    this.cdnType = cdnType;
    setCdnTypeIsSet(true);
    return this;
  }

  public void unsetCdnType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
  }

  /** Returns true if field cdnType is set (has been assigned a value) and false otherwise */
  public boolean isSetCdnType() {
    return EncodingUtils.testBit(__isset_bitfield, __CDNTYPE_ISSET_ID);
  }

  public void setCdnTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CDNTYPE_ISSET_ID, value);
  }

  public int getReason() {
    return this.reason;
  }

  public LiveHistoryView setReason(int reason) {
    this.reason = reason;
    setReasonIsSet(true);
    return this;
  }

  public void unsetReason() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REASON_ISSET_ID);
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return EncodingUtils.testBit(__isset_bitfield, __REASON_ISSET_ID);
  }

  public void setReasonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REASON_ISSET_ID, value);
  }

  public int getFrame() {
    return this.frame;
  }

  public LiveHistoryView setFrame(int frame) {
    this.frame = frame;
    setFrameIsSet(true);
    return this;
  }

  public void unsetFrame() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAME_ISSET_ID);
  }

  /** Returns true if field frame is set (has been assigned a value) and false otherwise */
  public boolean isSetFrame() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAME_ISSET_ID);
  }

  public void setFrameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAME_ISSET_ID, value);
  }

  public int getBitrate() {
    return this.bitrate;
  }

  public LiveHistoryView setBitrate(int bitrate) {
    this.bitrate = bitrate;
    setBitrateIsSet(true);
    return this;
  }

  public void unsetBitrate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BITRATE_ISSET_ID);
  }

  /** Returns true if field bitrate is set (has been assigned a value) and false otherwise */
  public boolean isSetBitrate() {
    return EncodingUtils.testBit(__isset_bitfield, __BITRATE_ISSET_ID);
  }

  public void setBitrateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BITRATE_ISSET_ID, value);
  }

  public int getWidth() {
    return this.width;
  }

  public LiveHistoryView setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public LiveHistoryView setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public String getDid() {
    return this.did;
  }

  public LiveHistoryView setDid(String did) {
    this.did = did;
    return this;
  }

  public void unsetDid() {
    this.did = null;
  }

  /** Returns true if field did is set (has been assigned a value) and false otherwise */
  public boolean isSetDid() {
    return this.did != null;
  }

  public void setDidIsSet(boolean value) {
    if (!value) {
      this.did = null;
    }
  }

  public double getLatitude() {
    return this.latitude;
  }

  public LiveHistoryView setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public LiveHistoryView setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public int getCity() {
    return this.city;
  }

  public LiveHistoryView setCity(int city) {
    this.city = city;
    setCityIsSet(true);
    return this;
  }

  public void unsetCity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITY_ISSET_ID);
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return EncodingUtils.testBit(__isset_bitfield, __CITY_ISSET_ID);
  }

  public void setCityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITY_ISSET_ID, value);
  }

  public int getProvince() {
    return this.province;
  }

  public LiveHistoryView setProvince(int province) {
    this.province = province;
    setProvinceIsSet(true);
    return this;
  }

  public void unsetProvince() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROVINCE_ISSET_ID);
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return EncodingUtils.testBit(__isset_bitfield, __PROVINCE_ISSET_ID);
  }

  public void setProvinceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROVINCE_ISSET_ID, value);
  }

  public int getViewed() {
    return this.viewed;
  }

  public LiveHistoryView setViewed(int viewed) {
    this.viewed = viewed;
    setViewedIsSet(true);
    return this;
  }

  public void unsetViewed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWED_ISSET_ID);
  }

  /** Returns true if field viewed is set (has been assigned a value) and false otherwise */
  public boolean isSetViewed() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWED_ISSET_ID);
  }

  public void setViewedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWED_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public LiveHistoryView setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getTopic() {
    return this.topic;
  }

  public LiveHistoryView setTopic(String topic) {
    this.topic = topic;
    return this;
  }

  public void unsetTopic() {
    this.topic = null;
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return this.topic != null;
  }

  public void setTopicIsSet(boolean value) {
    if (!value) {
      this.topic = null;
    }
  }

  public String getCityName() {
    return this.cityName;
  }

  public LiveHistoryView setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public int getVodStatus() {
    return this.vodStatus;
  }

  public LiveHistoryView setVodStatus(int vodStatus) {
    this.vodStatus = vodStatus;
    setVodStatusIsSet(true);
    return this;
  }

  public void unsetVodStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VODSTATUS_ISSET_ID);
  }

  /** Returns true if field vodStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetVodStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __VODSTATUS_ISSET_ID);
  }

  public void setVodStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VODSTATUS_ISSET_ID, value);
  }

  public String getRecordUrl() {
    return this.recordUrl;
  }

  public LiveHistoryView setRecordUrl(String recordUrl) {
    this.recordUrl = recordUrl;
    return this;
  }

  public void unsetRecordUrl() {
    this.recordUrl = null;
  }

  /** Returns true if field recordUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordUrl() {
    return this.recordUrl != null;
  }

  public void setRecordUrlIsSet(boolean value) {
    if (!value) {
      this.recordUrl = null;
    }
  }

  public String getMp4Url() {
    return this.mp4Url;
  }

  public LiveHistoryView setMp4Url(String mp4Url) {
    this.mp4Url = mp4Url;
    return this;
  }

  public void unsetMp4Url() {
    this.mp4Url = null;
  }

  /** Returns true if field mp4Url is set (has been assigned a value) and false otherwise */
  public boolean isSetMp4Url() {
    return this.mp4Url != null;
  }

  public void setMp4UrlIsSet(boolean value) {
    if (!value) {
      this.mp4Url = null;
    }
  }

  public int getPlatform() {
    return this.platform;
  }

  public LiveHistoryView setPlatform(int platform) {
    this.platform = platform;
    setPlatformIsSet(true);
    return this;
  }

  public void unsetPlatform() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATFORM_ISSET_ID);
  }

  public void setPlatformIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATFORM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LIVE_ID:
      if (value == null) {
        unsetLiveId();
      } else {
        setLiveId((Long)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Integer)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SNAPSHOT:
      if (value == null) {
        unsetSnapshot();
      } else {
        setSnapshot((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case STREAM_STATUS:
      if (value == null) {
        unsetStreamStatus();
      } else {
        setStreamStatus((Integer)value);
      }
      break;

    case STREAM_TIME:
      if (value == null) {
        unsetStreamTime();
      } else {
        setStreamTime((Integer)value);
      }
      break;

    case STREAM_NAME:
      if (value == null) {
        unsetStreamName();
      } else {
        setStreamName((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case RTMP:
      if (value == null) {
        unsetRtmp();
      } else {
        setRtmp((String)value);
      }
      break;

    case CDN_TYPE:
      if (value == null) {
        unsetCdnType();
      } else {
        setCdnType((Integer)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((Integer)value);
      }
      break;

    case FRAME:
      if (value == null) {
        unsetFrame();
      } else {
        setFrame((Integer)value);
      }
      break;

    case BITRATE:
      if (value == null) {
        unsetBitrate();
      } else {
        setBitrate((Integer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case DID:
      if (value == null) {
        unsetDid();
      } else {
        setDid((String)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((Integer)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((Integer)value);
      }
      break;

    case VIEWED:
      if (value == null) {
        unsetViewed();
      } else {
        setViewed((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((String)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case VOD_STATUS:
      if (value == null) {
        unsetVodStatus();
      } else {
        setVodStatus((Integer)value);
      }
      break;

    case RECORD_URL:
      if (value == null) {
        unsetRecordUrl();
      } else {
        setRecordUrl((String)value);
      }
      break;

    case MP4_URL:
      if (value == null) {
        unsetMp4Url();
      } else {
        setMp4Url((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LIVE_ID:
      return Long.valueOf(getLiveId());

    case UID:
      return Long.valueOf(getUid());

    case START_TIME:
      return Integer.valueOf(getStartTime());

    case END_TIME:
      return Integer.valueOf(getEndTime());

    case STATUS:
      return Integer.valueOf(getStatus());

    case SNAPSHOT:
      return getSnapshot();

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case STREAM_STATUS:
      return Integer.valueOf(getStreamStatus());

    case STREAM_TIME:
      return Integer.valueOf(getStreamTime());

    case STREAM_NAME:
      return getStreamName();

    case IP:
      return getIp();

    case RTMP:
      return getRtmp();

    case CDN_TYPE:
      return Integer.valueOf(getCdnType());

    case REASON:
      return Integer.valueOf(getReason());

    case FRAME:
      return Integer.valueOf(getFrame());

    case BITRATE:
      return Integer.valueOf(getBitrate());

    case WIDTH:
      return Integer.valueOf(getWidth());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case DID:
      return getDid();

    case LATITUDE:
      return Double.valueOf(getLatitude());

    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case CITY:
      return Integer.valueOf(getCity());

    case PROVINCE:
      return Integer.valueOf(getProvince());

    case VIEWED:
      return Integer.valueOf(getViewed());

    case TITLE:
      return getTitle();

    case TOPIC:
      return getTopic();

    case CITY_NAME:
      return getCityName();

    case VOD_STATUS:
      return Integer.valueOf(getVodStatus());

    case RECORD_URL:
      return getRecordUrl();

    case MP4_URL:
      return getMp4Url();

    case PLATFORM:
      return Integer.valueOf(getPlatform());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LIVE_ID:
      return isSetLiveId();
    case UID:
      return isSetUid();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case STATUS:
      return isSetStatus();
    case SNAPSHOT:
      return isSetSnapshot();
    case CREATE_TIME:
      return isSetCreateTime();
    case STREAM_STATUS:
      return isSetStreamStatus();
    case STREAM_TIME:
      return isSetStreamTime();
    case STREAM_NAME:
      return isSetStreamName();
    case IP:
      return isSetIp();
    case RTMP:
      return isSetRtmp();
    case CDN_TYPE:
      return isSetCdnType();
    case REASON:
      return isSetReason();
    case FRAME:
      return isSetFrame();
    case BITRATE:
      return isSetBitrate();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case DID:
      return isSetDid();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    case CITY:
      return isSetCity();
    case PROVINCE:
      return isSetProvince();
    case VIEWED:
      return isSetViewed();
    case TITLE:
      return isSetTitle();
    case TOPIC:
      return isSetTopic();
    case CITY_NAME:
      return isSetCityName();
    case VOD_STATUS:
      return isSetVodStatus();
    case RECORD_URL:
      return isSetRecordUrl();
    case MP4_URL:
      return isSetMp4Url();
    case PLATFORM:
      return isSetPlatform();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LiveHistoryView)
      return this.equals((LiveHistoryView)that);
    return false;
  }

  public boolean equals(LiveHistoryView that) {
    if (that == null)
      return false;

    boolean this_present_liveId = true;
    boolean that_present_liveId = true;
    if (this_present_liveId || that_present_liveId) {
      if (!(this_present_liveId && that_present_liveId))
        return false;
      if (this.liveId != that.liveId)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_snapshot = true && this.isSetSnapshot();
    boolean that_present_snapshot = true && that.isSetSnapshot();
    if (this_present_snapshot || that_present_snapshot) {
      if (!(this_present_snapshot && that_present_snapshot))
        return false;
      if (!this.snapshot.equals(that.snapshot))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_streamStatus = true;
    boolean that_present_streamStatus = true;
    if (this_present_streamStatus || that_present_streamStatus) {
      if (!(this_present_streamStatus && that_present_streamStatus))
        return false;
      if (this.streamStatus != that.streamStatus)
        return false;
    }

    boolean this_present_streamTime = true;
    boolean that_present_streamTime = true;
    if (this_present_streamTime || that_present_streamTime) {
      if (!(this_present_streamTime && that_present_streamTime))
        return false;
      if (this.streamTime != that.streamTime)
        return false;
    }

    boolean this_present_streamName = true && this.isSetStreamName();
    boolean that_present_streamName = true && that.isSetStreamName();
    if (this_present_streamName || that_present_streamName) {
      if (!(this_present_streamName && that_present_streamName))
        return false;
      if (!this.streamName.equals(that.streamName))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_rtmp = true && this.isSetRtmp();
    boolean that_present_rtmp = true && that.isSetRtmp();
    if (this_present_rtmp || that_present_rtmp) {
      if (!(this_present_rtmp && that_present_rtmp))
        return false;
      if (!this.rtmp.equals(that.rtmp))
        return false;
    }

    boolean this_present_cdnType = true;
    boolean that_present_cdnType = true;
    if (this_present_cdnType || that_present_cdnType) {
      if (!(this_present_cdnType && that_present_cdnType))
        return false;
      if (this.cdnType != that.cdnType)
        return false;
    }

    boolean this_present_reason = true;
    boolean that_present_reason = true;
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (this.reason != that.reason)
        return false;
    }

    boolean this_present_frame = true;
    boolean that_present_frame = true;
    if (this_present_frame || that_present_frame) {
      if (!(this_present_frame && that_present_frame))
        return false;
      if (this.frame != that.frame)
        return false;
    }

    boolean this_present_bitrate = true;
    boolean that_present_bitrate = true;
    if (this_present_bitrate || that_present_bitrate) {
      if (!(this_present_bitrate && that_present_bitrate))
        return false;
      if (this.bitrate != that.bitrate)
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_did = true && this.isSetDid();
    boolean that_present_did = true && that.isSetDid();
    if (this_present_did || that_present_did) {
      if (!(this_present_did && that_present_did))
        return false;
      if (!this.did.equals(that.did))
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_city = true;
    boolean that_present_city = true;
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (this.city != that.city)
        return false;
    }

    boolean this_present_province = true;
    boolean that_present_province = true;
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (this.province != that.province)
        return false;
    }

    boolean this_present_viewed = true;
    boolean that_present_viewed = true;
    if (this_present_viewed || that_present_viewed) {
      if (!(this_present_viewed && that_present_viewed))
        return false;
      if (this.viewed != that.viewed)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_topic = true && this.isSetTopic();
    boolean that_present_topic = true && that.isSetTopic();
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (!this.topic.equals(that.topic))
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_vodStatus = true;
    boolean that_present_vodStatus = true;
    if (this_present_vodStatus || that_present_vodStatus) {
      if (!(this_present_vodStatus && that_present_vodStatus))
        return false;
      if (this.vodStatus != that.vodStatus)
        return false;
    }

    boolean this_present_recordUrl = true && this.isSetRecordUrl();
    boolean that_present_recordUrl = true && that.isSetRecordUrl();
    if (this_present_recordUrl || that_present_recordUrl) {
      if (!(this_present_recordUrl && that_present_recordUrl))
        return false;
      if (!this.recordUrl.equals(that.recordUrl))
        return false;
    }

    boolean this_present_mp4Url = true && this.isSetMp4Url();
    boolean that_present_mp4Url = true && that.isSetMp4Url();
    if (this_present_mp4Url || that_present_mp4Url) {
      if (!(this_present_mp4Url && that_present_mp4Url))
        return false;
      if (!this.mp4Url.equals(that.mp4Url))
        return false;
    }

    boolean this_present_platform = true;
    boolean that_present_platform = true;
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (this.platform != that.platform)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LiveHistoryView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LiveHistoryView typedOther = (LiveHistoryView)other;

    lastComparison = Boolean.valueOf(isSetLiveId()).compareTo(typedOther.isSetLiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveId, typedOther.liveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshot()).compareTo(typedOther.isSetSnapshot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot, typedOther.snapshot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreamStatus()).compareTo(typedOther.isSetStreamStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamStatus, typedOther.streamStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreamTime()).compareTo(typedOther.isSetStreamTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamTime, typedOther.streamTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRtmp()).compareTo(typedOther.isSetRtmp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtmp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtmp, typedOther.rtmp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCdnType()).compareTo(typedOther.isSetCdnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdnType, typedOther.cdnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrame()).compareTo(typedOther.isSetFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frame, typedOther.frame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBitrate()).compareTo(typedOther.isSetBitrate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBitrate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitrate, typedOther.bitrate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDid()).compareTo(typedOther.isSetDid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, typedOther.did);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(typedOther.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, typedOther.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewed()).compareTo(typedOther.isSetViewed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewed, typedOther.viewed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(typedOther.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, typedOther.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, typedOther.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVodStatus()).compareTo(typedOther.isSetVodStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVodStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vodStatus, typedOther.vodStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordUrl()).compareTo(typedOther.isSetRecordUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordUrl, typedOther.recordUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMp4Url()).compareTo(typedOther.isSetMp4Url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMp4Url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mp4Url, typedOther.mp4Url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LiveHistoryView(");
    boolean first = true;

    sb.append("liveId:");
    sb.append(this.liveId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("snapshot:");
    if (this.snapshot == null) {
      sb.append("null");
    } else {
      sb.append(this.snapshot);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("streamStatus:");
    sb.append(this.streamStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("streamTime:");
    sb.append(this.streamTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("streamName:");
    if (this.streamName == null) {
      sb.append("null");
    } else {
      sb.append(this.streamName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rtmp:");
    if (this.rtmp == null) {
      sb.append("null");
    } else {
      sb.append(this.rtmp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cdnType:");
    sb.append(this.cdnType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    sb.append(this.reason);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frame:");
    sb.append(this.frame);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bitrate:");
    sb.append(this.bitrate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("did:");
    if (this.did == null) {
      sb.append("null");
    } else {
      sb.append(this.did);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    sb.append(this.city);
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    sb.append(this.province);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewed:");
    sb.append(this.viewed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    if (this.topic == null) {
      sb.append("null");
    } else {
      sb.append(this.topic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vodStatus:");
    sb.append(this.vodStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordUrl:");
    if (this.recordUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.recordUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mp4Url:");
    if (this.mp4Url == null) {
      sb.append("null");
    } else {
      sb.append(this.mp4Url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platform:");
    sb.append(this.platform);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LiveHistoryViewStandardSchemeFactory implements SchemeFactory {
    public LiveHistoryViewStandardScheme getScheme() {
      return new LiveHistoryViewStandardScheme();
    }
  }

  private static class LiveHistoryViewStandardScheme extends StandardScheme<LiveHistoryView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LiveHistoryView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.liveId = iprot.readI64();
              struct.setLiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime = iprot.readI32();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endTime = iprot.readI32();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SNAPSHOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshot = iprot.readString();
              struct.setSnapshotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STREAM_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.streamStatus = iprot.readI32();
              struct.setStreamStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STREAM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.streamTime = iprot.readI32();
              struct.setStreamTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STREAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.streamName = iprot.readString();
              struct.setStreamNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RTMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtmp = iprot.readString();
              struct.setRtmpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CDN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cdnType = iprot.readI32();
              struct.setCdnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reason = iprot.readI32();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frame = iprot.readI32();
              struct.setFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BITRATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bitrate = iprot.readI32();
              struct.setBitrateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.did = iprot.readString();
              struct.setDidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.city = iprot.readI32();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.province = iprot.readI32();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // VIEWED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewed = iprot.readI32();
              struct.setViewedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic = iprot.readString();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // VOD_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vodStatus = iprot.readI32();
              struct.setVodStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // RECORD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recordUrl = iprot.readString();
              struct.setRecordUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MP4_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mp4Url = iprot.readString();
              struct.setMp4UrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platform = iprot.readI32();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LiveHistoryView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LIVE_ID_FIELD_DESC);
      oprot.writeI64(struct.liveId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI32(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI32(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.snapshot != null) {
        oprot.writeFieldBegin(SNAPSHOT_FIELD_DESC);
        oprot.writeString(struct.snapshot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STREAM_STATUS_FIELD_DESC);
      oprot.writeI32(struct.streamStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STREAM_TIME_FIELD_DESC);
      oprot.writeI32(struct.streamTime);
      oprot.writeFieldEnd();
      if (struct.streamName != null) {
        oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
        oprot.writeString(struct.streamName);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.rtmp != null) {
        oprot.writeFieldBegin(RTMP_FIELD_DESC);
        oprot.writeString(struct.rtmp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CDN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cdnType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REASON_FIELD_DESC);
      oprot.writeI32(struct.reason);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRAME_FIELD_DESC);
      oprot.writeI32(struct.frame);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BITRATE_FIELD_DESC);
      oprot.writeI32(struct.bitrate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      if (struct.did != null) {
        oprot.writeFieldBegin(DID_FIELD_DESC);
        oprot.writeString(struct.did);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.latitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CITY_FIELD_DESC);
      oprot.writeI32(struct.city);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
      oprot.writeI32(struct.province);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEWED_FIELD_DESC);
      oprot.writeI32(struct.viewed);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.topic != null) {
        oprot.writeFieldBegin(TOPIC_FIELD_DESC);
        oprot.writeString(struct.topic);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.cityName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VOD_STATUS_FIELD_DESC);
      oprot.writeI32(struct.vodStatus);
      oprot.writeFieldEnd();
      if (struct.recordUrl != null) {
        oprot.writeFieldBegin(RECORD_URL_FIELD_DESC);
        oprot.writeString(struct.recordUrl);
        oprot.writeFieldEnd();
      }
      if (struct.mp4Url != null) {
        oprot.writeFieldBegin(MP4_URL_FIELD_DESC);
        oprot.writeString(struct.mp4Url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
      oprot.writeI32(struct.platform);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LiveHistoryViewTupleSchemeFactory implements SchemeFactory {
    public LiveHistoryViewTupleScheme getScheme() {
      return new LiveHistoryViewTupleScheme();
    }
  }

  private static class LiveHistoryViewTupleScheme extends TupleScheme<LiveHistoryView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LiveHistoryView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLiveId()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetSnapshot()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetStreamStatus()) {
        optionals.set(7);
      }
      if (struct.isSetStreamTime()) {
        optionals.set(8);
      }
      if (struct.isSetStreamName()) {
        optionals.set(9);
      }
      if (struct.isSetIp()) {
        optionals.set(10);
      }
      if (struct.isSetRtmp()) {
        optionals.set(11);
      }
      if (struct.isSetCdnType()) {
        optionals.set(12);
      }
      if (struct.isSetReason()) {
        optionals.set(13);
      }
      if (struct.isSetFrame()) {
        optionals.set(14);
      }
      if (struct.isSetBitrate()) {
        optionals.set(15);
      }
      if (struct.isSetWidth()) {
        optionals.set(16);
      }
      if (struct.isSetHeight()) {
        optionals.set(17);
      }
      if (struct.isSetDid()) {
        optionals.set(18);
      }
      if (struct.isSetLatitude()) {
        optionals.set(19);
      }
      if (struct.isSetLongitude()) {
        optionals.set(20);
      }
      if (struct.isSetCity()) {
        optionals.set(21);
      }
      if (struct.isSetProvince()) {
        optionals.set(22);
      }
      if (struct.isSetViewed()) {
        optionals.set(23);
      }
      if (struct.isSetTitle()) {
        optionals.set(24);
      }
      if (struct.isSetTopic()) {
        optionals.set(25);
      }
      if (struct.isSetCityName()) {
        optionals.set(26);
      }
      if (struct.isSetVodStatus()) {
        optionals.set(27);
      }
      if (struct.isSetRecordUrl()) {
        optionals.set(28);
      }
      if (struct.isSetMp4Url()) {
        optionals.set(29);
      }
      if (struct.isSetPlatform()) {
        optionals.set(30);
      }
      oprot.writeBitSet(optionals, 31);
      if (struct.isSetLiveId()) {
        oprot.writeI64(struct.liveId);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI32(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI32(struct.endTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetSnapshot()) {
        oprot.writeString(struct.snapshot);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetStreamStatus()) {
        oprot.writeI32(struct.streamStatus);
      }
      if (struct.isSetStreamTime()) {
        oprot.writeI32(struct.streamTime);
      }
      if (struct.isSetStreamName()) {
        oprot.writeString(struct.streamName);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetRtmp()) {
        oprot.writeString(struct.rtmp);
      }
      if (struct.isSetCdnType()) {
        oprot.writeI32(struct.cdnType);
      }
      if (struct.isSetReason()) {
        oprot.writeI32(struct.reason);
      }
      if (struct.isSetFrame()) {
        oprot.writeI32(struct.frame);
      }
      if (struct.isSetBitrate()) {
        oprot.writeI32(struct.bitrate);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetDid()) {
        oprot.writeString(struct.did);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetCity()) {
        oprot.writeI32(struct.city);
      }
      if (struct.isSetProvince()) {
        oprot.writeI32(struct.province);
      }
      if (struct.isSetViewed()) {
        oprot.writeI32(struct.viewed);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetTopic()) {
        oprot.writeString(struct.topic);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetVodStatus()) {
        oprot.writeI32(struct.vodStatus);
      }
      if (struct.isSetRecordUrl()) {
        oprot.writeString(struct.recordUrl);
      }
      if (struct.isSetMp4Url()) {
        oprot.writeString(struct.mp4Url);
      }
      if (struct.isSetPlatform()) {
        oprot.writeI32(struct.platform);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LiveHistoryView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(31);
      if (incoming.get(0)) {
        struct.liveId = iprot.readI64();
        struct.setLiveIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readI32();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTime = iprot.readI32();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.snapshot = iprot.readString();
        struct.setSnapshotIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.streamStatus = iprot.readI32();
        struct.setStreamStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.streamTime = iprot.readI32();
        struct.setStreamTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.streamName = iprot.readString();
        struct.setStreamNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rtmp = iprot.readString();
        struct.setRtmpIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cdnType = iprot.readI32();
        struct.setCdnTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.reason = iprot.readI32();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(14)) {
        struct.frame = iprot.readI32();
        struct.setFrameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.bitrate = iprot.readI32();
        struct.setBitrateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(17)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(18)) {
        struct.did = iprot.readString();
        struct.setDidIsSet(true);
      }
      if (incoming.get(19)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.city = iprot.readI32();
        struct.setCityIsSet(true);
      }
      if (incoming.get(22)) {
        struct.province = iprot.readI32();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(23)) {
        struct.viewed = iprot.readI32();
        struct.setViewedIsSet(true);
      }
      if (incoming.get(24)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(25)) {
        struct.topic = iprot.readString();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(26)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(27)) {
        struct.vodStatus = iprot.readI32();
        struct.setVodStatusIsSet(true);
      }
      if (incoming.get(28)) {
        struct.recordUrl = iprot.readString();
        struct.setRecordUrlIsSet(true);
      }
      if (incoming.get(29)) {
        struct.mp4Url = iprot.readString();
        struct.setMp4UrlIsSet(true);
      }
      if (incoming.get(30)) {
        struct.platform = iprot.readI32();
        struct.setPlatformIsSet(true);
      }
    }
  }

}

